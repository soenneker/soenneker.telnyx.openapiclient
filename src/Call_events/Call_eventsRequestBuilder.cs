// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.Call_events
{
    /// <summary>
    /// Builds and executes requests for operations under \call_events
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Call_eventsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Call_eventsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/call_events{?filter%5Bapplication_session_id%5D*,filter%5Bconnection_id%5D*,filter%5Bfailed%5D*,filter%5Bfrom%5D*,filter%5Bleg_id%5D*,filter%5Bname%5D*,filter%5Boccurred_at%5D%5Beq%5D*,filter%5Boccurred_at%5D%5Bgt%5D*,filter%5Boccurred_at%5D%5Bgte%5D*,filter%5Boccurred_at%5D%5Blt%5D*,filter%5Boccurred_at%5D%5Blte%5D*,filter%5Bproduct%5D*,filter%5Bto%5D*,filter%5Btype%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Call_eventsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/call_events{?filter%5Bapplication_session_id%5D*,filter%5Bconnection_id%5D*,filter%5Bfailed%5D*,filter%5Bfrom%5D*,filter%5Bleg_id%5D*,filter%5Bname%5D*,filter%5Boccurred_at%5D%5Beq%5D*,filter%5Boccurred_at%5D%5Bgt%5D*,filter%5Boccurred_at%5D%5Bgte%5D*,filter%5Boccurred_at%5D%5Blt%5D*,filter%5Boccurred_at%5D%5Blte%5D*,filter%5Bproduct%5D*,filter%5Bto%5D*,filter%5Btype%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.**Note**: Only one `filter[occurred_at]` can be passed.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Call_events.Call_eventsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Call_events.Call_eventsGetResponse?> GetAsCall_eventsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Call_events.Call_eventsGetResponse> GetAsCall_eventsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Call_events.Call_eventsGetResponse>(requestInfo, global::Soenneker.Telnyx.Call_events.Call_eventsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.**Note**: Only one `filter[occurred_at]` can be passed.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Call_events.Call_eventsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsCall_eventsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Call_events.Call_eventsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Call_events.Call_eventsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Call_events.Call_eventsResponse>(requestInfo, global::Soenneker.Telnyx.Call_events.Call_eventsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.**Note**: Only one `filter[occurred_at]` can be passed.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.**Note**: Only one `filter[occurred_at]` can be passed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Call_eventsRequestBuilderGetQueryParameters 
        {
            /// <summary>The unique identifier of the call session. A session may include multiple call leg events.</summary>
            [QueryParameter("filter%5Bapplication_session_id%5D")]
            public Guid? FilterapplicationSessionId { get; set; }
            /// <summary>The unique identifier of the conection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bconnection_id%5D")]
            public string? FilterconnectionId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bconnection_id%5D")]
            public string FilterconnectionId { get; set; }
#endif
            /// <summary>Delivery failed or not.</summary>
            [QueryParameter("filter%5Bfailed%5D")]
            public bool? Filterfailed { get; set; }
            /// <summary>Filter by From number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bfrom%5D")]
            public string? Filterfrom { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bfrom%5D")]
            public string Filterfrom { get; set; }
#endif
            /// <summary>The unique identifier of an individual call leg.</summary>
            [QueryParameter("filter%5Bleg_id%5D")]
            public Guid? FilterlegId { get; set; }
            /// <summary>Event name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bname%5D")]
            public string? Filtername { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bname%5D")]
            public string Filtername { get; set; }
#endif
            /// <summary>Event occurred_at: equal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Boccurred_at%5D%5Beq%5D")]
            public string? FilteroccurredAteq { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Boccurred_at%5D%5Beq%5D")]
            public string FilteroccurredAteq { get; set; }
#endif
            /// <summary>Event occurred_at: greater than</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Boccurred_at%5D%5Bgt%5D")]
            public string? FilteroccurredAtgt { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Boccurred_at%5D%5Bgt%5D")]
            public string FilteroccurredAtgt { get; set; }
#endif
            /// <summary>Event occurred_at: greater than or equal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Boccurred_at%5D%5Bgte%5D")]
            public string? FilteroccurredAtgte { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Boccurred_at%5D%5Bgte%5D")]
            public string FilteroccurredAtgte { get; set; }
#endif
            /// <summary>Event occurred_at: lower than</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Boccurred_at%5D%5Blt%5D")]
            public string? FilteroccurredAtlt { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Boccurred_at%5D%5Blt%5D")]
            public string FilteroccurredAtlt { get; set; }
#endif
            /// <summary>Event occurred_at: lower than or equal</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Boccurred_at%5D%5Blte%5D")]
            public string? FilteroccurredAtlte { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Boccurred_at%5D%5Blte%5D")]
            public string FilteroccurredAtlte { get; set; }
#endif
            /// <summary>Filter by product.</summary>
            [Obsolete("This property is deprecated, use FilterproductAsGetFilterProductQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bproduct%5D")]
            public string? Filterproduct { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bproduct%5D")]
            public string Filterproduct { get; set; }
#endif
            /// <summary>Filter by product.</summary>
            [QueryParameter("filter%5Bproduct%5D")]
            public global::Soenneker.Telnyx.Call_events.GetFilterProductQueryParameterType? FilterproductAsGetFilterProductQueryParameterType { get; set; }
            /// <summary>Filter by To number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bto%5D")]
            public string? Filterto { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bto%5D")]
            public string Filterto { get; set; }
#endif
            /// <summary>Event type</summary>
            [Obsolete("This property is deprecated, use FiltertypeAsGetFilterTypeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Btype%5D")]
            public string? Filtertype { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Btype%5D")]
            public string Filtertype { get; set; }
#endif
            /// <summary>Event type</summary>
            [QueryParameter("filter%5Btype%5D")]
            public global::Soenneker.Telnyx.Call_events.GetFilterTypeQueryParameterType? FiltertypeAsGetFilterTypeQueryParameterType { get; set; }
            /// <summary>The page number to load.</summary>
            [QueryParameter("page%5Bnumber%5D")]
            public int? Pagenumber { get; set; }
            /// <summary>The size of the page.</summary>
            [QueryParameter("page%5Bsize%5D")]
            public int? Pagesize { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Call_eventsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Telnyx.Call_events.Call_eventsRequestBuilder.Call_eventsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
