// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DialConferenceParticipantRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The URL the result of answering machine detection will be sent to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmdStatusCallback { get; set; }
#nullable restore
#else
        public string AmdStatusCallback { get; set; }
#endif
        /// <summary>HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_AmdStatusCallbackMethod? AmdStatusCallbackMethod { get; set; }
        /// <summary>Whether to play a notification beep to the conference when the participant enters and exits.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Beep? Beep { get; set; }
        /// <summary>To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallerId { get; set; }
#nullable restore
#else
        public string CallerId { get; set; }
#endif
        /// <summary>The SID of the participant who is being coached. The participant being coached is the only participant who can hear the participant who is coaching.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallSidToCoach { get; set; }
#nullable restore
#else
        public string CallSidToCoach { get; set; }
#endif
        /// <summary>Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.</summary>
        public bool? CancelPlaybackOnDetectMessageEnd { get; set; }
        /// <summary>Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.</summary>
        public bool? CancelPlaybackOnMachineDetection { get; set; }
        /// <summary>Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.</summary>
        public bool? Coaching { get; set; }
        /// <summary>Whether to record the conference the participant is joining. Defualts to `do-not-record`. The boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record` respectively.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecord? ConferenceRecord { get; set; }
        /// <summary>The URL the conference recording callbacks will be sent to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceRecordingStatusCallback { get; set; }
#nullable restore
#else
        public string ConferenceRecordingStatusCallback { get; set; }
#endif
        /// <summary>The changes to the conference recording&apos;s state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`. `failed` and `absent` are synonymous.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceRecordingStatusCallbackEvent { get; set; }
#nullable restore
#else
        public string ConferenceRecordingStatusCallbackEvent { get; set; }
#endif
        /// <summary>HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecordingStatusCallbackMethod? ConferenceRecordingStatusCallbackMethod { get; set; }
        /// <summary>The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)</summary>
        public int? ConferenceRecordingTimeout { get; set; }
        /// <summary>The URL the conference callbacks will be sent to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceStatusCallback { get; set; }
#nullable restore
#else
        public string ConferenceStatusCallback { get; set; }
#endif
        /// <summary>The changes to the conference&apos;s state that should generate a call to `ConferenceStatusCallback`. Can be: `start`, `end`, `join` and `leave`. Separate multiple values with a space. By default no callbacks are sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceStatusCallbackEvent { get; set; }
#nullable restore
#else
        public string ConferenceStatusCallbackEvent { get; set; }
#endif
        /// <summary>HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceStatusCallbackMethod? ConferenceStatusCallbackMethod { get; set; }
        /// <summary>Whether to trim any leading and trailing silence from the conference recording. Defaults to `trim-silence`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceTrim? ConferenceTrim { get; set; }
        /// <summary>Custom HTTP headers to be sent with the call. Each header should be an object with &apos;name&apos; and &apos;value&apos; properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_CustomHeaders>? CustomHeaders { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_CustomHeaders> CustomHeaders { get; set; }
#endif
        /// <summary>Whether participant shall be bridged to conference before the participant answers (from early media if available). Defaults to `false`.</summary>
        public bool? EarlyMedia { get; set; }
        /// <summary>Whether to end the conference when the participant leaves. Defaults to `false`.</summary>
        public bool? EndConferenceOnExit { get; set; }
        /// <summary>The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_MachineDetection? MachineDetection { get; set; }
        /// <summary>If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.</summary>
        public int? MachineDetectionSilenceTimeout { get; set; }
        /// <summary>Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.</summary>
        public int? MachineDetectionSpeechEndThreshold { get; set; }
        /// <summary>Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.</summary>
        public int? MachineDetectionSpeechThreshold { get; set; }
        /// <summary>How long answering machine detection should go on for before sending an `Unknown` result. Given in milliseconds.</summary>
        public int? MachineDetectionTimeout { get; set; }
        /// <summary>The maximum number of participants in the conference. Can be a positive integer from 2 to 800. The default value is 250.</summary>
        public int? MaxParticipants { get; set; }
        /// <summary>Whether the participant should be muted.</summary>
        public bool? Muted { get; set; }
        /// <summary>The list of comma-separated codecs to be offered on a call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredCodecs { get; set; }
#nullable restore
#else
        public string PreferredCodecs { get; set; }
#endif
        /// <summary>Whether to record the entire participant&apos;s call leg. Defaults to `false`.</summary>
        public bool? Record { get; set; }
        /// <summary>The number of channels in the final recording. Defaults to `mono`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingChannels? RecordingChannels { get; set; }
        /// <summary>The URL the recording callbacks will be sent to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStatusCallback { get; set; }
#nullable restore
#else
        public string RecordingStatusCallback { get; set; }
#endif
        /// <summary>The changes to the recording&apos;s state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStatusCallbackEvent { get; set; }
#nullable restore
#else
        public string RecordingStatusCallbackEvent { get; set; }
#endif
        /// <summary>HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingStatusCallbackMethod? RecordingStatusCallbackMethod { get; set; }
        /// <summary>The audio track to record for the call. The default is `both`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingTrack? RecordingTrack { get; set; }
        /// <summary>The password to use for SIP authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SipAuthPassword { get; set; }
#nullable restore
#else
        public string SipAuthPassword { get; set; }
#endif
        /// <summary>The username to use for SIP authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SipAuthUsername { get; set; }
#nullable restore
#else
        public string SipAuthUsername { get; set; }
#endif
        /// <summary>Whether to start the conference when the participant enters. Defaults to `true`.</summary>
        public bool? StartConferenceOnEnter { get; set; }
        /// <summary>URL destination for Telnyx to send status callback events to for the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusCallback { get; set; }
#nullable restore
#else
        public string StatusCallback { get; set; }
#endif
        /// <summary>The changes to the call&apos;s state that should generate a call to `StatusCallback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusCallbackEvent { get; set; }
#nullable restore
#else
        public string StatusCallbackEvent { get; set; }
#endif
        /// <summary>HTTP request type used for `StatusCallback`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_StatusCallbackMethod? StatusCallbackMethod { get; set; }
        /// <summary>The maximum duration of the call in seconds.</summary>
        public int? TimeLimit { get; set; }
        /// <summary>The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between 5 and 120, inclusive. The default value is 30.</summary>
        public int? Timeout { get; set; }
        /// <summary>The phone number of the called party. Phone numbers are formatted with a `+` and country code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? To { get; set; }
#nullable restore
#else
        public string To { get; set; }
#endif
        /// <summary>Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Trim? Trim { get; set; }
        /// <summary>The URL to call for an audio file to play while the participant is waiting for the conference to start.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WaitUrl { get; set; }
#nullable restore
#else
        public string WaitUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest"/> and sets the default values.
        /// </summary>
        public DialConferenceParticipantRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AmdStatusCallback", n => { AmdStatusCallback = n.GetStringValue(); } },
                { "AmdStatusCallbackMethod", n => { AmdStatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_AmdStatusCallbackMethod>(); } },
                { "Beep", n => { Beep = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Beep>(); } },
                { "CallSidToCoach", n => { CallSidToCoach = n.GetStringValue(); } },
                { "CallerId", n => { CallerId = n.GetStringValue(); } },
                { "CancelPlaybackOnDetectMessageEnd", n => { CancelPlaybackOnDetectMessageEnd = n.GetBoolValue(); } },
                { "CancelPlaybackOnMachineDetection", n => { CancelPlaybackOnMachineDetection = n.GetBoolValue(); } },
                { "Coaching", n => { Coaching = n.GetBoolValue(); } },
                { "ConferenceRecord", n => { ConferenceRecord = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecord>(); } },
                { "ConferenceRecordingStatusCallback", n => { ConferenceRecordingStatusCallback = n.GetStringValue(); } },
                { "ConferenceRecordingStatusCallbackEvent", n => { ConferenceRecordingStatusCallbackEvent = n.GetStringValue(); } },
                { "ConferenceRecordingStatusCallbackMethod", n => { ConferenceRecordingStatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecordingStatusCallbackMethod>(); } },
                { "ConferenceRecordingTimeout", n => { ConferenceRecordingTimeout = n.GetIntValue(); } },
                { "ConferenceStatusCallback", n => { ConferenceStatusCallback = n.GetStringValue(); } },
                { "ConferenceStatusCallbackEvent", n => { ConferenceStatusCallbackEvent = n.GetStringValue(); } },
                { "ConferenceStatusCallbackMethod", n => { ConferenceStatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceStatusCallbackMethod>(); } },
                { "ConferenceTrim", n => { ConferenceTrim = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceTrim>(); } },
                { "CustomHeaders", n => { CustomHeaders = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_CustomHeaders>(global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_CustomHeaders.CreateFromDiscriminatorValue)?.AsList(); } },
                { "EarlyMedia", n => { EarlyMedia = n.GetBoolValue(); } },
                { "EndConferenceOnExit", n => { EndConferenceOnExit = n.GetBoolValue(); } },
                { "From", n => { From = n.GetStringValue(); } },
                { "MachineDetection", n => { MachineDetection = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_MachineDetection>(); } },
                { "MachineDetectionSilenceTimeout", n => { MachineDetectionSilenceTimeout = n.GetIntValue(); } },
                { "MachineDetectionSpeechEndThreshold", n => { MachineDetectionSpeechEndThreshold = n.GetIntValue(); } },
                { "MachineDetectionSpeechThreshold", n => { MachineDetectionSpeechThreshold = n.GetIntValue(); } },
                { "MachineDetectionTimeout", n => { MachineDetectionTimeout = n.GetIntValue(); } },
                { "MaxParticipants", n => { MaxParticipants = n.GetIntValue(); } },
                { "Muted", n => { Muted = n.GetBoolValue(); } },
                { "PreferredCodecs", n => { PreferredCodecs = n.GetStringValue(); } },
                { "Record", n => { Record = n.GetBoolValue(); } },
                { "RecordingChannels", n => { RecordingChannels = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingChannels>(); } },
                { "RecordingStatusCallback", n => { RecordingStatusCallback = n.GetStringValue(); } },
                { "RecordingStatusCallbackEvent", n => { RecordingStatusCallbackEvent = n.GetStringValue(); } },
                { "RecordingStatusCallbackMethod", n => { RecordingStatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingStatusCallbackMethod>(); } },
                { "RecordingTrack", n => { RecordingTrack = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingTrack>(); } },
                { "SipAuthPassword", n => { SipAuthPassword = n.GetStringValue(); } },
                { "SipAuthUsername", n => { SipAuthUsername = n.GetStringValue(); } },
                { "StartConferenceOnEnter", n => { StartConferenceOnEnter = n.GetBoolValue(); } },
                { "StatusCallback", n => { StatusCallback = n.GetStringValue(); } },
                { "StatusCallbackEvent", n => { StatusCallbackEvent = n.GetStringValue(); } },
                { "StatusCallbackMethod", n => { StatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_StatusCallbackMethod>(); } },
                { "TimeLimit", n => { TimeLimit = n.GetIntValue(); } },
                { "Timeout", n => { Timeout = n.GetIntValue(); } },
                { "To", n => { To = n.GetStringValue(); } },
                { "Trim", n => { Trim = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Trim>(); } },
                { "WaitUrl", n => { WaitUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AmdStatusCallback", AmdStatusCallback);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_AmdStatusCallbackMethod>("AmdStatusCallbackMethod", AmdStatusCallbackMethod);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Beep>("Beep", Beep);
            writer.WriteStringValue("CallerId", CallerId);
            writer.WriteStringValue("CallSidToCoach", CallSidToCoach);
            writer.WriteBoolValue("CancelPlaybackOnDetectMessageEnd", CancelPlaybackOnDetectMessageEnd);
            writer.WriteBoolValue("CancelPlaybackOnMachineDetection", CancelPlaybackOnMachineDetection);
            writer.WriteBoolValue("Coaching", Coaching);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecord>("ConferenceRecord", ConferenceRecord);
            writer.WriteStringValue("ConferenceRecordingStatusCallback", ConferenceRecordingStatusCallback);
            writer.WriteStringValue("ConferenceRecordingStatusCallbackEvent", ConferenceRecordingStatusCallbackEvent);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceRecordingStatusCallbackMethod>("ConferenceRecordingStatusCallbackMethod", ConferenceRecordingStatusCallbackMethod);
            writer.WriteIntValue("ConferenceRecordingTimeout", ConferenceRecordingTimeout);
            writer.WriteStringValue("ConferenceStatusCallback", ConferenceStatusCallback);
            writer.WriteStringValue("ConferenceStatusCallbackEvent", ConferenceStatusCallbackEvent);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceStatusCallbackMethod>("ConferenceStatusCallbackMethod", ConferenceStatusCallbackMethod);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_ConferenceTrim>("ConferenceTrim", ConferenceTrim);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_CustomHeaders>("CustomHeaders", CustomHeaders);
            writer.WriteBoolValue("EarlyMedia", EarlyMedia);
            writer.WriteBoolValue("EndConferenceOnExit", EndConferenceOnExit);
            writer.WriteStringValue("From", From);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_MachineDetection>("MachineDetection", MachineDetection);
            writer.WriteIntValue("MachineDetectionSilenceTimeout", MachineDetectionSilenceTimeout);
            writer.WriteIntValue("MachineDetectionSpeechEndThreshold", MachineDetectionSpeechEndThreshold);
            writer.WriteIntValue("MachineDetectionSpeechThreshold", MachineDetectionSpeechThreshold);
            writer.WriteIntValue("MachineDetectionTimeout", MachineDetectionTimeout);
            writer.WriteIntValue("MaxParticipants", MaxParticipants);
            writer.WriteBoolValue("Muted", Muted);
            writer.WriteStringValue("PreferredCodecs", PreferredCodecs);
            writer.WriteBoolValue("Record", Record);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingChannels>("RecordingChannels", RecordingChannels);
            writer.WriteStringValue("RecordingStatusCallback", RecordingStatusCallback);
            writer.WriteStringValue("RecordingStatusCallbackEvent", RecordingStatusCallbackEvent);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingStatusCallbackMethod>("RecordingStatusCallbackMethod", RecordingStatusCallbackMethod);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_RecordingTrack>("RecordingTrack", RecordingTrack);
            writer.WriteStringValue("SipAuthPassword", SipAuthPassword);
            writer.WriteStringValue("SipAuthUsername", SipAuthUsername);
            writer.WriteBoolValue("StartConferenceOnEnter", StartConferenceOnEnter);
            writer.WriteStringValue("StatusCallback", StatusCallback);
            writer.WriteStringValue("StatusCallbackEvent", StatusCallbackEvent);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_StatusCallbackMethod>("StatusCallbackMethod", StatusCallbackMethod);
            writer.WriteIntValue("TimeLimit", TimeLimit);
            writer.WriteIntValue("Timeout", Timeout);
            writer.WriteStringValue("To", To);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.DialConferenceParticipantRequest_Trim>("Trim", Trim);
            writer.WriteStringValue("WaitUrl", WaitUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
