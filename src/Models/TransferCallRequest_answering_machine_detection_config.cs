// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Optional configuration parameters to modify &apos;answering_machine_detection&apos; performance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransferCallRequest_answering_machine_detection_config : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Silence duration threshold after a greeting message or voice for it be considered human.</summary>
        public int? AfterGreetingSilenceMillis { get; set; }
        /// <summary>Maximum threshold for silence between words.</summary>
        public int? BetweenWordsSilenceMillis { get; set; }
        /// <summary>Maximum threshold of a human greeting. If greeting longer than this value, considered machine.</summary>
        public int? GreetingDurationMillis { get; set; }
        /// <summary>If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.</summary>
        public int? GreetingSilenceDurationMillis { get; set; }
        /// <summary>If machine already detected, maximum timeout threshold to determine the end of the machine greeting.</summary>
        public int? GreetingTotalAnalysisTimeMillis { get; set; }
        /// <summary>If initial silence duration is greater than this value, consider it a machine.</summary>
        public int? InitialSilenceMillis { get; set; }
        /// <summary>If number of detected words is greater than this value, consder it a machine.</summary>
        public int? MaximumNumberOfWords { get; set; }
        /// <summary>If a single word lasts longer than this threshold, consider it a machine.</summary>
        public int? MaximumWordLengthMillis { get; set; }
        /// <summary>Minimum noise threshold for any analysis.</summary>
        public int? SilenceThreshold { get; set; }
        /// <summary>Maximum timeout threshold for overall detection.</summary>
        public int? TotalAnalysisTimeMillis { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TransferCallRequest_answering_machine_detection_config"/> and sets the default values.
        /// </summary>
        public TransferCallRequest_answering_machine_detection_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TransferCallRequest_answering_machine_detection_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.TransferCallRequest_answering_machine_detection_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.TransferCallRequest_answering_machine_detection_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "after_greeting_silence_millis", n => { AfterGreetingSilenceMillis = n.GetIntValue(); } },
                { "between_words_silence_millis", n => { BetweenWordsSilenceMillis = n.GetIntValue(); } },
                { "greeting_duration_millis", n => { GreetingDurationMillis = n.GetIntValue(); } },
                { "greeting_silence_duration_millis", n => { GreetingSilenceDurationMillis = n.GetIntValue(); } },
                { "greeting_total_analysis_time_millis", n => { GreetingTotalAnalysisTimeMillis = n.GetIntValue(); } },
                { "initial_silence_millis", n => { InitialSilenceMillis = n.GetIntValue(); } },
                { "maximum_number_of_words", n => { MaximumNumberOfWords = n.GetIntValue(); } },
                { "maximum_word_length_millis", n => { MaximumWordLengthMillis = n.GetIntValue(); } },
                { "silence_threshold", n => { SilenceThreshold = n.GetIntValue(); } },
                { "total_analysis_time_millis", n => { TotalAnalysisTimeMillis = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("after_greeting_silence_millis", AfterGreetingSilenceMillis);
            writer.WriteIntValue("between_words_silence_millis", BetweenWordsSilenceMillis);
            writer.WriteIntValue("greeting_duration_millis", GreetingDurationMillis);
            writer.WriteIntValue("greeting_silence_duration_millis", GreetingSilenceDurationMillis);
            writer.WriteIntValue("greeting_total_analysis_time_millis", GreetingTotalAnalysisTimeMillis);
            writer.WriteIntValue("initial_silence_millis", InitialSilenceMillis);
            writer.WriteIntValue("maximum_number_of_words", MaximumNumberOfWords);
            writer.WriteIntValue("maximum_word_length_millis", MaximumWordLengthMillis);
            writer.WriteIntValue("silence_threshold", SilenceThreshold);
            writer.WriteIntValue("total_analysis_time_millis", TotalAnalysisTimeMillis);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
