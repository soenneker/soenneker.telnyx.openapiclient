// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConnectionRtcpSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.</summary>
        public bool? CaptureEnabled { get; set; }
        /// <summary>RTCP port by default is rtp+1, it can also be set to rtcp-mux</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings_port? Port { get; set; }
        /// <summary>RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.</summary>
        public int? ReportFrequencySecs { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings"/> and sets the default values.
        /// </summary>
        public ConnectionRtcpSettings()
        {
            AdditionalData = new Dictionary<string, object>();
            Port = global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings_port.Rtp_plus_1;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capture_enabled", n => { CaptureEnabled = n.GetBoolValue(); } },
                { "port", n => { Port = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings_port>(); } },
                { "report_frequency_secs", n => { ReportFrequencySecs = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("capture_enabled", CaptureEnabled);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.ConnectionRtcpSettings_port>("port", Port);
            writer.WriteIntValue("report_frequency_secs", ReportFrequencySecs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
