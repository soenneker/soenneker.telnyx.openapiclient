// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Telnyx-specific extensions to The Campaign Registry&apos;s `Brand` type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TelnyxBrand : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Alternate business identifier such as DUNS, LEI, or GIIN</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltBusinessId { get; set; }
#nullable restore
#else
        public string AltBusinessId { get; set; }
#endif
        /// <summary>An enumeration.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.AltBusinessIdType? AltBusinessIdType { get; set; }
        /// <summary>Unique identifier assigned to the brand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BrandId { get; set; }
#nullable restore
#else
        public string BrandId { get; set; }
#endif
        /// <summary>Brand relationship to the CSP</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BrandRelationship? BrandRelationship { get; set; }
        /// <summary>Business contact email.Required if `entityType` is `PUBLIC_PROFIT`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessContactEmail { get; set; }
#nullable restore
#else
        public string BusinessContactEmail { get; set; }
#endif
        /// <summary>City name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>(Required for Non-profit/private/public) Legal company name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>ISO2 2 characters country code. Example: US - United States</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Date and time that the brand was created at.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Unique identifier assigned to the csp by the registry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CspId { get; set; }
#nullable restore
#else
        public string CspId { get; set; }
#endif
        /// <summary>Display or marketing name of the brand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ein { get; set; }
#nullable restore
#else
        public string Ein { get; set; }
#endif
        /// <summary>Valid email address of brand support contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Entity type behind the brand. This is the form of business establishment.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.EntityType? EntityType { get; set; }
        /// <summary>First name of business contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The verification status of an active brand</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BrandIdentityStatus? IdentityStatus { get; set; }
        /// <summary>IP address of the browser requesting to create brand identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>Indicates whether this brand is known to be a reseller</summary>
        public bool? IsReseller { get; set; }
        /// <summary>Last name of business contact.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>Valid mobile phone number in e.164 international format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MobilePhone { get; set; }
#nullable restore
#else
        public string MobilePhone { get; set; }
#endif
        /// <summary>Mock brand for testing purposes</summary>
        public bool? Mock { get; set; }
        /// <summary>The optionalAttributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.BrandOptionalAttributes? OptionalAttributes { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.BrandOptionalAttributes OptionalAttributes { get; set; }
#endif
        /// <summary>Valid phone number in e.164 international format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>Postal codes. Use 5 digit zipcode for United States</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>Unique identifier Telnyx assigned to the brand - the brandId</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReferenceId { get; set; }
#nullable restore
#else
        public string ReferenceId { get; set; }
#endif
        /// <summary>State. Must be 2 letters code for United States.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>Status of the brand</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand_status? Status { get; set; }
        /// <summary>(Required for public company) stock exchange.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.StockExchange? StockExchange { get; set; }
        /// <summary>(Required for public company) stock symbol.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StockSymbol { get; set; }
#nullable restore
#else
        public string StockSymbol { get; set; }
#endif
        /// <summary>Street number and name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Street { get; set; }
#nullable restore
#else
        public string Street { get; set; }
#endif
        /// <summary>Unique identifier assigned to the brand by the registry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TcrBrandId { get; set; }
#nullable restore
#else
        public string TcrBrandId { get; set; }
#endif
        /// <summary>Universal EIN of Brand, Read Only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniversalEin { get; set; }
#nullable restore
#else
        public string UniversalEin { get; set; }
#endif
        /// <summary>Date and time that the brand was last updated at.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>Vertical or industry segment of the brand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Vertical { get; set; }
#nullable restore
#else
        public string Vertical { get; set; }
#endif
        /// <summary>Failover webhook to which brand status updates are sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookFailoverURL { get; set; }
#nullable restore
#else
        public string WebhookFailoverURL { get; set; }
#endif
        /// <summary>Webhook to which brand status updates are sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookURL { get; set; }
#nullable restore
#else
        public string WebhookURL { get; set; }
#endif
        /// <summary>Brand website URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand"/> and sets the default values.
        /// </summary>
        public TelnyxBrand()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altBusinessId", n => { AltBusinessId = n.GetStringValue(); } },
                { "altBusinessIdType", n => { AltBusinessIdType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.AltBusinessIdType>(); } },
                { "brandId", n => { BrandId = n.GetStringValue(); } },
                { "brandRelationship", n => { BrandRelationship = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandRelationship>(); } },
                { "businessContactEmail", n => { BusinessContactEmail = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "companyName", n => { CompanyName = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "cspId", n => { CspId = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "ein", n => { Ein = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "entityType", n => { EntityType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.EntityType>(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "identityStatus", n => { IdentityStatus = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandIdentityStatus>(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "isReseller", n => { IsReseller = n.GetBoolValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "mobilePhone", n => { MobilePhone = n.GetStringValue(); } },
                { "mock", n => { Mock = n.GetBoolValue(); } },
                { "optionalAttributes", n => { OptionalAttributes = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandOptionalAttributes>(global::Soenneker.Telnyx.OpenApiClient.Models.BrandOptionalAttributes.CreateFromDiscriminatorValue); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "referenceId", n => { ReferenceId = n.GetStringValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand_status>(); } },
                { "stockExchange", n => { StockExchange = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.StockExchange>(); } },
                { "stockSymbol", n => { StockSymbol = n.GetStringValue(); } },
                { "street", n => { Street = n.GetStringValue(); } },
                { "tcrBrandId", n => { TcrBrandId = n.GetStringValue(); } },
                { "universalEin", n => { UniversalEin = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetStringValue(); } },
                { "vertical", n => { Vertical = n.GetStringValue(); } },
                { "webhookFailoverURL", n => { WebhookFailoverURL = n.GetStringValue(); } },
                { "webhookURL", n => { WebhookURL = n.GetStringValue(); } },
                { "website", n => { Website = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altBusinessId", AltBusinessId);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.AltBusinessIdType>("altBusinessIdType", AltBusinessIdType);
            writer.WriteStringValue("brandId", BrandId);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandRelationship>("brandRelationship", BrandRelationship);
            writer.WriteStringValue("businessContactEmail", BusinessContactEmail);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("companyName", CompanyName);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteStringValue("cspId", CspId);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("ein", Ein);
            writer.WriteStringValue("email", Email);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.EntityType>("entityType", EntityType);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandIdentityStatus>("identityStatus", IdentityStatus);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteBoolValue("isReseller", IsReseller);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("mobilePhone", MobilePhone);
            writer.WriteBoolValue("mock", Mock);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.BrandOptionalAttributes>("optionalAttributes", OptionalAttributes);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("postalCode", PostalCode);
            writer.WriteStringValue("referenceId", ReferenceId);
            writer.WriteStringValue("state", State);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxBrand_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.StockExchange>("stockExchange", StockExchange);
            writer.WriteStringValue("stockSymbol", StockSymbol);
            writer.WriteStringValue("street", Street);
            writer.WriteStringValue("tcrBrandId", TcrBrandId);
            writer.WriteStringValue("universalEin", UniversalEin);
            writer.WriteStringValue("updatedAt", UpdatedAt);
            writer.WriteStringValue("vertical", Vertical);
            writer.WriteStringValue("webhookFailoverURL", WebhookFailoverURL);
            writer.WriteStringValue("webhookURL", WebhookURL);
            writer.WriteStringValue("website", Website);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
