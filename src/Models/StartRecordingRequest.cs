// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StartRecordingRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.</summary>
        public global::Soenneker.Telnyx.Models.StartRecordingRequest_channels? Channels { get; set; }
        /// <summary>Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientState { get; set; }
#nullable restore
#else
        public string ClientState { get; set; }
#endif
        /// <summary>Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommandId { get; set; }
#nullable restore
#else
        public string CommandId { get; set; }
#endif
        /// <summary>The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomFileName { get; set; }
#nullable restore
#else
        public string CustomFileName { get; set; }
#endif
        /// <summary>The audio file format used when storing the call recording. Can be either `mp3` or `wav`.</summary>
        public global::Soenneker.Telnyx.Models.StartRecordingRequest_format? Format { get; set; }
        /// <summary>Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value is 14400. The default value is 0 (infinite)</summary>
        public int? MaxLength { get; set; }
        /// <summary>If enabled, a beep sound will be played at the start of a recording.</summary>
        public bool? PlayBeep { get; set; }
        /// <summary>The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).</summary>
        public global::Soenneker.Telnyx.Models.StartRecordingRequest_recording_track? RecordingTrack { get; set; }
        /// <summary>The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)</summary>
        public int? TimeoutSecs { get; set; }
        /// <summary>Enable post recording transcription. The default value is false.</summary>
        public bool? Transcription { get; set; }
        /// <summary>Engine to use for speech recognition. `A` - `Google`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranscriptionEngine { get; set; }
#nullable restore
#else
        public string TranscriptionEngine { get; set; }
#endif
        /// <summary>Language to use for speech recognition</summary>
        public global::Soenneker.Telnyx.Models.GoogleTranscriptionLanguageLong? TranscriptionLanguage { get; set; }
        /// <summary>Defines maximum number of speakers in the conversation. Applies to `google` engine only.</summary>
        public int? TranscriptionMaxSpeakerCount { get; set; }
        /// <summary>Defines minimum number of speakers in the conversation. Applies to `google` engine only.</summary>
        public int? TranscriptionMinSpeakerCount { get; set; }
        /// <summary>Enables profanity_filter. Applies to `google` engine only.</summary>
        public bool? TranscriptionProfanityFilter { get; set; }
        /// <summary>Enables speaker diarization. Applies to `google` engine only.</summary>
        public bool? TranscriptionSpeakerDiarization { get; set; }
        /// <summary>When set to `trim-silence`, silence will be removed from the beginning and end of the recording.</summary>
        public global::Soenneker.Telnyx.Models.StartRecordingRequest_trim? Trim { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.StartRecordingRequest"/> and sets the default values.
        /// </summary>
        public StartRecordingRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordingTrack = global::Soenneker.Telnyx.Models.StartRecordingRequest_recording_track.Both;
            TranscriptionEngine = "A";
            TranscriptionLanguage = global::Soenneker.Telnyx.Models.GoogleTranscriptionLanguageLong.EnUS;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.StartRecordingRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.StartRecordingRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.StartRecordingRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channels", n => { Channels = n.GetEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_channels>(); } },
                { "client_state", n => { ClientState = n.GetStringValue(); } },
                { "command_id", n => { CommandId = n.GetStringValue(); } },
                { "custom_file_name", n => { CustomFileName = n.GetStringValue(); } },
                { "format", n => { Format = n.GetEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_format>(); } },
                { "max_length", n => { MaxLength = n.GetIntValue(); } },
                { "play_beep", n => { PlayBeep = n.GetBoolValue(); } },
                { "recording_track", n => { RecordingTrack = n.GetEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_recording_track>(); } },
                { "timeout_secs", n => { TimeoutSecs = n.GetIntValue(); } },
                { "transcription", n => { Transcription = n.GetBoolValue(); } },
                { "transcription_engine", n => { TranscriptionEngine = n.GetStringValue(); } },
                { "transcription_language", n => { TranscriptionLanguage = n.GetEnumValue<global::Soenneker.Telnyx.Models.GoogleTranscriptionLanguageLong>(); } },
                { "transcription_max_speaker_count", n => { TranscriptionMaxSpeakerCount = n.GetIntValue(); } },
                { "transcription_min_speaker_count", n => { TranscriptionMinSpeakerCount = n.GetIntValue(); } },
                { "transcription_profanity_filter", n => { TranscriptionProfanityFilter = n.GetBoolValue(); } },
                { "transcription_speaker_diarization", n => { TranscriptionSpeakerDiarization = n.GetBoolValue(); } },
                { "trim", n => { Trim = n.GetEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_trim>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_channels>("channels", Channels);
            writer.WriteStringValue("client_state", ClientState);
            writer.WriteStringValue("command_id", CommandId);
            writer.WriteStringValue("custom_file_name", CustomFileName);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_format>("format", Format);
            writer.WriteIntValue("max_length", MaxLength);
            writer.WriteBoolValue("play_beep", PlayBeep);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_recording_track>("recording_track", RecordingTrack);
            writer.WriteIntValue("timeout_secs", TimeoutSecs);
            writer.WriteBoolValue("transcription", Transcription);
            writer.WriteStringValue("transcription_engine", TranscriptionEngine);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.GoogleTranscriptionLanguageLong>("transcription_language", TranscriptionLanguage);
            writer.WriteIntValue("transcription_max_speaker_count", TranscriptionMaxSpeakerCount);
            writer.WriteIntValue("transcription_min_speaker_count", TranscriptionMinSpeakerCount);
            writer.WriteBoolValue("transcription_profanity_filter", TranscriptionProfanityFilter);
            writer.WriteBoolValue("transcription_speaker_diarization", TranscriptionSpeakerDiarization);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.StartRecordingRequest_trim>("trim", Trim);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
