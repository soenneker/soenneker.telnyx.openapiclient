// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserBalance : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Available amount to spend (balance + credit limit)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AvailableCredit { get; set; }
#nullable restore
#else
        public string AvailableCredit { get; set; }
#endif
        /// <summary>The account&apos;s current balance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Balance { get; set; }
#nullable restore
#else
        public string Balance { get; set; }
#endif
        /// <summary>The account&apos;s credit limit.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditLimit { get; set; }
#nullable restore
#else
        public string CreditLimit { get; set; }
#endif
        /// <summary>The ISO 4217 currency identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The accountâ€™s pending amount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pending { get; set; }
#nullable restore
#else
        public string Pending { get; set; }
#endif
        /// <summary>Identifies the type of the resource.</summary>
        public global::Soenneker.Telnyx.Models.UserBalance_record_type? RecordType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.UserBalance"/> and sets the default values.
        /// </summary>
        public UserBalance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.UserBalance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.UserBalance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.UserBalance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available_credit", n => { AvailableCredit = n.GetStringValue(); } },
                { "balance", n => { Balance = n.GetStringValue(); } },
                { "credit_limit", n => { CreditLimit = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "pending", n => { Pending = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetEnumValue<global::Soenneker.Telnyx.Models.UserBalance_record_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("available_credit", AvailableCredit);
            writer.WriteStringValue("balance", Balance);
            writer.WriteStringValue("credit_limit", CreditLimit);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("pending", Pending);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.UserBalance_record_type>("record_type", RecordType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
