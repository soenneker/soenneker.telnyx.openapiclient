// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Standalone card
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RCSStandaloneCard : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The card_content property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSCardContent? CardContent { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSCardContent CardContent { get; set; }
#endif
        /// <summary>Orientation of the card.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_card_orientation? CardOrientation { get; set; }
        /// <summary>Image preview alignment for standalone cards with horizontal layout.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_thumbnail_image_alignment? ThumbnailImageAlignment { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard"/> and sets the default values.
        /// </summary>
        public RCSStandaloneCard()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_content", n => { CardContent = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSCardContent>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSCardContent.CreateFromDiscriminatorValue); } },
                { "card_orientation", n => { CardOrientation = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_card_orientation>(); } },
                { "thumbnail_image_alignment", n => { ThumbnailImageAlignment = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_thumbnail_image_alignment>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSCardContent>("card_content", CardContent);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_card_orientation>("card_orientation", CardOrientation);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSStandaloneCard_thumbnail_image_alignment>("thumbnail_image_alignment", ThumbnailImageAlignment);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
