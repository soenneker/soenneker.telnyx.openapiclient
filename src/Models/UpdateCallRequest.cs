// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpdateCallRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>HTTP request type used for `FallbackUrl`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_FallbackMethod? FallbackMethod { get; set; }
        /// <summary>A failover URL for which Telnyx will retrieve the TeXML call instructions if the Url is not responding.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FallbackUrl { get; set; }
#nullable restore
#else
        public string FallbackUrl { get; set; }
#endif
        /// <summary>HTTP request type used for `Url`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_Method? Method { get; set; }
        /// <summary>The value to set the call status to. Setting the status to completed ends the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>URL destination for Telnyx to send status callback events to for the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusCallback { get; set; }
#nullable restore
#else
        public string StatusCallback { get; set; }
#endif
        /// <summary>HTTP request type used for `StatusCallback`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_StatusCallbackMethod? StatusCallbackMethod { get; set; }
        /// <summary>TeXML to replace the current one with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Texml { get; set; }
#nullable restore
#else
        public string Texml { get; set; }
#endif
        /// <summary>The URL where TeXML will make a request to retrieve a new set of TeXML instructions to continue the call flow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest"/> and sets the default values.
        /// </summary>
        public UpdateCallRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "FallbackMethod", n => { FallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_FallbackMethod>(); } },
                { "FallbackUrl", n => { FallbackUrl = n.GetStringValue(); } },
                { "Method", n => { Method = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_Method>(); } },
                { "Status", n => { Status = n.GetStringValue(); } },
                { "StatusCallback", n => { StatusCallback = n.GetStringValue(); } },
                { "StatusCallbackMethod", n => { StatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_StatusCallbackMethod>(); } },
                { "Texml", n => { Texml = n.GetStringValue(); } },
                { "Url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_FallbackMethod>("FallbackMethod", FallbackMethod);
            writer.WriteStringValue("FallbackUrl", FallbackUrl);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_Method>("Method", Method);
            writer.WriteStringValue("Status", Status);
            writer.WriteStringValue("StatusCallback", StatusCallback);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.UpdateCallRequest_StatusCallbackMethod>("StatusCallbackMethod", StatusCallbackMethod);
            writer.WriteStringValue("Texml", Texml);
            writer.WriteStringValue("Url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
