// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Request object for CDR usage report
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsageRequestLegacy : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Aggregation type: All = 0, By Connections = 1, By Tags = 2, By Billing Group = 3</summary>
        public int? AggregationType { get; set; }
        /// <summary>List of connections to filter by</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Connections { get; set; }
#nullable restore
#else
        public List<long?> Connections { get; set; }
#endif
        /// <summary>End time in ISO format</summary>
        public DateTimeOffset? EndTime { get; set; }
        /// <summary>List of managed accounts to include</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ManagedAccounts { get; set; }
#nullable restore
#else
        public List<Guid?> ManagedAccounts { get; set; }
#endif
        /// <summary>Product breakdown type: No breakdown = 0, DID vs Toll-free = 1, Country = 2, DID vs Toll-free per Country = 3</summary>
        public int? ProductBreakdown { get; set; }
        /// <summary>Whether to select all managed accounts</summary>
        public bool? SelectAllManagedAccounts { get; set; }
        /// <summary>Start time in ISO format</summary>
        public DateTimeOffset? StartTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.UsageRequestLegacy"/> and sets the default values.
        /// </summary>
        public UsageRequestLegacy()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.UsageRequestLegacy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.UsageRequestLegacy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.UsageRequestLegacy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aggregation_type", n => { AggregationType = n.GetIntValue(); } },
                { "connections", n => { Connections = n.GetCollectionOfPrimitiveValues<long?>()?.AsList(); } },
                { "end_time", n => { EndTime = n.GetDateTimeOffsetValue(); } },
                { "managed_accounts", n => { ManagedAccounts = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "product_breakdown", n => { ProductBreakdown = n.GetIntValue(); } },
                { "select_all_managed_accounts", n => { SelectAllManagedAccounts = n.GetBoolValue(); } },
                { "start_time", n => { StartTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("aggregation_type", AggregationType);
            writer.WriteCollectionOfPrimitiveValues<long?>("connections", Connections);
            writer.WriteDateTimeOffsetValue("end_time", EndTime);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("managed_accounts", ManagedAccounts);
            writer.WriteIntValue("product_breakdown", ProductBreakdown);
            writer.WriteBoolValue("select_all_managed_accounts", SelectAllManagedAccounts);
            writer.WriteDateTimeOffsetValue("start_time", StartTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
