// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CredentialInbound : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>This setting allows you to set the format with which the caller&apos;s number (ANI) is sent for inbound phone calls.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_ani_number_format? AniNumberFormat { get; set; }
        /// <summary>When set, this will limit the total number of inbound calls to phone numbers associated with this connection.</summary>
        public int? ChannelLimit { get; set; }
        /// <summary>Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Codecs { get; set; }
#nullable restore
#else
        public List<string> Codecs { get; set; }
#endif
        /// <summary>The dnis_number_format property</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_dnis_number_format? DnisNumberFormat { get; set; }
        /// <summary>Generate ringback tone through 183 session progress message with early media.</summary>
        public bool? GenerateRingbackTone { get; set; }
        /// <summary>When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)</summary>
        public bool? IsupHeadersEnabled { get; set; }
        /// <summary>Enable PRACK messages as defined in RFC3262.</summary>
        public bool? PrackEnabled { get; set; }
        /// <summary>When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.</summary>
        public bool? ShakenStirEnabled { get; set; }
        /// <summary>Defaults to true.</summary>
        public bool? SipCompactHeadersEnabled { get; set; }
        /// <summary>Time(sec) before aborting if connection is not made.</summary>
        public int? Timeout1xxSecs { get; set; }
        /// <summary>Time(sec) before aborting if call is unanswered (min: 1, max: 600).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timeout2xxSecs { get; set; }
#nullable restore
#else
        public string Timeout2xxSecs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound"/> and sets the default values.
        /// </summary>
        public CredentialInbound()
        {
            AdditionalData = new Dictionary<string, object>();
            AniNumberFormat = global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_ani_number_format.E164National;
            DnisNumberFormat = global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_dnis_number_format.E164;
            Timeout2xxSecs = "90";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ani_number_format", n => { AniNumberFormat = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_ani_number_format>(); } },
                { "channel_limit", n => { ChannelLimit = n.GetIntValue(); } },
                { "codecs", n => { Codecs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "dnis_number_format", n => { DnisNumberFormat = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_dnis_number_format>(); } },
                { "generate_ringback_tone", n => { GenerateRingbackTone = n.GetBoolValue(); } },
                { "isup_headers_enabled", n => { IsupHeadersEnabled = n.GetBoolValue(); } },
                { "prack_enabled", n => { PrackEnabled = n.GetBoolValue(); } },
                { "shaken_stir_enabled", n => { ShakenStirEnabled = n.GetBoolValue(); } },
                { "sip_compact_headers_enabled", n => { SipCompactHeadersEnabled = n.GetBoolValue(); } },
                { "timeout_1xx_secs", n => { Timeout1xxSecs = n.GetIntValue(); } },
                { "timeout_2xx_secs", n => { Timeout2xxSecs = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_ani_number_format>("ani_number_format", AniNumberFormat);
            writer.WriteIntValue("channel_limit", ChannelLimit);
            writer.WriteCollectionOfPrimitiveValues<string>("codecs", Codecs);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CredentialInbound_dnis_number_format>("dnis_number_format", DnisNumberFormat);
            writer.WriteBoolValue("generate_ringback_tone", GenerateRingbackTone);
            writer.WriteBoolValue("isup_headers_enabled", IsupHeadersEnabled);
            writer.WriteBoolValue("prack_enabled", PrackEnabled);
            writer.WriteBoolValue("shaken_stir_enabled", ShakenStirEnabled);
            writer.WriteBoolValue("sip_compact_headers_enabled", SipCompactHeadersEnabled);
            writer.WriteIntValue("timeout_1xx_secs", Timeout1xxSecs);
            writer.WriteStringValue("timeout_2xx_secs", Timeout2xxSecs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
