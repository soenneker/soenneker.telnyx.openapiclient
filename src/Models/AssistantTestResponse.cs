// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Response model containing complete assistant test information.Returns all test configuration details including evaluation criteria,scheduling, and metadata. Used when retrieving individual tests orafter creating/updating tests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AssistantTestResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Timestamp when the test was created.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Detailed description of the test&apos;s purpose and scope.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Target destination for test conversations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Destination { get; set; }
#nullable restore
#else
        public string Destination { get; set; }
#endif
        /// <summary>Detailed test scenario instructions and objectives.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Instructions { get; set; }
#nullable restore
#else
        public string Instructions { get; set; }
#endif
        /// <summary>Maximum allowed duration for test execution in seconds.</summary>
        public int? MaxDurationSeconds { get; set; }
        /// <summary>Human-readable name of the test.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Evaluation criteria used to assess test performance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse_rubric>? Rubric { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse_rubric> Rubric { get; set; }
#endif
        /// <summary>The telnyx_conversation_channel property</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxConversationChannel? TelnyxConversationChannel { get; set; }
        /// <summary>Unique identifier for the assistant test.</summary>
        public Guid? TestId { get; set; }
        /// <summary>Test suite grouping for organizational purposes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TestSuite { get; set; }
#nullable restore
#else
        public string TestSuite { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse"/> and sets the default values.
        /// </summary>
        public AssistantTestResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "destination", n => { Destination = n.GetStringValue(); } },
                { "instructions", n => { Instructions = n.GetStringValue(); } },
                { "max_duration_seconds", n => { MaxDurationSeconds = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "rubric", n => { Rubric = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse_rubric>(global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse_rubric.CreateFromDiscriminatorValue)?.AsList(); } },
                { "telnyx_conversation_channel", n => { TelnyxConversationChannel = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxConversationChannel>(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
                { "test_suite", n => { TestSuite = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("destination", Destination);
            writer.WriteStringValue("instructions", Instructions);
            writer.WriteIntValue("max_duration_seconds", MaxDurationSeconds);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.AssistantTestResponse_rubric>("rubric", Rubric);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TelnyxConversationChannel>("telnyx_conversation_channel", TelnyxConversationChannel);
            writer.WriteGuidValue("test_id", TestId);
            writer.WriteStringValue("test_suite", TestSuite);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
