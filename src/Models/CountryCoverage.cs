// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CountryCoverage : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Country ISO code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Set of features supported</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Features { get; set; }
#nullable restore
#else
        public List<string> Features { get; set; }
#endif
        /// <summary>The international_sms property</summary>
        public bool? InternationalSms { get; set; }
        /// <summary>Indicates whether country can be queried with inventory coverage endpoint</summary>
        public bool? InventoryCoverage { get; set; }
        /// <summary>The local property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_local? Local { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_local Local { get; set; }
#endif
        /// <summary>The mobile property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_mobile? Mobile { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_mobile Mobile { get; set; }
#endif
        /// <summary>The national property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_national? National { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_national National { get; set; }
#endif
        /// <summary>The numbers property</summary>
        public bool? Numbers { get; set; }
        /// <summary>The p2p property</summary>
        public bool? P2p { get; set; }
        /// <summary>Phone number type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PhoneNumberType { get; set; }
#nullable restore
#else
        public List<string> PhoneNumberType { get; set; }
#endif
        /// <summary>Supports quickship</summary>
        public bool? Quickship { get; set; }
        /// <summary>Geographic region (e.g., AMER, EMEA, APAC)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>Supports reservable</summary>
        public bool? Reservable { get; set; }
        /// <summary>The shared_cost property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_shared_cost? SharedCost { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_shared_cost SharedCost { get; set; }
#endif
        /// <summary>The toll_free property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_toll_free? TollFree { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_toll_free TollFree { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage"/> and sets the default values.
        /// </summary>
        public CountryCoverage()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "features", n => { Features = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "international_sms", n => { InternationalSms = n.GetBoolValue(); } },
                { "inventory_coverage", n => { InventoryCoverage = n.GetBoolValue(); } },
                { "local", n => { Local = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_local>(global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_local.CreateFromDiscriminatorValue); } },
                { "mobile", n => { Mobile = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_mobile>(global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_mobile.CreateFromDiscriminatorValue); } },
                { "national", n => { National = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_national>(global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_national.CreateFromDiscriminatorValue); } },
                { "numbers", n => { Numbers = n.GetBoolValue(); } },
                { "p2p", n => { P2p = n.GetBoolValue(); } },
                { "phone_number_type", n => { PhoneNumberType = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "quickship", n => { Quickship = n.GetBoolValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "reservable", n => { Reservable = n.GetBoolValue(); } },
                { "shared_cost", n => { SharedCost = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_shared_cost>(global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_shared_cost.CreateFromDiscriminatorValue); } },
                { "toll_free", n => { TollFree = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_toll_free>(global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_toll_free.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteCollectionOfPrimitiveValues<string>("features", Features);
            writer.WriteBoolValue("international_sms", InternationalSms);
            writer.WriteBoolValue("inventory_coverage", InventoryCoverage);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_local>("local", Local);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_mobile>("mobile", Mobile);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_national>("national", National);
            writer.WriteBoolValue("numbers", Numbers);
            writer.WriteBoolValue("p2p", P2p);
            writer.WriteCollectionOfPrimitiveValues<string>("phone_number_type", PhoneNumberType);
            writer.WriteBoolValue("quickship", Quickship);
            writer.WriteStringValue("region", Region);
            writer.WriteBoolValue("reservable", Reservable);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_shared_cost>("shared_cost", SharedCost);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.CountryCoverage_toll_free>("toll_free", TollFree);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
