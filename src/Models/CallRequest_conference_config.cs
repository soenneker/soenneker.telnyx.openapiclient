// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Optional configuration parameters to dial new participant into a conference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CallRequest_conference_config : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_beep_enabled? BeepEnabled { get; set; }
        /// <summary>Conference name to be joined</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceName { get; set; }
#nullable restore
#else
        public string ConferenceName { get; set; }
#endif
        /// <summary>Controls the moment when dialled call is joined into conference. If set to `true` user will be joined as soon as media is available (ringback). If `false` user will be joined when call is answered. Defaults to `true`</summary>
        public bool? EarlyMedia { get; set; }
        /// <summary>Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to &quot;false&quot;.</summary>
        public bool? EndConferenceOnExit { get; set; }
        /// <summary>Whether the participant should be put on hold immediately after joining the conference. Defaults to &quot;false&quot;.</summary>
        public bool? Hold { get; set; }
        /// <summary>The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when &quot;start_conference_on_create&quot; is set to &quot;false&quot;. This property takes effect only if &quot;hold&quot; is set to &quot;true&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HoldAudioUrl { get; set; }
#nullable restore
#else
        public string HoldAudioUrl { get; set; }
#endif
        /// <summary>The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when &quot;start_conference_on_create&quot; is set to &quot;false&quot;. This property takes effect only if &quot;hold&quot; is set to &quot;true&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HoldMediaName { get; set; }
#nullable restore
#else
        public string HoldMediaName { get; set; }
#endif
        /// <summary>Conference ID to be joined</summary>
        public Guid? Id { get; set; }
        /// <summary>Whether the participant should be muted immediately after joining the conference. Defaults to &quot;false&quot;.</summary>
        public bool? Mute { get; set; }
        /// <summary>Whether the conference should end after the participant leaves the conference. NOTE this doesn&apos;t hang up the other participants. Defaults to &quot;false&quot;.</summary>
        public bool? SoftEndConferenceOnExit { get; set; }
        /// <summary>Whether the conference should be started on creation. If the conference isn&apos;t started all participants that join are automatically put on hold. Defaults to &quot;true&quot;.</summary>
        public bool? StartConferenceOnCreate { get; set; }
        /// <summary>Whether the conference should be started after the participant joins the conference. Defaults to &quot;false&quot;.</summary>
        public bool? StartConferenceOnEnter { get; set; }
        /// <summary>Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. &quot;barge&quot; means the supervisor enters the conference as a normal participant. This is the same as &quot;none&quot;. &quot;monitor&quot; means the supervisor is muted but can hear all participants. &quot;whisper&quot; means that only the specified &quot;whisper_call_control_ids&quot; can hear the supervisor. Defaults to &quot;none&quot;.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_supervisor_role? SupervisorRole { get; set; }
        /// <summary>Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WhisperCallControlIds { get; set; }
#nullable restore
#else
        public List<string> WhisperCallControlIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config"/> and sets the default values.
        /// </summary>
        public CallRequest_conference_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "beep_enabled", n => { BeepEnabled = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_beep_enabled>(); } },
                { "conference_name", n => { ConferenceName = n.GetStringValue(); } },
                { "early_media", n => { EarlyMedia = n.GetBoolValue(); } },
                { "end_conference_on_exit", n => { EndConferenceOnExit = n.GetBoolValue(); } },
                { "hold", n => { Hold = n.GetBoolValue(); } },
                { "hold_audio_url", n => { HoldAudioUrl = n.GetStringValue(); } },
                { "hold_media_name", n => { HoldMediaName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "mute", n => { Mute = n.GetBoolValue(); } },
                { "soft_end_conference_on_exit", n => { SoftEndConferenceOnExit = n.GetBoolValue(); } },
                { "start_conference_on_create", n => { StartConferenceOnCreate = n.GetBoolValue(); } },
                { "start_conference_on_enter", n => { StartConferenceOnEnter = n.GetBoolValue(); } },
                { "supervisor_role", n => { SupervisorRole = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_supervisor_role>(); } },
                { "whisper_call_control_ids", n => { WhisperCallControlIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_beep_enabled>("beep_enabled", BeepEnabled);
            writer.WriteStringValue("conference_name", ConferenceName);
            writer.WriteBoolValue("early_media", EarlyMedia);
            writer.WriteBoolValue("end_conference_on_exit", EndConferenceOnExit);
            writer.WriteBoolValue("hold", Hold);
            writer.WriteStringValue("hold_audio_url", HoldAudioUrl);
            writer.WriteStringValue("hold_media_name", HoldMediaName);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("mute", Mute);
            writer.WriteBoolValue("soft_end_conference_on_exit", SoftEndConferenceOnExit);
            writer.WriteBoolValue("start_conference_on_create", StartConferenceOnCreate);
            writer.WriteBoolValue("start_conference_on_enter", StartConferenceOnEnter);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.CallRequest_conference_config_supervisor_role>("supervisor_role", SupervisorRole);
            writer.WriteCollectionOfPrimitiveValues<string>("whisper_call_control_ids", WhisperCallControlIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
