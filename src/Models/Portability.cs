// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Portability : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another carrier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Altspid { get; set; }
#nullable restore
#else
        public string Altspid { get; set; }
#endif
        /// <summary>Alternative service provider name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltspidCarrierName { get; set; }
#nullable restore
#else
        public string AltspidCarrierName { get; set; }
#endif
        /// <summary>Alternative service provider type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AltspidCarrierType { get; set; }
#nullable restore
#else
        public string AltspidCarrierType { get; set; }
#endif
        /// <summary>City name extracted from the locality in the Local Exchange Routing Guide (LERG) database</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Type of number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LineType { get; set; }
#nullable restore
#else
        public string LineType { get; set; }
#endif
        /// <summary>Local Routing Number, if assigned to the requested phone number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Lrn { get; set; }
#nullable restore
#else
        public string Lrn { get; set; }
#endif
        /// <summary>Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ocn { get; set; }
#nullable restore
#else
        public string Ocn { get; set; }
#endif
        /// <summary>ISO-formatted date when the requested phone number has been ported</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PortedDate { get; set; }
#nullable restore
#else
        public string PortedDate { get; set; }
#endif
        /// <summary>Indicates whether or not the requested phone number has been ported</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Portability_ported_status? PortedStatus { get; set; }
        /// <summary>SPID (Service Provider ID)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Spid { get; set; }
#nullable restore
#else
        public string Spid { get; set; }
#endif
        /// <summary>Service provider name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpidCarrierName { get; set; }
#nullable restore
#else
        public string SpidCarrierName { get; set; }
#endif
        /// <summary>Service provider type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpidCarrierType { get; set; }
#nullable restore
#else
        public string SpidCarrierType { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Portability"/> and sets the default values.
        /// </summary>
        public Portability()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Portability"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.Portability CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.Portability();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altspid", n => { Altspid = n.GetStringValue(); } },
                { "altspid_carrier_name", n => { AltspidCarrierName = n.GetStringValue(); } },
                { "altspid_carrier_type", n => { AltspidCarrierType = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "line_type", n => { LineType = n.GetStringValue(); } },
                { "lrn", n => { Lrn = n.GetStringValue(); } },
                { "ocn", n => { Ocn = n.GetStringValue(); } },
                { "ported_date", n => { PortedDate = n.GetStringValue(); } },
                { "ported_status", n => { PortedStatus = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Portability_ported_status>(); } },
                { "spid", n => { Spid = n.GetStringValue(); } },
                { "spid_carrier_name", n => { SpidCarrierName = n.GetStringValue(); } },
                { "spid_carrier_type", n => { SpidCarrierType = n.GetStringValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("altspid", Altspid);
            writer.WriteStringValue("altspid_carrier_name", AltspidCarrierName);
            writer.WriteStringValue("altspid_carrier_type", AltspidCarrierType);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("line_type", LineType);
            writer.WriteStringValue("lrn", Lrn);
            writer.WriteStringValue("ocn", Ocn);
            writer.WriteStringValue("ported_date", PortedDate);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Portability_ported_status>("ported_status", PortedStatus);
            writer.WriteStringValue("spid", Spid);
            writer.WriteStringValue("spid_carrier_name", SpidCarrierName);
            writer.WriteStringValue("spid_carrier_type", SpidCarrierType);
            writer.WriteStringValue("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
