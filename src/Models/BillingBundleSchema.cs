// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BillingBundleSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If that bundle is active or not.</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bundle_limits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.Models.BundleLimitSchema>? BundleLimits { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.Models.BundleLimitSchema> BundleLimits { get; set; }
#endif
        /// <summary>Bundle&apos;s cost code, this is used to identify the bundle in the billing system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CostCode { get; set; }
#nullable restore
#else
        public string CostCode { get; set; }
#endif
        /// <summary>Date the bundle was created.</summary>
        public Date? CreatedAt { get; set; }
        /// <summary>Bundle&apos;s ID, this is used to identify the bundle in the API.</summary>
        public Guid? Id { get; set; }
        /// <summary>Available to all customers or only to specific customers.</summary>
        public bool? IsPublic { get; set; }
        /// <summary>Bundle&apos;s name, this is used to identify the bundle in the UI.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Slugified version of the bundle&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.BillingBundleSchema"/> and sets the default values.
        /// </summary>
        public BillingBundleSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.BillingBundleSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.BillingBundleSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.BillingBundleSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "bundle_limits", n => { BundleLimits = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.Models.BundleLimitSchema>(global::Soenneker.Telnyx.Models.BundleLimitSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cost_code", n => { CostCode = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "is_public", n => { IsPublic = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.Models.BundleLimitSchema>("bundle_limits", BundleLimits);
            writer.WriteStringValue("cost_code", CostCode);
            writer.WriteDateValue("created_at", CreatedAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("is_public", IsPublic);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("slug", Slug);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
