// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayAudioUrlRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies the type of audio provided in `audio_url` or `playback_content`.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest_audio_type? AudioType { get; set; }
        /// <summary>The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioUrl { get; set; }
#nullable restore
#else
        public string AudioUrl { get; set; }
#endif
        /// <summary>Caches the audio file. Useful when playing the same audio file multiple times during the call.</summary>
        public bool? CacheAudio { get; set; }
        /// <summary>Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientState { get; set; }
#nullable restore
#else
        public string ClientState { get; set; }
#endif
        /// <summary>Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommandId { get; set; }
#nullable restore
#else
        public string CommandId { get; set; }
#endif
        /// <summary>The loop property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.Loopcount? Loop { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.Loopcount Loop { get; set; }
#endif
        /// <summary>The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaName { get; set; }
#nullable restore
#else
        public string MediaName { get; set; }
#endif
        /// <summary>When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.</summary>
        public bool? Overlay { get; set; }
        /// <summary>Allows a user to provide base64 encoded mp3 or wav. Note: when using this parameter, `media_url` and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaybackContent { get; set; }
#nullable restore
#else
        public string PlaybackContent { get; set; }
#endif
        /// <summary>When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stop { get; set; }
#nullable restore
#else
        public string Stop { get; set; }
#endif
        /// <summary>Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetLegs { get; set; }
#nullable restore
#else
        public string TargetLegs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest"/> and sets the default values.
        /// </summary>
        public PlayAudioUrlRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            AudioType = global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest_audio_type.Mp3;
            TargetLegs = "self";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audio_type", n => { AudioType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest_audio_type>(); } },
                { "audio_url", n => { AudioUrl = n.GetStringValue(); } },
                { "cache_audio", n => { CacheAudio = n.GetBoolValue(); } },
                { "client_state", n => { ClientState = n.GetStringValue(); } },
                { "command_id", n => { CommandId = n.GetStringValue(); } },
                { "loop", n => { Loop = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.Loopcount>(global::Soenneker.Telnyx.OpenApiClient.Models.Loopcount.CreateFromDiscriminatorValue); } },
                { "media_name", n => { MediaName = n.GetStringValue(); } },
                { "overlay", n => { Overlay = n.GetBoolValue(); } },
                { "playback_content", n => { PlaybackContent = n.GetStringValue(); } },
                { "stop", n => { Stop = n.GetStringValue(); } },
                { "target_legs", n => { TargetLegs = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.PlayAudioUrlRequest_audio_type>("audio_type", AudioType);
            writer.WriteStringValue("audio_url", AudioUrl);
            writer.WriteBoolValue("cache_audio", CacheAudio);
            writer.WriteStringValue("client_state", ClientState);
            writer.WriteStringValue("command_id", CommandId);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.Loopcount>("loop", Loop);
            writer.WriteStringValue("media_name", MediaName);
            writer.WriteBoolValue("overlay", Overlay);
            writer.WriteStringValue("playback_content", PlaybackContent);
            writer.WriteStringValue("stop", Stop);
            writer.WriteStringValue("target_legs", TargetLegs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
