// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TexmlCreateCallRecordingRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether to play a beep when recording is started.</summary>
        public bool? PlayBeep { get; set; }
        /// <summary>When `dual`, final audio file has the first leg on channel A, and the rest on channel B. `single` mixes both tracks into a single channel.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingChannels { get; set; }
#nullable restore
#else
        public string RecordingChannels { get; set; }
#endif
        /// <summary>Url where status callbacks will be sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStatusCallback { get; set; }
#nullable restore
#else
        public string RecordingStatusCallback { get; set; }
#endif
        /// <summary>The changes to the recording&apos;s state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStatusCallbackEvent { get; set; }
#nullable restore
#else
        public string RecordingStatusCallbackEvent { get; set; }
#endif
        /// <summary>HTTP method used to send status callbacks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStatusCallbackMethod { get; set; }
#nullable restore
#else
        public string RecordingStatusCallbackMethod { get; set; }
#endif
        /// <summary>The audio track to record for the call. The default is `both`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingTrack { get; set; }
#nullable restore
#else
        public string RecordingTrack { get; set; }
#endif
        /// <summary>Whether to send RecordingUrl in webhooks.</summary>
        public bool? SendRecordingUrl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TexmlCreateCallRecordingRequestBody"/> and sets the default values.
        /// </summary>
        public TexmlCreateCallRecordingRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TexmlCreateCallRecordingRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.TexmlCreateCallRecordingRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.TexmlCreateCallRecordingRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "PlayBeep", n => { PlayBeep = n.GetBoolValue(); } },
                { "RecordingChannels", n => { RecordingChannels = n.GetStringValue(); } },
                { "RecordingStatusCallback", n => { RecordingStatusCallback = n.GetStringValue(); } },
                { "RecordingStatusCallbackEvent", n => { RecordingStatusCallbackEvent = n.GetStringValue(); } },
                { "RecordingStatusCallbackMethod", n => { RecordingStatusCallbackMethod = n.GetStringValue(); } },
                { "RecordingTrack", n => { RecordingTrack = n.GetStringValue(); } },
                { "SendRecordingUrl", n => { SendRecordingUrl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("PlayBeep", PlayBeep);
            writer.WriteStringValue("RecordingChannels", RecordingChannels);
            writer.WriteStringValue("RecordingStatusCallback", RecordingStatusCallback);
            writer.WriteStringValue("RecordingStatusCallbackEvent", RecordingStatusCallbackEvent);
            writer.WriteStringValue("RecordingStatusCallbackMethod", RecordingStatusCallbackMethod);
            writer.WriteStringValue("RecordingTrack", RecordingTrack);
            writer.WriteBoolValue("SendRecordingUrl", SendRecordingUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
