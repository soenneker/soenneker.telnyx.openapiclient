// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Number Pool allows you to send messages from a pool of numbers of different types, assigningweights to each type. The pool consists of all the long code and toll free numbersassigned to the messaging profile.To disable this feature, set the object field to `null`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NumberPoolSettings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If set to true, Number Pool will try to choose a sending number with the same area code as the destinationnumber. If there are no such numbers available, a nunber with a different area code will be chosen. Currentlyonly NANP numbers are supported.</summary>
        public bool? Geomatch { get; set; }
        /// <summary>Defines the probability weight for a Long Code number to be selected when sending a message.The higher the weight the higher the probability. The sum of the weights for all number typesdoes not necessarily need to add to 100.  Weight must be a non-negative number, and when equalto zero it will remove the number type from the pool.</summary>
        public double? LongCodeWeight { get; set; }
        /// <summary>If set to true all unhealthy numbers will be automatically excluded from the pool.Health metrics per number are calculated on a regular basis, taking into account the deliverabilityrate and the amount of messages marked as spam by upstream carriers.Numbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy.</summary>
        public bool? SkipUnhealthy { get; set; }
        /// <summary>If set to true, Number Pool will try to choose the same sending number for all messages to a particularrecipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a newnumber will be chosen.</summary>
        public bool? StickySender { get; set; }
        /// <summary>Defines the probability weight for a Toll Free number to be selected when sending a message.The higher the weight the higher the probability. The sum of the weights for all number typesdoes not necessarily need to add to 100. Weight must be a non-negative number, and when equalto zero it will remove the number type from the pool.</summary>
        public double? TollFreeWeight { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.NumberPoolSettings"/> and sets the default values.
        /// </summary>
        public NumberPoolSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.NumberPoolSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.NumberPoolSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.NumberPoolSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "geomatch", n => { Geomatch = n.GetBoolValue(); } },
                { "long_code_weight", n => { LongCodeWeight = n.GetDoubleValue(); } },
                { "skip_unhealthy", n => { SkipUnhealthy = n.GetBoolValue(); } },
                { "sticky_sender", n => { StickySender = n.GetBoolValue(); } },
                { "toll_free_weight", n => { TollFreeWeight = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("geomatch", Geomatch);
            writer.WriteDoubleValue("long_code_weight", LongCodeWeight);
            writer.WriteBoolValue("skip_unhealthy", SkipUnhealthy);
            writer.WriteBoolValue("sticky_sender", StickySender);
            writer.WriteDoubleValue("toll_free_weight", TollFreeWeight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
