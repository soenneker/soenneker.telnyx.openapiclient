// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OutboundCallRecording : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When call_recording_type is &apos;by_caller_phone_number&apos;, only outbound calls using one of these numbers will be recorded. Numbers must be specified in E164 format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CallRecordingCallerPhoneNumbers { get; set; }
#nullable restore
#else
        public List<string> CallRecordingCallerPhoneNumbers { get; set; }
#endif
        /// <summary>When using &apos;dual&apos; channels, the final audio file will be a stereo recording with the first leg on channel A, and the rest on channel B.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_channels? CallRecordingChannels { get; set; }
        /// <summary>The audio file format for calls being recorded.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_format? CallRecordingFormat { get; set; }
        /// <summary>Specifies which calls are recorded.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_type? CallRecordingType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording"/> and sets the default values.
        /// </summary>
        public OutboundCallRecording()
        {
            AdditionalData = new Dictionary<string, object>();
            CallRecordingChannels = global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_channels.Single;
            CallRecordingFormat = global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_format.Wav;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_recording_caller_phone_numbers", n => { CallRecordingCallerPhoneNumbers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "call_recording_channels", n => { CallRecordingChannels = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_channels>(); } },
                { "call_recording_format", n => { CallRecordingFormat = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_format>(); } },
                { "call_recording_type", n => { CallRecordingType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("call_recording_caller_phone_numbers", CallRecordingCallerPhoneNumbers);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_channels>("call_recording_channels", CallRecordingChannels);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_format>("call_recording_format", CallRecordingFormat);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.OutboundCallRecording_call_recording_type>("call_recording_type", CallRecordingType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
