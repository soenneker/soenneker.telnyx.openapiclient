// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SimCardUsageDetailRecord : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Event close time</summary>
        public DateTimeOffset? ClosedAt { get; set; }
        /// <summary>Event creation time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Telnyx account currency used to describe monetary values, including billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Data cost</summary>
        public double? DataCost { get; set; }
        /// <summary>Currency amount per billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataRate { get; set; }
#nullable restore
#else
        public string DataRate { get; set; }
#endif
        /// <summary>Unit of wireless link consumption</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataUnit { get; set; }
#nullable restore
#else
        public string DataUnit { get; set; }
#endif
        /// <summary>Number of megabytes downloaded</summary>
        public double? DownlinkData { get; set; }
        /// <summary>Unique identifier for this SIM Card Usage</summary>
        public Guid? Id { get; set; }
        /// <summary>International Mobile Subscriber Identity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imsi { get; set; }
#nullable restore
#else
        public string Imsi { get; set; }
#endif
        /// <summary>Ip address that generated the event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>Mobile country code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mcc { get; set; }
#nullable restore
#else
        public string Mcc { get; set; }
#endif
        /// <summary>Mobile network code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mnc { get; set; }
#nullable restore
#else
        public string Mnc { get; set; }
#endif
        /// <summary>Telephone number associated to SIM card</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber { get; set; }
#nullable restore
#else
        public string PhoneNumber { get; set; }
#endif
        /// <summary>The record_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Unique identifier for SIM card</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SimCardId { get; set; }
#nullable restore
#else
        public string SimCardId { get; set; }
#endif
        /// <summary>User-provided tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SimCardTags { get; set; }
#nullable restore
#else
        public string SimCardTags { get; set; }
#endif
        /// <summary>Unique identifier for SIM group</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SimGroupId { get; set; }
#nullable restore
#else
        public string SimGroupId { get; set; }
#endif
        /// <summary>Sim group name for sim card</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SimGroupName { get; set; }
#nullable restore
#else
        public string SimGroupName { get; set; }
#endif
        /// <summary>Number of megabytes uploaded</summary>
        public double? UplinkData { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.SimCardUsageDetailRecord"/> and sets the default values.
        /// </summary>
        public SimCardUsageDetailRecord()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordType = "sim_card_usage";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.SimCardUsageDetailRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.SimCardUsageDetailRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.SimCardUsageDetailRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "closed_at", n => { ClosedAt = n.GetDateTimeOffsetValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "data_cost", n => { DataCost = n.GetDoubleValue(); } },
                { "data_rate", n => { DataRate = n.GetStringValue(); } },
                { "data_unit", n => { DataUnit = n.GetStringValue(); } },
                { "downlink_data", n => { DownlinkData = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imsi", n => { Imsi = n.GetStringValue(); } },
                { "ip_address", n => { IpAddress = n.GetStringValue(); } },
                { "mcc", n => { Mcc = n.GetStringValue(); } },
                { "mnc", n => { Mnc = n.GetStringValue(); } },
                { "phone_number", n => { PhoneNumber = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "sim_card_id", n => { SimCardId = n.GetStringValue(); } },
                { "sim_card_tags", n => { SimCardTags = n.GetStringValue(); } },
                { "sim_group_id", n => { SimGroupId = n.GetStringValue(); } },
                { "sim_group_name", n => { SimGroupName = n.GetStringValue(); } },
                { "uplink_data", n => { UplinkData = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("closed_at", ClosedAt);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDoubleValue("data_cost", DataCost);
            writer.WriteStringValue("data_rate", DataRate);
            writer.WriteStringValue("data_unit", DataUnit);
            writer.WriteDoubleValue("downlink_data", DownlinkData);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("imsi", Imsi);
            writer.WriteStringValue("ip_address", IpAddress);
            writer.WriteStringValue("mcc", Mcc);
            writer.WriteStringValue("mnc", Mnc);
            writer.WriteStringValue("phone_number", PhoneNumber);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("sim_card_id", SimCardId);
            writer.WriteStringValue("sim_card_tags", SimCardTags);
            writer.WriteStringValue("sim_group_id", SimGroupId);
            writer.WriteStringValue("sim_group_name", SimGroupName);
            writer.WriteDoubleValue("uplink_data", UplinkData);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
