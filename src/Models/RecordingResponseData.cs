// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecordingResponseData : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifier and token for controlling the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallControlId { get; set; }
#nullable restore
#else
        public string CallControlId { get; set; }
#endif
        /// <summary>ID unique to the call leg (used to correlate webhook events).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLegId { get; set; }
#nullable restore
#else
        public string CallLegId { get; set; }
#endif
        /// <summary>ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallSessionId { get; set; }
#nullable restore
#else
        public string CallSessionId { get; set; }
#endif
        /// <summary>When `dual`, the final audio file has the first leg on channel A, and the rest on channel B.</summary>
        public global::Soenneker.Telnyx.Models.RecordingResponseData_channels? Channels { get; set; }
        /// <summary>Uniquely identifies the conference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceId { get; set; }
#nullable restore
#else
        public string ConferenceId { get; set; }
#endif
        /// <summary>ISO 8601 formatted date indicating when the resource was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Links to download the recording files.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.Models.RecordingResponseData_download_urls? DownloadUrls { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.Models.RecordingResponseData_download_urls DownloadUrls { get; set; }
#endif
        /// <summary>The duration of the recording in milliseconds.</summary>
        public int? DurationMillis { get; set; }
        /// <summary>Uniquely identifies the recording.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>ISO 8601 formatted date of when the recording ended.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingEndedAt { get; set; }
#nullable restore
#else
        public string RecordingEndedAt { get; set; }
#endif
        /// <summary>ISO 8601 formatted date of when the recording started.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordingStartedAt { get; set; }
#nullable restore
#else
        public string RecordingStartedAt { get; set; }
#endif
        /// <summary>The record_type property</summary>
        public global::Soenneker.Telnyx.Models.RecordingResponseData_record_type? RecordType { get; set; }
        /// <summary>The kind of event that led to this recording being created.</summary>
        public global::Soenneker.Telnyx.Models.RecordingResponseData_source? Source { get; set; }
        /// <summary>The status of the recording. Only `completed` recordings are currently supported.</summary>
        public global::Soenneker.Telnyx.Models.RecordingResponseData_status? Status { get; set; }
        /// <summary>ISO 8601 formatted date indicating when the resource was updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.RecordingResponseData"/> and sets the default values.
        /// </summary>
        public RecordingResponseData()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.RecordingResponseData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.RecordingResponseData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.RecordingResponseData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_control_id", n => { CallControlId = n.GetStringValue(); } },
                { "call_leg_id", n => { CallLegId = n.GetStringValue(); } },
                { "call_session_id", n => { CallSessionId = n.GetStringValue(); } },
                { "channels", n => { Channels = n.GetEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_channels>(); } },
                { "conference_id", n => { ConferenceId = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "download_urls", n => { DownloadUrls = n.GetObjectValue<global::Soenneker.Telnyx.Models.RecordingResponseData_download_urls>(global::Soenneker.Telnyx.Models.RecordingResponseData_download_urls.CreateFromDiscriminatorValue); } },
                { "duration_millis", n => { DurationMillis = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_record_type>(); } },
                { "recording_ended_at", n => { RecordingEndedAt = n.GetStringValue(); } },
                { "recording_started_at", n => { RecordingStartedAt = n.GetStringValue(); } },
                { "source", n => { Source = n.GetEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_source>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_status>(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("call_control_id", CallControlId);
            writer.WriteStringValue("call_leg_id", CallLegId);
            writer.WriteStringValue("call_session_id", CallSessionId);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_channels>("channels", Channels);
            writer.WriteStringValue("conference_id", ConferenceId);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::Soenneker.Telnyx.Models.RecordingResponseData_download_urls>("download_urls", DownloadUrls);
            writer.WriteIntValue("duration_millis", DurationMillis);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("recording_ended_at", RecordingEndedAt);
            writer.WriteStringValue("recording_started_at", RecordingStartedAt);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_record_type>("record_type", RecordType);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_source>("source", Source);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.RecordingResponseData_status>("status", Status);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
