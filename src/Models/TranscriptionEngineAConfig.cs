// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TranscriptionEngineAConfig : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Enables speaker diarization.</summary>
        public bool? EnableSpeakerDiarization { get; set; }
        /// <summary>Hints to improve transcription accuracy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Hints { get; set; }
#nullable restore
#else
        public List<string> Hints { get; set; }
#endif
        /// <summary>Whether to send also interim results. If set to false, only final results will be sent.</summary>
        public bool? InterimResults { get; set; }
        /// <summary>Language to use for speech recognition</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.GoogleTranscriptionLanguage? Language { get; set; }
        /// <summary>Defines maximum number of speakers in the conversation.</summary>
        public int? MaxSpeakerCount { get; set; }
        /// <summary>Defines minimum number of speakers in the conversation.</summary>
        public int? MinSpeakerCount { get; set; }
        /// <summary>The model to use for transcription.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_model? Model { get; set; }
        /// <summary>Enables profanity_filter.</summary>
        public bool? ProfanityFilter { get; set; }
        /// <summary>Speech context to improve transcription accuracy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_speech_context>? SpeechContext { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_speech_context> SpeechContext { get; set; }
#endif
        /// <summary>Enables enhanced transcription, this works for models `phone_call` and `video`.</summary>
        public bool? UseEnhanced { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig"/> and sets the default values.
        /// </summary>
        public TranscriptionEngineAConfig()
        {
            AdditionalData = new Dictionary<string, object>();
            Language = global::Soenneker.Telnyx.OpenApiClient.Models.GoogleTranscriptionLanguage.En;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enable_speaker_diarization", n => { EnableSpeakerDiarization = n.GetBoolValue(); } },
                { "hints", n => { Hints = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "interim_results", n => { InterimResults = n.GetBoolValue(); } },
                { "language", n => { Language = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.GoogleTranscriptionLanguage>(); } },
                { "max_speaker_count", n => { MaxSpeakerCount = n.GetIntValue(); } },
                { "min_speaker_count", n => { MinSpeakerCount = n.GetIntValue(); } },
                { "model", n => { Model = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_model>(); } },
                { "profanity_filter", n => { ProfanityFilter = n.GetBoolValue(); } },
                { "speech_context", n => { SpeechContext = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_speech_context>(global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_speech_context.CreateFromDiscriminatorValue)?.AsList(); } },
                { "use_enhanced", n => { UseEnhanced = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enable_speaker_diarization", EnableSpeakerDiarization);
            writer.WriteCollectionOfPrimitiveValues<string>("hints", Hints);
            writer.WriteBoolValue("interim_results", InterimResults);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.GoogleTranscriptionLanguage>("language", Language);
            writer.WriteIntValue("max_speaker_count", MaxSpeakerCount);
            writer.WriteIntValue("min_speaker_count", MinSpeakerCount);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_model>("model", Model);
            writer.WriteBoolValue("profanity_filter", ProfanityFilter);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.TranscriptionEngineAConfig_speech_context>("speech_context", SpeechContext);
            writer.WriteBoolValue("use_enhanced", UseEnhanced);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
