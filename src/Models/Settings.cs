// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// The settings associated with the authentication provider.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Settings : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The certificate fingerprint for the identity provider (IdP)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdpCertFingerprint { get; set; }
#nullable restore
#else
        public string IdpCertFingerprint { get; set; }
#endif
        /// <summary>The algorithm used to generate the identity provider&apos;s (IdP) certificate fingerprint</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Settings_idp_cert_fingerprint_algorithm? IdpCertFingerprintAlgorithm { get; set; }
        /// <summary>The Entity ID for the identity provider (IdP).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdpEntityId { get; set; }
#nullable restore
#else
        public string IdpEntityId { get; set; }
#endif
        /// <summary>The SSO target url for the identity provider (IdP).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdpSsoTargetUrl { get; set; }
#nullable restore
#else
        public string IdpSsoTargetUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Settings"/> and sets the default values.
        /// </summary>
        public Settings()
        {
            AdditionalData = new Dictionary<string, object>();
            IdpCertFingerprintAlgorithm = global::Soenneker.Telnyx.OpenApiClient.Models.Settings_idp_cert_fingerprint_algorithm.Sha1;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Settings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.Settings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.Settings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "idp_cert_fingerprint", n => { IdpCertFingerprint = n.GetStringValue(); } },
                { "idp_cert_fingerprint_algorithm", n => { IdpCertFingerprintAlgorithm = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Settings_idp_cert_fingerprint_algorithm>(); } },
                { "idp_entity_id", n => { IdpEntityId = n.GetStringValue(); } },
                { "idp_sso_target_url", n => { IdpSsoTargetUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("idp_cert_fingerprint", IdpCertFingerprint);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Settings_idp_cert_fingerprint_algorithm>("idp_cert_fingerprint_algorithm", IdpCertFingerprintAlgorithm);
            writer.WriteStringValue("idp_entity_id", IdpEntityId);
            writer.WriteStringValue("idp_sso_target_url", IdpSsoTargetUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
