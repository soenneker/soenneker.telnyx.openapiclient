// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class QueueCall : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifier and token for controlling the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallControlId { get; set; }
#nullable restore
#else
        public string CallControlId { get; set; }
#endif
        /// <summary>ID that is unique to the call and can be used to correlate webhook events</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLegId { get; set; }
#nullable restore
#else
        public string CallLegId { get; set; }
#endif
        /// <summary>ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallSessionId { get; set; }
#nullable restore
#else
        public string CallSessionId { get; set; }
#endif
        /// <summary>Call Control App ID (formerly Telnyx connection ID) used in the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionId { get; set; }
#nullable restore
#else
        public string ConnectionId { get; set; }
#endif
        /// <summary>ISO 8601 formatted date of when the call was put in the queue</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnqueuedAt { get; set; }
#nullable restore
#else
        public string EnqueuedAt { get; set; }
#endif
        /// <summary>Number or SIP URI placing the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>Unique identifier of the queue the call is in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? QueueId { get; set; }
#nullable restore
#else
        public string QueueId { get; set; }
#endif
        /// <summary>Current position of the call in the queue</summary>
        public int? QueuePosition { get; set; }
        /// <summary>The record_type property</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall_record_type? RecordType { get; set; }
        /// <summary>Destination number or SIP URI of the call.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? To { get; set; }
#nullable restore
#else
        public string To { get; set; }
#endif
        /// <summary>The time the call has been waiting in the queue, given in seconds</summary>
        public int? WaitTimeSecs { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall"/> and sets the default values.
        /// </summary>
        public QueueCall()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_control_id", n => { CallControlId = n.GetStringValue(); } },
                { "call_leg_id", n => { CallLegId = n.GetStringValue(); } },
                { "call_session_id", n => { CallSessionId = n.GetStringValue(); } },
                { "connection_id", n => { ConnectionId = n.GetStringValue(); } },
                { "enqueued_at", n => { EnqueuedAt = n.GetStringValue(); } },
                { "from", n => { From = n.GetStringValue(); } },
                { "queue_id", n => { QueueId = n.GetStringValue(); } },
                { "queue_position", n => { QueuePosition = n.GetIntValue(); } },
                { "record_type", n => { RecordType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall_record_type>(); } },
                { "to", n => { To = n.GetStringValue(); } },
                { "wait_time_secs", n => { WaitTimeSecs = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("call_control_id", CallControlId);
            writer.WriteStringValue("call_leg_id", CallLegId);
            writer.WriteStringValue("call_session_id", CallSessionId);
            writer.WriteStringValue("connection_id", ConnectionId);
            writer.WriteStringValue("enqueued_at", EnqueuedAt);
            writer.WriteStringValue("from", From);
            writer.WriteStringValue("queue_id", QueueId);
            writer.WriteIntValue("queue_position", QueuePosition);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.QueueCall_record_type>("record_type", RecordType);
            writer.WriteStringValue("to", To);
            writer.WriteIntValue("wait_time_secs", WaitTimeSecs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
