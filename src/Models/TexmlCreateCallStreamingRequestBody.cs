// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TexmlCreateCallStreamingRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates codec for bidirectional streaming RTP payloads. Used only with stream_bidirectional_mode=rtp. Case sensitive.</summary>
        public global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamCodec? BidirectionalCodec { get; set; }
        /// <summary>Configures method of bidirectional streaming (mp3, rtp).</summary>
        public global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamMode? BidirectionalMode { get; set; }
        /// <summary>The user specified name of Stream.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Url where status callbacks will be sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusCallback { get; set; }
#nullable restore
#else
        public string StatusCallback { get; set; }
#endif
        /// <summary>HTTP method used to send status callbacks.</summary>
        public global::Soenneker.Telnyx.Models.TexmlStatusCallbackMethod? StatusCallbackMethod { get; set; }
        /// <summary>Tracks to be included in the stream</summary>
        public global::Soenneker.Telnyx.Models.StreamTrack? Track { get; set; }
        /// <summary>The destination WebSocket address where the stream is going to be delivered.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.TexmlCreateCallStreamingRequestBody"/> and sets the default values.
        /// </summary>
        public TexmlCreateCallStreamingRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
            BidirectionalCodec = global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamCodec.PCMU;
            BidirectionalMode = global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamMode.Mp3;
            StatusCallbackMethod = global::Soenneker.Telnyx.Models.TexmlStatusCallbackMethod.POST;
            Track = global::Soenneker.Telnyx.Models.StreamTrack.Inbound_track;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.TexmlCreateCallStreamingRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.TexmlCreateCallStreamingRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.TexmlCreateCallStreamingRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "BidirectionalCodec", n => { BidirectionalCodec = n.GetEnumValue<global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamCodec>(); } },
                { "BidirectionalMode", n => { BidirectionalMode = n.GetEnumValue<global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamMode>(); } },
                { "Name", n => { Name = n.GetStringValue(); } },
                { "StatusCallback", n => { StatusCallback = n.GetStringValue(); } },
                { "StatusCallbackMethod", n => { StatusCallbackMethod = n.GetEnumValue<global::Soenneker.Telnyx.Models.TexmlStatusCallbackMethod>(); } },
                { "Track", n => { Track = n.GetEnumValue<global::Soenneker.Telnyx.Models.StreamTrack>(); } },
                { "Url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamCodec>("BidirectionalCodec", BidirectionalCodec);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.TexmlBidirectionalStreamMode>("BidirectionalMode", BidirectionalMode);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("StatusCallback", StatusCallback);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.TexmlStatusCallbackMethod>("StatusCallbackMethod", StatusCallbackMethod);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.StreamTrack>("Track", Track);
            writer.WriteStringValue("Url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
