// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BridgeRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Call Control ID of the call you want to bridge with, can&apos;t be used together with queue parameter or video_room_id parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallControlId { get; set; }
#nullable restore
#else
        public string CallControlId { get; set; }
#endif
        /// <summary>Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientState { get; set; }
#nullable restore
#else
        public string ClientState { get; set; }
#endif
        /// <summary>Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommandId { get; set; }
#nullable restore
#else
        public string CommandId { get; set; }
#endif
        /// <summary>Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParkAfterUnbridge { get; set; }
#nullable restore
#else
        public string ParkAfterUnbridge { get; set; }
#endif
        /// <summary>Specifies whether to play a ringtone if the call you want to bridge with has not yet been answered.</summary>
        public bool? PlayRingtone { get; set; }
        /// <summary>The name of the queue you want to bridge with, can&apos;t be used together with call_control_id parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Queue { get; set; }
#nullable restore
#else
        public string Queue { get; set; }
#endif
        /// <summary>Start recording automatically after an event. Disabled by default.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record? Record { get; set; }
        /// <summary>Defines which channel should be recorded (&apos;single&apos; or &apos;dual&apos;) when `record` is specified.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_channels? RecordChannels { get; set; }
        /// <summary>The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordCustomFileName { get; set; }
#nullable restore
#else
        public string RecordCustomFileName { get; set; }
#endif
        /// <summary>Defines the format of the recording (&apos;wav&apos; or &apos;mp3&apos;) when `record` is specified.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_format? RecordFormat { get; set; }
        /// <summary>Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).</summary>
        public int? RecordMaxLength { get; set; }
        /// <summary>The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).</summary>
        public int? RecordTimeoutSecs { get; set; }
        /// <summary>The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_track? RecordTrack { get; set; }
        /// <summary>When set to `trim-silence`, silence will be removed from the beginning and end of the recording.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_trim? RecordTrim { get; set; }
        /// <summary>Specifies which country ringtone to play when `play_ringtone` is set to `true`. If not set, the US ringtone will be played.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_ringtone? Ringtone { get; set; }
        /// <summary>The additional parameter that will be passed to the video conference. It is a text field and the user can decide how to use it. For example, you can set the participant name or pass JSON text. It can be used only with video_room_id parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoRoomContext { get; set; }
#nullable restore
#else
        public string VideoRoomContext { get; set; }
#endif
        /// <summary>The ID of the video room you want to bridge with, can&apos;t be used together with call_control_id parameter or queue parameter.</summary>
        public Guid? VideoRoomId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest"/> and sets the default values.
        /// </summary>
        public BridgeRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordChannels = global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_channels.Dual;
            RecordFormat = global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_format.Mp3;
            RecordTrack = global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_track.Both;
            Ringtone = global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_ringtone.Us;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_control_id", n => { CallControlId = n.GetStringValue(); } },
                { "client_state", n => { ClientState = n.GetStringValue(); } },
                { "command_id", n => { CommandId = n.GetStringValue(); } },
                { "park_after_unbridge", n => { ParkAfterUnbridge = n.GetStringValue(); } },
                { "play_ringtone", n => { PlayRingtone = n.GetBoolValue(); } },
                { "queue", n => { Queue = n.GetStringValue(); } },
                { "record", n => { Record = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record>(); } },
                { "record_channels", n => { RecordChannels = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_channels>(); } },
                { "record_custom_file_name", n => { RecordCustomFileName = n.GetStringValue(); } },
                { "record_format", n => { RecordFormat = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_format>(); } },
                { "record_max_length", n => { RecordMaxLength = n.GetIntValue(); } },
                { "record_timeout_secs", n => { RecordTimeoutSecs = n.GetIntValue(); } },
                { "record_track", n => { RecordTrack = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_track>(); } },
                { "record_trim", n => { RecordTrim = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_trim>(); } },
                { "ringtone", n => { Ringtone = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_ringtone>(); } },
                { "video_room_context", n => { VideoRoomContext = n.GetStringValue(); } },
                { "video_room_id", n => { VideoRoomId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("call_control_id", CallControlId);
            writer.WriteStringValue("client_state", ClientState);
            writer.WriteStringValue("command_id", CommandId);
            writer.WriteStringValue("park_after_unbridge", ParkAfterUnbridge);
            writer.WriteBoolValue("play_ringtone", PlayRingtone);
            writer.WriteStringValue("queue", Queue);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record>("record", Record);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_channels>("record_channels", RecordChannels);
            writer.WriteStringValue("record_custom_file_name", RecordCustomFileName);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_format>("record_format", RecordFormat);
            writer.WriteIntValue("record_max_length", RecordMaxLength);
            writer.WriteIntValue("record_timeout_secs", RecordTimeoutSecs);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_track>("record_track", RecordTrack);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_record_trim>("record_trim", RecordTrim);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.BridgeRequest_ringtone>("ringtone", Ringtone);
            writer.WriteStringValue("video_room_context", VideoRoomContext);
            writer.WriteGuidValue("video_room_id", VideoRoomId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
