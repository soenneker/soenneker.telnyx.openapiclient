// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MessageDetailRecord : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Country-specific carrier used to send or receive the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Carrier { get; set; }
#nullable restore
#else
        public string Carrier { get; set; }
#endif
        /// <summary>Fee charged by certain carriers in order to deliver certain message types. Telnyx passes this fee on to the customer according to our pricing table</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CarrierFee { get; set; }
#nullable restore
#else
        public string CarrierFee { get; set; }
#endif
        /// <summary>The recipient of the message (to parameter in the Messaging API)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cld { get; set; }
#nullable restore
#else
        public string Cld { get; set; }
#endif
        /// <summary>The sender of the message (from parameter in the Messaging API). For Alphanumeric ID messages, this is the sender ID value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cli { get; set; }
#nullable restore
#else
        public string Cli { get; set; }
#endif
        /// <summary>Message completion time</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>Amount, in the user currency, for the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cost { get; set; }
#nullable restore
#else
        public string Cost { get; set; }
#endif
        /// <summary>Two-letter representation of the country of the cld property using the ISO 3166-1 alpha-2 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Message creation time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Telnyx account currency used to describe monetary values, including billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Final webhook delivery status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryStatus { get; set; }
#nullable restore
#else
        public string DeliveryStatus { get; set; }
#endif
        /// <summary>Failover customer-provided URL which Telnyx posts delivery status webhooks to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryStatusFailoverUrl { get; set; }
#nullable restore
#else
        public string DeliveryStatusFailoverUrl { get; set; }
#endif
        /// <summary>Primary customer-provided URL which Telnyx posts delivery status webhooks to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryStatusWebhookUrl { get; set; }
#nullable restore
#else
        public string DeliveryStatusWebhookUrl { get; set; }
#endif
        /// <summary>Logical direction of the message from the Telnyx customer&apos;s perspective. It&apos;s inbound when the Telnyx customer receives the message, or outbound otherwise</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_direction? Direction { get; set; }
        /// <summary>Telnyx API error codes returned by the Telnyx gateway</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Errors { get; set; }
#nullable restore
#else
        public List<string> Errors { get; set; }
#endif
        /// <summary>Indicates whether this is a Free-To-End-User (FTEU) short code message</summary>
        public bool? Fteu { get; set; }
        /// <summary>Mobile country code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mcc { get; set; }
#nullable restore
#else
        public string Mcc { get; set; }
#endif
        /// <summary>Describes the Messaging service used to send the message. Available services are: Short Message Service (SMS), Multimedia Messaging Service (MMS), and Rich Communication Services (RCS)</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_message_type? MessageType { get; set; }
        /// <summary>Mobile network code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mnc { get; set; }
#nullable restore
#else
        public string Mnc { get; set; }
#endif
        /// <summary>Indicates whether both sender and recipient numbers are Telnyx-managed</summary>
        public bool? OnNet { get; set; }
        /// <summary>Number of message parts. The message is broken down in multiple parts when its length surpasses the limit of 160 characters</summary>
        public int? Parts { get; set; }
        /// <summary>Unique identifier of the Messaging Profile used to send or receive the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileId { get; set; }
#nullable restore
#else
        public string ProfileId { get; set; }
#endif
        /// <summary>Name of the Messaging Profile used to send or receive the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileName { get; set; }
#nullable restore
#else
        public string ProfileName { get; set; }
#endif
        /// <summary>Currency amount per billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rate { get; set; }
#nullable restore
#else
        public string Rate { get; set; }
#endif
        /// <summary>Identifies the record schema</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Time when the message was sent</summary>
        public DateTimeOffset? SentAt { get; set; }
        /// <summary>Two-letter representation of the country of the cli property using the ISO 3166-1 alpha-2 format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceCountryCode { get; set; }
#nullable restore
#else
        public string SourceCountryCode { get; set; }
#endif
        /// <summary>Final status of the message after the delivery attempt</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_status? Status { get; set; }
        /// <summary>Comma-separated tags assigned to the Telnyx number associated with the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tags { get; set; }
#nullable restore
#else
        public string Tags { get; set; }
#endif
        /// <summary>Message updated time</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Identifier of the Telnyx account who owns the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Unique identifier of the message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uuid { get; set; }
#nullable restore
#else
        public string Uuid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord"/> and sets the default values.
        /// </summary>
        public MessageDetailRecord()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordType = "message_detail_record";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "carrier", n => { Carrier = n.GetStringValue(); } },
                { "carrier_fee", n => { CarrierFee = n.GetStringValue(); } },
                { "cld", n => { Cld = n.GetStringValue(); } },
                { "cli", n => { Cli = n.GetStringValue(); } },
                { "completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "cost", n => { Cost = n.GetStringValue(); } },
                { "country_code", n => { CountryCode = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "delivery_status", n => { DeliveryStatus = n.GetStringValue(); } },
                { "delivery_status_failover_url", n => { DeliveryStatusFailoverUrl = n.GetStringValue(); } },
                { "delivery_status_webhook_url", n => { DeliveryStatusWebhookUrl = n.GetStringValue(); } },
                { "direction", n => { Direction = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_direction>(); } },
                { "errors", n => { Errors = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fteu", n => { Fteu = n.GetBoolValue(); } },
                { "mcc", n => { Mcc = n.GetStringValue(); } },
                { "message_type", n => { MessageType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_message_type>(); } },
                { "mnc", n => { Mnc = n.GetStringValue(); } },
                { "on_net", n => { OnNet = n.GetBoolValue(); } },
                { "parts", n => { Parts = n.GetIntValue(); } },
                { "profile_id", n => { ProfileId = n.GetStringValue(); } },
                { "profile_name", n => { ProfileName = n.GetStringValue(); } },
                { "rate", n => { Rate = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "sent_at", n => { SentAt = n.GetDateTimeOffsetValue(); } },
                { "source_country_code", n => { SourceCountryCode = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_status>(); } },
                { "tags", n => { Tags = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "user_id", n => { UserId = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("carrier", Carrier);
            writer.WriteStringValue("carrier_fee", CarrierFee);
            writer.WriteStringValue("cld", Cld);
            writer.WriteStringValue("cli", Cli);
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteStringValue("cost", Cost);
            writer.WriteStringValue("country_code", CountryCode);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("delivery_status", DeliveryStatus);
            writer.WriteStringValue("delivery_status_failover_url", DeliveryStatusFailoverUrl);
            writer.WriteStringValue("delivery_status_webhook_url", DeliveryStatusWebhookUrl);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_direction>("direction", Direction);
            writer.WriteCollectionOfPrimitiveValues<string>("errors", Errors);
            writer.WriteBoolValue("fteu", Fteu);
            writer.WriteStringValue("mcc", Mcc);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_message_type>("message_type", MessageType);
            writer.WriteStringValue("mnc", Mnc);
            writer.WriteBoolValue("on_net", OnNet);
            writer.WriteIntValue("parts", Parts);
            writer.WriteStringValue("profile_id", ProfileId);
            writer.WriteStringValue("profile_name", ProfileName);
            writer.WriteStringValue("rate", Rate);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteDateTimeOffsetValue("sent_at", SentAt);
            writer.WriteStringValue("source_country_code", SourceCountryCode);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.MessageDetailRecord_status>("status", Status);
            writer.WriteStringValue("tags", Tags);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("user_id", UserId);
            writer.WriteStringValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
