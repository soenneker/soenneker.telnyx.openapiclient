// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Fax : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>State received from a command.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientState { get; set; }
#nullable restore
#else
        public string ClientState { get; set; }
#endif
        /// <summary>The ID of the connection used to send the fax.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionId { get; set; }
#nullable restore
#else
        public string ConnectionId { get; set; }
#endif
        /// <summary>ISO 8601 timestamp when resource was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The direction of the fax.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Direction? Direction { get; set; }
        /// <summary>The phone number, in E.164 format, the fax will be sent from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>The string used as the caller id name (SIP From Display Name) presented to the destination (`to` number).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromDisplayName { get; set; }
#nullable restore
#else
        public string FromDisplayName { get; set; }
#endif
        /// <summary>Identifies the type of resource.</summary>
        public Guid? Id { get; set; }
        /// <summary>The media_name used for the fax&apos;s media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can&apos;t be submitted together.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaName { get; set; }
#nullable restore
#else
        public string MediaName { get; set; }
#endif
        /// <summary>The URL (or list of URLs) to the PDF used for the fax&apos;s media. media_url and media_name/contents can&apos;t be submitted together.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaUrl { get; set; }
#nullable restore
#else
        public string MediaUrl { get; set; }
#endif
        /// <summary>If `store_preview` was set to `true`, this is a link to temporary location. Link expires after 10 minutes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviewUrl { get; set; }
#nullable restore
#else
        public string PreviewUrl { get; set; }
#endif
        /// <summary>The quality of the fax. The `ultra` settings provides the highest quality available, but also present longer fax processing times. `ultra_light` is best suited for images, wihle `ultra_dark` is best suited for text.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Quality? Quality { get; set; }
        /// <summary>Identifies the type of the resource.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Fax_record_type? RecordType { get; set; }
        /// <summary>Status of the fax</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Fax_status? Status { get; set; }
        /// <summary>If store_media was set to true, this is a link to temporary location. Link expires after 10 minutes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StoredMediaUrl { get; set; }
#nullable restore
#else
        public string StoredMediaUrl { get; set; }
#endif
        /// <summary>Should fax media be stored on temporary URL. It does not support media_name.</summary>
        public bool? StoreMedia { get; set; }
        /// <summary>The phone number, in E.164 format, the fax will be sent to or SIP URI</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? To { get; set; }
#nullable restore
#else
        public string To { get; set; }
#endif
        /// <summary>ISO 8601 timestamp when resource was updated</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>Optional failover URL that will receive fax webhooks if webhook_url doesn&apos;t return a 2XX response</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookFailoverUrl { get; set; }
#nullable restore
#else
        public string WebhookFailoverUrl { get; set; }
#endif
        /// <summary>URL that will receive fax webhooks</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Fax"/> and sets the default values.
        /// </summary>
        public Fax()
        {
            AdditionalData = new Dictionary<string, object>();
            Quality = global::Soenneker.Telnyx.OpenApiClient.Models.Quality.High;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Fax"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.Fax CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.Fax();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "client_state", n => { ClientState = n.GetStringValue(); } },
                { "connection_id", n => { ConnectionId = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "direction", n => { Direction = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Direction>(); } },
                { "from", n => { From = n.GetStringValue(); } },
                { "from_display_name", n => { FromDisplayName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "media_name", n => { MediaName = n.GetStringValue(); } },
                { "media_url", n => { MediaUrl = n.GetStringValue(); } },
                { "preview_url", n => { PreviewUrl = n.GetStringValue(); } },
                { "quality", n => { Quality = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Quality>(); } },
                { "record_type", n => { RecordType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Fax_record_type>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Fax_status>(); } },
                { "store_media", n => { StoreMedia = n.GetBoolValue(); } },
                { "stored_media_url", n => { StoredMediaUrl = n.GetStringValue(); } },
                { "to", n => { To = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "webhook_failover_url", n => { WebhookFailoverUrl = n.GetStringValue(); } },
                { "webhook_url", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("client_state", ClientState);
            writer.WriteStringValue("connection_id", ConnectionId);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Direction>("direction", Direction);
            writer.WriteStringValue("from", From);
            writer.WriteStringValue("from_display_name", FromDisplayName);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("media_name", MediaName);
            writer.WriteStringValue("media_url", MediaUrl);
            writer.WriteStringValue("preview_url", PreviewUrl);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Quality>("quality", Quality);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Fax_record_type>("record_type", RecordType);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Fax_status>("status", Status);
            writer.WriteStringValue("stored_media_url", StoredMediaUrl);
            writer.WriteBoolValue("store_media", StoreMedia);
            writer.WriteStringValue("to", To);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteStringValue("webhook_failover_url", WebhookFailoverUrl);
            writer.WriteStringValue("webhook_url", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
