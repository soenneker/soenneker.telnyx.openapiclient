// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConferenceDetailRecord : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Telnyx UUID that identifies the conference call leg</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLegId { get; set; }
#nullable restore
#else
        public string CallLegId { get; set; }
#endif
        /// <summary>Duration of the conference call in seconds</summary>
        public int? CallSec { get; set; }
        /// <summary>Telnyx UUID that identifies with conference call session</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallSessionId { get; set; }
#nullable restore
#else
        public string CallSessionId { get; set; }
#endif
        /// <summary>Connection id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionId { get; set; }
#nullable restore
#else
        public string ConnectionId { get; set; }
#endif
        /// <summary>Conference end time</summary>
        public DateTimeOffset? EndedAt { get; set; }
        /// <summary>Conference expiry time</summary>
        public DateTimeOffset? ExpiresAt { get; set; }
        /// <summary>Conference id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Indicates whether Telnyx billing charges might be applicable</summary>
        public bool? IsTelnyxBillable { get; set; }
        /// <summary>Conference name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Sum of the conference call duration for all participants in seconds</summary>
        public int? ParticipantCallSec { get; set; }
        /// <summary>Number of participants that joined the conference call</summary>
        public int? ParticipantCount { get; set; }
        /// <summary>The record_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Region where the conference is hosted</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Region { get; set; }
#nullable restore
#else
        public string Region { get; set; }
#endif
        /// <summary>Conference start time</summary>
        public DateTimeOffset? StartedAt { get; set; }
        /// <summary>User id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.ConferenceDetailRecord"/> and sets the default values.
        /// </summary>
        public ConferenceDetailRecord()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordType = "conference_detail_record";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.ConferenceDetailRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.ConferenceDetailRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.ConferenceDetailRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_leg_id", n => { CallLegId = n.GetStringValue(); } },
                { "call_sec", n => { CallSec = n.GetIntValue(); } },
                { "call_session_id", n => { CallSessionId = n.GetStringValue(); } },
                { "connection_id", n => { ConnectionId = n.GetStringValue(); } },
                { "ended_at", n => { EndedAt = n.GetDateTimeOffsetValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_telnyx_billable", n => { IsTelnyxBillable = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "participant_call_sec", n => { ParticipantCallSec = n.GetIntValue(); } },
                { "participant_count", n => { ParticipantCount = n.GetIntValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "region", n => { Region = n.GetStringValue(); } },
                { "started_at", n => { StartedAt = n.GetDateTimeOffsetValue(); } },
                { "user_id", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("call_leg_id", CallLegId);
            writer.WriteIntValue("call_sec", CallSec);
            writer.WriteStringValue("call_session_id", CallSessionId);
            writer.WriteStringValue("connection_id", ConnectionId);
            writer.WriteDateTimeOffsetValue("ended_at", EndedAt);
            writer.WriteDateTimeOffsetValue("expires_at", ExpiresAt);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_telnyx_billable", IsTelnyxBillable);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("participant_call_sec", ParticipantCallSec);
            writer.WriteIntValue("participant_count", ParticipantCount);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("region", Region);
            writer.WriteDateTimeOffsetValue("started_at", StartedAt);
            writer.WriteStringValue("user_id", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
