// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Participant : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Call Control ID associated with the partiipant of the conference</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallControlId { get; set; }
#nullable restore
#else
        public string CallControlId { get; set; }
#endif
        /// <summary>Uniquely identifies the call leg associated with the participant</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLegId { get; set; }
#nullable restore
#else
        public string CallLegId { get; set; }
#endif
        /// <summary>Info about the conference that the participant is in</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.Participant_conference? Conference { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.Participant_conference Conference { get; set; }
#endif
        /// <summary>ISO 8601 formatted date of when the participant was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.</summary>
        public bool? EndConferenceOnExit { get; set; }
        /// <summary>Uniquely identifies the participant</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the participant is muted.</summary>
        public bool? Muted { get; set; }
        /// <summary>Whether the participant is put on_hold.</summary>
        public bool? OnHold { get; set; }
        /// <summary>The record_type property</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Participant_record_type? RecordType { get; set; }
        /// <summary>Whether the conference will end after the participant leaves the conference.</summary>
        public bool? SoftEndConferenceOnExit { get; set; }
        /// <summary>The status of the participant with respect to the lifecycle within the conference</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Participant_status? Status { get; set; }
        /// <summary>ISO 8601 formatted date of when the participant was last updated</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>Array of unique call_control_ids the participant can whisper to..</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WhisperCallControlIds { get; set; }
#nullable restore
#else
        public List<string> WhisperCallControlIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Participant"/> and sets the default values.
        /// </summary>
        public Participant()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Participant"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.Participant CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.Participant();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "call_control_id", n => { CallControlId = n.GetStringValue(); } },
                { "call_leg_id", n => { CallLegId = n.GetStringValue(); } },
                { "conference", n => { Conference = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_conference>(global::Soenneker.Telnyx.OpenApiClient.Models.Participant_conference.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "end_conference_on_exit", n => { EndConferenceOnExit = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "muted", n => { Muted = n.GetBoolValue(); } },
                { "on_hold", n => { OnHold = n.GetBoolValue(); } },
                { "record_type", n => { RecordType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_record_type>(); } },
                { "soft_end_conference_on_exit", n => { SoftEndConferenceOnExit = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_status>(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "whisper_call_control_ids", n => { WhisperCallControlIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("call_control_id", CallControlId);
            writer.WriteStringValue("call_leg_id", CallLegId);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_conference>("conference", Conference);
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteBoolValue("end_conference_on_exit", EndConferenceOnExit);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("muted", Muted);
            writer.WriteBoolValue("on_hold", OnHold);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_record_type>("record_type", RecordType);
            writer.WriteBoolValue("soft_end_conference_on_exit", SoftEndConferenceOnExit);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Participant_status>("status", Status);
            writer.WriteStringValue("updated_at", UpdatedAt);
            writer.WriteCollectionOfPrimitiveValues<string>("whisper_call_control_ids", WhisperCallControlIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
