// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SIMCard : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicate whether the SIM card has any pending (in-progress) actions.</summary>
        public bool? ActionsInProgress { get; private set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of IMEIs authorized to use a given SIM card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedImeis { get; set; }
#nullable restore
#else
        public List<string> AuthorizedImeis { get; set; }
#endif
        /// <summary>ISO 8601 formatted date-time indicating when the resource was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; private set; }
#nullable restore
#else
        public string CreatedAt { get; private set; }
#endif
        /// <summary>The SIM card consumption so far in the current billing cycle.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_billing_period_consumed_data? CurrentBillingPeriodConsumedData { get; private set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_billing_period_consumed_data CurrentBillingPeriodConsumedData { get; private set; }
#endif
        /// <summary>Current physical location data of a given SIM card. Accuracy is given in meters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_device_location? CurrentDeviceLocation { get; private set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_device_location CurrentDeviceLocation { get; private set; }
#endif
        /// <summary>IMEI of the device where a given SIM card is currently being used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentImei { get; private set; }
#nullable restore
#else
        public string CurrentImei { get; private set; }
#endif
        /// <summary>Mobile Country Code of the current network to which the SIM card is connected. It&apos;s a three decimal digit that identifies a country.&lt;br/&gt;&lt;br/&gt;This code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentMcc { get; private set; }
#nullable restore
#else
        public string CurrentMcc { get; private set; }
#endif
        /// <summary>Mobile Network Code of the current network to which the SIM card is connected. It&apos;s a two to three decimal digits that identify a network.&lt;br/&gt;&lt;br/&gt; This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentMnc { get; private set; }
#nullable restore
#else
        public string CurrentMnc { get; private set; }
#endif
        /// <summary>The SIM card individual data limit configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_data_limit? DataLimit { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_data_limit DataLimit { get; set; }
#endif
        /// <summary>The Embedded Identity Document (eID) for eSIM cards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Eid { get; private set; }
#nullable restore
#else
        public string Eid { get; private set; }
#endif
        /// <summary>The installation status of the eSIM. Only applicable for eSIM cards.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_esim_installation_status? EsimInstallationStatus { get; private set; }
        /// <summary>The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card&apos;s memory and are also engraved or printed on the SIM card body during a process called personalization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iccid { get; private set; }
#nullable restore
#else
        public string Iccid { get; private set; }
#endif
        /// <summary>Identifies the resource.</summary>
        public Guid? Id { get; private set; }
        /// <summary>SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). &lt;br/&gt;Mobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Imsi { get; private set; }
#nullable restore
#else
        public string Imsi { get; private set; }
#endif
        /// <summary>The SIM&apos;s address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ipv4 { get; private set; }
#nullable restore
#else
        public string Ipv4 { get; private set; }
#endif
        /// <summary>The SIM&apos;s address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ipv6 { get; private set; }
#nullable restore
#else
        public string Ipv6 { get; private set; }
#endif
        /// <summary>Indicates whether the device is actively connected to a network and able to run data.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_live_data_session? LiveDataSession { get; private set; }
        /// <summary>Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. &lt;br/&gt;MSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber&apos;s operator.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Msisdn { get; private set; }
#nullable restore
#else
        public string Msisdn { get; private set; }
#endif
        /// <summary>PIN and PUK codes for the SIM card. Only available when include_pin_puk_codes=true is set in the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_pin_puk_codes? PinPukCodes { get; private set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_pin_puk_codes PinPukCodes { get; private set; }
#endif
        /// <summary>The record_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; private set; }
#nullable restore
#else
        public string RecordType { get; private set; }
#endif
        /// <summary>List of resources with actions in progress.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_resources_with_in_progress_actions>? ResourcesWithInProgressActions { get; private set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_resources_with_in_progress_actions> ResourcesWithInProgressActions { get; private set; }
#endif
        /// <summary>The group SIMCardGroup identification. This attribute can be &lt;code&gt;null&lt;/code&gt; when it&apos;s present in an associated resource.</summary>
        public Guid? SimCardGroupId { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCardStatus? Status { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCardStatus Status { get; set; }
#endif
        /// <summary>Searchable tags associated with the SIM card</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The type of SIM card</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_type? Type { get; private set; }
        /// <summary>ISO 8601 formatted date-time indicating when the resource was updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; private set; }
#nullable restore
#else
        public string UpdatedAt { get; private set; }
#endif
        /// <summary>The version of the SIM card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; private set; }
#nullable restore
#else
        public string Version { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard"/> and sets the default values.
        /// </summary>
        public SIMCard()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actions_in_progress", n => { ActionsInProgress = n.GetBoolValue(); } },
                { "authorized_imeis", n => { AuthorizedImeis = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "current_billing_period_consumed_data", n => { CurrentBillingPeriodConsumedData = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_billing_period_consumed_data>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_billing_period_consumed_data.CreateFromDiscriminatorValue); } },
                { "current_device_location", n => { CurrentDeviceLocation = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_device_location>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_current_device_location.CreateFromDiscriminatorValue); } },
                { "current_imei", n => { CurrentImei = n.GetStringValue(); } },
                { "current_mcc", n => { CurrentMcc = n.GetStringValue(); } },
                { "current_mnc", n => { CurrentMnc = n.GetStringValue(); } },
                { "data_limit", n => { DataLimit = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_data_limit>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_data_limit.CreateFromDiscriminatorValue); } },
                { "eid", n => { Eid = n.GetStringValue(); } },
                { "esim_installation_status", n => { EsimInstallationStatus = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_esim_installation_status>(); } },
                { "iccid", n => { Iccid = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "imsi", n => { Imsi = n.GetStringValue(); } },
                { "ipv4", n => { Ipv4 = n.GetStringValue(); } },
                { "ipv6", n => { Ipv6 = n.GetStringValue(); } },
                { "live_data_session", n => { LiveDataSession = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_live_data_session>(); } },
                { "msisdn", n => { Msisdn = n.GetStringValue(); } },
                { "pin_puk_codes", n => { PinPukCodes = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_pin_puk_codes>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_pin_puk_codes.CreateFromDiscriminatorValue); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "resources_with_in_progress_actions", n => { ResourcesWithInProgressActions = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_resources_with_in_progress_actions>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_resources_with_in_progress_actions.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sim_card_group_id", n => { SimCardGroupId = n.GetGuidValue(); } },
                { "status", n => { Status = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCardStatus>(global::Soenneker.Telnyx.OpenApiClient.Models.SIMCardStatus.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_type>(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("authorized_imeis", AuthorizedImeis);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCard_data_limit>("data_limit", DataLimit);
            writer.WriteGuidValue("sim_card_group_id", SimCardGroupId);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.SIMCardStatus>("status", Status);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
