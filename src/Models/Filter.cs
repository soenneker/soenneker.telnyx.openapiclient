// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Query filter criteria. Note: The first filter object must specify filter_type as &apos;and&apos;. You cannot follow an &apos;or&apos; with another &apos;and&apos;.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Filter : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Billing group UUID to filter by</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingGroup { get; set; }
#nullable restore
#else
        public string BillingGroup { get; set; }
#endif
        /// <summary>Called line identification (destination number)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cld { get; set; }
#nullable restore
#else
        public string Cld { get; set; }
#endif
        /// <summary>Filter type for CLD matching</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cld_filter? CldFilter { get; set; }
        /// <summary>Calling line identification (caller ID)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cli { get; set; }
#nullable restore
#else
        public string Cli { get; set; }
#endif
        /// <summary>Filter type for CLI matching</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cli_filter? CliFilter { get; set; }
        /// <summary>Logical operator for combining filters</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.Filter_filter_type? FilterType { get; set; }
        /// <summary>Tag name to filter by</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TagsList { get; set; }
#nullable restore
#else
        public string TagsList { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Filter"/> and sets the default values.
        /// </summary>
        public Filter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.Filter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.Filter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.Filter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billing_group", n => { BillingGroup = n.GetStringValue(); } },
                { "cld", n => { Cld = n.GetStringValue(); } },
                { "cld_filter", n => { CldFilter = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cld_filter>(); } },
                { "cli", n => { Cli = n.GetStringValue(); } },
                { "cli_filter", n => { CliFilter = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cli_filter>(); } },
                { "filter_type", n => { FilterType = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_filter_type>(); } },
                { "tags_list", n => { TagsList = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("billing_group", BillingGroup);
            writer.WriteStringValue("cld", Cld);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cld_filter>("cld_filter", CldFilter);
            writer.WriteStringValue("cli", Cli);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_cli_filter>("cli_filter", CliFilter);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.Filter_filter_type>("filter_type", FilterType);
            writer.WriteStringValue("tags_list", TagsList);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
