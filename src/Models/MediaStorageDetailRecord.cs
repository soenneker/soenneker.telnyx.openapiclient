// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaStorageDetailRecord : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Type of action performed against the Media Storage API</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionType { get; set; }
#nullable restore
#else
        public string ActionType { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Asset id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetId { get; set; }
#nullable restore
#else
        public string AssetId { get; set; }
#endif
        /// <summary>Currency amount for Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cost { get; set; }
#nullable restore
#else
        public string Cost { get; set; }
#endif
        /// <summary>Event creation time</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Telnyx account currency used to describe monetary values, including billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Unique identifier for the Media Storage Event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Link channel id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkChannelId { get; set; }
#nullable restore
#else
        public string LinkChannelId { get; set; }
#endif
        /// <summary>Link channel type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LinkChannelType { get; set; }
#nullable restore
#else
        public string LinkChannelType { get; set; }
#endif
        /// <summary>Organization owner id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgId { get; set; }
#nullable restore
#else
        public string OrgId { get; set; }
#endif
        /// <summary>Currency amount per billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rate { get; set; }
#nullable restore
#else
        public string Rate { get; set; }
#endif
        /// <summary>Billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RateMeasuredIn { get; set; }
#nullable restore
#else
        public string RateMeasuredIn { get; set; }
#endif
        /// <summary>The record_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Request status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>User id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Webhook id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookId { get; set; }
#nullable restore
#else
        public string WebhookId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.MediaStorageDetailRecord"/> and sets the default values.
        /// </summary>
        public MediaStorageDetailRecord()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordType = "media_storage";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.MediaStorageDetailRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.MediaStorageDetailRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.MediaStorageDetailRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action_type", n => { ActionType = n.GetStringValue(); } },
                { "asset_id", n => { AssetId = n.GetStringValue(); } },
                { "cost", n => { Cost = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "link_channel_id", n => { LinkChannelId = n.GetStringValue(); } },
                { "link_channel_type", n => { LinkChannelType = n.GetStringValue(); } },
                { "org_id", n => { OrgId = n.GetStringValue(); } },
                { "rate", n => { Rate = n.GetStringValue(); } },
                { "rate_measured_in", n => { RateMeasuredIn = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetStringValue(); } },
                { "webhook_id", n => { WebhookId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action_type", ActionType);
            writer.WriteStringValue("asset_id", AssetId);
            writer.WriteStringValue("cost", Cost);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("link_channel_id", LinkChannelId);
            writer.WriteStringValue("link_channel_type", LinkChannelType);
            writer.WriteStringValue("org_id", OrgId);
            writer.WriteStringValue("rate", Rate);
            writer.WriteStringValue("rate_measured_in", RateMeasuredIn);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("user_id", UserId);
            writer.WriteStringValue("webhook_id", WebhookId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
