// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// When tapped, initiates the corresponding native action on the device.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RCSAction : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Compose and send a message to a destination predefined by chatbot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSComposeAction? ComposeAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSComposeAction ComposeAction { get; set; }
#endif
        /// <summary>Opens the user&apos;s default calendar app and starts the new calendar event flow with the agent-specified event data pre-filled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSCreateCalendarEventAction? CreateCalendarEventAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSCreateCalendarEventAction CreateCalendarEventAction { get; set; }
#endif
        /// <summary>Opens the user&apos;s default dialer app with the agent-specified phone number filled in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSDialAction? DialAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSDialAction DialAction { get; set; }
#endif
        /// <summary>Fallback URL to use if a client doesn&apos;t support a suggested action. Fallback URLs open in new browser windows. Maximum 2048 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FallbackUrl { get; set; }
#nullable restore
#else
        public string FallbackUrl { get; set; }
#endif
        /// <summary>Opens the user&apos;s default web browser app to the specified URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSOpenUrlAction? OpenUrlAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSOpenUrlAction OpenUrlAction { get; set; }
#endif
        /// <summary>Payload (base64 encoded) that will be sent to the agent in the user event that results when the user taps the suggested action. Maximum 2048 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostbackData { get; set; }
#nullable restore
#else
        public string PostbackData { get; set; }
#endif
        /// <summary>Opens the RCS app&apos;s location chooser so the user can pick a location to send back to the agent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSShareLocationAction? ShareLocationAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSShareLocationAction ShareLocationAction { get; set; }
#endif
        /// <summary>Text that is shown in the suggested action. Maximum 25 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>Opens the user&apos;s default map app and selects the agent-specified location.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSViewLocationAction? ViewLocationAction { get; set; }
#nullable restore
#else
        public global::Soenneker.Telnyx.OpenApiClient.Models.RCSViewLocationAction ViewLocationAction { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.RCSAction"/> and sets the default values.
        /// </summary>
        public RCSAction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.RCSAction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.RCSAction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.RCSAction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "compose_action", n => { ComposeAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSComposeAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSComposeAction.CreateFromDiscriminatorValue); } },
                { "create_calendar_event_action", n => { CreateCalendarEventAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSCreateCalendarEventAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSCreateCalendarEventAction.CreateFromDiscriminatorValue); } },
                { "dial_action", n => { DialAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSDialAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSDialAction.CreateFromDiscriminatorValue); } },
                { "fallback_url", n => { FallbackUrl = n.GetStringValue(); } },
                { "open_url_action", n => { OpenUrlAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSOpenUrlAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSOpenUrlAction.CreateFromDiscriminatorValue); } },
                { "postback_data", n => { PostbackData = n.GetStringValue(); } },
                { "share_location_action", n => { ShareLocationAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSShareLocationAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSShareLocationAction.CreateFromDiscriminatorValue); } },
                { "text", n => { Text = n.GetStringValue(); } },
                { "view_location_action", n => { ViewLocationAction = n.GetObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSViewLocationAction>(global::Soenneker.Telnyx.OpenApiClient.Models.RCSViewLocationAction.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSComposeAction>("compose_action", ComposeAction);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSCreateCalendarEventAction>("create_calendar_event_action", CreateCalendarEventAction);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSDialAction>("dial_action", DialAction);
            writer.WriteStringValue("fallback_url", FallbackUrl);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSOpenUrlAction>("open_url_action", OpenUrlAction);
            writer.WriteStringValue("postback_data", PostbackData);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSShareLocationAction>("share_location_action", ShareLocationAction);
            writer.WriteStringValue("text", Text);
            writer.WriteObjectValue<global::Soenneker.Telnyx.OpenApiClient.Models.RCSViewLocationAction>("view_location_action", ViewLocationAction);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
