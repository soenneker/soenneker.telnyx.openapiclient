// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AmdDetailRecord : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Billing Group id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingGroupId { get; set; }
#nullable restore
#else
        public string BillingGroupId { get; set; }
#endif
        /// <summary>Name of the Billing Group specified in billing_group_id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingGroupName { get; set; }
#nullable restore
#else
        public string BillingGroupName { get; set; }
#endif
        /// <summary>Telnyx UUID that identifies the related call leg</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLegId { get; set; }
#nullable restore
#else
        public string CallLegId { get; set; }
#endif
        /// <summary>Telnyx UUID that identifies the related call session</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallSessionId { get; set; }
#nullable restore
#else
        public string CallSessionId { get; set; }
#endif
        /// <summary>Connection id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionId { get; set; }
#nullable restore
#else
        public string ConnectionId { get; set; }
#endif
        /// <summary>Connection name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectionName { get; set; }
#nullable restore
#else
        public string ConnectionName { get; set; }
#endif
        /// <summary>Currency amount for Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cost { get; set; }
#nullable restore
#else
        public string Cost { get; set; }
#endif
        /// <summary>Telnyx account currency used to describe monetary values, including billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Feature name</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord_feature? Feature { get; set; }
        /// <summary>Feature invocation id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Feature invocation time</summary>
        public DateTimeOffset? InvokedAt { get; set; }
        /// <summary>Indicates whether Telnyx billing charges might be applicable</summary>
        public bool? IsTelnyxBillable { get; set; }
        /// <summary>Currency amount per billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rate { get; set; }
#nullable restore
#else
        public string Rate { get; set; }
#endif
        /// <summary>Billing unit used to calculate the Telnyx billing cost</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RateMeasuredIn { get; set; }
#nullable restore
#else
        public string RateMeasuredIn { get; set; }
#endif
        /// <summary>The record_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>User-provided tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tags { get; set; }
#nullable restore
#else
        public string Tags { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord"/> and sets the default values.
        /// </summary>
        public AmdDetailRecord()
        {
            AdditionalData = new Dictionary<string, object>();
            RecordType = "amd_detail_record";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billing_group_id", n => { BillingGroupId = n.GetStringValue(); } },
                { "billing_group_name", n => { BillingGroupName = n.GetStringValue(); } },
                { "call_leg_id", n => { CallLegId = n.GetStringValue(); } },
                { "call_session_id", n => { CallSessionId = n.GetStringValue(); } },
                { "connection_id", n => { ConnectionId = n.GetStringValue(); } },
                { "connection_name", n => { ConnectionName = n.GetStringValue(); } },
                { "cost", n => { Cost = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "feature", n => { Feature = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord_feature>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invoked_at", n => { InvokedAt = n.GetDateTimeOffsetValue(); } },
                { "is_telnyx_billable", n => { IsTelnyxBillable = n.GetBoolValue(); } },
                { "rate", n => { Rate = n.GetStringValue(); } },
                { "rate_measured_in", n => { RateMeasuredIn = n.GetStringValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("billing_group_id", BillingGroupId);
            writer.WriteStringValue("billing_group_name", BillingGroupName);
            writer.WriteStringValue("call_leg_id", CallLegId);
            writer.WriteStringValue("call_session_id", CallSessionId);
            writer.WriteStringValue("connection_id", ConnectionId);
            writer.WriteStringValue("connection_name", ConnectionName);
            writer.WriteStringValue("cost", Cost);
            writer.WriteStringValue("currency", Currency);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.AmdDetailRecord_feature>("feature", Feature);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("invoked_at", InvokedAt);
            writer.WriteBoolValue("is_telnyx_billable", IsTelnyxBillable);
            writer.WriteStringValue("rate", Rate);
            writer.WriteStringValue("rate_measured_in", RateMeasuredIn);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("tags", Tags);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
