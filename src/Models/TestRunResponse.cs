// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Models
{
    /// <summary>
    /// Response model containing test run execution details and results.Provides comprehensive information about a test execution includingstatus, timing, logs, and detailed evaluation results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRunResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Timestamp when the test run finished execution.</summary>
        public DateTimeOffset? CompletedAt { get; set; }
        /// <summary>Identifier of the conversation created during test execution.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationId { get; set; }
#nullable restore
#else
        public string ConversationId { get; set; }
#endif
        /// <summary>Identifier for conversation analysis and insights data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationInsightsId { get; set; }
#nullable restore
#else
        public string ConversationInsightsId { get; set; }
#endif
        /// <summary>Timestamp when the test run was created and queued.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Detailed evaluation results for each rubric criteria. Name is name of the criteria from the rubric and status is the result of the evaluation. This list will have a result for every criteria in the rubric section.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.TestRunDetailResult>? DetailStatus { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.OpenApiClient.Models.TestRunDetailResult> DetailStatus { get; set; }
#endif
        /// <summary>Detailed execution logs and debug information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Logs { get; set; }
#nullable restore
#else
        public string Logs { get; set; }
#endif
        /// <summary>Unique identifier for this specific test run execution.</summary>
        public Guid? RunId { get; set; }
        /// <summary>Represents the lifecycle of a test:  - &apos;pending&apos;: Test is waiting to be executed.  - &apos;starting&apos;: Test execution is initializing.  - &apos;running&apos;: Test is currently executing.  - &apos;passed&apos;: Test completed successfully.  - &apos;failed&apos;: Test executed but did not pass.  - &apos;error&apos;: An error occurred during test execution.</summary>
        public global::Soenneker.Telnyx.OpenApiClient.Models.TestStatus? Status { get; set; }
        /// <summary>Identifier of the assistant test that was executed.</summary>
        public Guid? TestId { get; set; }
        /// <summary>Identifier linking this run to a test suite execution batch.</summary>
        public Guid? TestSuiteRunId { get; set; }
        /// <summary>How this test run was initiated (manual, scheduled, or API).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriggeredBy { get; set; }
#nullable restore
#else
        public string TriggeredBy { get; set; }
#endif
        /// <summary>Timestamp of the last update to this test run.</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TestRunResponse"/> and sets the default values.
        /// </summary>
        public TestRunResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Models.TestRunResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Models.TestRunResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Models.TestRunResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "completed_at", n => { CompletedAt = n.GetDateTimeOffsetValue(); } },
                { "conversation_id", n => { ConversationId = n.GetStringValue(); } },
                { "conversation_insights_id", n => { ConversationInsightsId = n.GetStringValue(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "detail_status", n => { DetailStatus = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.TestRunDetailResult>(global::Soenneker.Telnyx.OpenApiClient.Models.TestRunDetailResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "logs", n => { Logs = n.GetStringValue(); } },
                { "run_id", n => { RunId = n.GetGuidValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TestStatus>(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
                { "test_suite_run_id", n => { TestSuiteRunId = n.GetGuidValue(); } },
                { "triggered_by", n => { TriggeredBy = n.GetStringValue(); } },
                { "updated_at", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("completed_at", CompletedAt);
            writer.WriteStringValue("conversation_id", ConversationId);
            writer.WriteStringValue("conversation_insights_id", ConversationInsightsId);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.OpenApiClient.Models.TestRunDetailResult>("detail_status", DetailStatus);
            writer.WriteStringValue("logs", Logs);
            writer.WriteGuidValue("run_id", RunId);
            writer.WriteEnumValue<global::Soenneker.Telnyx.OpenApiClient.Models.TestStatus>("status", Status);
            writer.WriteGuidValue("test_id", TestId);
            writer.WriteGuidValue("test_suite_run_id", TestSuiteRunId);
            writer.WriteStringValue("triggered_by", TriggeredBy);
            writer.WriteDateTimeOffsetValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
