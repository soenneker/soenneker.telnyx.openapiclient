// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AuditLog : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An alternate identifier for a resource which may be considered unique enough to identify the resource but is not the primary identifier for the resource. For example, this field could be used to store the phone number value for a phone number when the primary database identifier is a separate distinct value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternateResourceId { get; set; }
#nullable restore
#else
        public string AlternateResourceId { get; set; }
#endif
        /// <summary>Indicates if the change was made by Telnyx on your behalf, the organization owner, a member of your organization, or in the case of managed accounts, the account manager.</summary>
        public global::Soenneker.Telnyx.Models.AuditLog_change_made_by? ChangeMadeBy { get; set; }
        /// <summary>Details of the changes made to the resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Telnyx.Models.AuditEventChanges>? Changes { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Telnyx.Models.AuditEventChanges> Changes { get; set; }
#endif
        /// <summary>The type of change that occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChangeType { get; set; }
#nullable restore
#else
        public string ChangeType { get; set; }
#endif
        /// <summary>ISO 8601 formatted date indicating when the change occurred.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Unique identifier for the audit log entry.</summary>
        public Guid? Id { get; set; }
        /// <summary>Unique identifier for the organization that owns the resource.</summary>
        public Guid? OrganizationId { get; set; }
        /// <summary>The type of the resource being audited.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Unique identifier for the resource that was changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceId { get; set; }
#nullable restore
#else
        public string ResourceId { get; set; }
#endif
        /// <summary>Unique identifier for the user who made the change.</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Models.AuditLog"/> and sets the default values.
        /// </summary>
        public AuditLog()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Models.AuditLog"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Models.AuditLog CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Models.AuditLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alternate_resource_id", n => { AlternateResourceId = n.GetStringValue(); } },
                { "change_made_by", n => { ChangeMadeBy = n.GetEnumValue<global::Soenneker.Telnyx.Models.AuditLog_change_made_by>(); } },
                { "change_type", n => { ChangeType = n.GetStringValue(); } },
                { "changes", n => { Changes = n.GetCollectionOfObjectValues<global::Soenneker.Telnyx.Models.AuditEventChanges>(global::Soenneker.Telnyx.Models.AuditEventChanges.CreateFromDiscriminatorValue)?.AsList(); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "resource_id", n => { ResourceId = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alternate_resource_id", AlternateResourceId);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Models.AuditLog_change_made_by>("change_made_by", ChangeMadeBy);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Telnyx.Models.AuditEventChanges>("changes", Changes);
            writer.WriteStringValue("change_type", ChangeType);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteGuidValue("organization_id", OrganizationId);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("resource_id", ResourceId);
            writer.WriteGuidValue("user_id", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
