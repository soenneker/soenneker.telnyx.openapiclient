// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Network_coverage
{
    /// <summary>
    /// Builds and executes requests for operations under \network_coverage
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Network_coverageRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Network_coverageRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network_coverage{?filter%5Blocation%2Ecode%5D*,filter%5Blocation%2Epop%5D*,filter%5Blocation%2Eregion%5D*,filter%5Blocation%2Esite%5D*,filters%5Bavailable_services%5D%5Bcontains%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Network_coverageRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network_coverage{?filter%5Blocation%2Ecode%5D*,filter%5Blocation%2Epop%5D*,filter%5Blocation%2Eregion%5D*,filter%5Blocation%2Esite%5D*,filters%5Bavailable_services%5D%5Bcontains%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// List all locations and the interfaces that region supports
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.OpenApiClient.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageGetResponse?> GetAsNetwork_coverageGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageGetResponse> GetAsNetwork_coverageGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.OpenApiClient.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageGetResponse>(requestInfo, global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List all locations and the interfaces that region supports
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.OpenApiClient.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsNetwork_coverageGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.OpenApiClient.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageResponse>(requestInfo, global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List all locations and the interfaces that region supports
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List all locations and the interfaces that region supports
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Network_coverageRequestBuilderGetQueryParameters 
        {
            /// <summary>The code of associated location to filter on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Blocation%2Ecode%5D")]
            public string? FilterlocationCode { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Blocation%2Ecode%5D")]
            public string FilterlocationCode { get; set; }
#endif
            /// <summary>The POP of associated location to filter on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Blocation%2Epop%5D")]
            public string? FilterlocationPop { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Blocation%2Epop%5D")]
            public string FilterlocationPop { get; set; }
#endif
            /// <summary>The region of associated location to filter on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Blocation%2Eregion%5D")]
            public string? FilterlocationRegion { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Blocation%2Eregion%5D")]
            public string FilterlocationRegion { get; set; }
#endif
            /// <summary>The site of associated location to filter on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Blocation%2Esite%5D")]
            public string? FilterlocationSite { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Blocation%2Esite%5D")]
            public string FilterlocationSite { get; set; }
#endif
            /// <summary>The region of associated location to filter on.</summary>
            [Obsolete("This property is deprecated, use FiltersavailableServicescontainsAsAvailableService instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filters%5Bavailable_services%5D%5Bcontains%5D")]
            public string? FiltersavailableServicescontains { get; set; }
#nullable restore
#else
            [QueryParameter("filters%5Bavailable_services%5D%5Bcontains%5D")]
            public string FiltersavailableServicescontains { get; set; }
#endif
            /// <summary>The region of associated location to filter on.</summary>
            [QueryParameter("filters%5Bavailable_services%5D%5Bcontains%5D")]
            public global::Soenneker.Telnyx.OpenApiClient.Models.AvailableService? FiltersavailableServicescontainsAsAvailableService { get; set; }
            /// <summary>The page number to load</summary>
            [QueryParameter("page%5Bnumber%5D")]
            public int? Pagenumber { get; set; }
            /// <summary>The size of the page</summary>
            [QueryParameter("page%5Bsize%5D")]
            public int? Pagesize { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Network_coverageRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Telnyx.OpenApiClient.Network_coverage.Network_coverageRequestBuilder.Network_coverageRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
