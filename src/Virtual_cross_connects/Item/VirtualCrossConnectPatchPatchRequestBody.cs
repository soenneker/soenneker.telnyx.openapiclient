// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.OpenApiClient.Virtual_cross_connects.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VirtualCrossConnectPatchPatchRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The IP address assigned for your side of the Virtual Cross Connect.&lt;br /&gt;&lt;br /&gt;If none is provided, one will be generated for you.&lt;br /&gt;&lt;br /&gt;This value can not be patched once the VXC has bene provisioned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryCloudIp { get; set; }
#nullable restore
#else
        public string PrimaryCloudIp { get; set; }
#endif
        /// <summary>Indicates whether the primary circuit is enabled. Setting this to `false` will disable the circuit.</summary>
        public bool? PrimaryEnabled { get; set; }
        /// <summary>Whether the primary BGP route is being announced.</summary>
        public bool? PrimaryRoutingAnnouncement { get; set; }
        /// <summary>The IP address assigned for your side of the Virtual Cross Connect.&lt;br /&gt;&lt;br /&gt;If none is provided, one will be generated for you.&lt;br /&gt;&lt;br /&gt;This value can not be patched once the VXC has bene provisioned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecondaryCloudIp { get; set; }
#nullable restore
#else
        public string SecondaryCloudIp { get; set; }
#endif
        /// <summary>Indicates whether the secondary circuit is enabled. Setting this to `false` will disable the circuit.</summary>
        public bool? SecondaryEnabled { get; set; }
        /// <summary>Whether the secondary BGP route is being announced.</summary>
        public bool? SecondaryRoutingAnnouncement { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.OpenApiClient.Virtual_cross_connects.Item.VirtualCrossConnectPatchPatchRequestBody"/> and sets the default values.
        /// </summary>
        public VirtualCrossConnectPatchPatchRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.OpenApiClient.Virtual_cross_connects.Item.VirtualCrossConnectPatchPatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.OpenApiClient.Virtual_cross_connects.Item.VirtualCrossConnectPatchPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.OpenApiClient.Virtual_cross_connects.Item.VirtualCrossConnectPatchPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "primary_cloud_ip", n => { PrimaryCloudIp = n.GetStringValue(); } },
                { "primary_enabled", n => { PrimaryEnabled = n.GetBoolValue(); } },
                { "primary_routing_announcement", n => { PrimaryRoutingAnnouncement = n.GetBoolValue(); } },
                { "secondary_cloud_ip", n => { SecondaryCloudIp = n.GetStringValue(); } },
                { "secondary_enabled", n => { SecondaryEnabled = n.GetBoolValue(); } },
                { "secondary_routing_announcement", n => { SecondaryRoutingAnnouncement = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("primary_cloud_ip", PrimaryCloudIp);
            writer.WriteBoolValue("primary_enabled", PrimaryEnabled);
            writer.WriteBoolValue("primary_routing_announcement", PrimaryRoutingAnnouncement);
            writer.WriteStringValue("secondary_cloud_ip", SecondaryCloudIp);
            writer.WriteBoolValue("secondary_enabled", SecondaryEnabled);
            writer.WriteBoolValue("secondary_routing_announcement", SecondaryRoutingAnnouncement);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
