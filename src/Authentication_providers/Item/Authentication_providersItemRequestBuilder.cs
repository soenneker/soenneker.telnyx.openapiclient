// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.Authentication_providers.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \authentication_providers\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Authentication_providersItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Authentication_providersItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/authentication_providers/{id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Authentication_providersItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/authentication_providers/{id}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersDeleteResponse?> DeleteAsAuthentication_providersDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersDeleteResponse> DeleteAsAuthentication_providersDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersDeleteResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsAuthentication_providersDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the details of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersGetResponse?> GetAsAuthentication_providersGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersGetResponse> GetAsAuthentication_providersGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersGetResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves the details of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAuthentication_providersGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates settings of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersPatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersPatchResponse?> PatchAsAuthentication_providersPatchResponseAsync(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersPatchResponse> PatchAsAuthentication_providersPatchResponseAsync(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersPatchResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersPatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates settings of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use PatchAsAuthentication_providersPatchResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse?> PatchAsync(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse> PatchAsync(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers401Error.CreateFromDiscriminatorValue },
                { "404", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers404Error.CreateFromDiscriminatorValue },
                { "422", global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providers422Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse>(requestInfo, global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieves the details of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates settings of an existing authentication provider.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Telnyx.Models.UpdateAuthenticationProviderRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.Authentication_providers.Item.Authentication_providersItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Authentication_providersItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Authentication_providersItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Authentication_providersItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
