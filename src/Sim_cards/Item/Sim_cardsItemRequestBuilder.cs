// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.Models;
using Soenneker.Telnyx.Sim_cards.Item.Actions;
using Soenneker.Telnyx.Sim_cards.Item.Activation_code;
using Soenneker.Telnyx.Sim_cards.Item.Device_details;
using Soenneker.Telnyx.Sim_cards.Item.Public_ip;
using Soenneker.Telnyx.Sim_cards.Item.Wireless_connectivity_logs;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.Sim_cards.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \sim_cards\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Sim_cardsItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::Soenneker.Telnyx.Sim_cards.Item.Actions.ActionsRequestBuilder Actions
        {
            get => new global::Soenneker.Telnyx.Sim_cards.Item.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The activation_code property</summary>
        public global::Soenneker.Telnyx.Sim_cards.Item.Activation_code.Activation_codeRequestBuilder Activation_code
        {
            get => new global::Soenneker.Telnyx.Sim_cards.Item.Activation_code.Activation_codeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The device_details property</summary>
        public global::Soenneker.Telnyx.Sim_cards.Item.Device_details.Device_detailsRequestBuilder Device_details
        {
            get => new global::Soenneker.Telnyx.Sim_cards.Item.Device_details.Device_detailsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The public_ip property</summary>
        public global::Soenneker.Telnyx.Sim_cards.Item.Public_ip.Public_ipRequestBuilder Public_ip
        {
            get => new global::Soenneker.Telnyx.Sim_cards.Item.Public_ip.Public_ipRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The wireless_connectivity_logs property</summary>
        public global::Soenneker.Telnyx.Sim_cards.Item.Wireless_connectivity_logs.Wireless_connectivity_logsRequestBuilder Wireless_connectivity_logs
        {
            get => new global::Soenneker.Telnyx.Sim_cards.Item.Wireless_connectivity_logs.Wireless_connectivity_logsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Sim_cardsItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/sim_cards/{id}{?include_sim_card_group*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Sim_cardsItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/sim_cards/{id}{?include_sim_card_group*}", rawUrl)
        {
        }
        /// <summary>
        /// The SIM card will be decommissioned, removed from your account and you will stop being charged.&lt;br /&gt;The SIM card won&apos;t be able to connect to the network after the deletion is completed, thus making it impossible to consume data.&lt;br/&gt;Transitioning to the disabled state may take a period of time.Until the transition is completed, the SIM card status will be disabling &lt;code&gt;disabling&lt;/code&gt;.&lt;br /&gt;In order to re-enable the SIM card, you will need to re-register it.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsDeleteResponse?> DeleteAsSim_cardsDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsDeleteResponse> DeleteAsSim_cardsDeleteResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsDeleteResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The SIM card will be decommissioned, removed from your account and you will stop being charged.&lt;br /&gt;The SIM card won&apos;t be able to connect to the network after the deletion is completed, thus making it impossible to consume data.&lt;br/&gt;Transitioning to the disabled state may take a period of time.Until the transition is completed, the SIM card status will be disabling &lt;code&gt;disabling&lt;/code&gt;.&lt;br /&gt;In order to re-enable the SIM card, you will need to re-register it.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsSim_cardsDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the details regarding a specific SIM card.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsGetResponse?> GetAsSim_cardsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsGetResponse> GetAsSim_cardsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsGetResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the details regarding a specific SIM card.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsSim_cardsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates SIM card data
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsPatchResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsPatchResponse?> PatchAsSim_cardsPatchResponseAsync(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsPatchResponse> PatchAsSim_cardsPatchResponseAsync(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsPatchResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsPatchResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates SIM card data
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use PatchAsSim_cardsPatchResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse?> PatchAsync(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse> PatchAsync(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse>(requestInfo, global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The SIM card will be decommissioned, removed from your account and you will stop being charged.&lt;br /&gt;The SIM card won&apos;t be able to connect to the network after the deletion is completed, thus making it impossible to consume data.&lt;br/&gt;Transitioning to the disabled state may take a period of time.Until the transition is completed, the SIM card status will be disabling &lt;code&gt;disabling&lt;/code&gt;.&lt;br /&gt;In order to re-enable the SIM card, you will need to re-register it.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns the details regarding a specific SIM card.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates SIM card data
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Soenneker.Telnyx.Models.SIMCard body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Sim_cardsItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Returns the details regarding a specific SIM card.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Sim_cardsItemRequestBuilderGetQueryParameters 
        {
            /// <summary>It includes the associated SIM card group object in the response when present.</summary>
            [QueryParameter("include_sim_card_group")]
            public bool? IncludeSimCardGroup { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Sim_cardsItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Telnyx.Sim_cards.Item.Sim_cardsItemRequestBuilder.Sim_cardsItemRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Sim_cardsItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
