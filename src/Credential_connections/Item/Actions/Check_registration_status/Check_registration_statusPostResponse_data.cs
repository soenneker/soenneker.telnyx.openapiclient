// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Check_registration_statusPostResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ip used during the SIP connection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>ISO 8601 formatted date indicating when the resource was last updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastRegistration { get; set; }
#nullable restore
#else
        public string LastRegistration { get; set; }
#endif
        /// <summary>The port of the SIP connection</summary>
        public int? Port { get; set; }
        /// <summary>Identifies the type of the resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>The user name of the SIP connection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SipUsername { get; set; }
#nullable restore
#else
        public string SipUsername { get; set; }
#endif
        /// <summary>The current registration status of your SIP connection</summary>
        public global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data_status? Status { get; set; }
        /// <summary>The protocol of the SIP connection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Transport { get; set; }
#nullable restore
#else
        public string Transport { get; set; }
#endif
        /// <summary>The user agent of the SIP connection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data"/> and sets the default values.
        /// </summary>
        public Check_registration_statusPostResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ip_address", n => { IpAddress = n.GetStringValue(); } },
                { "last_registration", n => { LastRegistration = n.GetStringValue(); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "record_type", n => { RecordType = n.GetStringValue(); } },
                { "sip_username", n => { SipUsername = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data_status>(); } },
                { "transport", n => { Transport = n.GetStringValue(); } },
                { "user_agent", n => { UserAgent = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ip_address", IpAddress);
            writer.WriteStringValue("last_registration", LastRegistration);
            writer.WriteIntValue("port", Port);
            writer.WriteStringValue("record_type", RecordType);
            writer.WriteStringValue("sip_username", SipUsername);
            writer.WriteEnumValue<global::Soenneker.Telnyx.Credential_connections.Item.Actions.Check_registration_status.Check_registration_statusPostResponse_data_status>("status", Status);
            writer.WriteStringValue("transport", Transport);
            writer.WriteStringValue("user_agent", UserAgent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
