// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.Models;
using Soenneker.Telnyx.Recordings.Actions;
using Soenneker.Telnyx.Recordings.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.Recordings
{
    /// <summary>
    /// Builds and executes requests for operations under \recordings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RecordingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::Soenneker.Telnyx.Recordings.Actions.ActionsRequestBuilder Actions
        {
            get => new global::Soenneker.Telnyx.Recordings.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Telnyx.recordings.item collection</summary>
        /// <param name="position">Uniquely identifies the recording by id.</param>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Recordings.Item.WithRecording_ItemRequestBuilder"/></returns>
        public global::Soenneker.Telnyx.Recordings.Item.WithRecording_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("recording_id", position);
                return new global::Soenneker.Telnyx.Recordings.Item.WithRecording_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recordings{?filter%5Bcall_leg_id%5D*,filter%5Bcall_session_id%5D*,filter%5Bconference_id%5D*,filter%5Bconnection_id%5D*,filter%5Bcreated_at%5D%5Bgte%5D*,filter%5Bcreated_at%5D%5Blte%5D*,filter%5Bfrom%5D*,filter%5Bto%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecordingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recordings{?filter%5Bcall_leg_id%5D*,filter%5Bcall_session_id%5D*,filter%5Bconference_id%5D*,filter%5Bconnection_id%5D*,filter%5Bcreated_at%5D%5Bgte%5D*,filter%5Bcreated_at%5D%5Blte%5D*,filter%5Bfrom%5D*,filter%5Bto%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of your call recordings.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Recordings.RecordingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Recordings.RecordingsGetResponse?> GetAsRecordingsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Recordings.RecordingsGetResponse> GetAsRecordingsGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Recordings.RecordingsGetResponse>(requestInfo, global::Soenneker.Telnyx.Recordings.RecordingsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of your call recordings.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Recordings.RecordingsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsRecordingsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Recordings.RecordingsResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Recordings.RecordingsResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Recordings.RecordingsResponse>(requestInfo, global::Soenneker.Telnyx.Recordings.RecordingsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of your call recordings.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of your call recordings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecordingsRequestBuilderGetQueryParameters 
        {
            /// <summary>If present, recordings will be filtered to those with a matching call_leg_id.</summary>
            [QueryParameter("filter%5Bcall_leg_id%5D")]
            public Guid? FiltercallLegId { get; set; }
            /// <summary>If present, recordings will be filtered to those with a matching call_session_id.</summary>
            [QueryParameter("filter%5Bcall_session_id%5D")]
            public Guid? FiltercallSessionId { get; set; }
            /// <summary>Returns only recordings associated with a given conference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bconference_id%5D")]
            public string? FilterconferenceId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bconference_id%5D")]
            public string FilterconferenceId { get; set; }
#endif
            /// <summary>If present, recordings will be filtered to those with a matching `connection_id` attribute (case-sensitive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bconnection_id%5D")]
            public string? FilterconnectionId { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bconnection_id%5D")]
            public string FilterconnectionId { get; set; }
#endif
            /// <summary>Returns only recordings created later than or at given ISO 8601 datetime.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bcreated_at%5D%5Bgte%5D")]
            public string? FiltercreatedAtgte { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bcreated_at%5D%5Bgte%5D")]
            public string FiltercreatedAtgte { get; set; }
#endif
            /// <summary>Returns only recordings created earlier than or at given ISO 8601 datetime.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bcreated_at%5D%5Blte%5D")]
            public string? FiltercreatedAtlte { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bcreated_at%5D%5Blte%5D")]
            public string FiltercreatedAtlte { get; set; }
#endif
            /// <summary>If present, recordings will be filtered to those with a matching `from` attribute (case-sensitive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bfrom%5D")]
            public string? Filterfrom { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bfrom%5D")]
            public string Filterfrom { get; set; }
#endif
            /// <summary>If present, recordings will be filtered to those with a matching `to` attribute (case-sensitive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bto%5D")]
            public string? Filterto { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bto%5D")]
            public string Filterto { get; set; }
#endif
            /// <summary>The page number to load.</summary>
            [QueryParameter("page%5Bnumber%5D")]
            public int? Pagenumber { get; set; }
            /// <summary>The size of the page.</summary>
            [QueryParameter("page%5Bsize%5D")]
            public int? Pagesize { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecordingsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Telnyx.Recordings.RecordingsRequestBuilder.RecordingsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
