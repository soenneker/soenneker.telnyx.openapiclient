// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Telnyx.Faxes.Item;
using Soenneker.Telnyx.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Telnyx.Faxes
{
    /// <summary>
    /// Builds and executes requests for operations under \faxes
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FaxesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.Telnyx.faxes.item collection</summary>
        /// <param name="position">The unique identifier of a fax.</param>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder"/></returns>
        public global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Soenneker.Telnyx.faxes.item collection</summary>
        /// <param name="position">The unique identifier of a fax.</param>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
                return new global::Soenneker.Telnyx.Faxes.Item.FaxesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FaxesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/faxes{?filter%5Bcreated_at%5D%5Bgt%5D*,filter%5Bcreated_at%5D%5Bgte%5D*,filter%5Bcreated_at%5D%5Blt%5D*,filter%5Bcreated_at%5D%5Blte%5D*,filter%5Bdirection%5D%5Beq%5D*,filter%5Bfrom%5D%5Beq%5D*,filter%5Bto%5D%5Beq%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FaxesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/faxes{?filter%5Bcreated_at%5D%5Bgt%5D*,filter%5Bcreated_at%5D%5Bgte%5D*,filter%5Bcreated_at%5D%5Blt%5D*,filter%5Bcreated_at%5D%5Blte%5D*,filter%5Bdirection%5D%5Beq%5D*,filter%5Bfrom%5D%5Beq%5D*,filter%5Bto%5D%5Beq%5D*,page%5Bnumber%5D*,page%5Bsize%5D*}", rawUrl)
        {
        }
        /// <summary>
        /// View a list of faxes
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.FaxesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesGetResponse?> GetAsFaxesGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesGetResponse> GetAsFaxesGetResponseAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Faxes.FaxesGetResponse>(requestInfo, global::Soenneker.Telnyx.Faxes.FaxesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// View a list of faxes
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.FaxesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsFaxesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Faxes.FaxesResponse>(requestInfo, global::Soenneker.Telnyx.Faxes.FaxesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. **Expected Webhooks:**- `fax.queued`- `fax.media.processed`- `fax.sending.started`- `fax.delivered`- `fax.failed`
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.FaxesPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesPostResponse?> PostAsFaxesPostResponseAsync(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesPostResponse> PostAsFaxesPostResponseAsync(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Faxes.FaxesPostResponse>(requestInfo, global::Soenneker.Telnyx.Faxes.FaxesPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. **Expected Webhooks:**- `fax.queued`- `fax.media.processed`- `fax.sending.started`- `fax.delivered`- `fax.failed`
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.FaxesResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Telnyx.Models.Errors">When receiving a 4XX or 5XX status code</exception>
        [Obsolete("This method is obsolete. Use PostAsFaxesPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesResponse?> PostAsync(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Telnyx.Faxes.FaxesResponse> PostAsync(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Telnyx.Models.Errors.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Telnyx.Faxes.FaxesResponse>(requestInfo, global::Soenneker.Telnyx.Faxes.FaxesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. **Expected Webhooks:**- `fax.queued`- `fax.media.processed`- `fax.sending.started`- `fax.delivered`- `fax.failed`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Telnyx.Models.SendFaxRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// View a list of faxes
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FaxesRequestBuilderGetQueryParameters 
        {
            /// <summary>ISO 8601 date time for filtering faxes created after that date</summary>
            [QueryParameter("filter%5Bcreated_at%5D%5Bgt%5D")]
            public DateTimeOffset? FiltercreatedAtgt { get; set; }
            /// <summary>ISO 8601 date time for filtering faxes created after or on that date</summary>
            [QueryParameter("filter%5Bcreated_at%5D%5Bgte%5D")]
            public DateTimeOffset? FiltercreatedAtgte { get; set; }
            /// <summary>ISO 8601 formatted date time for filtering faxes created before that date</summary>
            [QueryParameter("filter%5Bcreated_at%5D%5Blt%5D")]
            public DateTimeOffset? FiltercreatedAtlt { get; set; }
            /// <summary>ISO 8601 formatted date time for filtering faxes created on or before that date</summary>
            [QueryParameter("filter%5Bcreated_at%5D%5Blte%5D")]
            public DateTimeOffset? FiltercreatedAtlte { get; set; }
            /// <summary>The direction, inbound or outbound, for filtering faxes sent from this account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bdirection%5D%5Beq%5D")]
            public string? Filterdirectioneq { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bdirection%5D%5Beq%5D")]
            public string Filterdirectioneq { get; set; }
#endif
            /// <summary>The phone number, in E.164 format for filtering faxes sent from this number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bfrom%5D%5Beq%5D")]
            public string? Filterfromeq { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bfrom%5D%5Beq%5D")]
            public string Filterfromeq { get; set; }
#endif
            /// <summary>The phone number, in E.164 format for filtering faxes sent to this number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter%5Bto%5D%5Beq%5D")]
            public string? Filtertoeq { get; set; }
#nullable restore
#else
            [QueryParameter("filter%5Bto%5D%5Beq%5D")]
            public string Filtertoeq { get; set; }
#endif
            /// <summary>Number of the page to be retrieved</summary>
            [QueryParameter("page%5Bnumber%5D")]
            public int? Pagenumber { get; set; }
            /// <summary>Number of fax resourcxes for the single page returned</summary>
            [QueryParameter("page%5Bsize%5D")]
            public int? Pagesize { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FaxesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Soenneker.Telnyx.Faxes.FaxesRequestBuilder.FaxesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FaxesRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
