{
  "openapi": "3.0.4",
  "info": {
    "title": "Telnyx API",
    "description": "SIP trunking, SMS, MMS, Call Control and Telephony Data Services.",
    "contact": {
      "email": "support@telnyx.com"
    },
    "license": {
      "name": "MIT"
    },
    "version": "2.0.0",
    "x-endpoint-cost": "light"
  },
  "servers": [
    {
      "url": "https://api.telnyx.com/v2",
      "description": "Version 2.0.0 of the Telnyx API"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Bucket"
        ],
        "summary": "ListBuckets",
        "description": "List all Buckets.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html"
        },
        "operationId": "ListBuckets",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListBucketsResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/access_ip_address": {
      "get": {
        "tags": [
          "IP Addresses"
        ],
        "summary": "List all Access IP Addresses",
        "operationId": "ListAccessIpAddresses",
        "parameters": [
          {
            "name": "filter[ip_source]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[ip_address]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "maximum": 250,
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPAddressListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "IP Addresses"
        ],
        "summary": "Create new Access IP Address",
        "operationId": "CreateAccessIpAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessIPAddressPOST"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPAddressResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/access_ip_address/{access_ip_address_id}": {
      "delete": {
        "tags": [
          "IP Addresses"
        ],
        "summary": "Delete access IP address",
        "operationId": "DeleteAccessIpAddress",
        "parameters": [
          {
            "name": "access_ip_address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPAddressResponseSchema"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "IP Addresses"
        ],
        "summary": "Retrieve an access IP address",
        "operationId": "GetAccessIpAddress",
        "parameters": [
          {
            "name": "access_ip_address_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPAddressResponseSchema"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/access_ip_ranges": {
      "get": {
        "tags": [
          "IP Ranges"
        ],
        "summary": "List all Access IP Ranges",
        "operationId": "ListAccessIpRanges",
        "parameters": [
          {
            "name": "filter[cidr_block]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[cidr_block][startswith]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[cidr_block][endswith]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[cidr_block][contains]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "maximum": 250,
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPRangeListResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "IP Ranges"
        ],
        "summary": "Create new Access IP Range",
        "operationId": "CreateAccessIPRange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessIPRangePOST"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPRangeResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/access_ip_ranges/{access_ip_range_id}": {
      "delete": {
        "tags": [
          "IP Ranges"
        ],
        "summary": "Delete access IP ranges",
        "operationId": "Deletebaae02295de94a56832f9fae02d28d12",
        "parameters": [
          {
            "name": "access_ip_range_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessIPRangeResponseSchema"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/actions/purchase/esims": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Purchase eSIMs",
        "description": "Purchases and registers the specified amount of eSIMs to the current user's account.<br/><br/>\nIf <code>sim_card_group_id</code> is provided, the eSIMs will be associated with that group. Otherwise, the default group for the current user will be used.<br/><br/>\n",
        "operationId": "PurchaseESim",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ESimPurchase"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/RegisterSimCardsResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/actions/register/sim_cards": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Register SIM cards",
        "description": "Register the SIM cards associated with the provided registration codes to the current user's account.<br/><br/>\nIf <code>sim_card_group_id</code> is provided, the SIM cards will be associated with that group. Otherwise, the default group for the current user will be used.<br/><br/>\n",
        "operationId": "RegisterSimCards",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardRegistration"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/RegisterSimCardsResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "List all addresses",
        "description": "Returns a list of your addresses.",
        "operationId": "FindAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceEquals"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceContains"
          },
          {
            "$ref": "#/components/parameters/FilterUsedAsEmergency"
          },
          {
            "$ref": "#/components/parameters/FilterStreetAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressBook"
          },
          {
            "$ref": "#/components/parameters/SortAddress"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllAddressResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Creates an address",
        "description": "Creates an address.",
        "operationId": "CreateAddress",
        "requestBody": {
          "description": "Parameters that can be defined during address creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/addresses/actions/validate": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Validate an address",
        "description": "Validates an address for emergency services.",
        "operationId": "ValidateAddress",
        "requestBody": {
          "description": "Parameters that can be defined during address validation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ValidateAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/addresses/{id}": {
      "delete": {
        "tags": [
          "Addresses"
        ],
        "summary": "Deletes an address",
        "description": "Deletes an existing address.",
        "operationId": "DeleteAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "address ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Retrieve an address",
        "description": "Retrieves the details of an existing address.",
        "operationId": "GetAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "address ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/addresses/{id}/actions/accept_suggestions": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Accepts this address suggestion as a new emergency address for Operator Connect and finishes the uploads of the numbers associated with it to Microsoft.",
        "operationId": "acceptAddressSuggestions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the address that should be accepted.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptSuggestionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This address suggestion has already been accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressSuggestionResponse"
                }
              }
            }
          },
          "202": {
            "description": "This address suggestion was accepted. The numbers associated to it will resume processing in the background.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressSuggestionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address not found or not accessible by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFoundError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/advanced_orders": {
      "get": {
        "tags": [
          "Advanced Number Orders"
        ],
        "summary": "List Advanced Orders",
        "operationId": "list_advanced_orders_v2",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAdvancedOrderResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Advanced Number Orders"
        ],
        "summary": "Create Advanced Order",
        "operationId": "create_advanced_order_v2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvancedOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancedOrderResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/advanced_orders/{order_id}": {
      "get": {
        "tags": [
          "Advanced Number Orders"
        ],
        "summary": "Get Advanced Order",
        "operationId": "get_advanced_order_v2",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancedOrderResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants": {
      "get": {
        "tags": [
          "Assistants"
        ],
        "summary": "List assistants",
        "description": "Retrieve a list of all AI Assistants configured by the user.",
        "operationId": "get_assistants_public_assistants_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantsListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Create an assistant",
        "description": "Create a new AI Assistant.",
        "operationId": "create_new_assistant_public_assistants_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/import": {
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Import assistants from external provider",
        "description": "Import assistants from external providers. Any assistant that has already been imported will be overwritten with its latest version from the importing provider.",
        "operationId": "import_assistants_public_assistants_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportAssistantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantsListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/{assistant_id}": {
      "delete": {
        "tags": [
          "Assistants"
        ],
        "summary": "Delete an assistant",
        "description": "Delete an AI Assistant by `assistant_id`.",
        "operationId": "delete_assistant_public_assistants__assistant_id__delete",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantDeletedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Assistants"
        ],
        "summary": "Get an assistant",
        "description": "Retrieve an AI Assistant configuration by `assistant_id`.",
        "operationId": "get_assistant_public_assistants__assistant_id__get",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          },
          {
            "name": "fetch_dynamic_variables_from_webhook",
            "in": "query",
            "schema": {
              "title": "Fetch Dynamic Variables From Webhook",
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "title": "From",
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "title": "To",
              "type": "string"
            }
          },
          {
            "name": "call_control_id",
            "in": "query",
            "schema": {
              "title": "Call Control Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Update an assistant",
        "description": "Update an AI Assistant's attributes.",
        "operationId": "update_assistant_public_assistants__assistant_id__post",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/{assistant_id}/scheduled_events": {
      "get": {
        "tags": [
          "Assistants"
        ],
        "summary": "List scheduled events",
        "description": "Get scheduled events for an assistant with pagination and filtering",
        "operationId": "get_scheduled_events",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "Page[Size]",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "Page[Number]",
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "schema": {
              "title": "From Date",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "schema": {
              "title": "To Date",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "conversation_channel",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ConversationChannelType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedScheduledEventList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Create a scheduled event",
        "description": "Create a scheduled event for an assistant",
        "operationId": "create_scheduled_event",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduledEventRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEventResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/{assistant_id}/scheduled_events/{event_id}": {
      "delete": {
        "tags": [
          "Assistants"
        ],
        "summary": "Delete a scheduled event",
        "description": "If the event is pending, this will cancel the event. Otherwise, this will simply remove the record of the event.",
        "operationId": "delete_scheduled_event",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Event Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Assistants"
        ],
        "summary": "Get a scheduled event",
        "description": "Retrieve a scheduled event by event ID",
        "operationId": "get_scheduled_event",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Event Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledEventResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/{assistant_id}/texml": {
      "get": {
        "tags": [
          "Assistants"
        ],
        "summary": "Get assistant texml",
        "description": "Get an assistant texml by `assistant_id`.",
        "operationId": "get_assistant_texml_public_assistants__assistant_id__texml_get",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_assistant_texml_public_assistants__assistant_id__texml_get_200"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/assistants/{assistant_id}/tools/{tool_id}/test": {
      "post": {
        "tags": [
          "Assistants"
        ],
        "summary": "Test Assistant Tool",
        "description": "Test a webhook tool for an assistant",
        "operationId": "test_assistant_tool_public_assistants__assistant_id__tools__tool_id__test_post",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Assistant Id",
              "type": "string"
            }
          },
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Tool Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestWebhookToolRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestWebhookToolResponseData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/audio/transcriptions": {
      "post": {
        "tags": [
          "Audio"
        ],
        "summary": "Transcribe speech to text",
        "description": "Transcribe speech to text. This endpoint is consistent with the [OpenAI Transcription API](https://platform.openai.com/docs/api-reference/audio/createTranscription) and may be used with the OpenAI JS or Python SDK.",
        "operationId": "audio_public_audio_transcriptions_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AudioTranscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioTranscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/chat/completions": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Create a chat completion",
        "description": "Chat with a language model. This endpoint is consistent with the [OpenAI Chat Completions API](https://platform.openai.com/docs/api-reference/chat) and may be used with the OpenAI JS or Python SDK.",
        "operationId": "chat_public_chat_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              },
              "example": {
                "messages": [
                  {
                    "role": "system",
                    "content": "You are a friendly chatbot."
                  },
                  {
                    "role": "user",
                    "content": "Hello, world!"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/clusters": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "summary": "List all clusters",
        "operationId": "list_all_requested_clusters_public_text_clusters_get",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "Page[Number]",
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "Page[Size]",
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusteringRequestInfoData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Clusters"
        ],
        "summary": "Compute new clusters",
        "description": "Starts a background task to compute how the data in an [embedded storage bucket](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding) is clustered. This helps identify common themes and patterns in the data.",
        "operationId": "compute_new_cluster_public_text_clusters_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicTextClusteringRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextClusteringResponseData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/clusters/{task_id}": {
      "delete": {
        "tags": [
          "Clusters"
        ],
        "summary": "Delete a cluster",
        "operationId": "delete_cluster_by_task_id_public_text_clusters__task_id__delete",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Task Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Clusters"
        ],
        "summary": "Fetch a cluster",
        "operationId": "fetch_cluster_by_task_id_public_text_clusters__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Task Id",
              "type": "string"
            }
          },
          {
            "name": "top_n_nodes",
            "in": "query",
            "description": "The number of nodes in the cluster to return in the response. Nodes will be sorted by their centrality within the cluster.",
            "schema": {
              "title": "Top N Nodes",
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "show_subclusters",
            "in": "query",
            "description": "Whether or not to include subclusters and their nodes in the response.",
            "schema": {
              "title": "Show Subclusters",
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusteringStatusResponseData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/clusters/{task_id}/graph": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "summary": "Fetch a cluster visualization",
        "operationId": "fetch_cluster_image_by_task_id_public_text_clusters__task_id__image_get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Task Id",
              "type": "string"
            }
          },
          {
            "name": "cluster_id",
            "in": "query",
            "schema": {
              "title": "Cluster Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/conversations": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "List conversations",
        "description": "Retrieve a list of all AI conversations configured by the user. Supports [PostgREST-style query parameters](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for filtering. Examples are included for the standard metadata fields, but you can filter on any field in the metadata JSON object. For example, to filter by a custom field `metadata->custom_field`, use `metadata->custom_field=eq.value`.",
        "operationId": "get_conversations_public_conversations_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Filter by conversation ID (e.g. id=eq.123)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by conversation Name (e.g. `name=like.Voice%`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "Filter by creation datetime (e.g., `created_at=gte.2025-01-01`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_message_at",
            "in": "query",
            "description": "Filter by last message datetime (e.g., `last_message_at=lte.2025-06-01`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata->assistant_id",
            "in": "query",
            "description": "Filter by assistant ID (e.g., `metadata->assistant_id=eq.assistant-123`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata->call_control_id",
            "in": "query",
            "description": "Filter by call control ID (e.g., `metadata->call_control_id=eq.v3:123`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata->telnyx_agent_target",
            "in": "query",
            "description": "Filter by the phone number, SIP URI, or other identifier for the agent (e.g., `metadata->telnyx_agent_target=eq.+13128675309`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata->telnyx_end_user_target",
            "in": "query",
            "description": "Filter by the phone number, SIP URI, or other identifier for the end user (e.g., `metadata->telnyx_end_user_target=eq.+13128675309`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata->telnyx_conversation_channel",
            "in": "query",
            "description": "Filter by conversation channel (e.g., `metadata->telnyx_conversation_channel=eq.phone_call`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned conversations (e.g., `limit=10`)",
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order the results by specific fields (e.g., `order=created_at.desc` or `order=last_message_at.asc`)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "or",
            "in": "query",
            "description": "Apply OR conditions using PostgREST syntax (e.g., `or=(created_at.gte.2025-04-01,last_message_at.gte.2025-04-01)`)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationsListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Create a conversation",
        "description": "Create a new AI Conversation.",
        "operationId": "create_new_conversation_public_conversations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/conversations/{conversation_id}": {
      "delete": {
        "tags": [
          "Conversations"
        ],
        "summary": "Delete a conversation",
        "description": "Delete a specific conversation by its ID.",
        "operationId": "delete_conversation_by_id_public_conversations_delete",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "description": "The ID of the conversation to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Get a conversation",
        "description": "Retrieve a specific AI conversation by its ID.",
        "operationId": "get_conversation_by_id_public_conversations_get",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "description": "The ID of the conversation to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Conversations"
        ],
        "summary": "Update conversation metadata",
        "description": "Update metadata for a specific conversation.",
        "operationId": "update_conversation_by_id_public_conversations_put",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "description": "The ID of the conversation to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConversationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Update",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/conversations/{conversation_id}/conversations-insights": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Get insights for a conversation",
        "description": "Retrieve insights for a specific conversation",
        "operationId": "get_conversations_public__conversation_id__insights_get",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationInsightListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/conversations/{conversation_id}/messages": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Get conversation messages",
        "description": "Retrieve messages for a specific conversation, including tool calls made by the assistant.",
        "operationId": "get_conversations_public__conversation_id__messages_get",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationMessageListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings": {
      "get": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Get Tasks by Status",
        "description": "Retrieve tasks for the user that are either `queued`, `processing`, `failed`, `success` or `partial_success` based on the query string. Defaults to `queued` and `processing`.",
        "operationId": "GetTasksByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "List of task statuses i.e. `status=queued&status=processing`",
            "schema": {
              "title": "Status",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of task statuses i.e. `status=queued&status=processing`",
              "default": [
                "processing",
                "queued"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundTasksQueryResponseData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Embed documents",
        "description": "Perform embedding on a Telnyx Storage Bucket using the a embedding model.\nThe current supported file types are:\n- PDF\n- HTML\n- txt/unstructured text files\n- json\n- csv\n- audio / video (mp3, mp4, mpeg, mpga, m4a, wav, or webm ) - Max of 100mb file size.\n\nAny files not matching the above types will be attempted to be embedded as unstructured text.\n\nThis process can be slow, so it runs in the background and the user can check\nthe status of the task using the endpoint `/ai/embeddings/{task_id}`.\n\n **Important Note**: When you update documents in a Telnyx Storage bucket, their associated embeddings are automatically kept up to date. If you add or update a file, it is automatically embedded. If you delete a file, the embeddings are deleted for that particular file.\n\nYou can also specify a custom `loader` param. Currently the only supported loader value is\n`intercom` which loads Intercom article jsons as specified by [the Intercom article API](https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Articles/article/)\nThis loader will split each article into paragraphs and save additional parameters relevant to Intercom docs, such as\n`article_url` and `heading`. These values will be returned by the `/v2/ai/embeddings/similarity-search` endpoint in the `loader_metadata` field.",
        "operationId": "PostEmbedding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingBucketRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings/buckets": {
      "get": {
        "tags": [
          "Embeddings"
        ],
        "summary": "List embedded buckets",
        "description": "Get all embedding buckets for a user.",
        "operationId": "GetEmbeddingBuckets",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEmbeddedBucketsData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings/buckets/{bucket_name}": {
      "delete": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Disable AI for an Embedded Bucket",
        "description": "Deletes an entire bucket's embeddings and disables the bucket for AI-use, returning it to normal storage pricing.",
        "operationId": "embedding_bucket_files_public_embedding_buckets__bucket_name__delete",
        "parameters": [
          {
            "name": "bucket_name",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Bucket Name",
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Bucket Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketNotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Get file-level embedding statuses for a bucket",
        "description": "Get all embedded files for a given user bucket, including their processing status.",
        "operationId": "GetBucketName",
        "parameters": [
          {
            "name": "bucket_name",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Bucket Name",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingsBucketFilesData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings/similarity-search": {
      "post": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Search for documents",
        "description": "Perform a similarity search on a Telnyx Storage Bucket, returning the most similar `num_docs` document chunks to the query.\n\nCurrently the only available distance metric is cosine similarity which will return a `distance` between 0 and 1.\nThe lower the distance, the more similar the returned document chunks are to the query.\nA `certainty` will also be returned, which is a value between 0 and 1 where the higher the certainty, the more similar the document.\nYou can read more about Weaviate distance metrics here: [Weaviate Docs](https://weaviate.io/developers/weaviate/config-refs/distances)\n\nIf a bucket was embedded using a custom loader, such as `intercom`, the additional metadata will be returned in the \n`loader_metadata` field.",
        "operationId": "PostEmbeddingSimilaritySearch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingSimilaritySearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingSimilaritySearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings/url": {
      "post": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Embed URL content",
        "description": "Embed website content from a specified URL, including child pages up to 5 levels deep within the same domain. The process crawls and loads content from the main URL and its linked pages into a Telnyx Cloud Storage bucket. As soon as each webpage is added to the bucket, its content is immediately processed for embeddings, that can be used for [similarity search](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding-similarity-search) and [clustering](https://developers.telnyx.com/docs/inference/clusters).",
        "operationId": "PostEmbeddingUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/embeddings/{task_id}": {
      "get": {
        "tags": [
          "Embeddings"
        ],
        "summary": "Get an embedding task's status",
        "description": "Check the status of a current embedding task. Will be one of the following:\n- `queued` - Task is waiting to be picked up by a worker\n- `processing` - The embedding task is running\n- `success` - Task completed successfully and the bucket is embedded\n- `failure` - Task failed and no files were embedded successfully\n- `partial_success` - Some files were embedded successfully, but at least one failed",
        "operationId": "GetEmbeddingTask",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Task Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/fine_tuning/jobs": {
      "get": {
        "tags": [
          "Fine Tuning"
        ],
        "summary": "List fine tuning jobs",
        "description": "Retrieve a list of all fine tuning jobs created by the user.",
        "operationId": "get_finetuningjob_public_finetuning_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobsListData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Fine Tuning"
        ],
        "summary": "Create a fine tuning job",
        "description": "Create a new fine tuning job.",
        "operationId": "create_new_finetuningjob_public_finetuning_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFineTuningJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/fine_tuning/jobs/{job_id}": {
      "get": {
        "tags": [
          "Fine Tuning"
        ],
        "summary": "Get a fine tuning job",
        "description": "Retrieve a fine tuning job by `job_id`.",
        "operationId": "get_finetuningjob_public_finetuning__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/fine_tuning/jobs/{job_id}/cancel": {
      "post": {
        "tags": [
          "Fine Tuning"
        ],
        "summary": "Cancel a fine tuning job",
        "description": "Cancel a fine tuning job.",
        "operationId": "cancel_new_finetuningjob_public_finetuning_post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJob"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/models": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get available models",
        "description": "This endpoint returns a list of Open Source and OpenAI models that are available for use. <br /><br /> **Note**: Model `id`'s will be in the form `{source}/{model_name}`. For example `openai/gpt-4` or `mistralai/Mistral-7B-Instruct-v0.1` consistent with HuggingFace naming conventions.",
        "operationId": "get_models_public_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ai/summarize": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Summarize file content",
        "description": "Generate a summary of a file's contents. \n\n Supports the following text formats: \n- PDF, HTML, txt, json, csv\n\n Supports the following media formats (billed for both the transcription and summary): \n- flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm\n- Up to 100 MB",
        "operationId": "PostSummary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SummaryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummaryResponseData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/audit_events": {
      "get": {
        "tags": [
          "Audit Logs"
        ],
        "summary": "List Audit Logs",
        "description": "Retrieve a list of audit log entries. Audit logs are a best-effort, eventually consistent record of significant account-related changes.",
        "operationId": "ListAuditLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterCreatedBefore"
          },
          {
            "$ref": "#/components/parameters/FilterCreatedAfter"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuditLogListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/authentication_providers": {
      "get": {
        "tags": [
          "Authentication Providers"
        ],
        "summary": "List all SSO authentication providers",
        "description": "Returns a list of your SSO authentication providers.",
        "operationId": "FindAuthenticationProviders",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "The page number to load",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "The size of the page",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code>-</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>name</code>: sorts the result by the\n    <code>name</code> field in ascending order.\n  </li>\n  <li>\n    <code>-name</code>: sorts the result by the\n    <code>name</code> field in descending order.\n  </li>\n</ul><br/>If not given, results are sorted by <code>created_at</code> in descending order.",
            "schema": {
              "enum": [
                "name",
                "-name",
                "short_name",
                "-short_name",
                "active",
                "-active",
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at"
              ],
              "type": "string",
              "default": "-created_at",
              "example": "name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAuthenticationProviders_200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAuthenticationProviders_400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAuthenticationProviders_401"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindAuthenticationProviders_404"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Authentication Providers"
        ],
        "summary": "Creates an authentication provider",
        "description": "Creates an authentication provider.",
        "operationId": "CreateAuthenticationProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationProviderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationProvider"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAuthenticationProvider_422"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/authentication_providers/{id}": {
      "delete": {
        "tags": [
          "Authentication Providers"
        ],
        "summary": "Deletes an authentication provider",
        "description": "Deletes an existing authentication provider.",
        "operationId": "DeleteAuthenticationProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "authentication provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationProvider"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAuthenticationProvider_401"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAuthenticationProvider_404"
                }
              }
            }
          },
          "422": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAuthenticationProvider_422"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Authentication Providers"
        ],
        "summary": "Retrieve an authentication provider",
        "description": "Retrieves the details of an existing authentication provider.",
        "operationId": "GetAuthenticationProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "authentication provider ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationProvider"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAuthenticationProvider_401"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAuthenticationProvider_404"
                }
              }
            }
          },
          "422": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAuthenticationProvider_422"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Authentication Providers"
        ],
        "summary": "Update an authentication provider",
        "description": "Updates settings of an existing authentication provider.",
        "operationId": "UpdateAuthenticationProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAuthenticationProviderRequest"
              },
              "example": {
                "name": "Okta",
                "short_name": "myorg",
                "active": true,
                "settings": {
                  "idp_entity_id": "https://myorg.myidp.com/saml/metadata",
                  "idp_sso_target_url": "https://myorg.myidp.com/trust/saml2/http-post/sso",
                  "idp_cert_fingerprint": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7",
                  "idp_cert_fingerprint_algorithm": "sha1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationProvider"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAuthenticationProvider_401"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAuthenticationProvider_404"
                }
              }
            }
          },
          "422": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAuthenticationProvider_422"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/available_phone_number_blocks": {
      "get": {
        "tags": [
          "Phone Number Search"
        ],
        "summary": "List available phone number blocks",
        "operationId": "ListAvailablePhoneNumberBlocks",
        "parameters": [
          {
            "name": "filter[locality]",
            "in": "query",
            "description": "Filter phone numbers by city.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "Chicago"
              }
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter phone numbers by country.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Must use 2 letter ISO alpha-2 country code",
                "value": "US"
              }
            }
          },
          {
            "name": "filter[national_destination_code]",
            "in": "query",
            "description": "Filter by the national destination code of the number.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "312"
              }
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Filter phone numbers by number type.",
            "schema": {
              "enum": [
                "local",
                "toll_free",
                "mobile",
                "national",
                "shared_cost"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListAvailablePhoneNumbersBlockResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/available_phone_numbers": {
      "get": {
        "tags": [
          "Phone Number Search"
        ],
        "summary": "List available phone numbers",
        "operationId": "ListAvailablePhoneNumbers",
        "parameters": [
          {
            "name": "filter[phone_number][starts_with]",
            "in": "query",
            "description": "Filter numbers starting with a pattern (excludes NDC if used with `national_destination_code` filter).",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Find numbers starting with the pattern. Can be numbers or letters e.g '8226' or 'TACO'",
                "value": "TACO"
              }
            }
          },
          {
            "name": "filter[phone_number][ends_with]",
            "in": "query",
            "description": "Filter numbers ending with a pattern (excludes NDC if used with `national_destination_code` filter).",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Find numbers ending with the pattern. Can be numbers or letters e.g '8226' or 'TACO'",
                "value": "TACO"
              }
            }
          },
          {
            "name": "filter[phone_number][contains]",
            "in": "query",
            "description": "Filter numbers containing a pattern (excludes NDC if used with `national_destination_code` filter).",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Find numbers that contain the pattern. Can be numbers or letters e.g '8226' or 'TACO'",
                "value": "TACO"
              }
            }
          },
          {
            "name": "filter[locality]",
            "in": "query",
            "description": "Filter phone numbers by city.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "Chicago"
              }
            }
          },
          {
            "name": "filter[administrative_area]",
            "in": "query",
            "description": "Find numbers in a particular US state or CA province.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Must use 2 letter state/province code.",
                "value": "IL"
              }
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter phone numbers by country.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "summary": "Must use 2 letter ISO alpha-2 country code",
                "value": "US"
              }
            }
          },
          {
            "name": "filter[national_destination_code]",
            "in": "query",
            "description": "Filter by the national destination code of the number.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "312"
              }
            }
          },
          {
            "name": "filter[rate_center]",
            "in": "query",
            "description": "Filter phone numbers by rate center. This filter is only applicable to USA and Canada numbers.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "Chicago Heights"
              }
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Filter phone numbers by number type.",
            "schema": {
              "enum": [
                "local",
                "toll_free",
                "mobile",
                "national",
                "shared_cost"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[features]",
            "in": "query",
            "description": "Filter phone numbers with specific features.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "sms",
                  "mms",
                  "voice",
                  "fax",
                  "emergency",
                  "hd_voice",
                  "international_sms",
                  "local_calling"
                ],
                "type": "string"
              }
            },
            "examples": {
              "generic": {
                "summary": "This filter will also accept a list of features",
                "value": "voice,sms,hd_voice"
              }
            }
          },
          {
            "name": "filter[limit]",
            "in": "query",
            "description": "Limits the number of results.",
            "schema": {
              "type": "integer"
            },
            "examples": {
              "generic": {
                "value": 100
              }
            }
          },
          {
            "name": "filter[best_effort]",
            "in": "query",
            "description": "Filter to determine if best effort results should be included. Only available in USA/CANADA.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "generic": {
                "summary": "If no numbers are found in specified area, try return numbers from a similar location.",
                "value": "true"
              }
            }
          },
          {
            "name": "filter[quickship]",
            "in": "query",
            "description": "Filter to exclude phone numbers that need additional time after to purchase to activate. Only applicable for +1 toll_free numbers.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "generic": {
                "value": "true"
              }
            }
          },
          {
            "name": "filter[reservable]",
            "in": "query",
            "description": "Filter to ensure only numbers that can be reserved are included in the results.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "generic": {
                "value": "true"
              }
            }
          },
          {
            "name": "filter[exclude_held_numbers]",
            "in": "query",
            "description": "Filter to exclude phone numbers that are currently on hold/reserved for your account.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "generic": {
                "value": "true"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListAvailablePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "heavy",
        "x-latency-category": "responsive"
      }
    },
    "/balance": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get user balance details",
        "operationId": "GetUserBalance",
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserBalanceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/billing_groups": {
      "get": {
        "tags": [
          "Billing Groups"
        ],
        "summary": "List all billing groups",
        "description": "",
        "operationId": "ListBillingGroups",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "The page number to load",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "The size of the page",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of billing groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBillingGroups_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Billing Groups"
        ],
        "summary": "Create a billing group",
        "description": "",
        "operationId": "CreateBillingGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBillingGroup"
              },
              "example": {
                "name": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected billing group response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BillingGroup"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/billing_groups/{id}": {
      "delete": {
        "tags": [
          "Billing Groups"
        ],
        "summary": "Delete a billing group",
        "description": "",
        "operationId": "DeleteBillingGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected billing group response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BillingGroup"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Billing Groups"
        ],
        "summary": "Get a billing group",
        "description": "",
        "operationId": "GetBillingGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected billing group response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BillingGroup"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Billing Groups"
        ],
        "summary": "Update a billing group",
        "description": "",
        "operationId": "UpdateBillingGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the billing group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBillingGroup"
              },
              "example": {
                "name": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected billing group response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BillingGroup"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "List Brands",
        "description": "This endpoint is used to list all brands associated with your organization.",
        "operationId": "GetBrands",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "title": "Page",
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "recordsPerPage",
            "in": "query",
            "description": "number of records per page. maximum of 500",
            "schema": {
              "title": "Recordsperpage",
              "type": "integer",
              "description": "number of records per page. maximum of 500",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by createdAt in descending order.",
            "schema": {
              "title": "Sort",
              "enum": [
                "assignedCampaignsCount",
                "-assignedCampaignsCount",
                "brandId",
                "-brandId",
                "createdAt",
                "-createdAt",
                "displayName",
                "-displayName",
                "identityStatus",
                "-identityStatus",
                "status",
                "-status",
                "tcrBrandId",
                "-tcrBrandId"
              ],
              "type": "string",
              "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
              "default": "-createdAt"
            },
            "example": "-identityStatus"
          },
          {
            "name": "displayName",
            "in": "query",
            "schema": {
              "title": "Displayname",
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "schema": {
              "title": "Entitytype",
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "title": "State",
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "schema": {
              "title": "Country",
              "type": "string"
            }
          },
          {
            "name": "brandId",
            "in": "query",
            "description": "Filter results by the Telnyx Brand id",
            "schema": {
              "title": "BrandId",
              "type": "string",
              "example": "826ef77a-348c-445b-81a5-a9b13c68fbfe"
            }
          },
          {
            "name": "tcrBrandId",
            "in": "query",
            "description": "Filter results by the TCR Brand id",
            "schema": {
              "title": "TCRBrandId",
              "type": "string",
              "example": "BBAND1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandRecordSetCSP"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Create Brand",
        "description": "This endpoint is used to create a new brand. A brand is an entity created by The Campaign Registry (TCR) that represents an organization or a company. It is this entity that TCR created campaigns will be associated with. Each brand creation will entail an upfront, non-refundable $4 expense.",
        "operationId": "CreateBrandPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBrand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxBrand"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand/feedback/{brandId}": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get Brand Feedback By Id",
        "description": "Get feedback about a brand by ID. This endpoint can be used after creating or revetting\na brand.\n\nPossible values for `.category[].id`:\n\n* `TAX_ID` - Data mismatch related to tax id and its associated properties.\n* `STOCK_SYMBOL` - Non public entity registered as a public for profit entity or\n  the stock information mismatch.\n* `GOVERNMENT_ENTITY` - Non government entity registered as a government entity.\n  Must be a U.S. government entity.\n* `NONPROFIT` - Not a recognized non-profit entity. No IRS tax-exempt status\n  found.\n* `OTHERS` - Details of the data misrepresentation if any.",
        "operationId": "GetBrandFeedbackById",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandFeedback"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand/{brandId}": {
      "delete": {
        "tags": [
          "Brands"
        ],
        "summary": "Delete Brand",
        "description": "Delete Brand. This endpoint is used to delete a brand. Note the brand cannot be deleted if it contains one or more active campaigns, the campaigns need to be inactive and at least 3 months old due to billing purposes.",
        "operationId": "DeleteBrand",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "Get Brand",
        "description": "Retrieve a brand by `brandId`.",
        "operationId": "GetBrand",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxBrandWithCampaignsCount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Brands"
        ],
        "summary": "Update Brand",
        "description": "Update a brand's attributes by `brandId`.",
        "operationId": "UpdateBrand",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBrand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxBrand"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand/{brandId}/2faEmail": {
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Resend brand 2FA email",
        "operationId": "ResendBrand2faEmail",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendBrand2faEmail_201"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand/{brandId}/externalVetting": {
      "get": {
        "tags": [
          "Brands"
        ],
        "summary": "List External Vettings",
        "description": "Get list of valid external vetting record for a given brand",
        "operationId": "ListExternalVettings",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Brands"
        ],
        "summary": "Order Brand External Vetting",
        "description": "Order new external vetting for a brand",
        "operationId": "PostOrderExternalVetting",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderExternalVetting"
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Brands"
        ],
        "summary": "Import External Vetting Record",
        "description": "This operation can be used to import an external vetting record from a TCR-approved\nvetting provider. If the vetting provider confirms validity of the record, it will be\nsaved with the brand and will be considered for future campaign qualification.",
        "operationId": "PutExternalVettingRecord",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportExternalVetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalVetting"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/brand/{brandId}/revet": {
      "put": {
        "tags": [
          "Brands"
        ],
        "summary": "Revet Brand",
        "description": "This operation allows you to revet the brand. However, revetting is allowed once after the successful brand registration and thereafter limited to once every 3 months.",
        "operationId": "RevetBrand",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/bulk_sim_card_actions": {
      "get": {
        "tags": [
          "SIM Card Actions"
        ],
        "summary": "List bulk SIM card actions",
        "description": "This API lists a paginated collection of bulk SIM card actions. A bulk SIM card action contains details about a collection of individual SIM card actions.",
        "operationId": "ListBulkSimCardActions",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[action_type]",
            "in": "query",
            "description": "Filter by action type.",
            "schema": {
              "enum": [
                "bulk_set_public_ips"
              ],
              "type": "string",
              "example": "bulk_set_public_ips"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkSIMCardActionCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/bulk_sim_card_actions/{id}": {
      "get": {
        "tags": [
          "SIM Card Actions"
        ],
        "summary": "Get bulk SIM card action details",
        "description": "This API fetches information about a bulk SIM card action. A bulk SIM card action contains details about a collection of individual SIM card actions.",
        "operationId": "GetBulkSimCardAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkSIMCardActionDetailedResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/billing_bundles": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "Retrieve Bundles",
        "description": "Get all allowed bundles.",
        "operationId": "GetUserBillingBundles",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCountryIso"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBillingBundlesResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/billing_bundles/{bundle_id}": {
      "get": {
        "tags": [
          "Bundles"
        ],
        "summary": "Get Bundle By Id",
        "description": "Get a single bundle by ID.",
        "operationId": "GetBillingBundleById",
        "parameters": [
          {
            "$ref": "#/components/parameters/BillingBundleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingBundleResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/user_bundles": {
      "get": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Get User Bundles",
        "description": "Get a paginated list of user bundles.",
        "operationId": "GetUserBundles",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCountryIso"
          },
          {
            "name": "filter[resource]",
            "in": "query",
            "description": "Filter by resource.",
            "schema": {
              "title": "Filter[Resource]",
              "type": "array",
              "items": {
                "type": "string",
                "description": "Filter by resource.",
                "example": "+15617819942"
              }
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserBundlesResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/user_bundles/bulk": {
      "post": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Create User Bundles",
        "description": "Creates multiple user bundles for the user.",
        "operationId": "CreateUserBundlesBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserBundlesBulkRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedUserBundlesResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/user_bundles/unused": {
      "get": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Get Unused User Bundles",
        "description": "Returns all user bundles that aren't in use.",
        "operationId": "GetUnusedUserBundles",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCountryIso"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnusedUserBundlesResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/user_bundles/{user_bundle_id}": {
      "delete": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Deactivate User Bundle",
        "description": "Deactivates a user bundle by its ID.",
        "operationId": "DeactivateUserBundle",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserBundleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundleCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Get User Bundle by Id",
        "description": "Retrieves a user bundle by its ID.",
        "operationId": "GetUserBundleById",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserBundleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundleResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/bundle_pricing/user_bundles/{user_bundle_id}/resources": {
      "get": {
        "tags": [
          "User Bundles"
        ],
        "summary": "Get User Bundle Resources",
        "description": "Retrieves the resources of a user bundle by its ID.",
        "operationId": "GetUserBundleResources",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserBundleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBundleResourcesResponse"
                }
              }
            }
          }
        },
        "security": [
          { }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/call_control_applications": {
      "get": {
        "tags": [
          "Call Control Applications"
        ],
        "summary": "List call control applications",
        "description": "Return a list of call control applications.",
        "operationId": "ListCallControlApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterApplicationName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallControlApplicationsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "Call Control Applications"
        ],
        "summary": "Create a call control application",
        "description": "Create a call control application.",
        "operationId": "CreateCallControlApplication",
        "requestBody": {
          "description": "Create call control application request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      }
    },
    "/call_control_applications/{id}": {
      "delete": {
        "tags": [
          "Call Control Applications"
        ],
        "summary": "Delete a call control application",
        "description": "Deletes a call control application.",
        "operationId": "DeleteCallControlApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "Call Control Applications"
        ],
        "summary": "Retrieve a call control application",
        "description": "Retrieves the details of an existing call control application.",
        "operationId": "RetrieveCallControlApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "patch": {
        "tags": [
          "Call Control Applications"
        ],
        "summary": "Update a call control application",
        "description": "Updates settings of an existing call control application.",
        "operationId": "UpdateCallControlApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1293384261075731499"
            }
          }
        ],
        "requestBody": {
          "description": "Update call control application request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallControlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/call_events": {
      "get": {
        "tags": [
          "Debugging"
        ],
        "summary": "List call events",
        "description": "Filters call events by given filter parameters. Events are ordered by `occurred_at`. If filter for `leg_id` or `application_session_id` is not present, it only filters events from the last 24 hours.\n\n**Note**: Only one `filter[occurred_at]` can be passed.\n",
        "operationId": "ListCallEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCallLegId"
          },
          {
            "$ref": "#/components/parameters/FilterCallSessionId"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionId"
          },
          {
            "$ref": "#/components/parameters/FilterProduct"
          },
          {
            "$ref": "#/components/parameters/FilterFrom"
          },
          {
            "$ref": "#/components/parameters/FilterTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventFailed"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventType"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventName"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventOccurredAtGreaterThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventOccurredAtGreaterThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventOccurredAtLessThan"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventOccurredAtLessThanOrEqualTo"
          },
          {
            "$ref": "#/components/parameters/FilterCallEventOccurredAtEqualTo"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCallEventsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/calls": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Dial",
        "description": "Dial a number or SIP URI from a given connection. A successful response will include a `call_leg_id` which can be used to correlate the command with subsequent webhooks.\n\n**Expected Webhooks (see [schema](https://developers.telnyx.com/api/call-control/dial-call#callbacks) below):**\n\n- `call.initiated`\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was requested to detect the end of machine greeting\n- `call.machine.premium.detection.ended` if `answering_machine_detection=premium` was requested\n- `call.machine.premium.greeting.ended` if `answering_machine_detection=premium` was requested and a beep was detected\n- `streaming.started`, `streaming.stopped` or `streaming.failed` if `stream_url` was set\n\nWhen the `record` parameter is set to `record-from-answer`, the response will include a `recording_id` field.\n",
        "operationId": "DialCall",
        "requestBody": {
          "description": "Call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponseWithRecordingId"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumDetectionEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumGreetingEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}": {
      "get": {
        "tags": [
          "Call Information"
        ],
        "summary": "Retrieve a call status",
        "description": "Returns the status of a call (data is available 10 minutes after call ended).",
        "operationId": "RetrieveCallStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveCallStatusResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/ai_assistant_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Start AI Assistant",
        "description": "Start an AI assistant on the call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/call-start-ai-assistant#callbacks) below):**\n\n- `call.conversation.ended`\n- `call.conversation_insights.generated`\n",
        "operationId": "CallStartAIAssistant",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "AI Assistant request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAssistantStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callConversationEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callConversationEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callConversationInsightsGenerated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callConversationInsightsGeneratedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/ai_assistant_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Stop AI Assistant",
        "description": "Stop an AI assistant on the call.",
        "operationId": "CallStopAIAssistant",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "AI Assistant request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAssistantStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/answer": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Answer call",
        "description": "Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/answer-call#callbacks) below):**\n\n- `call.answered`\n- `streaming.started`, `streaming.stopped` or `streaming.failed` if `stream_url` was set\n\nWhen the `record` parameter is set to `record-from-answer`, the response will include a `recording_id` field.\n",
        "operationId": "AnswerCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Answer call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponseWithRecordingId"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "streamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/bridge": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Bridge calls",
        "description": "Bridge two call control calls.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/bridge-call#callbacks) below):**\n\n- `call.bridged` for Leg A\n- `call.bridged` for Leg B\n",
        "operationId": "BridgeCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Bridge call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/client_state_update": {
      "put": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Update client state",
        "description": "Updates client state",
        "operationId": "UpdateClientState",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Updates client state for every subsequent webhook",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientStateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/enqueue": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Enqueue call",
        "description": "Put the call in a queue.",
        "operationId": "EnqueueCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Enqueue call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnqueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callEnqueued": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallEnqueuedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Forking start",
        "description": "Call forking allows you to stream the media from a call to a specific target in realtime. \nThis stream can be used to enable realtime audio analysis to support a \nvariety of use cases, including fraud detection, or the creation of AI-generated audio responses. \nRequests must specify either the `target` attribute or the `rx` and `tx` attributes.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-fork#callbacks) below):**\n\n- `call.fork.started`\n- `call.fork.stopped`\n\n",
        "operationId": "StartCallFork",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Fork media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/fork_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Forking stop",
        "description": "Stop forking a call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-fork#callbacks) below):**\n\n- `call.fork.stopped`\n",
        "operationId": "StopCallFork",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop forking media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callForkStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallForkStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Gather",
        "description": "Gather DTMF signals to build interactive menus.\n\nYou can pass a list of valid digits. The `Answer` command must be issued before the `gather` command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-call#callbacks) below):**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "GatherCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Gather stop",
        "description": "Stop current gather.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-gather#callbacks) below):**\n\n- `call.gather.ended`\n",
        "operationId": "StopCallGather",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop current gather",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopGatherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_ai": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Gather using AI",
        "description": "Gather parameters defined in the request payload using a voice assistant.\n\n You can pass parameters described as a JSON Schema object and the voice assistant will attempt to gather these informations. \n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) below):**\n\n- `call.ai_gather.ended`\n- `call.conversation.ended`\n- `call.ai_gather.partial_results` (if `send_partial_results` is set to `true`)\n- `call.ai_gather.message_history_updated` (if `send_message_history_updates` is set to `true`)\n",
        "operationId": "callGatherUsingAI",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using AI request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingAIRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "CallAIGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAIGatherEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callConversationEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callConversationEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "CallAIGatherPartialResults": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAIGatherPartialResultsEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "CallAIGatherMessageHistoryUpdated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAIGatherMessageHistoryUpdatedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_audio": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Gather using audio",
        "description": "Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_audio_url', which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The `Answer command must be issued before the `gather_using_audio` command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-using-audio#callbacks) below):**\n\n- `call.playback.started`\n- `call.playback.ended`\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "GatherUsingAudio",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using audio request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingAudioRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/gather_using_speak": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Gather using speak",
        "description": "Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.\n\nYou can pass a list of valid digits along with an 'invalid_payload', which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The `Answer` command must be issued before the `gather_using_speak` command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-using-speak#callbacks) below):**\n\n- `call.dtmf.received` (you may receive many of these webhooks)\n- `call.gather.ended`\n",
        "operationId": "GatherUsingSpeak",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Gather using speak request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatherUsingSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callDtmfReceived": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDtmfReceivedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callGatherEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallGatherEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/hangup": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Hangup call",
        "description": "Hang up the call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/hangup-call#callbacks) below):**\n\n- `call.hangup`\n- `call.recording.saved`\n",
        "operationId": "HangupCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Hangup request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HangupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingError": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingErrorEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/leave_queue": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Remove call from a queue",
        "description": "Removes the call from a queue.",
        "operationId": "LeaveQueue",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Removes the call from the queue, the call currently is enqueued in.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveQueueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callLeftQueue": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallLeftQueueEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Play audio URL",
        "description": "Play an audio file on the call. If multiple play audio commands are issued consecutively,\nthe audio files will be placed in a queue awaiting playback.\n\n*Notes:*\n\n- When `overlay` is enabled, `target_legs` is limited to `self`.\n- A customer cannot Play Audio with `overlay=true` unless there is a Play Audio with `overlay=false` actively playing.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-playback#callbacks) below):**\n\n- `call.playback.started`\n- `call.playback.ended`\n",
        "operationId": "StartCallPlayback",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Play audio URL request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayAudioUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/playback_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Stop audio playback",
        "description": "Stop audio being played on the call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-playback#callbacks) below):**\n\n- `call.playback.ended` or `call.speak.ended`\n",
        "operationId": "StopCallPlayback",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop audio playback request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaybackStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallPlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_pause": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Record pause",
        "description": "Pause recording the call. Recording can be resumed via Resume recording command.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "PauseCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Pause recording call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_resume": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Record resume",
        "description": "Resume recording the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "ResumeCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Resume recording call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Recording start",
        "description": "Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-record#callbacks) below):**\n\n- `call.recording.saved`\n- `call.recording.transcription.saved`\n- `call.recording.error`\n",
        "operationId": "StartCallRecord",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start recording audio request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingTranscriptionSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingTranscriptionSavedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingError": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingErrorEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/record_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Recording stop",
        "description": "Stop recording the call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-recording#callbacks) below):**\n\n- `call.recording.saved`\n",
        "operationId": "StopCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop recording call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallRecordingSavedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callRecordingError": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/callRecordingErrorEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/refer": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "SIP Refer a call",
        "description": "Initiate a SIP Refer on a Call Control call. You can initiate a SIP Refer at any point in the duration of a call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/refer-call#callbacks) below):**\n\n- `call.refer.started`\n- `call.refer.completed`\n- `call.refer.failed`\n",
        "operationId": "ReferCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Refer request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callReferStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferCompleted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferCompletedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callReferFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallReferFailedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/reject": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Reject a call",
        "description": "Reject an incoming call.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/reject-call#callbacks) below):**\n\n- `call.hangup`\n",
        "operationId": "RejectCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Reject request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/send_dtmf": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Send DTMF",
        "description": "Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.\n\n**Expected Webhooks:**\n\nThere are no webhooks associated with this command.\n",
        "operationId": "SendDTMF",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Send DTMF request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDTMFRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/send_sip_info": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Send SIP info",
        "description": "Sends SIP info from this leg.\n\n**Expected Webhooks:**\n\n- `call.sip_info.received` (to be received on the target call leg)\n",
        "operationId": "SendSIPInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Send SIP INFO request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSIPInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/siprec_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "SIPREC start",
        "description": "Start siprec session to configured in SIPREC connector SRS. \n\n**Expected Webhooks:**\n\n- `siprec.started`\n- `siprec.stopped`\n- `siprec.failed`\n",
        "operationId": "StartSiprecSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start siprec session to configured in SIPREC connector SRS.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartSiprecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callSiprecStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSiprecStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSiprecStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSiprecStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSiprecFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSiprecFailedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/siprec_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "SIPREC stop",
        "description": "Stop SIPREC session.\n\n**Expected Webhooks:**\n\n- `siprec.stopped`\n",
        "operationId": "StopSiprecSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop siprec session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopSiprecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callStreamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSiprecStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/speak": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Speak text",
        "description": "Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/speak-call#callbacks) below):**\n\n- `call.speak.started`\n- `call.speak.ended`\n",
        "operationId": "SpeakCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Speak request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallSpeakEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/streaming_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Streaming start",
        "description": "Start streaming the media from a call to a specific WebSocket address or Dialogflow connection in near-realtime. Audio will be delivered as base64-encoded RTP payload (raw audio), wrapped in JSON payloads.\n\nPlease find more details about media streaming messages specification under the [link](https://developers.telnyx.com/docs/voice/programmable-voice/media-streaming).",
        "operationId": "StartCallStreaming",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start streaming media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartStreamingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callStreamingStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callStreamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callStreamingFailed": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingFailedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/streaming_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Streaming stop",
        "description": "Stop streaming a call to a WebSocket.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-streaming#callbacks) below):**\n\n- `streaming.stopped`\n",
        "operationId": "StopCallStreaming",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Stop streaming media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopStreamingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callStreamingStopped": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallStreamingStoppedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/suppression_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Noise Suppression Start (BETA)",
        "operationId": "noiseSuppressionStart",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start streaming media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoiseSuppressionStart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/suppression_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Noise Suppression Stop (BETA)",
        "operationId": "noiseSuppressionStop",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Start streaming media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoiseSuppressionStop"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_start": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Transcription start",
        "description": "Start real-time transcription. Transcription will stop on call hang-up, or can be initiated via the Transcription stop command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-transcription#callbacks) below):**\n\n- `call.transcription`\n",
        "operationId": "StartCallTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription start request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "transcription": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TranscriptionEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transcription_stop": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Transcription stop",
        "description": "Stop real-time transcription.",
        "operationId": "StopCallTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transcription stop request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscriptionStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/calls/{call_control_id}/actions/transfer": {
      "post": {
        "tags": [
          "Call Commands"
        ],
        "summary": "Transfer call",
        "description": "Transfer a call to a new destination. If the transfer is unsuccessful, a `call.hangup` webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/transfer-call#callbacks) below):**\n\n- `call.initiated`\n- `call.bridged` to Leg B\n- `call.answered` or `call.hangup`\n- `call.machine.detection.ended` if `answering_machine_detection` was requested\n- `call.machine.greeting.ended` if `answering_machine_detection` was requested to detect the end of machine greeting\n- `call.machine.premium.detection.ended` if `answering_machine_detection=premium` was requested\n- `call.machine.premium.greeting.ended` if `answering_machine_detection=premium` was requested and a beep was detected\n",
        "operationId": "TransferCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "requestBody": {
          "description": "Transfer call request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CallControlCommandResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "callInitiated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallInitiatedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callBridged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallBridgedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callAnswered": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallAnsweredEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callHangup": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallHangupEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumDetectionEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachinePremiumGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachinePremiumGreetingEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineDetectionEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineDetectionEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "callMachineGreetingEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallMachineGreetingEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/campaign": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "List Campaigns",
        "description": "Retrieve a list of campaigns associated with a supplied `brandId`.",
        "operationId": "GetCampaigns",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 1-indexed page number to get. The default value is `1`.",
            "schema": {
              "title": "Page",
              "type": "integer",
              "description": "The 1-indexed page number to get. The default value is `1`.",
              "default": 1
            }
          },
          {
            "name": "recordsPerPage",
            "in": "query",
            "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
            "schema": {
              "title": "Recordsperpage",
              "type": "integer",
              "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by createdAt in descending order.",
            "schema": {
              "title": "Sort",
              "enum": [
                "assignedPhoneNumbersCount",
                "-assignedPhoneNumbersCount",
                "campaignId",
                "-campaignId",
                "createdAt",
                "-createdAt",
                "status",
                "-status",
                "tcrCampaignId",
                "-tcrCampaignId"
              ],
              "type": "string",
              "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
              "default": "-createdAt"
            },
            "example": "-assignedPhoneNumbersCount"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignRecordSet_CSP"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/acceptSharing/{campaignId}": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Accept Shared Campaign",
        "description": "Manually accept a campaign shared with Telnyx",
        "operationId": "AcceptCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "TCR's ID for the campaign to import",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "pattern": "^C[A-Z0-9]{5,8}$",
              "type": "string",
              "description": "TCR's ID for the campaign to import"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/usecase/cost": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get Campaign Cost",
        "operationId": "GetCampaignCost",
        "parameters": [
          {
            "name": "usecase",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Usecase",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignCost"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/{campaignId}": {
      "delete": {
        "tags": [
          "Campaign"
        ],
        "summary": "Deactivate My Campaign",
        "description": "Terminate a campaign. Note that once deactivated, a campaign cannot be restored.",
        "operationId": "DeactivateCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignDeletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get My Campaign",
        "description": "Retrieve campaign details by `campaignId`.",
        "operationId": "GetCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxCampaign_CSP"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Campaign"
        ],
        "summary": "Update My Campaign",
        "description": "Update a campaign's properties by `campaignId`. **Please note:** only sample messages are editable.",
        "operationId": "UpdateCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxCampaign_CSP"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/{campaignId}/mnoMetadata": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get Campaign Mno Metadata",
        "description": "Get the campaign metadata for each MNO it was submitted to.",
        "operationId": "GetCampaignMnoMetadata",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "ID of the campaign in question",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string",
              "description": "ID of the campaign in question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response. It constains a map of usecase metadata for each MNO. The key is the network ID of the MNO (e.g. 10017), the value is the mno metadata for the usecase. The metadata may also include some MNO specific fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MnoMetadata"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/{campaignId}/operationStatus": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get My Campaign Operation Status",
        "description": "Retrieve campaign's operation status at MNO level.",
        "operationId": "GetCampaignOperationStatus",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCampaignOperationStatus_200"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/{campaignId}/osr/attributes": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get My Osr Campaign Attributes",
        "operationId": "GetCampaignOsrAttributes",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCampaignOsrAttributes_200"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaign/{campaignId}/sharing": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Get Sharing Status",
        "operationId": "GetCampaignSharingStatus",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "ID of the campaign in question",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string",
              "description": "ID of the campaign in question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSharingChain"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaignBuilder": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Submit Campaign",
        "description": "Before creating a campaign, use the [Qualify By Usecase endpoint](https://developers.telnyx.com/api/messaging/10dlc/get-usecase-qualification) to ensure that the brand you want to assign a new campaign to is qualified for the desired use case of that campaign. **Please note:** After campaign creation, you'll only be able to edit the campaign's sample messages. Creating a campaign will entail an upfront, non-refundable three month's cost that will depend on the campaign's use case ([see 10DLC Costs section for details](https://developers.telnyx.com/docs/messaging/10dlc/concepts#10dlc-costs)).",
        "operationId": "PostCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCampaign_200"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "callbacks": {
          "campaignStatusUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Campaign status update webhook",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CampaignStatusUpdateEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return a HTTP 200, otherwise we will reattempt to deliver the webhook to the failover URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/campaignBuilder/brand/{brandId}/usecase/{usecase}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Qualify By Usecase",
        "description": "This endpoint allows you to see whether or not the supplied brand is suitable for your desired campaign use case.",
        "operationId": "GetUsecaseQualification",
        "parameters": [
          {
            "name": "usecase",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Usecase",
              "type": "string"
            }
          },
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Brandid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsecaseMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/channel_zones": {
      "get": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "List your voice channels for non-US zones",
        "description": "Returns the non-US voice channels for your account. voice channels allow you to use Channel Billing for calls to your Telnyx phone numbers. Please check the <a href=\"https://support.telnyx.com/en/articles/8428806-global-channel-billing\">Telnyx Support Articles</a> section for full information and examples of how to utilize Channel Billing.",
        "operationId": "GetChannelZones",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetGcbChannelZonesRequestResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/channel_zones/{channel_zone_id}": {
      "put": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "Update voice channels for non-US Zones",
        "description": "Update the number of Voice Channels for the Non-US Zones. This allows your account to handle multiple simultaneous inbound calls to Non-US numbers. Use this endpoint to increase or decrease your capacity based on expected call volume.",
        "operationId": "PatchChannelZone",
        "requestBody": {
          "description": "Quantity of reserved channels and organizational update option",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchChannelZone"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PatchGcbChannelZoneRequestResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-codegen-request-body-name": "body",
        "x-latency-category": "interactive"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/GcbChannelZoneId"
        }
      ]
    },
    "/comments": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve all comments",
        "operationId": "ListComments",
        "parameters": [
          {
            "name": "filter[comment_record_type]",
            "in": "query",
            "description": "Record type that the comment relates to",
            "required": true,
            "schema": {
              "enum": [
                "sub_number_order",
                "requirement_group"
              ],
              "type": "string",
              "example": "sub_number_order"
            }
          },
          {
            "name": "filter[comment_record_id]",
            "in": "query",
            "description": "ID of the record the comments relate to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listCommentsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Create a comment",
        "operationId": "CreateComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CommentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a comment",
        "operationId": "RetrieveComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The comment ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CommentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/comments/{id}/read": {
      "patch": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Mark a comment as read",
        "operationId": "MarkCommentRead",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The comment ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReadCommentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/conferences": {
      "get": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "List conferences",
        "description": "Lists conferences. Conferences are created on demand, and will expire after all participants have left the conference or after 4 hours regardless of the number of active participants. Conferences are listed in descending order by `expires_at`.",
        "operationId": "ListConferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterConferenceName"
          },
          {
            "$ref": "#/components/parameters/FilterConferenceStatus"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConferencesResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Create conference",
        "description": "Create a conference from an existing call leg using a `call_control_id` and a conference name. Upon creating the conference, the call will be automatically bridged to the conference. Conferences will expire after all participants have left the conference or after 4 hours regardless of the number of active participants.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/create-conference#callbacks) below):**\n\n- `conference.created`\n- `conference.participant.joined`\n- `conference.participant.left`\n- `conference.ended`\n- `conference.recording.saved`\n- `conference.floor.changed`\n",
        "operationId": "CreateConference",
        "requestBody": {
          "description": "Create a conference",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceCreated": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceCreatedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceFloorChanged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceFloorChangedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{conference_id}/participants": {
      "get": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "List conference participants",
        "description": "Lists conference participants",
        "operationId": "ListConferenceParticipants",
        "parameters": [
          {
            "name": "conference_id",
            "in": "path",
            "description": "Uniquely identifies the conference by id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[muted]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not muted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[on_hold]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are/are not put on hold",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[whispering]",
            "in": "query",
            "description": "If present, participants will be filtered to those who are whispering or are not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListParticipantsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}": {
      "get": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Retrieve a conference",
        "description": "Retrieve an existing conference",
        "operationId": "RetrieveConference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/hold": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Hold conference participants",
        "description": "Hold a list of participants in a conference call",
        "operationId": "HoldConferenceParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceHoldRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/join": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Join a conference",
        "description": "Join an existing call leg to a conference. Issue the Join Conference command with the conference ID in the path and the `call_control_id` of the leg you wish to join to the conference as an attribute. The conference can have up to a certain amount of active participants, as set by the `max_participants` parameter in conference creation request. \n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/join-conference#callbacks) below):**\n\n- `conference.participant.joined`\n- `conference.participant.left`\n",
        "operationId": "JoinConference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Join Conference request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantJoined": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantJoinedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/leave": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Leave a conference",
        "description": "Removes a call leg from a conference and moves it back to parked state. \n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/leave-conference#callbacks) below):**\n\n- `conference.participant.left`\n",
        "operationId": "LeaveConference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Leave Conference request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantLeft": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantLeftEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/mute": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Mute conference participants",
        "description": "Mute a list of participants in a conference call",
        "operationId": "MuteConferenceParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceMuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/play": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Play audio to conference participants",
        "description": "Play audio to all or some participants on a conference call.",
        "operationId": "PlayConferenceAudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferencePlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferencePlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferencePlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferencePlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_pause": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Conference recording pause",
        "description": "Pause conference recording.",
        "operationId": "PauseConferenceRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_resume": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Conference recording resume",
        "description": "Resume conference recording.",
        "operationId": "ResumeConferenceRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResumeConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_start": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Conference recording start",
        "description": "Start recording the conference. Recording will stop on conference end, or via the Stop Recording command.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-conference-recording#callbacks) below):**\n\n- `conference.recording.saved`",
        "operationId": "StartConferenceRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the conference to record by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartConferenceRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/record_stop": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Conference recording stop",
        "description": "Stop recording the conference.\n\n**Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-conference-recording#callbacks) below):**\n\n- `conference.recording.saved`\n",
        "operationId": "StopConferenceRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the conference to stop the recording for by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Stop recording conference request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRecordingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceRecordingSaved": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceRecordingSavedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/speak": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Speak text to conference participants",
        "description": "Convert text to speech and play it to all or some participants.",
        "operationId": "SpeakTextToConference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceSpeakRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceSpeakEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakStarted": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakStartedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "conferenceParticipantSpeakEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantSpeakEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/stop": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Stop audio being played on the conference",
        "description": "Stop audio being played to all or some participants on a conference call.",
        "operationId": "StopConferenceAudio",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceStopRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "callbacks": {
          "conferenceParticipantPlaybackEnded": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ConferenceParticipantPlaybackEndedEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unhold": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Unhold conference participants",
        "description": "Unhold a list of participants in a conference call",
        "operationId": "UnholdConferenceParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnholdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/unmute": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Unmute conference participants",
        "description": "Unmute a list of participants in a conference call",
        "operationId": "UnmuteConferenceParticipants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConferenceUnmuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/conferences/{id}/actions/update": {
      "post": {
        "tags": [
          "Conference Commands"
        ],
        "summary": "Update conference participant",
        "description": "Update conference participant supervisor_role",
        "operationId": "UpdateConference",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the conference by id or name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update Conference request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConferenceCommandResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/connections": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "List connections",
        "description": "Returns a list of your connections irrespective of type.",
        "operationId": "ListConnections",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListConnectionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/connections/{connection_id}/active_calls": {
      "get": {
        "tags": [
          "Call Information"
        ],
        "summary": "List all active calls for given connection",
        "description": "Lists all active calls for given connection. Acceptable connections are either SIP connections with webhook_url or xml_request_url, call control or texml. Returned results are cursor paginated.\n",
        "operationId": "ListConnectionActiveCalls",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          },
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActiveCallsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/connections/{id}": {
      "get": {
        "tags": [
          "Connections"
        ],
        "summary": "Retrieve a connection",
        "description": "Retrieves the high-level details of an existing connection. To retrieve specific authentication information, use the endpoint for the specific connection type.",
        "operationId": "RetrieveConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConnectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/country_coverage": {
      "get": {
        "tags": [
          "Country Coverage"
        ],
        "summary": "Get country coverage",
        "description": "Get country coverage",
        "operationId": "retreiveCountryCoverage",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CountryCoverageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/country_coverage/countries/{country_code}": {
      "get": {
        "tags": [
          "Country Coverage"
        ],
        "summary": "Get coverage for a specific country",
        "description": "Get coverage for a specific country",
        "operationId": "retreiveSpecificCountryCoverage",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "Country ISO code.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "US"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SpecificCountryResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/credential_connections": {
      "get": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "List credential connections",
        "description": "Returns a list of your credential connections.",
        "operationId": "ListCredentialConnections",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterInnerOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCredentialConnectionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "Create a credential connection",
        "description": "Creates a credential connection.",
        "operationId": "CreateCredentialConnection",
        "requestBody": {
          "description": "Parameters that can be defined during credential connection creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/credential_connections/{id}": {
      "delete": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "Delete a credential connection",
        "description": "Deletes an existing credential connection.",
        "operationId": "DeleteCredentialConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "Retrieve a credential connection",
        "description": "Retrieves the details of an existing credential connection.",
        "operationId": "RetrieveCredentialConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "Update a credential connection",
        "description": "Updates settings of an existing credential connection.",
        "operationId": "UpdateCredentialConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a credential connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCredentialConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/credential_connections/{id}/actions/check_registration_status": {
      "post": {
        "tags": [
          "Credential Connections"
        ],
        "summary": "Check a Credential Connection Registration Status",
        "description": "Checks the registration_status for a credential connection, (`registration_status`) as well as the timestamp for the last SIP registration event (`registration_status_updated_at`)",
        "operationId": "CheckRegistrationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegistrationStatusResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/custom_storage_credentials/{connection_id}": {
      "delete": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Delete a stored credential",
        "description": "Deletes a stored custom credentials configuration.",
        "operationId": "DeleteCustomStorageCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Retrieve a stored credential",
        "description": "Returns the information about custom storage credentials.",
        "operationId": "GetCustomStorageCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialsResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Create a custom storage credential",
        "description": "Creates a custom storage credentials configuration.",
        "operationId": "CreateCustomStorageCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "requestBody": {
          "description": "Creates new credentials resource for the specified connection_id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomStorageConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialsResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Update a stored credential",
        "description": "Updates a stored custom credentials configuration.",
        "operationId": "UpdateCustomStorageCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "requestBody": {
          "description": "Creates new credentials resource for the specified connection_id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomStorageConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CredentialsResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/customer_service_records": {
      "get": {
        "tags": [
          "Customer Service Record"
        ],
        "summary": "List customer service records",
        "description": "List customer service records.",
        "operationId": "ListCustomerServiceRecords",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at",
                "-created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          },
          {
            "$ref": "#/components/parameters/PhoneNumberEqFilter"
          },
          {
            "$ref": "#/components/parameters/PhoneNumberInFilter"
          },
          {
            "$ref": "#/components/parameters/StatusEqFilter"
          },
          {
            "$ref": "#/components/parameters/StatusInFilter"
          },
          {
            "$ref": "#/components/parameters/CreatedAtLtFilter"
          },
          {
            "$ref": "#/components/parameters/CreatedAtGtFilter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCustomerServiceRecords"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Customer Service Record"
        ],
        "summary": "Create a customer service record",
        "description": "Create a new customer service record for the provided phone number.",
        "operationId": "CreateCustomerServiceRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerServiceRecord"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateCustomerServiceRecord"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedErrorResponse"
          }
        },
        "callbacks": {
          "CustomerServiceRecordStatusChanged": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Customer Service Record Status Changes",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "data": {
                            "$ref": "#/components/schemas/CustomerServiceRecordStatusChangedEvent"
                          },
                          "meta": {
                            "$ref": "#/components/schemas/CallbackWebhookMeta"
                          }
                        }
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/customer_service_records/phone_number_coverages": {
      "post": {
        "tags": [
          "Customer Service Record"
        ],
        "summary": "Verify CSR phone number coverage",
        "description": "Verify the coverage for a list of phone numbers.",
        "operationId": "VerifyPhoneNumberCoverage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneNumberCoverage"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ListCustomerServiceRecordPhoneNumberCoverage"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/customer_service_records/{customer_service_record_id}": {
      "get": {
        "tags": [
          "Customer Service Record"
        ],
        "summary": "Get a customer service record",
        "description": "Get a specific customer service record.",
        "operationId": "GetCustomerServiceRecord",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathCustomerServiceRecordId"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/ShowCustomerServiceRecord"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFoundErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/detail_records": {
      "get": {
        "tags": [
          "Detail Records"
        ],
        "summary": "Search detail records",
        "description": "Search for any detail record across the Telnyx Platform",
        "operationId": "SearchDetailRecords",
        "parameters": [
          {
            "name": "filter[record_type]",
            "in": "query",
            "description": "Filter by the given record type.",
            "required": true,
            "schema": {
              "enum": [
                "ai-voice-assistant",
                "amd",
                "call-control",
                "conference",
                "conference-participant",
                "embedding",
                "fax",
                "inference",
                "inference-speech-to-text",
                "media_storage",
                "media-streaming",
                "messaging",
                "noise-suppression",
                "recording",
                "sip-trunking",
                "siprec-client",
                "stt",
                "tts",
                "verify",
                "webrtc",
                "wireless"
              ],
              "type": "string"
            },
            "examples": {
              "filter[record_type]=messaging": {
                "summary": "Searches for messaging detail records",
                "value": "messaging"
              },
              "filter[record_type]=verify": {
                "summary": "Searches for verify detail records",
                "value": "verify"
              }
            }
          },
          {
            "name": "filter[date_range]",
            "in": "query",
            "description": "Filter by the given user-friendly date range. You can specify one of the following enum values, or a dynamic one using this format: last_N_days.",
            "schema": {
              "enum": [
                "yesterday",
                "today",
                "tomorrow",
                "last_week",
                "this_week",
                "next_week",
                "last_month",
                "this_month",
                "next_month"
              ],
              "type": "string"
            },
            "examples": {
              "filter[date_range]=today": {
                "summary": "Searches for records with timestamp starting at `00:00:00` of the current day",
                "value": "today"
              },
              "filter[date_range]=yesterday": {
                "summary": "Searches for records with timestamp starting at `00:00:00` of yesterday",
                "value": "yesterday"
              },
              "filter[date_range]=last_month": {
                "summary": "Searches for records with timestamp starting at `00:00:00` on the first day of the month",
                "value": "last_month"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter records on a given record attribute and value. <br/>Example: filter[status]=delivered",
            "schema": {
              "type": "object"
            },
            "examples": {
              "filter[created_at][gte]=2021-06-22": {
                "summary": "Searches for records with `created_at` starting at `2021-06-22`",
                "value": "2021-06-22"
              },
              "filter[created_at][lt]=2021-06-23": {
                "summary": "Searches for records with `created_at` ending at `2021-06-22`",
                "value": "2021-06-23"
              },
              "filter[direction]=inbound": {
                "summary": "Searches for records which have the property `direction` equal to `inbound`",
                "value": "inbound"
              },
              "filter[cld][starts_with]=123": {
                "summary": "Searches for records which have the property `cld` starting with the prefix `123`",
                "value": "123"
              },
              "filter[cld][ends_with]=789": {
                "summary": "Searches for records which have the property `cld` ending with the suffix `789`",
                "value": "789"
              },
              "filter[cld][contains]=456": {
                "summary": "Searches for records which have the property `cld` containing the pattern `456`",
                "value": "456"
              }
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Page size",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. <br/>Example: sort=-created_at",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "sort=created_at": {
                "summary": "Sorts search results using the `created_at` date-time in ascending order",
                "value": "created_at"
              },
              "sort=-created_at": {
                "summary": "Sorts search results using the `created_at` date-time in descending order",
                "value": "created_at"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailRecordsSearchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/dialogflow_connections/{connection_id}": {
      "delete": {
        "tags": [
          "Dialogflow Integration"
        ],
        "summary": "Delete stored Dialogflow Connection",
        "description": "Deletes a stored Dialogflow Connection.",
        "operationId": "DeleteDialogflowConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Dialogflow Integration"
        ],
        "summary": "Retrieve stored Dialogflow Connection",
        "description": "Return details of the Dialogflow connection associated with the given CallControl connection.",
        "operationId": "GetDialogflowConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DialogflowConnectionResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Dialogflow Integration"
        ],
        "summary": "Create a Dialogflow Connection",
        "description": "Save Dialogflow Credentiails to Telnyx, so it can be used with other Telnyx services.",
        "operationId": "CreateDialogflowConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "requestBody": {
          "description": "The params expected to create/update a Dialogflow Connection for given connection_id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DialogflowConnection"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/DialogflowConnectionResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Dialogflow Integration"
        ],
        "summary": "Update stored Dialogflow Connection",
        "description": "Updates a stored Dialogflow Connection.",
        "operationId": "UpdateDialogflowConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/ConnectionId"
          }
        ],
        "requestBody": {
          "description": "The params expected to create/update a Dialogflow Connection for given connection_id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DialogflowConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DialogflowConnectionResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/document_links": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "List all document links",
        "description": "List all documents links ordered by created_at descending.",
        "operationId": "ListDocumentLinks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "The page number to load",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "The size of the page",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "filter[document_id]",
            "in": "query",
            "description": "Identifies the associated document to filter on.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          },
          {
            "name": "filter[linked_record_type]",
            "in": "query",
            "description": "The `linked_record_type` of the document to filter on.",
            "schema": {
              "type": "string",
              "example": "porting_order"
            }
          },
          {
            "name": "filter[linked_resource_id]",
            "in": "query",
            "description": "The `linked_resource_id` of the document to filter on.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDocumentLinks_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "List all documents",
        "description": "List all documents ordered by created_at descending.",
        "operationId": "ListDocuments",
        "parameters": [
          {
            "name": "filter[filename][contains]",
            "in": "query",
            "description": "Filter by string matching part of filename.",
            "schema": {
              "type": "string",
              "example": "invoice"
            }
          },
          {
            "name": "filter[customer_reference][eq]",
            "in": "query",
            "description": "Filter documents by a customer references.",
            "schema": {
              "type": "string",
              "example": "MY REF 001"
            }
          },
          {
            "name": "filter[customer_reference][in][]",
            "in": "query",
            "description": "Filter documents by a list of customer references.",
            "schema": {
              "type": "string",
              "example": "MY REF 001"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter by created at greater than provided value.",
            "schema": {
              "type": "string",
              "description": "ISO 8601 formatted date-time indicating when the resource was created.",
              "example": "2021-04-09T22:25:27.521Z"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter by created at less than provided value.",
            "schema": {
              "type": "string",
              "description": "ISO 8601 formatted date-time indicating when the resource was created.",
              "example": "2021-04-09T22:25:27.521Z"
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a `-` in front of the field name.",
            "schema": {
              "enum": [
                "filename",
                "created_at",
                "updated_at"
              ],
              "type": "string",
              "example": "filename"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "The page number to load",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "The size of the page",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDocuments_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Upload a document",
        "description": "Upload a document.<br /><br />Uploaded files must be linked to a service within 30 minutes or they will be automatically deleted.",
        "operationId": "CreateDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocument"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocument_RequestBody_form_data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocServiceDocument"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity. Check the 'detail' field in response for details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/documents/{id}": {
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete a document",
        "description": "Delete a document.<br /><br />A document can only be deleted if it's not linked to a service. If it is linked to a service, it must be unlinked prior to deleting.",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            },
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocServiceDocument"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Retrieve a document",
        "description": "Retrieve a document.",
        "operationId": "RetrieveDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            },
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocServiceDocument"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Documents"
        ],
        "summary": "Update a document",
        "description": "Update a document.",
        "operationId": "UpdateDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            },
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocServiceDocument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocServiceDocument"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/documents/{id}/download": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Download a document",
        "description": "Download a document.",
        "operationId": "DownloadDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            },
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadDocument_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/dynamic_emergency_addresses": {
      "get": {
        "tags": [
          "Dynamic Emergency Addresses"
        ],
        "summary": "List dynamic emergency addresses",
        "description": "Returns the dynamic emergency addresses according to filters",
        "operationId": "ListDynamicEmergencyAddresses",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by status.",
            "schema": {
              "enum": [
                "pending",
                "activated",
                "rejected"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter by country code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listDynamicEmergencyAddresses"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Dynamic Emergency Addresses"
        ],
        "summary": "Create a dynamic emergency address.",
        "description": "Creates a dynamic emergency address.",
        "operationId": "CreateDynamicEmergencyAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicEmergencyAddress"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/DynamicEmergencyAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/dynamic_emergency_addresses/{id}": {
      "delete": {
        "tags": [
          "Dynamic Emergency Addresses"
        ],
        "summary": "Delete a dynamic emergency address",
        "description": "Deletes the dynamic emergency address based on the ID provided",
        "operationId": "DeleteDynamicEmergencyAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dynamic Emergency Address id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DynamicEmergencyAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Dynamic Emergency Addresses"
        ],
        "summary": "Get a dynamic emergency address",
        "description": "Returns the dynamic emergency address based on the ID provided",
        "operationId": "GetDynamicEmergencyAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dynamic Emergency Address id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DynamicEmergencyAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/dynamic_emergency_endpoints": {
      "get": {
        "tags": [
          "Dynamic Emergency Endpoints"
        ],
        "summary": "List dynamic emergency endpoints",
        "description": "Returns the dynamic emergency endpoints according to filters",
        "operationId": "ListDynamicEmergencyEndpoints",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by status.",
            "schema": {
              "enum": [
                "pending",
                "activated",
                "rejected"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter by country code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listDynamicEmergencyEndpoints"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Dynamic Emergency Endpoints"
        ],
        "summary": "Create a dynamic emergency endpoint.",
        "description": "Creates a dynamic emergency endpoints.",
        "operationId": "CreateDynamicEmergencyEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicEmergencyEndpoint"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/DynamicEmergencyEndpointResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/dynamic_emergency_endpoints/{id}": {
      "delete": {
        "tags": [
          "Dynamic Emergency Endpoints"
        ],
        "summary": "Delete a dynamic emergency endpoint",
        "description": "Deletes the dynamic emergency endpoint based on the ID provided",
        "operationId": "DeleteDynamicEmergencyEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dynamic Emergency Endpoint id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DynamicEmergencyEndpointResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Dynamic Emergency Endpoints"
        ],
        "summary": "Get a dynamic emergency endpoint",
        "description": "Returns the dynamic emergency endpoint based on the ID provided",
        "operationId": "GetDynamicEmergencyEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dynamic Emergency Endpoint id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DynamicEmergencyEndpointResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/enum/{endpoint}": {
      "get": {
        "tags": [
          "Enum"
        ],
        "summary": "Get Enum",
        "operationId": "GetEnumEndpoint",
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Endpoint",
              "enum": [
                "mno",
                "optionalAttributes",
                "usecase",
                "vertical",
                "altBusinessIdType",
                "brandIdentityStatus",
                "brandRelationship",
                "campaignStatus",
                "entityType",
                "extVettingProvider",
                "vettingStatus",
                "brandStatus",
                "operationStatus",
                "approvedPublicCompany",
                "stockExchange",
                "vettingClass"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEnumEndpoint_200"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all External Connections",
        "description": "This endpoint returns a list of your External Connections inside the 'data' attribute of the response. External Connections are used by Telnyx customers to seamless configure SIP trunking integrations with Telnyx Partners, through External Voice Integrations in Mission Control Portal.",
        "operationId": "ListExternalConnections",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterExternalSipConnection"
          },
          {
            "$ref": "#/components/parameters/FilterId"
          },
          {
            "$ref": "#/components/parameters/FilterCreatedAt"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllExternalConnectionResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "External Connections"
        ],
        "summary": "Creates an External Connection",
        "description": "Creates a new External Connection based on the parameters sent in the request. The external_sip_connection and outbound voice profile id are required. Once created, you can assign phone numbers to your application using the `/phone_numbers` endpoint.",
        "operationId": "CreateExternalConnection",
        "requestBody": {
          "description": "Parameters that can be set when creating a External Connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ExternalConnectionResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/log_messages": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all log messages",
        "description": "Retrieve a list of log messages for all external connections associated with your account.",
        "operationId": "ListExternalConnectionLogMessages",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterExternalConnectionId"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberLogMessageContains"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberLogMessageEq"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListLogMessagesResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/log_messages/{id}": {
      "delete": {
        "tags": [
          "External Connections"
        ],
        "summary": "Dismiss a log message",
        "description": "Dismiss a log message for an external connection associated with your account.",
        "operationId": "DeleteExternalConnectionLogMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteExternalConnectionLogMessage_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve a log message",
        "description": "Retrieve a log message for an external connection associated with your account.",
        "operationId": "GetExternalConnectionLogMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetLogMessageResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}": {
      "delete": {
        "tags": [
          "External Connections"
        ],
        "summary": "Deletes an External Connection",
        "description": "Permanently deletes an External Connection. Deletion may be prevented if the application is in use by phone numbers, is active, or if it is an Operator Connect connection. To remove an Operator Connect integration please contact Telnyx support.",
        "operationId": "DeleteExternalConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExternalConnectionResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve an External Connection",
        "description": "Return the details of an existing External Connection inside the 'data' attribute of the response.",
        "operationId": "GetExternalConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExternalConnectionResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "External Connections"
        ],
        "summary": "Update an External Connection",
        "description": "Updates settings of an existing External Connection based on the parameters of the request.",
        "operationId": "UpdateExternalConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters to be updated for the External Connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExternalConnectionResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/civic_addresses": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all civic addresses and locations",
        "description": "Returns the civic addresses and locations from Microsoft Teams.",
        "operationId": "ListCivicAddresses",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/FilterCountry"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllCivicAddressesResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/civic_addresses/{address_id}": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve a Civic Address",
        "description": "Return the details of an existing Civic Address with its Locations inside the 'data' attribute of the response.",
        "operationId": "GetExternalConnectionCivicAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/address_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetCivicAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/locations/{location_id}": {
      "patch": {
        "tags": [
          "External Connections"
        ],
        "summary": "Update a location's static emergency address",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the external connection",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "description": "The ID of the location to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateLocation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location successfully updated with no associated orders to process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "202": {
            "description": "Location update accepted; associated orders being processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Location or external connection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Location already has an accepted emergency address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/phone_numbers": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all phone numbers",
        "description": "Returns a list of all active phone numbers associated with the given external connection.",
        "operationId": "ListExternalConnectionPhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberEq"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberContains"
          },
          {
            "$ref": "#/components/parameters/FilterCivicAddressId"
          },
          {
            "$ref": "#/components/parameters/FilterLocationId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListExternalConnectionPhoneNumbersResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/phone_numbers/{phone_number_id}": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve a phone number",
        "description": "Return the details of a phone number associated with the given external connection.",
        "operationId": "GetExternalConnectionPhoneNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/phone_number_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetExternalConnectionPhoneNumberResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "External Connections"
        ],
        "summary": "Update a phone number",
        "description": "Asynchronously update settings of the phone number associated with the given external connection.",
        "operationId": "UpdateExternalConnectionPhoneNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/phone_number_id"
          }
        ],
        "requestBody": {
          "description": "Values that can be set when updating a phone number",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalConnectionPhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetExternalConnectionPhoneNumberResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/releases": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all Releases",
        "description": "Returns a list of your Releases for the given external connection. These are automatically created when you change the `connection_id` of a phone number that is currently on Microsoft Teams.",
        "operationId": "ListExternalConnectionReleases",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterReleaseStatus"
          },
          {
            "$ref": "#/components/parameters/FilterCivicAddressId"
          },
          {
            "$ref": "#/components/parameters/FilterLocationId"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberEq"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberContains"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListReleasesResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/releases/{release_id}": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve a Release request",
        "description": "Return the details of a Release request and its phone numbers.",
        "operationId": "GetExternalConnectionRelease",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/release_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetReleaseResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/uploads": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "List all Upload requests",
        "description": "Returns a list of your Upload requests for the given external connection.",
        "operationId": "ListExternalConnectionUploads",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterUploadStatus"
          },
          {
            "$ref": "#/components/parameters/FilterCivicAddressId"
          },
          {
            "$ref": "#/components/parameters/FilterLocationId"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberEq"
          },
          {
            "$ref": "#/components/parameters/FilterPhoneNumberContains"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListUploadsResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "External Connections"
        ],
        "summary": "Creates an Upload request",
        "description": "Creates a new Upload request to Microsoft teams with the included phone numbers. Only one of civic_address_id or location_id must be provided, not both. The maximum allowed phone numbers for the numbers_ids array is 1000.",
        "operationId": "CreateExternalConnectionUpload",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters that can be set when creating an Upload request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalConnectionUploadRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExternalConnectionUpload_202"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/uploads/refresh": {
      "post": {
        "tags": [
          "External Connections"
        ],
        "summary": "Refresh the status of all Upload requests",
        "description": "Forces a recheck of the status of all pending Upload requests for the given external connection in the background.",
        "operationId": "RefreshExternalConnectionUploads",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshExternalConnectionUploads_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/uploads/status": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Get the count of pending upload requests",
        "description": "Returns the count of all pending upload requests for the given external connection.",
        "operationId": "GetExternalConnectionUploadsStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUploadsStatusResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/uploads/{ticket_id}": {
      "get": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retrieve an Upload request",
        "description": "Return the details of an Upload request and its phone numbers.",
        "operationId": "GetExternalConnectionUpload",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/ticket_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetUploadResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/external_connections/{id}/uploads/{ticket_id}/retry": {
      "post": {
        "tags": [
          "External Connections"
        ],
        "summary": "Retry an Upload request",
        "description": "If there were any errors during the upload process, this endpoint will retry the upload request. In some cases this will reattempt the existing upload request, in other cases it may create a new upload request. Please check the ticket_id in the response to determine if a new upload request was created.",
        "operationId": "RetryUpload",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/ticket_id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/GetUploadResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fax_applications": {
      "get": {
        "tags": [
          "Programmable Fax Applications"
        ],
        "summary": "List all Fax Applications",
        "description": "This endpoint returns a list of your Fax Applications inside the 'data' attribute of the response. You can adjust which applications are listed by using filters. Fax Applications are used to configure how you send and receive faxes using the Programmable Fax API with Telnyx.",
        "operationId": "ListFaxApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterApplicationName"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortApplication"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllFaxApplicationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Programmable Fax Applications"
        ],
        "summary": "Creates a Fax Application",
        "description": "Creates a new Fax Application based on the parameters sent in the request. The application name and webhook URL are required. Once created, you can assign phone numbers to your application using the `/phone_numbers` endpoint.",
        "operationId": "CreateFaxApplication",
        "requestBody": {
          "description": "Parameters that can be set when creating a Fax Application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFaxApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/fax_applications/{id}": {
      "delete": {
        "tags": [
          "Programmable Fax Applications"
        ],
        "summary": "Deletes a Fax Application",
        "description": "Permanently deletes a Fax Application. Deletion may be prevented if the application is in use by phone numbers.",
        "operationId": "DeleteFaxApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Programmable Fax Applications"
        ],
        "summary": "Retrieve a Fax Application",
        "description": "Return the details of an existing Fax Application inside the 'data' attribute of the response.",
        "operationId": "GetFaxApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Programmable Fax Applications"
        ],
        "summary": "Update a Fax Application",
        "description": "Updates settings of an existing Fax Application based on the parameters of the request.",
        "operationId": "UpdateFaxApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters to be updated for the Fax Application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFaxApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FaxApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes": {
      "get": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "View a list of faxes",
        "description": "",
        "operationId": "ListFaxes",
        "parameters": [
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after or on that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.5219920+00:00"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "ISO 8601 date time for filtering faxes created after that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.5219920+00:00"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created on or before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.5219920+00:00"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "ISO 8601 formatted date time for filtering faxes created before that date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-02T22:25:27.5219920+00:00"
            }
          },
          {
            "name": "filter[direction][eq]",
            "in": "query",
            "description": "The direction, inbound or outbound, for filtering faxes sent from this account",
            "schema": {
              "type": "string",
              "example": "inbound"
            }
          },
          {
            "name": "filter[from][eq]",
            "in": "query",
            "description": "The phone number, in E.164 format for filtering faxes sent from this number",
            "schema": {
              "type": "string",
              "example": "+13127367276"
            }
          },
          {
            "name": "filter[to][eq]",
            "in": "query",
            "description": "The phone number, in E.164 format for filtering faxes sent to this number",
            "schema": {
              "type": "string",
              "example": "+13127367276"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Number of fax resourcxes for the single page returned",
            "schema": {
              "type": "integer",
              "example": 2
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Number of the page to be retrieved",
            "schema": {
              "type": "integer",
              "example": 2
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFaxesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "post": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "Send a fax",
        "description": "Send a fax. Files have size limits and page count limit validations. If a file is bigger than 50MB or has more than 350 pages it will fail with `file_size_limit_exceeded` and `page_count_limit_exceeded` respectively. \n\n**Expected Webhooks:**\n\n- `fax.queued`\n- `fax.media.processed`\n- `fax.sending.started`\n- `fax.delivered`\n- `fax.failed`\n",
        "operationId": "SendFax",
        "requestBody": {
          "description": "Send fax request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SendFaxMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SendFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "fax.queued": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "summary": "Fax Queued",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxQueued"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.media.processed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "summary": "Fax Media Processed",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxMediaProcessed"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.sending.started": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "summary": "Fax Sending Started",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxSendingStarted"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.delivered": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "summary": "Fax Delivered",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxDelivered"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "fax.failed": {
            "{$response.body#/data/webhook_url}": {
              "post": {
                "summary": "Fax Failed",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/FaxFailed"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}": {
      "delete": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "Delete a fax",
        "operationId": "DeleteFax",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "View a fax",
        "operationId": "ViewFax",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetFaxResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}/actions/cancel": {
      "post": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "Cancel a fax",
        "description": "Cancel the outbound fax that is in one of the following states: `queued`, `media.processed`, `originated` or `sending` ",
        "operationId": "CancelFax",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/CancelFaxResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/faxes/{id}/actions/refresh": {
      "post": {
        "tags": [
          "Programmable Fax Commands"
        ],
        "summary": "Refresh a fax",
        "description": "Refreshes the inbound fax's media_url when it has expired",
        "operationId": "RefreshFax",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of a fax.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RefreshFaxResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdn_connections": {
      "get": {
        "tags": [
          "FQDN Connections"
        ],
        "summary": "List FQDN connections",
        "description": "Returns a list of your FQDN connections.",
        "operationId": "ListFqdnConnections",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterFqdn"
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFqdnConnectionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "FQDN Connections"
        ],
        "summary": "Create an FQDN connection",
        "description": "Creates a FQDN connection.",
        "operationId": "CreateFqdnConnection",
        "requestBody": {
          "description": "Parameters that can be defined during FQDN connection creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFqdnConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/fqdn_connections/{id}": {
      "delete": {
        "tags": [
          "FQDN Connections"
        ],
        "summary": "Delete an FQDN connection",
        "description": "Deletes an FQDN connection.",
        "operationId": "DeleteFqdnConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "FQDN Connections"
        ],
        "summary": "Retrieve an FQDN connection",
        "description": "Retrieves the details of an existing FQDN connection.",
        "operationId": "RetrieveFqdnConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "FQDN Connections"
        ],
        "summary": "Update an FQDN connection",
        "description": "Updates settings of an existing FQDN connection.",
        "operationId": "UpdateFqdnConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a FQDN connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFqdnConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/fqdns": {
      "get": {
        "tags": [
          "FQDNs"
        ],
        "summary": "List FQDNs",
        "description": "Get all FQDNs belonging to the user that match the given filters.",
        "operationId": "ListFqdns",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "ID of the FQDN connection to which the FQDN belongs.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[fqdn]",
            "in": "query",
            "description": "FQDN represented by the resource.",
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "name": "filter[port]",
            "in": "query",
            "description": "Port to use when connecting to the FQDN.",
            "schema": {
              "type": "integer",
              "example": 5060
            }
          },
          {
            "name": "filter[dns_record_type]",
            "in": "query",
            "description": "DNS record type used by the FQDN.",
            "schema": {
              "type": "string",
              "example": "a"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListFqdnsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "FQDNs"
        ],
        "summary": "Create an FQDN",
        "description": "Create a new FQDN object.",
        "operationId": "CreateFqdn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFqdnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/fqdns/{id}": {
      "delete": {
        "tags": [
          "FQDNs"
        ],
        "summary": "Delete an FQDN",
        "description": "Delete an FQDN.",
        "operationId": "DeleteFqdn",
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "FQDNs"
        ],
        "summary": "Retrieve an FQDN",
        "description": "Return the details regarding a specific FQDN.",
        "operationId": "RetrieveFqdn",
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "FQDNs"
        ],
        "summary": "Update an FQDN",
        "description": "Update the details of a specific FQDN.",
        "operationId": "UpdateFqdn",
        "parameters": [
          {
            "$ref": "#/components/parameters/FqdnId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFqdnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/FqdnResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_allowed_ports": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IP Allowed Ports",
        "description": "List all Global IP Allowed Ports",
        "operationId": "ListGlobalIpAllowedPorts",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAllowedPortListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_assignment_health": {
      "description": "Global IP Assignment Health Check Metrics over time",
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Global IP Assignment Health Check Metrics",
        "operationId": "GetGlobalIpAssignmentHealth",
        "parameters": [
          {
            "name": "filter[global_ip_id][in]",
            "in": "query",
            "description": "Filter by Global IP ID(s) separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[global_ip_assignment_id][in]",
            "in": "query",
            "description": "Filter by Global IP Assignment ID(s) separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/TimestampGreater"
          },
          {
            "$ref": "#/components/parameters/TimestampLess"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpHealthResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_assignments": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IP assignments",
        "description": "List all Global IP assignments.",
        "operationId": "ListGlobalIpAssignments",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAssignmentListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Create a Global IP assignment",
        "description": "Create a Global IP assignment.",
        "operationId": "CreateGlobalIpAssignment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalIpAssignment"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/GlobalIpAssignmentResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_assignments/{id}": {
      "delete": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Delete a Global IP assignment",
        "description": "Delete a Global IP assignment.",
        "operationId": "DeleteGlobalIpAssignment",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAssignmentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Retrieve a Global IP",
        "description": "Retrieve a Global IP assignment.",
        "operationId": "GetGlobalIpAssignment",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAssignmentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Update a Global IP assignment",
        "description": "Update a Global IP assignment.",
        "operationId": "UpdateGlobalIpAssignment",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalIpAssignmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAssignmentResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_assignments_usage": {
      "description": "Global IP Assignment Usage Metrics over time",
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Global IP Assignment Usage Metrics",
        "operationId": "GetGlobalIpAssignmentUsage",
        "parameters": [
          {
            "name": "filter[global_ip_assignment_id][in]",
            "in": "query",
            "description": "Filter by Global IP Assignment ID(s) separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[global_ip_id][in]",
            "in": "query",
            "description": "Filter by Global IP ID(s), separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/TimestampGreater"
          },
          {
            "$ref": "#/components/parameters/TimestampLess"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpAssignmentUsageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_health_check_types": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IP Health check types",
        "description": "List all Global IP Health check types.",
        "operationId": "ListGlobalIpHealthCheckTypes",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpHealthCheckTypesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_health_checks": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IP health checks",
        "description": "List all Global IP health checks.",
        "operationId": "ListGlobalIpHealthChecks",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpHealthCheckListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Create a Global IP health check",
        "description": "Create a Global IP health check.",
        "operationId": "CreateGlobalIpHealthCheck",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalIPHealthCheck"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/GlobalIpHealthCheckResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_health_checks/{id}": {
      "delete": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Delete a Global IP health check",
        "description": "Delete a Global IP health check.",
        "operationId": "DeleteGlobalIpHealthCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpHealthCheckResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Retrieve a Global IP health check",
        "description": "Retrieve a Global IP health check.",
        "operationId": "GetGlobalIpHealthCheck",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpHealthCheckResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_latency": {
      "description": "Global IP Latency Metrics over time",
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Global IP Latency Metrics",
        "operationId": "GetGlobalIpLatency",
        "parameters": [
          {
            "name": "filter[global_ip_id][in]",
            "in": "query",
            "description": "Filter by Global IP ID(s) separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/TimestampGreater"
          },
          {
            "$ref": "#/components/parameters/TimestampLess"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpLatencyResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_protocols": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IP Protocols",
        "description": "List all Global IP Protocols",
        "operationId": "ListGlobalIpProtocols",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpProtocolListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ip_usage": {
      "description": "Global IP Usage Metrics over time",
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Global IP Usage Metrics",
        "operationId": "GetGlobalIpUsage",
        "parameters": [
          {
            "name": "filter[global_ip_id][in]",
            "in": "query",
            "description": "Filter by Global IP ID(s) separated by commas",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/TimestampGreater"
          },
          {
            "$ref": "#/components/parameters/TimestampLess"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpUsageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ips": {
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "List all Global IPs",
        "description": "List all Global IPs.",
        "operationId": "ListGlobalIps",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Create a Global IP",
        "description": "Create a Global IP.",
        "operationId": "CreateGlobalIp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalIP"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/GlobalIpResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/global_ips/{id}": {
      "delete": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Delete a Global IP",
        "description": "Delete a Global IP.",
        "operationId": "DeleteGlobalIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Global IPs"
        ],
        "summary": "Retrieve a Global IP",
        "description": "Retrieve a Global IP.",
        "operationId": "GetGlobalIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GlobalIpResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/inbound_channels": {
      "get": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "List your voice channels for US Zone",
        "description": "Returns the US Zone voice channels for your account. voice channels allows you to use Channel Billing for calls to your Telnyx phone numbers. Please check the <a href=\"https://support.telnyx.com/en/articles/8428806-global-channel-billing\">Telnyx Support Articles</a> section for full information and examples of how to utilize Channel Billing.",
        "operationId": "ListInboundChannels",
        "responses": {
          "200": {
            "description": "voice channels Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInboundChannels_200"
                }
              }
            }
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      },
      "patch": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "Update voice channels for US Zone",
        "description": "Update the number of Voice Channels for the US Zone. This allows your account to handle multiple simultaneous inbound calls to US numbers. Use this endpoint to increase or decrease your capacity based on expected call volume.",
        "operationId": "UpdateOutboundChannels",
        "requestBody": {
          "description": "Voice channels update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutboundChannels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected Update response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOutboundChannels_200"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOutboundChannels_default"
                }
              }
            }
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      }
    },
    "/integration_secrets": {
      "get": {
        "tags": [
          "Integration Secrets"
        ],
        "summary": "List integration secrets",
        "description": "Retrieve a list of all integration secrets configured by the user.",
        "operationId": "list_integration_secrets",
        "parameters": [
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "Page Size",
              "type": "integer",
              "example": 25
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "Page Number",
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "schema": {
              "title": "Filter by type",
              "enum": [
                "bearer",
                "basic"
              ],
              "type": "string",
              "example": "bearer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationSecretsListData"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Integration Secrets"
        ],
        "summary": "Create a secret",
        "description": "Create a new secret with an associated identifier that can be used to securely integrate with other services.",
        "operationId": "create_integration_secret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationSecretRequest"
              },
              "examples": {
                "bearer": {
                  "value": {
                    "identifier": "my_secret",
                    "type": "bearer",
                    "token": "my_secret_value"
                  }
                },
                "basic": {
                  "value": {
                    "identifier": "my_secret",
                    "type": "basic",
                    "username": "my_username",
                    "password": "my_password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationSecretCreatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/integration_secrets/{id}": {
      "delete": {
        "tags": [
          "Integration Secrets"
        ],
        "summary": "Delete an integration secret",
        "description": "Delete an integration secret given its ID.",
        "operationId": "delete_integration_secret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Secret Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Secret Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/inventory_coverage": {
      "get": {
        "tags": [
          "Inventory Level"
        ],
        "summary": "Create an inventory coverage request",
        "description": "Creates an inventory coverage request. If locality, npa or national_destination_code is used in groupBy, and no region or locality filters are used, the whole paginated set is returned.",
        "operationId": "CreateInventoryCoverage",
        "parameters": [
          {
            "name": "filter[npa]",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Filter by npa"
            },
            "example": 318
          },
          {
            "name": "filter[nxx]",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Filter by nxx"
            },
            "example": 202
          },
          {
            "name": "filter[administrative_area]",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Filter by administrative area"
            },
            "example": "LA"
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "schema": {
              "enum": [
                "local",
                "toll_free",
                "national",
                "mobile",
                "landline",
                "shared_cost"
              ],
              "type": "string",
              "description": "Filter by phone number type"
            },
            "example": "local"
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "schema": {
              "enum": [
                "AT",
                "AU",
                "BE",
                "BG",
                "CA",
                "CH",
                "CN",
                "CY",
                "CZ",
                "DE",
                "DK",
                "EE",
                "ES",
                "FI",
                "FR",
                "GB",
                "GR",
                "HU",
                "HR",
                "IE",
                "IT",
                "LT",
                "LU",
                "LV",
                "NL",
                "NZ",
                "MX",
                "NO",
                "PL",
                "PT",
                "RO",
                "SE",
                "SG",
                "SI",
                "SK",
                "US"
              ],
              "type": "string",
              "description": "Filter by country. Defaults to US"
            },
            "example": "US"
          },
          {
            "name": "filter[count]",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "Include count in the result"
            },
            "example": "true"
          },
          {
            "name": "filter[features]",
            "in": "query",
            "description": "Filter if the phone number should be used for voice, fax, mms, sms, emergency. Returns features in the response when used.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "sms",
                  "mms",
                  "voice",
                  "fax",
                  "emergency"
                ],
                "type": "string"
              },
              "example": "voice,sms"
            }
          },
          {
            "name": "filter[groupBy]",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "locality",
                "npa",
                "national_destination_code"
              ],
              "type": "string",
              "description": "Filter to group results"
            },
            "example": "nxx"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/InventoryCoverageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ip_connections": {
      "get": {
        "tags": [
          "IP Connections"
        ],
        "summary": "List Ip connections",
        "description": "Returns a list of your IP connections.",
        "operationId": "ListIpConnections",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterConnectionName"
          },
          {
            "$ref": "#/components/parameters/FilterInnerOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortConnection"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListIpConnectionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "IP Connections"
        ],
        "summary": "Create an Ip connection",
        "description": "Creates an IP connection.",
        "operationId": "CreateIpConnection",
        "requestBody": {
          "description": "Parameters that can be defined during IP connection creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/ip_connections/{id}": {
      "delete": {
        "tags": [
          "IP Connections"
        ],
        "summary": "Delete an Ip connection",
        "description": "Deletes an existing IP connection.",
        "operationId": "DeleteIpConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "IP Connections"
        ],
        "summary": "Retrieve an Ip connection",
        "description": "Retrieves the details of an existing ip connection.",
        "operationId": "RetrieveIpConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "IP Connections"
        ],
        "summary": "Update an Ip connection",
        "description": "Updates settings of an existing IP connection.",
        "operationId": "UpdateIpConnection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a IP connection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIpConnectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpConnectionResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ips": {
      "get": {
        "tags": [
          "IPs"
        ],
        "summary": "List Ips",
        "description": "Get all IPs belonging to the user that match the given filters.",
        "operationId": "ListIps",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "ID of the IP Connection to which this IP should be attached.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[ip_address]",
            "in": "query",
            "description": "IP adddress represented by this resource.",
            "schema": {
              "type": "string",
              "example": "192.168.0.0"
            }
          },
          {
            "name": "filter[port]",
            "in": "query",
            "description": "Port to use when connecting to this IP.",
            "schema": {
              "type": "integer",
              "example": 5060
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListIpsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "IPs"
        ],
        "summary": "Create an Ip",
        "description": "Create a new IP object.",
        "operationId": "CreateIp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/IpResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/ips/{id}": {
      "delete": {
        "tags": [
          "IPs"
        ],
        "summary": "Delete an Ip",
        "description": "Delete an IP.",
        "operationId": "DeleteIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "IPs"
        ],
        "summary": "Retrieve an Ip",
        "description": "Return the details regarding a specific IP.",
        "operationId": "RetrieveIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "IPs"
        ],
        "summary": "Update an Ip",
        "description": "Update the details of a specific IP.",
        "operationId": "UpdateIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/IpId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IpResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ledger_billing_group_reports": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a ledger billing group report",
        "description": "",
        "operationId": "CreateBillingGroupReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewLedgerBillingGroupReport"
              },
              "example": {
                "year": 2019,
                "month": 10
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected ledger billing group report response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LedgerBillingGroupReport"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ledger_billing_group_reports/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a ledger billing group report",
        "description": "",
        "operationId": "GetBillingGroupReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ledger billing group report",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected ledger billing group report response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LedgerBillingGroupReport"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/list": {
      "get": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "List All Numbers using Channel Billing",
        "description": "Retrieve a list of all phone numbers using Channel Billing, grouped by Zone.",
        "operationId": "GetAllNumbersChannelZones",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetGcbNumbersResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/list/{channel_zone_id}": {
      "get": {
        "tags": [
          "Voice Channels"
        ],
        "summary": "List Numbers using Channel Billing for a specific Zone",
        "description": "Retrieve a list of phone numbers using Channel Billing for a specific Zone.",
        "operationId": "GetNumbersChannelZones",
        "parameters": [
          {
            "$ref": "#/components/parameters/GcbChannelNumberZoneId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetGcbNumbersResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/managed_accounts": {
      "get": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Lists accounts managed by the current user.",
        "description": "Lists the accounts managed by the current user. Users need to be explictly approved by Telnyx in order to become manager accounts.",
        "operationId": "ListManagedAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterEmailContains"
          },
          {
            "$ref": "#/components/parameters/FilterEmailEq"
          },
          {
            "$ref": "#/components/parameters/FilterOrganizationEmailContains"
          },
          {
            "$ref": "#/components/parameters/FilterOrganizationEmailEq"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/IncludeCancelledAccounts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListManagedAccountsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Create a new managed account.",
        "description": "Create a new managed account owned by the authenticated user. You need to be explictly approved by Telnyx in order to become a manager account.",
        "operationId": "CreateManagedAccount",
        "requestBody": {
          "description": "Parameters that define the managed account to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManagedAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/allocatable_global_outbound_channels": {
      "get": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Display information about allocatable global outbound channels for the current user.",
        "description": "Display information about allocatable global outbound channels for the current user. Only usable by account managers.",
        "operationId": "ListAllocatableGlobalOutboundChannels",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListManagedAccountsAllocatableGlobalOutboundChannelsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}": {
      "get": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Retrieve a managed account",
        "description": "Retrieves the details of a single managed account.",
        "operationId": "RetrieveManagedAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Update a managed account",
        "description": "Update a single managed account.",
        "operationId": "UpdateManagedAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that define the updates to the managed account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}/actions/disable": {
      "post": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Disables a managed account",
        "description": "Disables a managed account, forbidding it to use Telnyx services, including sending or receiving phone calls and SMS messages. Ongoing phone calls will not be affected. The managed account and its sub-users will no longer be able to log in via the mission control portal.",
        "operationId": "DisableManagedAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}/actions/enable": {
      "post": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Enables a managed account",
        "description": "Enables a managed account and its sub-users to use Telnyx services.",
        "operationId": "EnableManagedAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Additional parameters for what to do when enabling the managed account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableManagedAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ManagedAccountResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/managed_accounts/{id}/update_global_channel_limit": {
      "patch": {
        "tags": [
          "Managed Accounts"
        ],
        "summary": "Update the amount of allocatable global outbound channels allocated to a specific managed account.",
        "description": "Update the amount of allocatable global outbound channels allocated to a specific managed account.",
        "operationId": "UpdateManagedAccountGlobalChannelLimit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Managed Account User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that define the changes to the global outbounds channels for the managed account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManagedAccountGlobalChannelLimitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateManagedAccountGlobalChannelLimitResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableManagedAccountEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/media": {
      "get": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "List uploaded media",
        "description": "Returns a list of stored media files.",
        "operationId": "ListMediaStorage",
        "parameters": [
          {
            "name": "filter[content_type][]",
            "in": "query",
            "description": "Filters files by given content types",
            "schema": {
              "type": "string",
              "example": "application_xml"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "Upload media",
        "description": "Upload media file to Telnyx so it can be used with other Telnyx services",
        "operationId": "CreateMediaStorage",
        "requestBody": {
          "description": "Upload media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}": {
      "delete": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "Deletes stored media",
        "description": "Deletes a stored media file.",
        "operationId": "DeleteMediaStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "Retrieve stored media",
        "description": "Returns the information about a stored media file.",
        "operationId": "GetMediaStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      },
      "put": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "Update stored media",
        "description": "Updates a stored media file.",
        "operationId": "UpdateMediaStorage",
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "requestBody": {
          "description": "Update media request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMediaMultipartRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/media/{media_name}/download": {
      "get": {
        "tags": [
          "Media Storage API"
        ],
        "summary": "Download stored media",
        "description": "Downloads a stored media file.",
        "operationId": "DownloadMedia",
        "parameters": [
          {
            "$ref": "#/components/parameters/MediaName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MediaDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a message",
        "description": "Send a message with a Phone Number, Alphanumeric Sender ID, Short Code or Number Pool.\n\nThis endpoint allows you to send a message with any messaging resource.\nCurrent messaging resources include: long-code, short-code, number-pool, and\nalphanumeric-sender-id.\n",
        "operationId": "SendMessage",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Message",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/group_mms": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a group MMS message",
        "operationId": "CreateGroupMmsMessage",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupMMSMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Group MMS",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/long_code": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a long code message",
        "operationId": "CreateLongCodeMessage",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLongCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Long Code",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/number_pool": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a message using number pool",
        "operationId": "CreateNumberPoolMessage",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberPoolMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Number Pool",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/short_code": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send a short code message",
        "operationId": "CreateShortCodeMessage",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortCodeMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Short Code",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Retrieve a message",
        "description": "Note: This API endpoint can only retrieve messages that are no older than 10 days since their creation. If you require messages older than this, please generate an [MDR report.](https://developers.telnyx.com/api/v1/mission-control/add-mdr-request)",
        "operationId": "GetMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the message",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with details of a message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMessage_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders": {
      "get": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "List messaging hosted number orders",
        "operationId": "ListMessagingHostedNumberOrders",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingHostedNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Create a messaging hosted number order",
        "operationId": "CreateMessagingHostedNumberOrder",
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingHostedNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/eligibility_numbers_check": {
      "post": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Check eligibility of phone numbers for hosted messaging",
        "operationId": "CheckEligibilityNumbers",
        "requestBody": {
          "description": "Phone numbers to check eligibility",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EligibilityNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EligibilityNumbersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}": {
      "get": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Retrieve a messaging hosted number order",
        "operationId": "GetMessagingHostedNumberOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}/actions/file_upload": {
      "post": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Upload file required for a messaging hosted number order",
        "operationId": "UploadMessagingHostedNumberOrderFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileMessagingHostedNumberOrderRequest"
              },
              "encoding": {
                "loa": {
                  "contentType": "application/pdf"
                },
                "bill": {
                  "contentType": "application/pdf"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}/validation_codes": {
      "post": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Validate the verification codes for the hosted numbers order",
        "description": "Validate the verification codes sent to the numbers of the hosted order. The verification codes must be created in the verification codes endpoint.",
        "operationId": "ValidateVerificationCodesForMessagingHostedNumberOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID related to the validation codes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationCodesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ValidationCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_number_orders/{id}/verification_codes": {
      "post": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Create verification codes for the hosted numbers order",
        "description": "Create verification codes to validate numbers of the hosted order. The verification codes will be sent to the numbers of the hosted order.",
        "operationId": "CreateVerificationCodesForMessagingHostedNumberOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID to have a verification code created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Message payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationCodesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification codes created and sent to the phone numbers of the hosted order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedVerificationCodesResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_hosted_numbers/{id}": {
      "delete": {
        "tags": [
          "Messaging Hosted Number"
        ],
        "summary": "Delete a messaging hosted number",
        "operationId": "DeleteMessagingHostedNumber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingHostedNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_numbers_bulk_updates": {
      "post": {
        "tags": [
          "Number Configurations"
        ],
        "summary": "Update the messaging profile of multiple phone numbers",
        "operationId": "BulkUpdateMessagingSettingsOnPhoneNumbers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMessagingSettingsUpdatePhoneNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkMessagingSettingsUpdatePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_numbers_bulk_updates/{order_id}": {
      "get": {
        "tags": [
          "Number Configurations"
        ],
        "summary": "Retrieve bulk update status",
        "operationId": "GetBulkUpdateMessagingSettingsOnPhoneNumbersStatus",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Order ID to verify bulk update status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BulkMessagingSettingsUpdatePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_optouts": {
      "get": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "List opt-outs",
        "description": "Retrieve a list of opt-out blocks.",
        "operationId": "ListOptOuts",
        "parameters": [
          {
            "name": "filter[messaging_profile_id]",
            "in": "query",
            "description": "The ID of the messaging profile to retrieve opt-outs for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at[gte]",
            "in": "query",
            "description": "Filter opt-outs created after this date (ISO-8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[from]",
            "in": "query",
            "description": "The sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code) to retrieve opt-outs for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at[lte]",
            "in": "query",
            "description": "Filter opt-outs created before this date (ISO-8601 format)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "redaction_enabled",
            "in": "query",
            "description": "If receiving address (+E.164 formatted phone number) should be redacted",
            "schema": {
              "type": "string",
              "format": "boolean"
            },
            "example": "+447766****"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with opt-out list data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptOutListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profile_metrics": {
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "List messaging profile metrics",
        "operationId": "ListProfileMetrics",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetric"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles": {
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "List messaging profiles",
        "operationId": "ListMessagingProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "Create a messaging profile",
        "operationId": "CreateMessagingProfile",
        "requestBody": {
          "description": "New Messaging Profile object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "inboundMessage": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Inbound Message",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "deliveryUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Delivery Update Inbound",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/OutboundMessageEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          },
          "replacedLinkClick": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Replaced Link Click",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ReplacedLinkClickEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return an HTTP 200, otherwise we will reattempt delivery at the failover webhook URL."
                  }
                }
              }
            }
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}": {
      "delete": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "Delete a messaging profile",
        "operationId": "DeleteMessagingProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "Retrieve a messaging profile",
        "operationId": "RetrieveMessagingProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "Update a messaging profile",
        "operationId": "UpdateMessagingProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "requestBody": {
          "description": "New Messaging Profile object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMessagingProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessagingProfileResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/metrics": {
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "Retrieve messaging profile metrics",
        "operationId": "GetMessagingProfileMetrics",
        "parameters": [
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileMetricTimeFrame"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RetrieveMessagingProfileMetrics"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/phone_numbers": {
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "List phone numbers associated with a messaging profile",
        "operationId": "ListProfilePhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfilePhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{id}/short_codes": {
      "get": {
        "tags": [
          "Messaging Profiles"
        ],
        "summary": "List short codes associated with a messaging profile",
        "operationId": "ListProfileShortCodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/MessagingProfileId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingProfileShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{profile_id}/autoresp_configs": {
      "get": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "List Auto-Response Settings",
        "operationId": "GetAutorespConfigs",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Profile Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "schema": {
              "title": "Country Code",
              "type": "string"
            }
          },
          {
            "name": "created_at[gte]",
            "in": "query",
            "schema": {
              "title": "Created At[Gte]",
              "type": "string"
            }
          },
          {
            "name": "created_at[lte]",
            "in": "query",
            "schema": {
              "title": "Created At[Lte]",
              "type": "string"
            }
          },
          {
            "name": "updated_at[gte]",
            "in": "query",
            "schema": {
              "title": "Updated At[Gte]",
              "type": "string"
            }
          },
          {
            "name": "updated_at[lte]",
            "in": "query",
            "schema": {
              "title": "Updated At[Lte]",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorespConfigsResponseSchema"
                },
                "example": {
                  "data": [
                    {
                      "op": "start",
                      "keywords": [
                        "START",
                        "BEGIN"
                      ],
                      "resp_text": "Thank you for subscribing US customer.",
                      "country_code": "US",
                      "id": "677ec1cb-949e-4aeb-a1c3-6d9ddffc1409",
                      "created_at": "2023-03-21T23:37:45.8585350+00:00",
                      "updated_at": "2023-03-21T23:37:45.8585350+00:00"
                    },
                    {
                      "op": "stop",
                      "keywords": [
                        "END",
                        "STOP"
                      ],
                      "resp_text": "You have unsubscribed.",
                      "country_code": "US",
                      "id": "54b7e19f-98a8-416f-81d1-a2782eade48b",
                      "created_at": "2023-03-10T21:54:46.2933800+00:00",
                      "updated_at": "2023-03-10T21:54:46.2933800+00:00"
                    },
                    {
                      "op": "start",
                      "keywords": [
                        "START"
                      ],
                      "resp_text": "Thank you for subscribing.",
                      "country_code": "*",
                      "id": "cfe07be1-2369-433f-be00-eb176008e834",
                      "created_at": "2023-03-14T14:46:21.0977350+00:00",
                      "updated_at": "2023-03-14T14:46:21.0977350+00:00"
                    }
                  ],
                  "meta": {
                    "page_number": 1,
                    "page_size": 5,
                    "total_pages": 1,
                    "total_results": 3
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "Create Auto-Reponse Setting",
        "operationId": "CreateAutorespConfig",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Profile Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoRespConfigCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorespConfigResponseSchema"
                },
                "example": {
                  "data": {
                    "op": "start",
                    "keywords": [
                      "START"
                    ],
                    "resp_text": "Hello there!",
                    "country_code": "US",
                    "id": "c2298f86-a4dc-4cac-b6b6-4a3d01c290fa",
                    "created_at": "2023-03-22T00:06:49.0688170+00:00",
                    "updated_at": "2023-03-22T00:06:49.0688170+00:00"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_profiles/{profile_id}/autoresp_configs/{autoresp_cfg_id}": {
      "delete": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "Delete Auto-Response Setting",
        "operationId": "DeleteAutorespConfig",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Profile Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "autoresp_cfg_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Autoresp Cfg Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "Get Auto-Response Setting",
        "operationId": "GetAutorespConfig",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Profile Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "autoresp_cfg_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Autoresp Cfg Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorespConfigResponseSchema"
                },
                "example": {
                  "data": {
                    "op": "start",
                    "keywords": [
                      "UNSTOP"
                    ],
                    "resp_text": "Hello there!",
                    "country_code": "US",
                    "id": "adc37adf-d110-4355-9e9a-262847e68e89",
                    "created_at": "2023-03-13T17:51:03.8264530+00:00",
                    "updated_at": "2023-03-13T17:51:03.8264530+00:00"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Advanced OptIn/OptOut"
        ],
        "summary": "Update Auto-Response Setting",
        "operationId": "UpdateAutoRespConfig",
        "parameters": [
          {
            "name": "profile_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Profile Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "autoresp_cfg_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Autoresp Cfg Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoRespConfigCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorespConfigResponseSchema"
                },
                "example": {
                  "data": {
                    "op": "start",
                    "keywords": [
                      "START",
                      "BEGIN"
                    ],
                    "resp_text": "Hello there!",
                    "country_code": "*",
                    "id": "54b7e19f-98a8-416f-81d1-a2782eade48b",
                    "created_at": "2023-03-10T21:54:46.2933800+00:00",
                    "updated_at": "2023-03-10T21:54:46.2933800+00:00"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_tollfree/verification/requests": {
      "get": {
        "tags": [
          "Messaging Tollfree Verification"
        ],
        "summary": "List Verification Requests",
        "description": "Get a list of previously-submitted tollfree verification requests",
        "operationId": "ListVerificationRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Page",
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "\n        Request this many records per page\n\n        This value is automatically clamped if the provided value is too large.\n        ",
            "required": true,
            "schema": {
              "title": "Page Size",
              "minimum": 1,
              "type": "integer",
              "description": "\n        Request this many records per page\n\n        This value is automatically clamped if the provided value is too large.\n        "
            }
          },
          {
            "name": "date_start",
            "in": "query",
            "schema": {
              "title": "Date Start",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "date_end",
            "in": "query",
            "schema": {
              "title": "Date End",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TFVerificationStatus"
            }
          },
          {
            "name": "phone_number",
            "in": "query",
            "schema": {
              "title": "Phone Number",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Paginated_VerificationRequestStatus_"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Messaging Tollfree Verification"
        ],
        "summary": "Submit Verification Request",
        "description": "Submit a new tollfree verification request",
        "operationId": "SubmitVerificationRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TFVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequestEgress"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_tollfree/verification/requests/{id}": {
      "delete": {
        "tags": [
          "Messaging Tollfree Verification"
        ],
        "summary": "Delete Verification Request",
        "description": "Delete a verification request\n\nA request may only be deleted when when the request is in the \"rejected\" state.\n\n* `HTTP 200`: request successfully deleted\n* `HTTP 400`: request exists but can't be deleted (i.e. not rejected)\n* `HTTP 404`: request unknown or already deleted",
        "operationId": "DeleteVerificationRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Messaging Tollfree Verification"
        ],
        "summary": "Get Verification Request",
        "description": "Get a single verification request by its ID.",
        "operationId": "GetVerificationRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequestStatus"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Messaging Tollfree Verification"
        ],
        "summary": "Update Verification Request",
        "description": "Update an existing tollfree verification request. This is particularly useful when there are pending customer actions to be taken.",
        "operationId": "UpdateVerificationRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TFVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationRequestEgress"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/messaging_url_domains": {
      "get": {
        "tags": [
          "Messaging URL Domains"
        ],
        "summary": "List messaging URL domains",
        "operationId": "ListMessagingUrlDomains",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListMessagingUrlDomains"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/messsages/rcs": {
      "post": {
        "tags": [
          "RCS messaging"
        ],
        "summary": "Send an RCS message",
        "operationId": "Post33423fbcc07b4f68901fa095ad5d612d",
        "requestBody": {
          "description": "RCS message body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RCSMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RCSResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/mobile_network_operators": {
      "get": {
        "tags": [
          "Mobile Network Operators"
        ],
        "summary": "List mobile network operators",
        "description": "Telnyx has a set of GSM mobile operators partners that are available through our mobile network roaming. This resource is entirely managed by Telnyx and may change over time. That means that this resource won't allow any write operations for it. Still, it's available so it can be used as a support resource that can be related to other resources or become a configuration option.",
        "operationId": "GetMobileNetworkOperators",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name][starts_with]",
            "in": "query",
            "description": "Filter by name starting with.",
            "schema": {
              "type": "string",
              "example": "AT"
            }
          },
          {
            "name": "filter[name][contains]",
            "in": "query",
            "description": "Filter by name containing match.",
            "schema": {
              "type": "string",
              "example": "T&T"
            }
          },
          {
            "name": "filter[name][ends_with]",
            "in": "query",
            "description": "Filter by name ending with.",
            "schema": {
              "type": "string",
              "example": "T"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter by exact country_code.",
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "filter[mcc]",
            "in": "query",
            "description": "Filter by exact MCC.",
            "schema": {
              "type": "string",
              "example": "310"
            }
          },
          {
            "name": "filter[mnc]",
            "in": "query",
            "description": "Filter by exact MNC.",
            "schema": {
              "type": "string",
              "example": "410"
            }
          },
          {
            "name": "filter[tadig]",
            "in": "query",
            "description": "Filter by exact TADIG.",
            "schema": {
              "type": "string",
              "example": "USACG"
            }
          },
          {
            "name": "filter[network_preferences_enabled]",
            "in": "query",
            "description": "Filter by network_preferences_enabled.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchMobileNetworkOperatorsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/mobile_push_credentials": {
      "get": {
        "tags": [
          "Push Credentials"
        ],
        "summary": "List mobile push credentials",
        "description": "List mobile push credentials",
        "operationId": "ListPushCredentials",
        "parameters": [
          {
            "name": "filter[type]",
            "in": "query",
            "description": "type of mobile push credentials",
            "schema": {
              "enum": [
                "ios",
                "android"
              ],
              "type": "string",
              "example": "ios"
            }
          },
          {
            "name": "filter[alias]",
            "in": "query",
            "description": "Unique mobile push credential alias",
            "schema": {
              "type": "string",
              "example": "LucyCredential"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Mobile mobile push credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPushCredentialsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Push Credentials"
        ],
        "summary": "Creates a new mobile push credential",
        "description": "Creates a new mobile push credential",
        "operationId": "CreatePushCredential",
        "requestBody": {
          "description": "Mobile push credential parameters that need to be sent in the request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePushCredential"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mobile push credential created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushCredentialResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/mobile_push_credentials/{push_credential_id}": {
      "delete": {
        "tags": [
          "Push Credentials"
        ],
        "summary": "Deletes a mobile push credential",
        "description": "Deletes a mobile push credential based on the given `push_credential_id`",
        "operationId": "DeletePushCredentialById",
        "parameters": [
          {
            "name": "push_credential_id",
            "in": "path",
            "description": "The unique identifier of a mobile push credential",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b76-4df3-4bca-a05a-3da1ecc389f0"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Push Credentials"
        ],
        "summary": "Retrieves a mobile push credential",
        "description": "Retrieves mobile push credential based on the given `push_credential_id`",
        "operationId": "GetPushCredentialById",
        "parameters": [
          {
            "name": "push_credential_id",
            "in": "path",
            "description": "The unique identifier of a mobile push credential",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b76-4df3-4bca-a05a-3da1ecc389f0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful get mobile push credential response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushCredentialResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "422": {
            "description": "Unable to process request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/network_coverage": {
      "get": {
        "tags": [
          "Coverage"
        ],
        "summary": "List network coverage locations",
        "description": "List all locations and the interfaces that region supports",
        "operationId": "ListNetworkCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filters[available_services][contains]",
            "in": "query",
            "description": "The region of associated location to filter on.",
            "schema": {
              "$ref": "#/components/schemas/AvailableService"
            }
          },
          {
            "name": "filter[location.region]",
            "in": "query",
            "description": "The region of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "AMER"
            }
          },
          {
            "name": "filter[location.site]",
            "in": "query",
            "description": "The site of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "SJC"
            }
          },
          {
            "name": "filter[location.pop]",
            "in": "query",
            "description": "The POP of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "SV1"
            }
          },
          {
            "name": "filter[location.code]",
            "in": "query",
            "description": "The code of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "silicon_valley-ca"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkCoverageListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/networks": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "List all Networks",
        "description": "List all Networks.",
        "operationId": "ListNetworks",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "The network name to filter on.",
            "schema": {
              "type": "string",
              "example": "test network"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Networks"
        ],
        "summary": "Create a Network",
        "description": "Create a new Network.",
        "operationId": "CreateNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/networks/{id}": {
      "delete": {
        "tags": [
          "Networks"
        ],
        "summary": "Delete a Network",
        "description": "Delete a Network.",
        "operationId": "DeleteNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Retrieve a Network",
        "description": "Retrieve a Network.",
        "operationId": "GetNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Networks"
        ],
        "summary": "Update a Network",
        "description": "Update a Network.",
        "operationId": "UpdateNetwork",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/networks/{id}/default_gateway": {
      "delete": {
        "tags": [
          "Networks"
        ],
        "summary": "Delete Default Gateway.",
        "description": "Delete Default Gateway.",
        "operationId": "DeleteDefaultGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DefaultGatewayResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Get Default Gateway status.",
        "description": "Get Default Gateway status.",
        "operationId": "GetDefaultGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DefaultGatewayResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Networks"
        ],
        "summary": "Create Default Gateway.",
        "description": "Create Default Gateway.",
        "operationId": "CreateDefaultGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultGateway"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DefaultGatewayResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/networks/{id}/network_interfaces": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "List all Interfaces for a Network.",
        "description": "List all Interfaces for a Network.",
        "operationId": "ListNetworkInterfaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "The interface name to filter on.",
            "schema": {
              "type": "string",
              "example": "test interface"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "The interface type to filter on.",
            "schema": {
              "type": "string",
              "example": "wireguard_interface"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "The interface status to filter on.",
            "schema": {
              "$ref": "#/components/schemas/InterfaceStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NetworkInterfaceListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_channels": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List notification channels",
        "description": "List notification channels.",
        "operationId": "ListNotificationChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/ChannelTypeId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification channels.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNotificationChannels_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Create a notification channel",
        "description": "Create a notification channel.",
        "operationId": "CreateNotificationChannels",
        "requestBody": {
          "description": "Add a Notification Channel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_channels/{id}": {
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete a notification channel",
        "description": "Delete a notification channel.",
        "operationId": "DeleteNotificationChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a notification channel",
        "description": "Get a notification channel.",
        "operationId": "GetNotificationChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update a notification channel",
        "description": "Update a notification channel.",
        "operationId": "UpdateNotificationChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "description": "Update notification channel object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Channel response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationChannel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_event_conditions": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List all Notifications Events Conditions",
        "description": "Returns a list of your notifications events conditions.",
        "operationId": "FindNotificationsEventsConditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/AssociatedRecordType"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification event conditions available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindNotificationsEventsConditions_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_events": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List all Notifications Events",
        "description": "Returns a list of your notifications events.",
        "operationId": "FindNotificationsEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification events available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindNotificationsEvents_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_profiles": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List all Notifications Profiles",
        "description": "Returns a list of your notifications profiles.",
        "operationId": "FindNotificationsProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindNotificationsProfiles_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Create a notification profile",
        "description": "Create a notification profile.",
        "operationId": "CreateNotificationProfile",
        "requestBody": {
          "description": "Add a Notification Profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_profiles/{id}": {
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete a notification profile",
        "description": "Delete a notification profile.",
        "operationId": "DeleteNotificationProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a notification profile",
        "description": "Get a notification profile.",
        "operationId": "GetNotificationProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update a notification profile",
        "description": "Update a notification profile.",
        "operationId": "UpdateNotificationProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "description": "Update notification profile object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Profile response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationProfile"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_settings": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List notification settings",
        "description": "List notification settings.",
        "operationId": "ListNotificationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/NotificationProfileId"
          },
          {
            "$ref": "#/components/parameters/NotificationChannelId"
          },
          {
            "$ref": "#/components/parameters/NotificationEventConditionId"
          },
          {
            "$ref": "#/components/parameters/AssociatedRecordType"
          },
          {
            "$ref": "#/components/parameters/Status"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of notification settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNotificationSettings_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Add a Notification Setting",
        "description": "Add a notification setting.",
        "operationId": "CreateNotificationSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSetting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "A Notification Setting response - async",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/notification_settings/{id}": {
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete a notification setting",
        "description": "Delete a notification setting.",
        "operationId": "DeleteNotificationSetting",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "A Notification Setting response - async",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a notification setting",
        "description": "Get a notification setting.",
        "operationId": "GetNotificationSetting",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "description": "A Notification Setting response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NotificationSetting"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_block_orders": {
      "get": {
        "tags": [
          "Phone Number Block Orders"
        ],
        "summary": "List number block orders",
        "description": "Get a paginated list of number block orders.",
        "operationId": "ListNumberBlockOrders",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter number block orders by status.",
            "schema": {
              "type": "string",
              "example": "pending"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number block orders later than this value.",
            "schema": {
              "type": "string",
              "example": "2018-01-01T00:00:00.000000Z"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number block orders earlier than this value.",
            "schema": {
              "type": "string",
              "example": "2018-01-01T00:00:00.000000Z"
            }
          },
          {
            "name": "filter[phone_numbers.starting_number]",
            "in": "query",
            "description": "Filter number block  orders having these phone numbers.",
            "schema": {
              "type": "string",
              "example": "+19705555000"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberBlockOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Phone Number Block Orders"
        ],
        "summary": "Create a number block order",
        "description": "Creates a phone number block order.",
        "operationId": "CreateNumberBlockOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberBlockOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberBlockOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "callbacks": {
          "numberOrderStatusUpdate": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/NumberOrderBlockEvent"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "The server must return a HTTP 200, otherwise we will reattempt to deliver the webhook to the failover URL."
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_block_orders/{number_block_order_id}": {
      "get": {
        "tags": [
          "Phone Number Block Orders"
        ],
        "summary": "Retrieve a number block order",
        "description": "Get an existing phone number block order.",
        "operationId": "RetrieveNumberBlockOrder",
        "parameters": [
          {
            "name": "number_block_order_id",
            "in": "path",
            "description": "The number block order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberBlockOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_lookup/{phone_number}": {
      "get": {
        "tags": [
          "Number Lookup"
        ],
        "summary": "Lookup phone number data",
        "description": "Returns information about the provided phone number.",
        "operationId": "LookupNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/PhoneNumber"
          },
          {
            "$ref": "#/components/parameters/NumberLookupType"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberLookupResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_order_phone_numbers": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a list of phone numbers associated to orders",
        "description": "Get a list of phone numbers associated to orders.",
        "operationId": "RetrieveOrderPhoneNumbers",
        "parameters": [
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Country code of the order phone number.",
            "schema": {
              "type": "string",
              "example": "US"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberOrderPhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_order_phone_numbers/{id}/requirement_group": {
      "post": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Update requirement group for a phone number order",
        "operationId": "updateNumberOrderPhoneNumberRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the number order phone number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateNumberOrderPhoneNumberRequirementGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated phone number order details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NumberOrderPhoneNumberRequirementGroupResponse"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_order_phone_numbers/{number_order_phone_number_id}": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a single phone number within a number order.",
        "description": "Get an existing phone number in number order.",
        "operationId": "GetNumberOrderPhoneNumber",
        "parameters": [
          {
            "name": "number_order_phone_number_id",
            "in": "path",
            "description": "The number order phone number ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderPhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Update requirements for a single phone number within a number order.",
        "description": "Updates requirements for a single phone number within a number order.",
        "operationId": "UpdateNumberOrderPhoneNumber",
        "parameters": [
          {
            "name": "number_order_phone_number_id",
            "in": "path",
            "description": "The number order phone number ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNumberOrderPhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderPhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_orders": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "List number orders",
        "description": "Get a paginated list of number orders.",
        "operationId": "ListNumberOrders",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter number orders by status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number orders later than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number orders earlier than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_numbers_count]",
            "in": "query",
            "description": "Filter number order with this amount of numbers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter number orders via the customer reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[requirements_met]",
            "in": "query",
            "description": "Filter number orders by requirements met.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Create a number order",
        "description": "Creates a phone number order.",
        "operationId": "CreateNumberOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "heavy",
        "x-latency-category": "responsive"
      }
    },
    "/number_orders/{number_order_id}": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a number order",
        "description": "Get an existing phone number order.",
        "operationId": "RetrieveNumberOrder",
        "parameters": [
          {
            "name": "number_order_id",
            "in": "path",
            "description": "The number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Update a number order",
        "description": "Updates a phone number order.",
        "operationId": "UpdateNumberOrder",
        "parameters": [
          {
            "name": "number_order_id",
            "in": "path",
            "description": "The number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations": {
      "get": {
        "tags": [
          "Phone Number Reservations"
        ],
        "summary": "List number reservations",
        "description": "Gets a paginated list of phone number reservations.",
        "operationId": "ListNumberReservations",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter number reservations by status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][gt]",
            "in": "query",
            "description": "Filter number reservations later than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[created_at][lt]",
            "in": "query",
            "description": "Filter number reservations earlier than this value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_numbers.phone_number]",
            "in": "query",
            "description": "Filter number reservations having these phone numbers.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter number reservations via the customer reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListNumberReservationsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Phone Number Reservations"
        ],
        "summary": "Create a number reservation",
        "description": "Creates a Phone Number Reservation for multiple numbers.",
        "operationId": "CreateNumberReservation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNumberReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations/{number_reservation_id}": {
      "get": {
        "tags": [
          "Phone Number Reservations"
        ],
        "summary": "Retrieve a number reservation",
        "description": "Gets a single phone number reservation.",
        "operationId": "RetrieveNumberReservation",
        "parameters": [
          {
            "name": "number_reservation_id",
            "in": "path",
            "description": "The number reservation ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/number_reservations/{number_reservation_id}/actions/extend": {
      "post": {
        "tags": [
          "Phone Number Reservations"
        ],
        "summary": "Extend a number reservation",
        "description": "Extends reservation expiry time on all phone numbers.",
        "operationId": "ExtendNumberReservationExpiryTime",
        "parameters": [
          {
            "name": "number_reservation_id",
            "in": "path",
            "description": "The number reservation ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NumberReservationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/numbers_features": {
      "post": {
        "tags": [
          "numbers features"
        ],
        "summary": "Retrieve the features for a list of numbers",
        "description": "Retrieve the features for a list of numbers",
        "operationId": "PostNumbersFeatures",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostNumbersFeatures"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostNumbersFeatures_200"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "responsive"
      }
    },
    "/operator_connect/actions/refresh": {
      "post": {
        "tags": [
          "External Connections"
        ],
        "summary": "Refresh Operator Connect integration",
        "description": "This endpoint will make an asynchronous request to refresh the Operator Connect integration with Microsoft Teams for the current user. This will create new external connections on the user's account if needed, and/or report the integration results as [log messages](https://developers.telnyx.com/api/external-voice-integrations/list-external-connection-log-messages).",
        "operationId": "OperatorConnectRefresh",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorConnectRefresh_200"
                }
              }
            }
          },
          "202": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorConnectRefresh_202"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ota_updates": {
      "get": {
        "tags": [
          "OTA updates"
        ],
        "summary": "List OTA updates",
        "operationId": "ListOtaUpdates",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterBasicStatusLifecycle"
          },
          {
            "name": "filter[sim_card_id]",
            "in": "query",
            "description": "The SIM card identification UUID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter by type.",
            "schema": {
              "enum": [
                "sim_card_network_preferences"
              ],
              "type": "string",
              "example": "sim_card_network_preferences"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchOTAUpdateResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/ota_updates/{id}": {
      "get": {
        "tags": [
          "OTA updates"
        ],
        "summary": "Get OTA update",
        "description": "This API returns the details of an Over the Air (OTA) update.",
        "operationId": "GetOtaUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OTAUpdateResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/outbound_voice_profiles": {
      "get": {
        "tags": [
          "Outbound Voice Profiles"
        ],
        "summary": "Get all outbound voice profiles",
        "description": "Get all outbound voice profiles belonging to the user that match the given filters.",
        "operationId": "ListOutboundVoiceProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/NameFilter"
          },
          {
            "$ref": "#/components/parameters/SortOutboundVoiceProfile"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListOutboundVoiceProfilesResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Outbound Voice Profiles"
        ],
        "summary": "Create an outbound voice profile",
        "description": "Create an outbound voice profile.",
        "operationId": "CreateVoiceProfile",
        "requestBody": {
          "description": "Parameters that can be defined when creating an outbound voice profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutboundVoiceProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/outbound_voice_profiles/{id}": {
      "delete": {
        "tags": [
          "Outbound Voice Profiles"
        ],
        "summary": "Delete an outbound voice profile",
        "description": "Deletes an existing outbound voice profile.",
        "operationId": "DeleteOutboundVoiceProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Outbound Voice Profiles"
        ],
        "summary": "Retrieve an outbound voice profile",
        "description": "Retrieves the details of an existing outbound voice profile.",
        "operationId": "GetOutboundVoiceProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Outbound Voice Profiles"
        ],
        "summary": "Updates an existing outbound voice profile.",
        "description": "Updates an existing outbound voice profile.",
        "operationId": "UpdateOutboundVoiceProfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated on an outbound voice profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutboundVoiceProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundVoiceProfileResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/partnerCampaign/sharedByMe": {
      "get": {
        "tags": [
          "Shared Campaigns"
        ],
        "summary": "Get Partner Campaigns Shared By User",
        "description": "Get all partner campaigns you have shared to Telnyx in a paginated fashion\n\nThis endpoint is currently limited to only returning shared campaigns that Telnyx\nhas accepted. In other words, shared but pending campaigns are currently omitted\nfrom the response from this endpoint.",
        "operationId": "GetPartnerCampaignsSharedByUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The 1-indexed page number to get. The default value is `1`.",
            "schema": {
              "title": "Page",
              "type": "integer",
              "description": "The 1-indexed page number to get. The default value is `1`.",
              "default": 1
            }
          },
          {
            "name": "recordsPerPage",
            "in": "query",
            "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
            "schema": {
              "title": "Recordsperpage",
              "type": "integer",
              "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedCampaignRecordSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/partnerCampaign/{campaignId}/sharing": {
      "get": {
        "tags": [
          "Shared Campaigns"
        ],
        "summary": "Get Sharing Status",
        "operationId": "GetPartnerCampaignSharingStatus",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "ID of the campaign in question",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string",
              "description": "ID of the campaign in question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPartnerCampaignSharingStatus_200"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/partner_campaigns": {
      "get": {
        "tags": [
          "Shared Campaigns"
        ],
        "summary": "List Shared Campaigns",
        "description": "Retrieve all partner campaigns you have shared to Telnyx in a paginated fashion.\n\nThis endpoint is currently limited to only returning shared campaigns that Telnyx has accepted. In other words, shared but pending campaigns are currently omitted from the response from this endpoint.",
        "operationId": "GetSharedCampaigns",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The 1-indexed page number to get. The default value is `1`.",
            "schema": {
              "title": "Page",
              "type": "integer",
              "description": "The 1-indexed page number to get. The default value is `1`.",
              "default": 1
            }
          },
          {
            "name": "recordsPerPage",
            "in": "query",
            "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
            "schema": {
              "title": "Recordsperpage",
              "type": "integer",
              "description": "The amount of records per page, limited to between 1 and 500 inclusive. The default value is `10`.",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by createdAt in descending order.",
            "schema": {
              "title": "Sort",
              "enum": [
                "assignedPhoneNumbersCount",
                "-assignedPhoneNumbersCount",
                "brandDisplayName",
                "-brandDisplayName",
                "tcrBrandId",
                "-tcrBranId",
                "tcrCampaignId",
                "-tcrCampaignId",
                "createdAt",
                "-createdAt",
                "campaignStatus",
                "-campaignStatus"
              ],
              "type": "string",
              "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
              "default": "-createdAt"
            },
            "example": "-assignedPhoneNumbersCount"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxDownstreamCampaignRecordSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/partner_campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Shared Campaigns"
        ],
        "summary": "Get Single Shared Campaign",
        "description": "Retrieve campaign details by `campaignId`.",
        "operationId": "GetSharedCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxDownstreamCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Shared Campaigns"
        ],
        "summary": "Update Single Shared Campaign",
        "description": "Update campaign details by `campaignId`. **Please note:** Only webhook urls are editable.",
        "operationId": "UpdateSharedCampaign",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Campaignid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartnerCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelnyxDownstreamCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/payment/auto_recharge_prefs": {
      "get": {
        "tags": [
          "AutoRechargePreferences"
        ],
        "summary": "List auto recharge preferences",
        "description": "Returns the payment auto recharge preferences.",
        "operationId": "GetAutoRechargePrefs",
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutoRechargePrefResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "AutoRechargePreferences"
        ],
        "summary": "Update auto recharge preferences",
        "description": "Update payment auto recharge preferences.",
        "operationId": "UpdateAutoRechargePrefs",
        "requestBody": {
          "description": "Details to update auto recharge preferences",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoRechargePrefRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutoRechargePrefResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phoneNumberAssignmentByProfile": {
      "post": {
        "tags": [
          "Bulk Phone Number Campaigns"
        ],
        "summary": "Assign Messaging Profile To Campaign",
        "description": "This endpoint allows you to link all phone numbers associated with a Messaging Profile to a campaign. **Please note:** if you want to assign phone numbers to a campaign that you did not create with Telnyx 10DLC services, this endpoint allows that provided that you've shared the campaign with Telnyx. In this case, only provide the parameter, `tcrCampaignId`, and not `campaignId`. In all other cases (where the campaign you're assigning was created with Telnyx 10DLC services), only provide `campaignId`, not `tcrCampaignId`.",
        "operationId": "PostAssignMessagingProfileToCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProfileToCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostAssignMessagingProfileToCampaign_202"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phoneNumberAssignmentByProfile/{taskId}": {
      "get": {
        "tags": [
          "Bulk Phone Number Campaigns"
        ],
        "summary": "Get Assignment Task Status",
        "description": "Check the status of the task associated with assigning all phone numbers on a messaging profile to a campaign by `taskId`.",
        "operationId": "GetAssignmentTaskStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Taskid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentTaskStatusResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phoneNumberAssignmentByProfile/{taskId}/phoneNumbers": {
      "get": {
        "tags": [
          "Bulk Phone Number Campaigns"
        ],
        "summary": "Get Phone Number Status",
        "description": "Check the status of the individual phone number/campaign assignments associated with the supplied `taskId`.",
        "operationId": "GetPhoneNumberStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Taskid",
              "type": "string"
            }
          },
          {
            "name": "recordsPerPage",
            "in": "query",
            "schema": {
              "title": "Recordsperpage",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "title": "Page",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberStatusResponsePaginated"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_number_blocks/jobs": {
      "get": {
        "tags": [
          "Phone Number Blocks Background Jobs"
        ],
        "summary": "Lists the phone number blocks jobs",
        "operationId": "ListPhoneNumberBlocksJobs",
        "parameters": [
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter the phone number blocks jobs by type.",
            "schema": {
              "enum": [
                "delete_phone_number_block"
              ],
              "type": "string",
              "description": "Identifies the type of the background job.",
              "example": "delete_phone_number_block"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter the phone number blocks jobs by status.",
            "schema": {
              "enum": [
                "pending",
                "in_progress",
                "completed",
                "failed"
              ],
              "type": "string",
              "description": "Identifies the status of the background job.",
              "example": "in_progress"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumberBlocksJobsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/phone_number_blocks/jobs/delete_phone_number_block": {
      "post": {
        "tags": [
          "Phone Number Blocks Background Jobs"
        ],
        "summary": "Deletes all numbers associated with a phone number block",
        "description": "Creates a new background job to delete all the phone numbers associated with the given block. We will only consider the phone number block as deleted after all phone numbers associated with it are removed, so multiple executions of this job may be necessary in case some of the phone numbers present errors during the deletion process.",
        "operationId": "CreatePhoneNumberBlockDeletionJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberBlocksJobDeletePhoneNumberBlockRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone number blocks job delete phone numbers requested.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Number Blocks Job Delete Phone Number Block",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberBlocksJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background",
        "x-group-parameters": "true"
      }
    },
    "/phone_number_blocks/jobs/{id}": {
      "get": {
        "tags": [
          "Phone Number Blocks Background Jobs"
        ],
        "summary": "Retrieves a phone number blocks job",
        "operationId": "GetPhoneNumberBlocksJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the Phone Number Blocks Job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone number blocks job details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Number Blocks Job",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberBlocksJob"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/phone_number_campaigns": {
      "get": {
        "tags": [
          "Phone Number Campaigns"
        ],
        "summary": "Retrieve All Phone Number Campaigns",
        "operationId": "GetAllPhoneNumberCampaigns",
        "parameters": [
          {
            "name": "recordsPerPage",
            "in": "query",
            "schema": {
              "title": "Recordsperpage",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "title": "Page",
              "default": 1
            }
          },
          {
            "$ref": "#/components/parameters/FilterByTelnyxCampaignID"
          },
          {
            "$ref": "#/components/parameters/FilterByTelnyxBrandID"
          },
          {
            "$ref": "#/components/parameters/FilterByTCRCampaignID"
          },
          {
            "$ref": "#/components/parameters/FilterByTCRBrandID"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by createdAt in descending order.",
            "schema": {
              "title": "Sort",
              "enum": [
                "assignmentStatus",
                "-assignmentStatus",
                "createdAt",
                "-createdAt",
                "phoneNumber",
                "-phoneNumber"
              ],
              "type": "string",
              "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
              "default": "-createdAt"
            },
            "example": "-phoneNumber"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberCampaignPaginated"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Phone Number Campaigns"
        ],
        "summary": "Create New Phone Number Campaign",
        "operationId": "CreatePhoneNumberCampaign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberCampaignCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberCampaign"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_number_campaigns/{phoneNumber}": {
      "delete": {
        "tags": [
          "Phone Number Campaigns"
        ],
        "summary": "Delete Phone Number Campaign",
        "description": "This endpoint allows you to remove a campaign assignment from the supplied `phoneNumber`.",
        "operationId": "DeletePhoneNumberCampaign",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Phonenumber",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SinglePhoneNumberCampaign"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Phone Number Campaigns"
        ],
        "summary": "Get Single Phone Number Campaign",
        "description": "Retrieve an individual phone number/campaign assignment by `phoneNumber`.",
        "operationId": "GetSinglePhoneNumberCampaign",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Phonenumber",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberCampaign"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Phone Number Campaigns"
        ],
        "summary": "Create New Phone Number Campaign",
        "operationId": "PutPhoneNumberCampaign",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Phonenumber",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberCampaignCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberCampaign"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers": {
      "get": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "List phone numbers",
        "operationId": "ListPhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by phone number tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by phone number status.",
            "schema": {
              "enum": [
                "purchase-pending",
                "purchase-failed",
                "port-pending",
                "active",
                "deleted",
                "port-failed",
                "emergency-only",
                "ported-out",
                "port-out-pending"
              ],
              "type": "string",
              "example": "active"
            }
          },
          {
            "name": "filter[country_iso_alpha2]",
            "in": "query",
            "description": "Filter by phone number country ISO alpha-2 code. Can be a single value or an array of values.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "example": "US"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "Filter by connection_id.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1521916448077776306"
            }
          },
          {
            "name": "filter[voice.connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][starts_with]",
            "in": "query",
            "description": "Filter starts with connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][ends_with]",
            "in": "query",
            "description": "Filter ends with connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][eq]",
            "in": "query",
            "description": "Filter by connection name.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "schema": {
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "type": "string",
              "example": "channel"
            }
          },
          {
            "name": "filter[billing_group_id]",
            "in": "query",
            "description": "Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "example": "62e4bf2e-c278-4282-b524-488d9c9c43b2"
            }
          },
          {
            "name": "filter[emergency_address_id]",
            "in": "query",
            "description": "Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "9102160989215728032"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[number_type][eq]",
            "in": "query",
            "description": "Filter phone numbers by phone number type.",
            "schema": {
              "enum": [
                "local",
                "national",
                "toll_free",
                "mobile",
                "shared_cost"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[source]",
            "in": "query",
            "description": "Filter phone numbers by their source. Use 'ported' for numbers ported from other carriers, or 'purchased' for numbers bought directly from Telnyx.",
            "schema": {
              "enum": [
                "ported",
                "purchased"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "purchased_at",
                "phone_number",
                "connection_name",
                "usage_payment_method"
              ],
              "type": "string",
              "example": "connection_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/csv_downloads": {
      "get": {
        "tags": [
          "CSV Downloads"
        ],
        "summary": "List CSV downloads",
        "operationId": "ListCsvDownloads",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListCsvDownloadsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "CSV Downloads"
        ],
        "summary": "Create a CSV download",
        "operationId": "CreateCsvDownload",
        "parameters": [
          {
            "name": "csv_format",
            "in": "query",
            "description": "Which format to use when generating the CSV file. The default for backwards compatibility is 'V1'",
            "schema": {
              "enum": [
                "V1",
                "V2"
              ],
              "type": "string",
              "default": "V1",
              "example": "V2"
            }
          },
          {
            "name": "filter[has_bundle]",
            "in": "query",
            "description": "Filter by phone number that have bundles.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by phone number tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "Filter by connection_id.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1521916448077776306"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by phone number status.",
            "schema": {
              "enum": [
                "purchase-pending",
                "purchase-failed",
                "port-pending",
                "active",
                "deleted",
                "port-failed",
                "emergency-only",
                "ported-out",
                "port-out-pending"
              ],
              "type": "string",
              "example": "active"
            }
          },
          {
            "name": "filter[voice.connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "schema": {
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "type": "string",
              "example": "channel"
            }
          },
          {
            "name": "filter[billing_group_id]",
            "in": "query",
            "description": "Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "example": "62e4bf2e-c278-4282-b524-488d9c9c43b2"
            }
          },
          {
            "name": "filter[emergency_address_id]",
            "in": "query",
            "description": "Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "9102160989215728032"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CsvDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background",
        "x-endpoint-cost": "medium"
      }
    },
    "/phone_numbers/csv_downloads/{id}": {
      "get": {
        "tags": [
          "CSV Downloads"
        ],
        "summary": "Retrieve a CSV download",
        "operationId": "GetCsvDownload",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the CSV download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CsvDownloadResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background",
        "x-endpoint-cost": "medium"
      }
    },
    "/phone_numbers/jobs": {
      "get": {
        "tags": [
          "Bulk Phone Number Operations"
        ],
        "summary": "Lists the phone numbers jobs",
        "operationId": "ListPhoneNumbersJobs",
        "parameters": [
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter the phone number jobs by type.",
            "schema": {
              "enum": [
                "update_emergency_settings",
                "delete_phone_numbers",
                "update_phone_numbers"
              ],
              "type": "string",
              "description": "Identifies the type of the background job.",
              "example": "update_emergency_settings"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersJobsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Invalid sorting value": {
                    "value": {
                      "errors": [
                        {
                          "code": "10015",
                          "title": "Invalid sorting value",
                          "detail": "The value provided for sorting is not valid. Check the value used and try again.",
                          "source": {
                            "pointer": "/sort"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                          }
                        }
                      ]
                    }
                  },
                  "Invalid page size": {
                    "value": {
                      "errors": [
                        {
                          "code": "10015",
                          "title": "Invalid pagination",
                          "detail": "The provided 'page' parameter is invalid. It must be an object with 'size' and/or 'number' with numeric values.",
                          "source": {
                            "pointer": "page/size"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                          }
                        }
                      ]
                    }
                  },
                  "Invalid page number": {
                    "value": {
                      "errors": [
                        {
                          "code": "10015",
                          "title": "Invalid pagination",
                          "detail": "The provided 'page' parameter is invalid. It must be an object with 'size' and/or 'number' with numeric values.",
                          "source": {
                            "pointer": "page/number"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/jobs/delete_phone_numbers": {
      "post": {
        "tags": [
          "Bulk Phone Number Operations"
        ],
        "summary": "Delete a batch of numbers",
        "description": "Creates a new background job to delete a batch of numbers. At most one thousand numbers can be updated per API call.",
        "operationId": "CreateDeletePhoneNumbersJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobDeletePhoneNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers job delete phone numbers requested.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Numbers Job Delete Phone Numbers",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Phone numbers must be present": {
                    "$ref": "#/components/examples/PhoneNumbersMustBePresent"
                  },
                  "Maximum allowed phone numbers": {
                    "$ref": "#/components/examples/MaximumAllowedPhoneNumbers"
                  },
                  "Minimum allowed phone numbers": {
                    "$ref": "#/components/examples/MinimumAllowedPhoneNumbers"
                  },
                  "Mixed IDs and E164 values": {
                    "$ref": "#/components/examples/MixedIdsAndE164Values"
                  },
                  "Phone number ownership": {
                    "$ref": "#/components/examples/PhoneNumberOwnership"
                  },
                  "Maximum jobs allowed": {
                    "$ref": "#/components/examples/Maximum20JobsAllowed"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background",
        "x-group-parameters": "true"
      }
    },
    "/phone_numbers/jobs/update_emergency_settings": {
      "post": {
        "tags": [
          "Bulk Phone Number Operations"
        ],
        "summary": "Update the emergency settings from a batch of numbers",
        "description": "Creates a background job to update the emergency settings of a collection of phone numbers. At most one thousand numbers can be updated per API call.",
        "operationId": "CreatePhoneNumbersJobUpdateEmergencySettings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobUpdateEmergencySettingsRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers enable emergency requested.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Numbers Enable Emergency",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenResponse"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Phone numbers must be present": {
                    "$ref": "#/components/examples/PhoneNumbersMustBePresent"
                  },
                  "Maximum allowed phone numbers": {
                    "$ref": "#/components/examples/MaximumAllowedPhoneNumbers"
                  },
                  "Minimum allowed phone numbers": {
                    "$ref": "#/components/examples/MinimumAllowedPhoneNumbers"
                  },
                  "Mixed IDs and E164 values": {
                    "$ref": "#/components/examples/MixedIdsAndE164Values"
                  },
                  "Phone number ownership": {
                    "$ref": "#/components/examples/PhoneNumberOwnership"
                  },
                  "Maximum jobs allowed": {
                    "value": {
                      "errors": [
                        {
                          "code": "10015",
                          "title": "Bad Request",
                          "detail": "You can have at most 500 pending or in progress jobs",
                          "source": {
                            "pointer": "/base"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/phone_numbers/jobs/update_phone_numbers": {
      "post": {
        "tags": [
          "Bulk Phone Number Operations"
        ],
        "summary": "Update a batch of numbers",
        "description": "Creates a new background job to update a batch of numbers. At most one thousand numbers can be updated per API call. At least one of the updateable fields must be submitted. IMPORTANT: You must either specify filters (using the filter parameters) or specific phone numbers (using the phone_numbers parameter in the request body). If you specify filters, ALL phone numbers that match the given filters (up to 1000 at a time) will be updated. If you want to update only specific numbers, you must use the phone_numbers parameter in the request body. When using the phone_numbers parameter, ensure you follow the correct format as shown in the example (either phone number IDs or phone numbers in E164 format).",
        "operationId": "CreateUpdatePhoneNumbersJob",
        "parameters": [
          {
            "name": "filter[has_bundle]",
            "in": "query",
            "description": "Filter by phone number that have bundles.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by phone number tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "Filter by connection_id.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1521916448077776306"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by phone number status.",
            "schema": {
              "enum": [
                "purchase-pending",
                "purchase-failed",
                "port-pending",
                "active",
                "deleted",
                "port-failed",
                "emergency-only",
                "ported-out",
                "port-out-pending"
              ],
              "type": "string",
              "example": "active"
            }
          },
          {
            "name": "filter[voice.connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "schema": {
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "type": "string",
              "example": "channel"
            }
          },
          {
            "name": "filter[billing_group_id]",
            "in": "query",
            "description": "Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "example": "62e4bf2e-c278-4282-b524-488d9c9c43b2"
            }
          },
          {
            "name": "filter[emergency_address_id]",
            "in": "query",
            "description": "Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "9102160989215728032"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumbersJobUpdatePhoneNumbersRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Phone numbers job update phone numbers requested.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Numbers Job Update Phone Numbers",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Not authorized": {
                    "$ref": "#/components/examples/NotAuthorized"
                  },
                  "Billing group not authorized": {
                    "value": {
                      "errors": [
                        {
                          "code": "10010",
                          "title": "Authorization Failed",
                          "detail": "The specified billing group either does not exist or is not part of your account",
                          "source": {
                            "pointer": "/billing_group_id"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10010"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Phone numbers must be present": {
                    "$ref": "#/components/examples/PhoneNumbersMustBePresent"
                  },
                  "Maximum allowed phone numbers": {
                    "$ref": "#/components/examples/MaximumAllowedPhoneNumbers"
                  },
                  "Minimum allowed phone numbers": {
                    "$ref": "#/components/examples/MinimumAllowedPhoneNumbers"
                  },
                  "Mixed IDs and E164 values": {
                    "$ref": "#/components/examples/MixedIdsAndE164Values"
                  },
                  "Phone number ownership": {
                    "$ref": "#/components/examples/PhoneNumberOwnership"
                  },
                  "Minimum updateable field": {
                    "value": {
                      "errors": [
                        {
                          "code": "10015",
                          "title": "Bad Request",
                          "detail": "You must provide at least 1 updateable field.",
                          "source": {
                            "pointer": "/updateable_fields"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                          }
                        }
                      ]
                    }
                  },
                  "Maximum jobs allowed": {
                    "$ref": "#/components/examples/Maximum20JobsAllowed"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background",
        "x-group-parameters": "true"
      }
    },
    "/phone_numbers/jobs/{id}": {
      "get": {
        "tags": [
          "Bulk Phone Number Operations"
        ],
        "summary": "Retrieve a phone numbers job",
        "operationId": "RetrievePhoneNumbersJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the Phone Numbers Job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Phone numbers job details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Numbers Job",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumbersJob"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                },
                "examples": {
                  "Resource not found": {
                    "value": {
                      "errors": [
                        {
                          "code": "10005",
                          "title": "Resource not found",
                          "detail": "The requested resource or URL could not be found.",
                          "source": {
                            "pointer": "/base"
                          },
                          "meta": {
                            "url": "https://developers.telnyx.com/docs/overview/errors/10005"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/messaging": {
      "get": {
        "tags": [
          "Number Configurations"
        ],
        "summary": "List phone numbers with messaging settings",
        "operationId": "ListPhoneNumbersWithMessagingSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/slim": {
      "get": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Slim List phone numbers",
        "description": "List phone numbers, This endpoint is a lighter version of the /phone_numbers endpoint having higher performance and rate limit.",
        "operationId": "SlimListPhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "include_connection",
            "in": "query",
            "description": "Include the connection associated with the phone number.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "include_tags",
            "in": "query",
            "description": "Include the tags associated with the phone number.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "filter[tag]",
            "in": "query",
            "description": "Filter by phone number tags. (This requires the include_tags param)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by phone number status.",
            "schema": {
              "enum": [
                "purchase-pending",
                "purchase-failed",
                "port-pending",
                "active",
                "deleted",
                "port-failed",
                "emergency-only",
                "ported-out",
                "port-out-pending"
              ],
              "type": "string",
              "example": "active"
            }
          },
          {
            "name": "filter[country_iso_alpha2]",
            "in": "query",
            "description": "Filter by phone number country ISO alpha-2 code. Can be a single value or an array of values.",
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "example": "US"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            }
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "Filter by connection_id.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "1521916448077776306"
            }
          },
          {
            "name": "filter[voice.connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters and the include_connection param.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][starts_with]",
            "in": "query",
            "description": "Filter starts with connection name. Requires at least three characters and the include_connection param.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name][ends_with]",
            "in": "query",
            "description": "Filter ends with connection name. Requires at least three characters and the include_connection param.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.connection_name]",
            "in": "query",
            "description": "Filter by connection name , requires the include_connection param and the include_connection param.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[voice.usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "schema": {
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "type": "string",
              "example": "channel"
            }
          },
          {
            "name": "filter[billing_group_id]",
            "in": "query",
            "description": "Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that have no billing group associated them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "example": "62e4bf2e-c278-4282-b524-488d9c9c43b2"
            }
          },
          {
            "name": "filter[emergency_address_id]",
            "in": "query",
            "description": "Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers that have no emergency address associated with them, set the value of this filter to the string 'null'.",
            "schema": {
              "type": "string",
              "format": "int64",
              "example": "9102160989215728032"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[number_type][eq]",
            "in": "query",
            "description": "Filter phone numbers by phone number type.",
            "schema": {
              "enum": [
                "local",
                "national",
                "toll_free",
                "mobile",
                "shared_cost"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[source]",
            "in": "query",
            "description": "Filter phone numbers by their source. Use 'ported' for numbers ported from other carriers, or 'purchased' for numbers bought directly from Telnyx.",
            "schema": {
              "enum": [
                "ported",
                "purchased"
              ],
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "purchased_at",
                "phone_number",
                "connection_name",
                "usage_payment_method"
              ],
              "type": "string",
              "example": "connection_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SlimListPhoneNumbersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/voice": {
      "get": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "List phone numbers with voice settings",
        "operationId": "ListPhoneNumbersWithVoiceSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by phone number. Requires at least three digits.\n             Non-numerical characters will result in no values being returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[connection_name][contains]",
            "in": "query",
            "description": "Filter contains connection name. Requires at least three characters.",
            "schema": {
              "type": "string",
              "example": "test"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter numbers via the customer_reference set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[voice.usage_payment_method]",
            "in": "query",
            "description": "Filter by usage_payment_method.",
            "schema": {
              "enum": [
                "pay-per-minute",
                "channel"
              ],
              "type": "string",
              "example": "channel"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "purchased_at",
                "phone_number",
                "connection_name",
                "usage_payment_method"
              ],
              "type": "string",
              "example": "connection_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPhoneNumbersWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}": {
      "delete": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Delete a phone number",
        "operationId": "DeletePhoneNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletePhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Retrieve a phone number",
        "operationId": "RetrievePhoneNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Update a phone number",
        "operationId": "UpdatePhoneNumber",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "description": "Updated settings for the phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/actions/bundle_status_change": {
      "patch": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Change the bundle status for a phone number (set to being in a bundle or remove from a bundle)",
        "operationId": "PhoneNumberBundleStatusChange",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberBundleStatusChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number bundle status change success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Number Bundle Status Change",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/actions/enable_emergency": {
      "post": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Enable emergency for a phone number",
        "operationId": "EnablePhoneNumberEmergency",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneNumberEnableEmergencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phone number emergency enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Number Enable Emergency",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Phone number emergency requested.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Phone Number Enable Emergency",
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/messaging": {
      "get": {
        "tags": [
          "Number Configurations"
        ],
        "summary": "Retrieve a phone number with messaging settings",
        "operationId": "GetPhoneNumberMessagingSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the type of resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Number Configurations"
        ],
        "summary": "Update the messaging profile and/or messaging product of a phone number",
        "operationId": "UpdatePhoneNumberMessagingSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The phone number to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new configuration to set for this phone number.\n\nTo avoid modifying a value, either omit the field or set its value to `null`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberMessagingSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithMessagingSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{id}/voice": {
      "get": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Retrieve a phone number with voice settings",
        "operationId": "GetPhoneNumberVoiceSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Phone Number Configurations"
        ],
        "summary": "Update a phone number with voice settings",
        "operationId": "UpdatePhoneNumberVoiceSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/IntId"
          }
        ],
        "requestBody": {
          "description": "Updated voice settings for the phone number.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberVoiceSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PhoneNumberWithVoiceSettingsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/phone_numbers/{phone_number_id}/voicemail": {
      "get": {
        "tags": [
          "Voicemail"
        ],
        "summary": "Get voicemail",
        "description": "Returns the voicemail settings for a phone number",
        "operationId": "GetVoicemail",
        "responses": {
          "200": {
            "$ref": "#/components/responses/VoicemailResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Voicemail"
        ],
        "summary": "Update voicemail",
        "description": "Update voicemail settings for a phone number",
        "operationId": "UpdateVoicemail",
        "requestBody": {
          "description": "Details to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoicemailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/VoicemailResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Voicemail"
        ],
        "summary": "Create voicemail",
        "description": "Create voicemail settings for a phone number",
        "operationId": "CreateVoicemail",
        "requestBody": {
          "description": "Details to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoicemailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/VoicemailResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "parameters": [
        {
          "name": "phone_number_id",
          "in": "path",
          "description": "The ID of the phone number.",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "123455678900"
        }
      ]
    },
    "/phone_numbers_regulatory_requirements": {
      "get": {
        "tags": [
          "Regulatory Requirements"
        ],
        "summary": "Retrieve regulatory requirements for a list of phone numbers",
        "operationId": "ListRegulatoryRequirementsPhoneNumbers",
        "parameters": [
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Record type phone number/ phone numbers",
            "required": true,
            "schema": {
              "type": "string",
              "example": "+41215470622,+41215470633"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRegulatoryRequirementsPhoneNumbers"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portability_checks": {
      "post": {
        "tags": [
          "Phone Number Porting"
        ],
        "summary": "Run a portability check",
        "description": "Runs a portability check, returning the results immediately.",
        "operationId": "PostPortabilityCheck",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPortabilityCheck"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PortabilityCheckResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/events": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all porting events",
        "description": "Returns a list of all porting events.",
        "operationId": "listPortingEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter by event type.",
            "schema": {
              "enum": [
                "porting_order.deleted",
                "porting_order.loa_updated",
                "porting_order.messaging_changed",
                "porting_order.status_changed",
                "porting_order.sharing_token_expired",
                "porting_order.new_comment",
                "porting_order.split"
              ],
              "type": "string",
              "example": "porting_order.deleted"
            }
          },
          {
            "name": "filter[porting_order_id]",
            "in": "query",
            "description": "Filter by porting order ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "34dc46a9-53ed-4e01-9454-26227ea13326"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Filter by created at greater than or equal to.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-01T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Filter by created at less than or equal to.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-01T00:00:00.0000000+00:00"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingEventsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/events/{id}": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Show a porting event",
        "description": "Show a specific porting event.",
        "operationId": "showPortingEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the porting event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingEventResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/events/{id}/republish": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Republish a porting event",
        "description": "Republish a specific porting event.",
        "operationId": "republishPortingEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the porting event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/republishPortingEvent_201"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/loa_configuration/preview": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Preview the LOA configuration parameters",
        "description": "Preview the LOA template that would be generated without need to create LOA configuration.",
        "operationId": "PreviewLoaConfigurationParams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewLoaConfigurationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadLOATemplate"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/loa_configurations": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List LOA configurations",
        "description": "List the LOA configurations.",
        "operationId": "ListLoaConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingLOAConfigurations"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a LOA configuration",
        "description": "Create a LOA configuration.",
        "operationId": "CreateLoaConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewLoaConfigurationParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortingLOAConfiguration"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/loa_configurations/{id}": {
      "delete": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Delete a LOA configuration",
        "description": "Delete a specific LOA configuration.",
        "operationId": "DeleteLoaConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a LOA configuration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteLoaConfiguration_204"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Retrieve a LOA configuration",
        "description": "Retrieve a specific LOA configuration.",
        "operationId": "GetLoaConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a LOA configuration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingLOAConfiguration"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Update a LOA configuration",
        "description": "Update a specific LOA configuration.",
        "operationId": "UpdateLoaConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a LOA configuration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewLoaConfigurationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatePortingLOAConfiguration"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/loa_configurations/{id}/preview": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Preview a LOA configuration",
        "description": "Preview a specific LOA configuration.",
        "operationId": "PreviewLoaConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a LOA configuration.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadLOATemplate"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/reports": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List porting related reports",
        "description": "List the reports generated about porting operations.",
        "operationId": "ListPortingReports",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[report_type]",
            "in": "query",
            "description": "Filter reports of a specific type",
            "schema": {
              "enum": [
                "export_porting_orders_csv"
              ],
              "type": "string",
              "example": "export_porting_orders_csv"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter reports of a specific status",
            "schema": {
              "enum": [
                "pending",
                "completed"
              ],
              "type": "string",
              "example": "completed"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingReports"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a porting related report",
        "description": "Generate reports about porting operations.",
        "operationId": "CreatePortingReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortingReport"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortingReport"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting/reports/{id}": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Retrieve a report",
        "description": "Retrieve a specific report generated.",
        "operationId": "GetPortingReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingReport"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all porting orders",
        "description": "Returns a list of your porting order.",
        "operationId": "ListPortingOrders",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/QueryIncludePhoneNumbers"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderStatus"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderStatusIn"
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter results by customer_reference",
            "schema": {
              "type": "string"
            },
            "example": "123abc"
          },
          {
            "name": "filter[parent_support_key]",
            "in": "query",
            "description": "Filter results by parent_support_key",
            "schema": {
              "type": "string"
            },
            "example": "123abc"
          },
          {
            "name": "filter[phone_numbers.country_code]",
            "in": "query",
            "description": "Filter results by country ISO 3166-1 alpha-2 code",
            "schema": {
              "type": "string"
            },
            "example": "US"
          },
          {
            "name": "filter[phone_numbers.carrier_name]",
            "in": "query",
            "description": "Filter results by old service provider",
            "schema": {
              "type": "string"
            },
            "example": "Telnyx"
          },
          {
            "name": "filter[misc.type]",
            "in": "query",
            "description": "Filter results by porting order type",
            "schema": {
              "$ref": "#/components/schemas/PortingOrderType"
            },
            "example": "full"
          },
          {
            "name": "filter[end_user.admin.entity_name]",
            "in": "query",
            "description": "Filter results by person or company name",
            "schema": {
              "type": "string"
            },
            "example": "Porter McPortersen"
          },
          {
            "name": "filter[end_user.admin.auth_person_name]",
            "in": "query",
            "description": "Filter results by authorized person",
            "schema": {
              "type": "string"
            },
            "example": "Admin McPortersen"
          },
          {
            "name": "filter[activation_settings.fast_port_eligible]",
            "in": "query",
            "description": "Filter results by fast port eligible",
            "schema": {
              "type": "boolean"
            },
            "example": false
          },
          {
            "name": "filter[activation_settings.foc_datetime_requested][gt]",
            "in": "query",
            "description": "Filter results by foc date later than this value",
            "schema": {
              "type": "string"
            },
            "example": "2021-03-25T10:00:00.000Z"
          },
          {
            "name": "filter[activation_settings.foc_datetime_requested][lt]",
            "in": "query",
            "description": "Filter results by foc date earlier than this value",
            "schema": {
              "type": "string"
            },
            "example": "2021-03-25T10:00:00.000Z"
          },
          {
            "name": "filter[phone_numbers.phone_number][contains]",
            "in": "query",
            "description": "Filter results by full or partial phone_number",
            "schema": {
              "type": "string"
            },
            "example": "+13038675309"
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at",
                "-created_at",
                "activation_settings.foc_datetime_requested",
                "-activation_settings.foc_datetime_requested"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrder"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a porting order",
        "description": "Creates a new porting order object.",
        "operationId": "CreatePortingOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortingOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ListDraftPortingOrdersWithoutPagination"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/exception_types": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all exception types",
        "description": "Returns a list of all possible exception types for a porting order.",
        "operationId": "ListExceptionTypes",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrdersExceptionTypes"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/phone_number_configurations": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all phone number configurations",
        "description": "Returns a list of phone number configurations paginated.",
        "operationId": "ListPhoneNumberConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderIdIn"
          },
          {
            "name": "filter[porting_order.status]",
            "in": "query",
            "description": "Filter results by a specific porting order status",
            "schema": {
              "enum": [
                "activation-in-progress",
                "cancel-pending",
                "cancelled",
                "draft",
                "exception",
                "foc-date-confirmed",
                "in-process",
                "ported",
                "submitted"
              ],
              "type": "string",
              "example": "foc-date-confirmed"
            }
          },
          {
            "name": "filter[porting_order.status][in][]",
            "in": "query",
            "description": "Filter results by specific porting order statuses",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "activation-in-progress",
                  "cancel-pending",
                  "cancelled",
                  "draft",
                  "exception",
                  "foc-date-confirmed",
                  "in-process",
                  "ported",
                  "submitted"
                ],
                "type": "string",
                "example": "in-process"
              }
            }
          },
          {
            "name": "filter[porting_phone_number]",
            "in": "query",
            "description": "Filter results by a specific porting phone number ID",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "5d6f7ede-1961-4717-bfb5-db392c5efc2d"
            }
          },
          {
            "name": "filter[porting_phone_number][in][]",
            "in": "query",
            "description": "Filter results by a list of porting phone number IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "5d6f7ede-1961-4717-bfb5-db392c5efc2d"
              }
            }
          },
          {
            "name": "filter[user_bundle_id]",
            "in": "query",
            "description": "Filter results by a specific user bundle ID",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "5d6f7ede-1961-4717-bfb5-db392c5efc2d"
            }
          },
          {
            "name": "filter[user_bundle_id][in][]",
            "in": "query",
            "description": "Filter results by a list of user bundle IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "5d6f7ede-1961-4717-bfb5-db392c5efc2d"
              }
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at",
                "-created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingPhoneNumberConfigurations"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a list of phone number configurations",
        "description": "Creates a list of phone number configurations.",
        "operationId": "CreatePhoneNumberConfigurations",
        "requestBody": {
          "description": "A list of phone number configuration parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneNumberConfigurations"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortingPhoneNumberConfigurations"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}": {
      "delete": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Delete a porting order",
        "description": "Deletes an existing porting order. This operation is restrict to porting orders in draft state.",
        "operationId": "DeletePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "204": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePortingOrder_204"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Retrieve a porting order",
        "description": "Retrieves the details of an existing porting order.",
        "operationId": "GetPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/QueryIncludePhoneNumbers"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrder"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Edit a porting order",
        "description": "Edits the details of an existing porting order.\n\nAny or all of a porting orders attributes may be included in the resource object included in a PATCH request.\n\nIf a request does not include all of the attributes for a resource, the system will interpret the missing attributes as if they were included with their current values. To explicitly set something to null, it must be included in the request with a null value.",
        "operationId": "UpdatePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortingOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatePortingOrderResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/activate": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Activate every number in a porting order asynchronously.",
        "description": "Activate each number in a porting order asynchronously. This operation is limited to US FastPort orders only.",
        "operationId": "ActivatePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/ShowPortingOrdersActivationJob"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/cancel": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Cancel a porting order",
        "description": "Cancel a porting order",
        "operationId": "CancelPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CancelPortingOrderResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/confirm": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Submit a porting order.",
        "description": "Confirm and submit your porting order.",
        "operationId": "ConfirmPortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConfirmPortingOrderResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/actions/share": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Share a porting order",
        "description": "Creates a sharing token for a porting order. The token can be used to share the porting order with non-Telnyx users.",
        "operationId": "SharePortingOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharePortingOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SharePortingOrder"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/activation_jobs": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all porting activation jobs",
        "description": "Returns a list of your porting activation jobs.",
        "operationId": "ListPortingOrderActivationJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrdersActivationJobs"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/activation_jobs/{activationJobId}": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Retrieve a porting activation job",
        "description": "Returns a porting activation job.",
        "operationId": "GetPortingOrdersActivationJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PathPortingOrdersActivationJobID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrdersActivationJob"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Update a porting activation job",
        "description": "Updates the activation time of a porting activation job.",
        "operationId": "UpdatePortingOrdersActivationJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PathPortingOrdersActivationJobID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortingOrdersActivationJob"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingOrdersActivationJob"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/additional_documents": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List additional documents",
        "description": "Returns a list of additional documents for a porting order.",
        "operationId": "ListAdditionalDocuments",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[document_type]",
            "in": "query",
            "description": "Filter additional documents of a specific document type",
            "schema": {
              "enum": [
                "loa",
                "invoice",
                "csr",
                "other"
              ],
              "type": "string",
              "example": "loa"
            }
          },
          {
            "name": "filter[document_type][in][]",
            "in": "query",
            "description": "Filter additional documents by a list of document types",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "loa",
                  "invoice",
                  "csr",
                  "other"
                ],
                "type": "string",
                "example": "loa"
              }
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at",
                "-created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingAdditionalDocuments"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a list of additional documents",
        "description": "Creates a list of additional documents for a porting order.",
        "operationId": "CreateAdditionalDocuments",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "description": "A list of additional document parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdditionalDocuments"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortingAdditionalDocuments"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/additional_documents/{additional_document_id}": {
      "delete": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Delete an additional document",
        "description": "Deletes an additional document for a porting order.",
        "operationId": "DeleteAdditionalDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "name": "additional_document_id",
            "in": "path",
            "description": "Additional document identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAdditionalDocument_204"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/allowed_foc_windows": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List allowed FOC dates",
        "description": "Returns a list of allowed FOC dates for a porting order.",
        "operationId": "ListAllowedFocWindows",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListAllowedFocWindows"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/comments": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all comments of a porting order",
        "description": "Returns a list of all comments of a porting order.",
        "operationId": "ListPortingOrderComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrdersComments"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a comment for a porting order",
        "description": "Creates a new comment for a porting order.",
        "operationId": "CreatePortingOrderComment",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortingOrderComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ShowPortingOrdersComment"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/loa_template": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Download a porting order loa template",
        "description": "Download a porting order loa template",
        "operationId": "GetPortingOrderLoaTemplate",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "name": "loa_configuration_id",
            "in": "query",
            "description": "The identifier of the LOA configuration to use for the template. If not provided, the default LOA configuration will be used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "a36c2277-446b-4d11-b4ea-322e02a5c08d"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DownloadLOATemplate"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/requirements": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List porting order requirements",
        "description": "Returns a list of all requirements based on country/number type for this porting order.",
        "operationId": "ListPortingOrderRequirements",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingOrderRequirements"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/sub_request": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Retrieve the associated V1 sub_request_id and port_request_id",
        "description": "Retrieve the associated V1 sub_request_id and port_request_id",
        "operationId": "GetPortingOrderSubRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubRequestByPortingOrder"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/verification_codes": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List verification codes",
        "description": "Returns a list of verification codes for a porting order.",
        "operationId": "ListVerificationCodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumber"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumberIn"
          },
          {
            "name": "filter[verified]",
            "in": "query",
            "description": "Filter verification codes that have been verified or not",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order.",
            "schema": {
              "enum": [
                "created_at",
                "-created_at"
              ],
              "type": "string",
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingVerificationCodes"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/verification_codes/send": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Send the verification codes",
        "description": "Send the verification code for all porting phone numbers.",
        "operationId": "SendPortingVerificationCodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "description": "A list of phone numbers to send the verification codes to and the method to send them by",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPortingVerificationCodes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendPortingVerificationCodes_201"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{id}/verification_codes/verify": {
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Verify the verification code for a list of phone numbers",
        "description": "Verifies the verification code for a list of phone numbers.",
        "operationId": "VerifyPortingVerificationCodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathPortingOrderID"
          }
        ],
        "requestBody": {
          "description": "A list of phone numbers and their verification codes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPortingVerificationCodes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/VerifyPortingVerificationCodes"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{porting_order_id}/phone_number_blocks": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all phone number blocks",
        "description": "Returns a list of all phone number blocks of a porting order.",
        "operationId": "listPortingPhoneNumberBlocks",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number blocks",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumber"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumberIn"
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order",
            "schema": {
              "enum": [
                "-created_at",
                "created_at"
              ],
              "type": "string",
              "example": "false"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingPhoneNumberBlocks"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a phone number block",
        "description": "Creates a new phone number block.",
        "operationId": "createPortingPhoneNumberBlock",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number block",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPortingPhoneNumberBlock"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ShowPortingPhoneNumberBlock"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{porting_order_id}/phone_number_blocks/{id}": {
      "delete": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Delete a phone number block",
        "description": "Deletes a phone number block.",
        "operationId": "deletePortingPhoneNumberBlock",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number block",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the phone number block to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingPhoneNumberBlock"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{porting_order_id}/phone_number_extensions": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all phone number extensions",
        "description": "Returns a list of all phone number extensions of a porting order.",
        "operationId": "listPortingPhoneNumberExtensions",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number extensions",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumber"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumberIn"
          },
          {
            "name": "filter[porting_phone_number_id]",
            "in": "query",
            "description": "Filter results by porting phone number id",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "04f8f1b9-310c-4a3c-963e-7dfc54765140"
            }
          },
          {
            "name": "filter[porting_phone_number_id][in][]",
            "in": "query",
            "description": "Filter results by a list of porting phone number ids",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "04f8f1b9-310c-4a3c-963e-7dfc54765140"
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If not given, results are sorted by created_at in descending order",
            "schema": {
              "enum": [
                "-created_at",
                "created_at"
              ],
              "type": "string",
              "example": "false"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingPhoneNumberExtensions"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Create a phone number extension",
        "description": "Creates a new phone number extension.",
        "operationId": "createPortingPhoneNumberExtension",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number extension",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPortingPhoneNumberExtension"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ShowPortingPhoneNumberExtension"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_orders/{porting_order_id}/phone_number_extensions/{id}": {
      "delete": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "Delete a phone number extension",
        "description": "Deletes a phone number extension.",
        "operationId": "deletePortingPhoneNumberExtension",
        "parameters": [
          {
            "name": "porting_order_id",
            "in": "path",
            "description": "Identifies the Porting Order associated with the phone number extension",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the phone number extension to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortingPhoneNumberExtension"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/porting_phone_numbers": {
      "get": {
        "tags": [
          "Porting Orders"
        ],
        "summary": "List all porting phone numbers",
        "description": "Returns a list of your porting phone numbers.",
        "operationId": "ListPortingPhoneNumbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderID"
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderIdIn"
          },
          {
            "$ref": "#/components/parameters/FilterBySupportKeyEq"
          },
          {
            "$ref": "#/components/parameters/FilterBySupportKeyIn"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumber"
          },
          {
            "$ref": "#/components/parameters/FilterByPhoneNumberIn"
          },
          {
            "name": "filter[porting_order_status]",
            "in": "query",
            "description": "Filter results by porting order status",
            "schema": {
              "enum": [
                "draft",
                "in-process",
                "submitted",
                "exception",
                "foc-date-confirmed",
                "cancel-pending",
                "ported",
                "cancelled"
              ],
              "type": "string",
              "example": "in-process"
            }
          },
          {
            "$ref": "#/components/parameters/FilterByPortingOrderActivationStatus"
          },
          {
            "$ref": "#/components/parameters/FilterByPortabilityStatus"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortingPhoneNumbers"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List portout requests",
        "description": "Returns the portout requests according to filters",
        "operationId": "ListPortoutRequest",
        "parameters": [
          {
            "name": "filter[carrier_name]",
            "in": "query",
            "description": "Filter by new carrier name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[pon]",
            "in": "query",
            "description": "Filter by Port Order Number (PON).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[spid]",
            "in": "query",
            "description": "Filter by new carrier spid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by portout status.",
            "schema": {
              "enum": [
                "pending",
                "authorized",
                "ported",
                "rejected",
                "rejected-pending",
                "canceled"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[status_in]",
            "in": "query",
            "description": "Filter by a list of portout statuses",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "pending",
                  "authorized",
                  "ported",
                  "rejected",
                  "rejected-pending",
                  "canceled"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "filter[ported_out_at][gte]",
            "in": "query",
            "description": "Filter by ported_out_at date greater than or equal.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2024-09-04T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[ported_out_at][lte]",
            "in": "query",
            "description": "Filter by ported_out_at date less than or equal.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2024-09-04T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[inserted_at][gte]",
            "in": "query",
            "description": "Filter by inserted_at date greater than or equal.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2024-09-04T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[inserted_at][lte]",
            "in": "query",
            "description": "Filter by inserted_at date less than or equal.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2024-09-04T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[foc_date]",
            "in": "query",
            "description": "Filter by foc_date. Matches all portouts with the same date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2024-09-04T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Filter by a phone number on the portout. Matches all portouts with the phone number",
            "schema": {
              "type": "string",
              "example": "+13035551212"
            }
          },
          {
            "name": "filter[support_key]",
            "in": "query",
            "description": "Filter by the portout's support_key",
            "schema": {
              "type": "string",
              "example": "PO_abc123"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/events": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List all port-out events",
        "description": "Returns a list of all port-out events.",
        "operationId": "listPortoutEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[event_type]",
            "in": "query",
            "description": "Filter by event type.",
            "schema": {
              "enum": [
                "portout.status_changed",
                "portout.new_comment",
                "portout.foc_date_changed"
              ],
              "type": "string",
              "example": "portout.status_changed"
            }
          },
          {
            "name": "filter[portout_id]",
            "in": "query",
            "description": "Filter by port-out order ID.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "34dc46a9-53ed-4e01-9454-26227ea13326"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Filter by created at greater than or equal to.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-01T00:00:00.0000000+00:00"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Filter by created at less than or equal to.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-01-01T00:00:00.0000000+00:00"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutEventsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/events/{id}": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Show a port-out event",
        "description": "Show a specific port-out event.",
        "operationId": "showPortoutEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the port-out event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortoutEventResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/events/{id}/republish": {
      "post": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Republish a port-out event",
        "description": "Republish a specific port-out event.",
        "operationId": "republishPortoutEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the port-out event.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/republishPortoutEvent_201"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/rejections/{portout_id}": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List eligible port-out rejection codes for a specific order",
        "description": "Given a port-out ID, list rejection codes that are eligible for that port-out",
        "operationId": "ListPortoutRejections",
        "parameters": [
          {
            "name": "portout_id",
            "in": "path",
            "description": "Identifies a port out order.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "329d6658-8f93-405d-862f-648776e8afd7"
            }
          },
          {
            "name": "filter[code]",
            "in": "query",
            "description": "Filter rejections of a specific code",
            "schema": {
              "type": "integer",
              "example": 1002
            }
          },
          {
            "name": "filter[code][in]",
            "in": "query",
            "description": "Filter rejections in a list of codes",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutRejections"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/reports": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List port-out related reports",
        "description": "List the reports generated about port-out operations.",
        "operationId": "ListPortoutReports",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[report_type]",
            "in": "query",
            "description": "Filter reports of a specific type",
            "schema": {
              "enum": [
                "export_portouts_csv"
              ],
              "type": "string",
              "example": "export_portouts_csv"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter reports of a specific status",
            "schema": {
              "enum": [
                "pending",
                "completed"
              ],
              "type": "string",
              "example": "completed"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutReports"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Create a port-out related report",
        "description": "Generate reports about port-out operations.",
        "operationId": "CreatePortoutReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortoutReport"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortoutReport"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/reports/{id}": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Retrieve a report",
        "description": "Retrieve a specific report generated.",
        "operationId": "GetPortoutReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies a report.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShowPortoutReport"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Get a portout request",
        "description": "Returns the portout request based on the ID provided",
        "operationId": "FindPortoutRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PortoutResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}/comments": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List all comments for a portout request",
        "description": "Returns a list of comments for a portout request.",
        "operationId": "FindPortoutComments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListPortoutComments"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Create a comment on a portout request",
        "description": "Creates a comment on a portout request.",
        "operationId": "PostPortRequestComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPortRequestComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PortoutCommentResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}/supporting_documents": {
      "get": {
        "tags": [
          "Number Portout"
        ],
        "summary": "List supporting documents on a portout request",
        "description": "List every supporting documents for a portout request.",
        "operationId": "GetPortRequestSupportingDocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/PortOutListSupportingDocumentsResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Create a list of supporting documents on a portout request",
        "description": "Creates a list of supporting documents on a portout request.",
        "operationId": "PostPortRequestSupportingDocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPortRequestSupportingDocuments"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreatePortOutSupportingDocumentsResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/portouts/{id}/{status}": {
      "patch": {
        "tags": [
          "Number Portout"
        ],
        "summary": "Update Status",
        "description": "Authorize or reject portout request",
        "operationId": "UpdatePortoutStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Portout id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Updated portout status",
            "required": true,
            "schema": {
              "enum": [
                "authorized",
                "rejected-pending"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortoutStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PortoutResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/private_wireless_gateways": {
      "get": {
        "tags": [
          "Private Wireless Gateways"
        ],
        "summary": "Get all Private Wireless Gateways",
        "description": "Get all Private Wireless Gateways belonging to the user.",
        "operationId": "GetPrivateWirelessGateways",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "The name of the Private Wireless Gateway.",
            "schema": {
              "type": "string"
            },
            "example": "my private gateway"
          },
          {
            "name": "filter[ip_range]",
            "in": "query",
            "description": "The IP address range of the Private Wireless Gateway.",
            "schema": {
              "type": "string"
            },
            "example": "192.168.0.0/24"
          },
          {
            "name": "filter[region_code]",
            "in": "query",
            "description": "The name of the region where the Private Wireless Gateway is deployed.",
            "schema": {
              "type": "string"
            },
            "example": "dc2"
          },
          {
            "name": "filter[created_at]",
            "in": "query",
            "description": "Private Wireless Gateway resource creation date.",
            "schema": {
              "type": "string"
            },
            "example": "2018-02-02T22:25:27.521Z"
          },
          {
            "name": "filter[updated_at]",
            "in": "query",
            "description": "When the Private Wireless Gateway was last updated.",
            "schema": {
              "type": "string"
            },
            "example": "2018-02-02T22:25:27.521Z"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllPrivateWirelessGatewaysResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Private Wireless Gateways"
        ],
        "summary": "Create a Private Wireless Gateway",
        "description": "Asynchronously create a Private Wireless Gateway for SIM cards for a previously created network. This operation may take several minutes so you can check the Private Wireless Gateway status at the section Get a Private Wireless Gateway.",
        "operationId": "CreatePrivateWirelessGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrivateWirelessGateway"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/CreatePrivateWirelessGatewayResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/private_wireless_gateways/{id}": {
      "delete": {
        "tags": [
          "Private Wireless Gateways"
        ],
        "summary": "Delete a Private Wireless Gateway",
        "description": "Deletes the Private Wireless Gateway.",
        "operationId": "DeleteWirelessGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/PrivateWirelessGatewayId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletePrivateWirelessGatewayResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Private Wireless Gateways"
        ],
        "summary": "Get a Private Wireless Gateway",
        "description": "Retrieve information about a Private Wireless Gateway.",
        "operationId": "GetPrivateWirelessGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/PrivateWirelessGatewayId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPrivateWirelessGatewayResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/public_internet_gateways": {
      "get": {
        "tags": [
          "Public Internet Gateways"
        ],
        "summary": "List all Public Internet Gateways",
        "description": "List all Public Internet Gateways.",
        "operationId": "ListPublicInternetGateways",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[network_id]",
            "in": "query",
            "description": "The associated network id to filter on.",
            "schema": {
              "type": "string",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicInternetGatewayListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Public Internet Gateways"
        ],
        "summary": "Create a Public Internet Gateway",
        "description": "Create a new Public Internet Gateway.",
        "operationId": "CreatePublicInternetGateway",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicInternetGatewayCreate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/PublicInternetGatewayResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/public_internet_gateways/{id}": {
      "delete": {
        "tags": [
          "Public Internet Gateways"
        ],
        "summary": "Delete a Public Internet Gateway",
        "description": "Delete a Public Internet Gateway.",
        "operationId": "DeletePublicInternetGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicInternetGatewayResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Public Internet Gateways"
        ],
        "summary": "Retrieve a Public Internet Gateway",
        "description": "Retrieve a Public Internet Gateway.",
        "operationId": "GetPublicInternetGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicInternetGatewayResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/queues/{queue_name}": {
      "get": {
        "tags": [
          "Queue Commands"
        ],
        "summary": "Retrieve a call queue",
        "description": "Retrieve an existing call queue",
        "operationId": "RetrieveCallQueue",
        "parameters": [
          {
            "name": "queue_name",
            "in": "path",
            "description": "Uniquely identifies the queue by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls": {
      "get": {
        "tags": [
          "Queue Commands"
        ],
        "summary": "Retrieve calls from a queue",
        "description": "Retrieve the list of calls in an existing queue",
        "operationId": "ListQueueCalls",
        "parameters": [
          {
            "name": "queue_name",
            "in": "path",
            "description": "Uniquely identifies the queue by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListQueueCallsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/queues/{queue_name}/calls/{call_control_id}": {
      "get": {
        "tags": [
          "Queue Commands"
        ],
        "summary": "Retrieve a call from a queue",
        "description": "Retrieve an existing call from an existing queue",
        "operationId": "RetrieveCallFromQueue",
        "parameters": [
          {
            "name": "queue_name",
            "in": "path",
            "description": "Uniquely identifies the queue by name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/CallControlId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QueueCallResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/rcs_agents": {
      "get": {
        "tags": [
          "RCS messaging"
        ],
        "summary": "List all RCS agents",
        "operationId": "Get11cb924b2f184bf3a36512473e69035c",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful reponse with the list of RCS agents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RCSAgentsResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/rcs_agents/{id}": {
      "get": {
        "tags": [
          "RCS messaging"
        ],
        "summary": "Retrieve an RCS agent",
        "operationId": "Get0260aa7e054f4775b85df43fcaa01ef5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RCS agent ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the RCS agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RCSAgentResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "RCS messaging"
        ],
        "summary": "Modify an RCS agent",
        "operationId": "Patcha718feffeeb1490f8f17622a29ec784b",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "RCS agent ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RCSAgentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with the updated RCS agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RCSAgentResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/recording_transcriptions": {
      "get": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "List all recording transcriptions",
        "description": "Returns a list of your recording transcriptions.",
        "operationId": "getRecordingTranscriptions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRecordingTranscriptionsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/recording_transcriptions/{recording_transcription_id}": {
      "delete": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Delete a recording transcription",
        "description": "Permanently deletes a recording transcription.",
        "operationId": "deleteRecordingTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingTranscriptionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingTranscriptionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Retrieve a recording transcription",
        "description": "Retrieves the details of an existing recording transcription.",
        "operationId": "getRecordingTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingTranscriptionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingTranscriptionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/recordings": {
      "get": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "List all call recordings",
        "description": "Returns a list of your call recordings.",
        "operationId": "GetRecordings",
        "parameters": [
          {
            "name": "filter[conference_id]",
            "in": "query",
            "description": "Returns only recordings associated with a given conference.",
            "schema": {
              "type": "string",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[created_at][gte]",
            "in": "query",
            "description": "Returns only recordings created later than or at given ISO 8601 datetime.",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[created_at][lte]",
            "in": "query",
            "description": "Returns only recordings created earlier than or at given ISO 8601 datetime.",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[call_leg_id]",
            "in": "query",
            "description": "If present, recordings will be filtered to those with a matching call_leg_id.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[call_session_id]",
            "in": "query",
            "description": "If present, recordings will be filtered to those with a matching call_session_id.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
            }
          },
          {
            "name": "filter[from]",
            "in": "query",
            "description": "If present, recordings will be filtered to those with a matching `from` attribute (case-sensitive).",
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          },
          {
            "name": "filter[to]",
            "in": "query",
            "description": "If present, recordings will be filtered to those with a matching `to` attribute (case-sensitive).",
            "schema": {
              "type": "string",
              "example": "1234567890"
            }
          },
          {
            "name": "filter[connection_id]",
            "in": "query",
            "description": "If present, recordings will be filtered to those with a matching `connection_id` attribute (case-sensitive).",
            "schema": {
              "type": "string",
              "example": "175237942907135762"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingsResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/recordings/actions/delete": {
      "delete": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Delete a list of call recordings",
        "description": "Permanently deletes a list of call recordings.",
        "operationId": "DeleteRecordings",
        "requestBody": {
          "description": "Deletes recordings for the given list of IDs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRecordings"
              }
            }
          }
        },
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/recordings/{recording_id}": {
      "delete": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Delete a call recording",
        "description": "Permanently deletes a call recording.",
        "operationId": "DeleteRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Call Recordings"
        ],
        "summary": "Retrieve a call recording",
        "description": "Retrieves the details of an existing call recording.",
        "operationId": "GetRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/RecordingId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecordingResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "List all Regions",
        "description": "List all regions and the interfaces that region supports",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegionListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/regulatory_requirements": {
      "get": {
        "tags": [
          "Regulatory Requirements"
        ],
        "summary": "Retrieve regulatory requirements",
        "operationId": "ListRegulatoryRequirements",
        "parameters": [
          {
            "name": "filter[phone_number]",
            "in": "query",
            "description": "Phone number to check requirements for",
            "schema": {
              "type": "string",
              "example": "+41215470622"
            }
          },
          {
            "name": "filter[requirement_group_id]",
            "in": "query",
            "description": "ID of requirement group to check requirements for",
            "schema": {
              "type": "string",
              "example": "d4c0b4a6-7bd2-40c5-a3b9-2acd99e212b2"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Country code(iso2) to check requirements for",
            "schema": {
              "type": "string",
              "example": "DE"
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Phone number type to check requirements for",
            "schema": {
              "enum": [
                "local",
                "toll_free",
                "mobile",
                "national",
                "shared_cost"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[action]",
            "in": "query",
            "description": "Action to check requirements for",
            "schema": {
              "enum": [
                "ordering",
                "porting",
                "action"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRegulatoryRequirements"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/reports/cdr_usage_reports/sync": {
      "get": {
        "tags": [
          "CDR Usage Reports"
        ],
        "summary": "Generates and fetches CDR Usage Reports",
        "description": "Generate and fetch voice usage report synchronously. This endpoint will both generate and fetch the voice report over a specified time period. No polling is necessary but the response may take up to a couple of minutes. ",
        "operationId": "GetCDRUsageReportSync",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00.0000000-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00.0000000-06:00"
            }
          },
          {
            "name": "aggregation_type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "NO_AGGREGATION",
                "CONNECTION",
                "TAG",
                "BILLING_GROUP"
              ],
              "type": "string",
              "example": "no_aggregation"
            }
          },
          {
            "name": "product_breakdown",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "NO_BREAKDOWN",
                "DID_VS_TOLL_FREE",
                "COUNTRY",
                "DID_VS_TOLL_FREE_PER_COUNTRY"
              ],
              "type": "string",
              "example": "no_breakdown"
            }
          },
          {
            "name": "connections",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "example": 1234567890123
              },
              "example": "1234567890123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CdrGetSyncUsageReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports": {
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "summary": "Fetch all Messaging usage reports",
        "description": "Fetch all messaging usage reports. Usage reports are aggregated messaging data for specified time period and breakdown",
        "operationId": "GetMdrUsageReports",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "MDR Usage Reports"
        ],
        "summary": "Create MDR Usage Report",
        "description": "Submit request for new new messaging usage report. This endpoint will pull and aggregate messaging data in specified time period. ",
        "operationId": "SubmitUsageReport",
        "requestBody": {
          "description": "Mdr usage report data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MdrPostUsageReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrPostUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports/sync": {
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "summary": "Generate and fetch MDR Usage Report",
        "description": "Generate and fetch messaging usage report synchronously. This endpoint will both generate and fetch the messaging report over a specified time period. No polling is necessary but the response may take up to a couple of minutes. ",
        "operationId": "GetMDRUsageReportSync",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00.0000000-06:00"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-07-01T00:00:00.0000000-06:00"
            }
          },
          {
            "name": "aggregation_type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "NO_AGGREGATION",
                "PROFILE",
                "TAGS"
              ],
              "type": "string",
              "example": "profile"
            }
          },
          {
            "name": "profiles",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "My profile"
              },
              "example": "My profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetSyncUsageReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "background"
      }
    },
    "/reports/mdr_usage_reports/{id}": {
      "delete": {
        "tags": [
          "MDR Usage Reports"
        ],
        "summary": "Delete MDR Usage Report",
        "description": "Delete messaging usage report by id",
        "operationId": "DeleteUsageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrDeleteUsageReportsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "MDR Usage Reports"
        ],
        "summary": "Retrieve messaging report",
        "description": "Fetch a single messaging usage report by id",
        "operationId": "GetUsageReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetUsageReportsByIdResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/reports/mdrs": {
      "get": {
        "tags": [
          "MDR Detail Reports"
        ],
        "summary": "Fetch all Mdr records",
        "description": "Fetch all Mdr records ",
        "operationId": "GetPaginatedMdrs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Pagination start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Pagination end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Message uuid",
              "example": "e093fbe0-5bde-11eb-ae93-0242ac130002"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "enum": [
                "INBOUND",
                "OUTBOUND"
              ],
              "type": "string",
              "description": "Direction (inbound or outbound)",
              "example": "INBOUND"
            }
          },
          {
            "name": "profile",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Name of the profile",
              "example": "My profile"
            }
          },
          {
            "name": "cld",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Destination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "cli",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Origination number",
              "example": "+15551237654"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "enum": [
                "GW_TIMEOUT",
                "DELIVERED",
                "DLR_UNCONFIRMED",
                "DLR_TIMEOUT",
                "RECEIVED",
                "GW_REJECT",
                "FAILED"
              ],
              "type": "string",
              "description": "Message status",
              "example": "DELIVERED"
            }
          },
          {
            "name": "message_type",
            "in": "query",
            "schema": {
              "enum": [
                "SMS",
                "MMS"
              ],
              "type": "string",
              "description": "Type of message",
              "example": "SMS"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MdrGetDetailResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/reports/wdrs": {
      "get": {
        "tags": [
          "WDR Detail Reports"
        ],
        "summary": "Fetches all Wdr records",
        "description": "Fetch all Wdr records ",
        "operationId": "GetPaginatedWdrs",
        "parameters": [
          {
            "name": "start_date",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "example": "2021-05-01T00:00:00Z"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "example": "2021-06-01T00:00:00Z"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "WDR uuid",
              "example": "e093fbe0-5bde-11eb-ae93-0242ac130002"
            }
          },
          {
            "name": "mcc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile country code",
              "example": "204"
            }
          },
          {
            "name": "mnc",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Mobile network code",
              "example": "01"
            }
          },
          {
            "name": "imsi",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "International mobile subscriber identity",
              "example": "123456"
            }
          },
          {
            "name": "sim_group_name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim group name",
              "example": "sim name"
            }
          },
          {
            "name": "sim_group_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim group unique identifier",
              "example": "f05a189f-7c46-4531-ac56-1460dc465a42"
            }
          },
          {
            "name": "sim_card_id",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Sim card unique identifier",
              "example": "877f80a6-e5b2-4687-9a04-88076265720f"
            }
          },
          {
            "name": "phone_number",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Phone number",
              "example": "+12345678910"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "Size of the page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Field used to order the data. If no field is specified, default value is 'created_at'",
              "default": [
                "created_at"
              ],
              "example": "created_at"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalWdrGetDetailResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/requirement_groups": {
      "get": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "List requirement groups",
        "operationId": "GetRequirementGroups",
        "parameters": [
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filter requirement groups by country code (iso alpha 2)",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "FR"
              }
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Filter requirement groups by phone number type.",
            "schema": {
              "enum": [
                "local",
                "toll_free",
                "mobile",
                "national",
                "shared_cost"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[action]",
            "in": "query",
            "description": "Filter requirement groups by action type",
            "schema": {
              "enum": [
                "ordering",
                "porting",
                "action"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter requirement groups by status",
            "schema": {
              "enum": [
                "approved",
                "unapproved",
                "pending-approval",
                "declined"
              ],
              "type": "string"
            }
          },
          {
            "name": "filter[customer_reference]",
            "in": "query",
            "description": "Filter requirement groups by customer reference",
            "schema": {
              "type": "string"
            },
            "examples": {
              "generic": {
                "value": "12345"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List requirement groups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRequirementGroups_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Create a new requirement group",
        "operationId": "CreateRequirementGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequirementGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requirement group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementGroup"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirement_groups/{id}": {
      "delete": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Delete a requirement group by ID",
        "operationId": "DeleteRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the requirement group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted requirement group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementGroup"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Get a single requirement group by ID",
        "operationId": "GetRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the requirement group to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single requirement group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementGroup"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Update requirement values in requirement group",
        "operationId": "UpdateRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the requirement group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequirementGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated requirement group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementGroup"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirement_groups/{id}/submit_for_approval": {
      "post": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Submit a Requirement Group for Approval",
        "operationId": "SubmitRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the requirement group to submit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single requirement group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequirementGroup"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirement_types": {
      "get": {
        "tags": [
          "Requirement Types"
        ],
        "summary": "List all requirement types",
        "description": "List all requirement types ordered by created_at descending",
        "operationId": "ListRequirementTypes",
        "parameters": [
          {
            "name": "filter[name][contains]",
            "in": "query",
            "description": "Filters requirement types to those whose name contains a certain string.",
            "schema": {
              "type": "string",
              "example": "utility bill"
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a `-` in front of the field name.",
            "schema": {
              "enum": [
                "created_at",
                "name",
                "updated_at"
              ],
              "type": "string",
              "example": "country_code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRequirementTypes_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirement_types/{id}": {
      "get": {
        "tags": [
          "Requirement Types"
        ],
        "summary": "Retrieve a requirement type",
        "description": "Retrieve a requirement type by id",
        "operationId": "RetrieveRequirementType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the requirement_type record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "a38c217a-8019-48f8-bff6-0fdd9939075b"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocReqsRequirementType"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirements": {
      "get": {
        "tags": [
          "Requirements"
        ],
        "summary": "List all requirements",
        "description": "List all requirements with filtering, sorting, and pagination",
        "operationId": "ListRequirements",
        "parameters": [
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "Filters results to those applying to a 2-character (ISO 3166-1 alpha-2) country code",
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Filters results to those applying to a specific `phone_number_type`",
            "schema": {
              "enum": [
                "local",
                "national",
                "toll_free"
              ],
              "type": "string",
              "example": "local"
            }
          },
          {
            "name": "filter[action]",
            "in": "query",
            "description": "Filters requirements to those applying to a specific action.",
            "schema": {
              "enum": [
                "ordering",
                "porting"
              ],
              "type": "string",
              "example": "porting"
            }
          },
          {
            "name": "sort[]",
            "in": "query",
            "description": "Specifies the sort order for results. If you want to sort by a field in ascending order, include it as a sort parameter. If you want to sort in descending order, prepend a `-` in front of the field name.",
            "schema": {
              "enum": [
                "action",
                "country_code",
                "locality",
                "phone_number_type"
              ],
              "type": "string",
              "example": "country_code"
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "description": "The page number to load",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "description": "The size of the page",
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRequirements_200"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/requirements/{id}": {
      "get": {
        "tags": [
          "Requirements"
        ],
        "summary": "Retrieve a document requirement",
        "description": "Retrieve a document requirement record",
        "operationId": "RetrieveDocumentRequirements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the requirement_type record",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "a9dad8d5-fdbd-49d7-aa23-39bb08a5ebaa"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/DocReqsRequirement"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/room_compositions": {
      "get": {
        "tags": [
          "Room Compositions"
        ],
        "summary": "View a list of room compositions.",
        "description": "",
        "operationId": "ListRoomCompositions",
        "parameters": [
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room compositions created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room compositions created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room compositions created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[session_id]",
            "in": "query",
            "description": "The session_id for filtering room compositions.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "92e7d459-bcc5-4386-9f5f-6dd14a82588d"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "The status for filtering room compositions.",
            "schema": {
              "enum": [
                "completed",
                "processing",
                "enqueued"
              ],
              "type": "string",
              "example": "completed"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomCompositionsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Room Compositions"
        ],
        "summary": "Create a room composition.",
        "description": "Asynchronously create a room composition.",
        "operationId": "CreateRoomComposition",
        "requestBody": {
          "description": "Parameters that can be defined during room composition creation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomCompositionRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/CreateRoomCompositionResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-endpoint-cost": "heavy",
        "x-latency-category": "responsive"
      }
    },
    "/room_compositions/{room_composition_id}": {
      "delete": {
        "tags": [
          "Room Compositions"
        ],
        "summary": "Delete a room composition.",
        "description": "Synchronously delete a room composition.",
        "operationId": "DeleteRoomComposition",
        "parameters": [
          {
            "name": "room_composition_id",
            "in": "path",
            "description": "The unique identifier of a room composition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "5219b3af-87c6-4c08-9b58-5a533d893e21"
            }
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Room Compositions"
        ],
        "summary": "View a room composition.",
        "operationId": "ViewRoomComposition",
        "parameters": [
          {
            "name": "room_composition_id",
            "in": "path",
            "description": "The unique identifier of a room composition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "5219b3af-87c6-4c08-9b58-5a533d893e21"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomCompositionResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/room_participants": {
      "get": {
        "tags": [
          "Room Participants"
        ],
        "summary": "View a list of room participants.",
        "description": "",
        "operationId": "ListRoomParticipants",
        "parameters": [
          {
            "name": "filter[date_joined_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[context]",
            "in": "query",
            "description": "Filter room participants based on the context.",
            "schema": {
              "type": "string",
              "example": "Alice"
            }
          },
          {
            "name": "filter[session_id]",
            "in": "query",
            "description": "Session_id for filtering room participants.",
            "schema": {
              "type": "string",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomParticipantsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_participants/{room_participant_id}": {
      "get": {
        "tags": [
          "Room Participants"
        ],
        "summary": "View a room participant.",
        "operationId": "ViewRoomParticipant",
        "parameters": [
          {
            "name": "room_participant_id",
            "in": "path",
            "description": "The unique identifier of a room participant.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomParticipantResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/room_recordings": {
      "delete": {
        "tags": [
          "Room Recordings"
        ],
        "summary": "Delete several room recordings in a bulk.",
        "description": "",
        "operationId": "DeleteRoomRecordings",
        "parameters": [
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[room_id]",
            "in": "query",
            "description": "room_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[participant_id]",
            "in": "query",
            "description": "participant_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[session_id]",
            "in": "query",
            "description": "session_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "status for filtering room recordings.",
            "schema": {
              "type": "string",
              "example": "completed"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "type for filtering room recordings.",
            "schema": {
              "type": "string",
              "example": "audio"
            }
          },
          {
            "name": "filter[duration_secs][eq]",
            "in": "query",
            "description": "duration_secs equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "name": "filter[duration_secs][lte]",
            "in": "query",
            "description": "duration_secs less or equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "name": "filter[duration_secs][gte]",
            "in": "query",
            "description": "duration_secs greater or equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/BulkDeleteRoomRecordingsResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-endpoint-cost": "heavy",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Room Recordings"
        ],
        "summary": "View a list of room recordings.",
        "description": "",
        "operationId": "ListRoomRecordings",
        "parameters": [
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_started_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room recordings started before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[room_id]",
            "in": "query",
            "description": "room_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[participant_id]",
            "in": "query",
            "description": "participant_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[session_id]",
            "in": "query",
            "description": "session_id for filtering room recordings.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "status for filtering room recordings.",
            "schema": {
              "type": "string",
              "example": "completed"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "type for filtering room recordings.",
            "schema": {
              "type": "string",
              "example": "audio"
            }
          },
          {
            "name": "filter[duration_secs][eq]",
            "in": "query",
            "description": "duration_secs equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "name": "filter[duration_secs][lte]",
            "in": "query",
            "description": "duration_secs less or equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "name": "filter[duration_secs][gte]",
            "in": "query",
            "description": "duration_secs greater or equal for filtering room recordings.",
            "schema": {
              "type": "integer",
              "example": 20
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomRecordingsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_recordings/{room_recording_id}": {
      "delete": {
        "tags": [
          "Room Recordings"
        ],
        "summary": "Delete a room recording.",
        "description": "Synchronously delete a Room Recording.",
        "operationId": "DeleteRoomRecording",
        "parameters": [
          {
            "name": "room_recording_id",
            "in": "path",
            "description": "The unique identifier of a room recording.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Room Recordings"
        ],
        "summary": "View a room recording.",
        "operationId": "ViewRoomRecording",
        "parameters": [
          {
            "name": "room_recording_id",
            "in": "path",
            "description": "The unique identifier of a room recording.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomRecordingResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions": {
      "get": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "View a list of room sessions.",
        "description": "",
        "operationId": "ListRoomSessions",
        "parameters": [
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[room_id]",
            "in": "query",
            "description": "Room_id for filtering room sessions.",
            "schema": {
              "type": "string",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[active]",
            "in": "query",
            "description": "Filter active or inactive room sessions.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomSessionsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}": {
      "get": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "View a room session.",
        "operationId": "ViewRoomSession",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomSessionResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/actions/end": {
      "post": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "End a room session.",
        "description": "Note: this will also kick all participants currently present in the room",
        "operationId": "EndSession",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionSuccessResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/actions/kick": {
      "post": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "Kick participants from a room session.",
        "description": "",
        "operationId": "KickParticipantInSession",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Kick action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionsParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionSuccessResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/actions/mute": {
      "post": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "Mute participants in room session.",
        "description": "",
        "operationId": "MuteParticipantInSession",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Mute action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionsParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionSuccessResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/actions/unmute": {
      "post": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "Unmute participants in room session.",
        "description": "",
        "operationId": "UnmuteParticipantInSession",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Unmute action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionsParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActionSuccessResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/room_sessions/{room_session_id}/participants": {
      "get": {
        "tags": [
          "Room Sessions"
        ],
        "summary": "View a list of room participants.",
        "description": "",
        "operationId": "RetrieveListRoomParticipants",
        "parameters": [
          {
            "name": "room_session_id",
            "in": "path",
            "description": "The unique identifier of a room session.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[date_joined_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_joined_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that joined before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_left_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room participants that left before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[context]",
            "in": "query",
            "description": "Filter room participants based on the context.",
            "schema": {
              "type": "string",
              "example": "Alice"
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomParticipantsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/rooms": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "View a list of rooms.",
        "description": "",
        "operationId": "ListRooms",
        "parameters": [
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering rooms updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[unique_name]",
            "in": "query",
            "description": "Unique_name for filtering rooms.",
            "schema": {
              "type": "string",
              "example": "my_video_room"
            }
          },
          {
            "name": "include_sessions",
            "in": "query",
            "description": "To decide if room sessions should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Rooms"
        ],
        "summary": "Create a room.",
        "description": "Synchronously create a Room.",
        "operationId": "CreateRoom",
        "requestBody": {
          "description": "Parameters that can be defined during room creation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateRoomResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}": {
      "delete": {
        "tags": [
          "Rooms"
        ],
        "summary": "Delete a room.",
        "description": "Synchronously delete a Room. Participants from that room will be kicked out, they won't be able to join that room anymore, and you won't be charged anymore for that room.",
        "operationId": "DeleteRoom",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "View a room.",
        "operationId": "ViewRoom",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "include_sessions",
            "in": "query",
            "description": "To decide if room sessions should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetRoomResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Rooms"
        ],
        "summary": "Update a room.",
        "description": "Synchronously update a Room.",
        "operationId": "UpdateRoom",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during room update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRoomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PatchRoomResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/actions/generate_join_client_token": {
      "post": {
        "tags": [
          "Rooms Client Tokens"
        ],
        "summary": "Create Client Token to join a room.",
        "description": "Synchronously create an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`, a Refresh Token is also provided to refresh a Client Token, the Refresh Token expires after `refresh_token_ttl_secs`.",
        "operationId": "CreateRoomClientToken",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Room Client Token creation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomClientTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateRoomClientTokenResponse"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/actions/refresh_client_token": {
      "post": {
        "tags": [
          "Rooms Client Tokens"
        ],
        "summary": "Refresh Client Token to join a room.",
        "description": "Synchronously refresh an Client Token to join a Room. Client Token is necessary to join a Telnyx Room. Client Token will expire after `token_ttl_secs`.",
        "operationId": "RefreshRoomClientToken",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be defined during Room Client Token refresh.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRoomClientTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RefreshRoomClientTokenResponse"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/rooms/{room_id}/sessions": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "View a list of room sessions.",
        "description": "",
        "operationId": "RetrieveListRoomSessions",
        "parameters": [
          {
            "name": "room_id",
            "in": "path",
            "description": "The unique identifier of a room.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
            }
          },
          {
            "name": "filter[date_created_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_created_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions created before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_updated_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions updated before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][eq]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended on that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][gte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended after that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[date_ended_at][lte]",
            "in": "query",
            "description": "ISO 8601 date for filtering room sessions ended before that date.",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-04-25"
            }
          },
          {
            "name": "filter[active]",
            "in": "query",
            "description": "Filter active or inactive room sessions.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "include_participants",
            "in": "query",
            "description": "To decide if room participants should be included in the response.",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListRoomSessionsResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/short_codes": {
      "get": {
        "tags": [
          "Short Codes"
        ],
        "summary": "List short codes",
        "operationId": "ListShortCodes",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[messaging_profile_id]",
            "in": "query",
            "description": "Filter by Messaging Profile ID. Use the string `null` for phone numbers without assigned profiles. A synonym for the `/messaging_profiles/{id}/short_codes` endpoint when querying about an extant profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListShortCodesResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/short_codes/{id}": {
      "get": {
        "tags": [
          "Short Codes"
        ],
        "summary": "Retrieve a short code",
        "operationId": "RetrieveShortCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Short Codes"
        ],
        "summary": "Update short code",
        "description": "Update the settings for a specific short code. To unbind a short code from a profile, set the `messaging_profile_id` to `null` or an empty string.",
        "operationId": "UpdateShortCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/ShortCodeId"
          }
        ],
        "requestBody": {
          "description": "Short code update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShortCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_actions": {
      "get": {
        "tags": [
          "SIM Card Actions"
        ],
        "summary": "List SIM card actions",
        "description": "This API lists a paginated collection of SIM card actions. It enables exploring a collection of existing asynchronous operations using specific filters.",
        "operationId": "ListSimCardActions",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardId"
          },
          {
            "$ref": "#/components/parameters/FilterBasicStatusLifecycle"
          },
          {
            "$ref": "#/components/parameters/FilterBulkSIMCardActionId"
          },
          {
            "name": "filter[action_type]",
            "in": "query",
            "description": "Filter by action type.",
            "schema": {
              "enum": [
                "enable",
                "enable_standby_sim_card",
                "disable",
                "set_standby",
                "remove_public_ip",
                "set_public_ip"
              ],
              "type": "string",
              "example": "disable"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimCardActionCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_actions/{id}": {
      "get": {
        "tags": [
          "SIM Card Actions"
        ],
        "summary": "Get SIM card action details",
        "description": "This API fetches detailed information about a SIM card action to follow-up on an existing asynchronous operation.",
        "operationId": "GetSimCardAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_data_usage_notifications": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "List SIM card data usage notifications",
        "description": "Lists a paginated collection of SIM card data usage notifications. It enables exploring the collection using specific filters.",
        "operationId": "ListDataUsageNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimCardDataUsageNotificationCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Create a new SIM card data usage notification",
        "description": "Creates a new SIM card data usage notification.",
        "operationId": "PostSimCardDataUsageNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSimCardDataUsageNotification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateSimCardDataUsageNotificationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_data_usage_notifications/{id}": {
      "delete": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Delete SIM card data usage notifications",
        "description": "Delete the SIM Card Data Usage Notification.",
        "operationId": "DeleteSimCardDataUsageNotifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteSimCardDataUsageNotificationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get a single SIM card data usage notification",
        "description": "Get a single SIM Card Data Usage Notification.",
        "operationId": "GetSimCardDataUsageNotification",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardDataUsageNotificationResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      },
      "patch": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Updates information for a SIM Card Data Usage Notification",
        "description": "Updates information for a SIM Card Data Usage Notification.",
        "operationId": "PatchSimCardDataUsageNotification",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimCardDataUsageNotification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateSimCardDataUsageNotificationResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_group_actions": {
      "get": {
        "tags": [
          "SIM Card Group Actions"
        ],
        "summary": "List SIM card group actions",
        "description": "This API allows listing a paginated collection a SIM card group actions. It allows to explore a collection of existing asynchronous operation using specific filters.",
        "operationId": "GetSimCardGroupActions",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardGroupId"
          },
          {
            "$ref": "#/components/parameters/FilterBasicStatusLifecycle"
          },
          {
            "name": "filter[type]",
            "in": "query",
            "description": "Filter by action type.",
            "schema": {
              "enum": [
                "set_private_wireless_gateway",
                "remove_private_wireless_gateway"
              ],
              "type": "string",
              "example": "set_private_wireless_gateway"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimCardGroupActionCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_group_actions/{id}": {
      "get": {
        "tags": [
          "SIM Card Group Actions"
        ],
        "summary": "Get SIM card group action details",
        "description": "This API allows fetching detailed information about a SIM card group action resource to make follow-ups in an existing asynchronous operation.",
        "operationId": "GetSimCardGroupAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups": {
      "get": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Get all SIM card groups",
        "description": "Get all SIM card groups belonging to the user that match the given filters.",
        "operationId": "GetAllSimCardGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "A valid SIM card group name.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "My Test Group"
            }
          },
          {
            "name": "filter[private_wireless_gateway_id]",
            "in": "query",
            "description": "A Private Wireless Gateway ID associated with the group.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "7606c6d3-ff7c-49c1-943d-68879e9d584d"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllSimCardGroupsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Create a SIM card group",
        "description": "Creates a new SIM card group object",
        "operationId": "CreateSimCardGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardGroupCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups/{id}": {
      "delete": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Delete a SIM card group",
        "description": "Permanently deletes a SIM card group",
        "operationId": "DeleteSimCardGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardGroupId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Get SIM card group",
        "description": "Returns the details regarding a specific SIM card group",
        "operationId": "GetSimCardGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardGroupId"
          },
          {
            "$ref": "#/components/parameters/IncludeICCIDs"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Update a SIM card group",
        "description": "Updates a SIM card group",
        "operationId": "UpdateSimCardGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardGroupId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCardGroupPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateSimCardGroupResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_groups/{id}/actions/remove_private_wireless_gateway": {
      "post": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Request Private Wireless Gateway removal from SIM card group",
        "description": "This action will asynchronously remove an existing Private Wireless Gateway definition from a SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic handled by Telnyx's default mobile network configuration.",
        "operationId": "RemoveSimCardGroupPrivateWirelessGateway",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardGroupId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_card_groups/{id}/actions/set_private_wireless_gateway": {
      "post": {
        "tags": [
          "SIM Card Groups"
        ],
        "summary": "Request Private Wireless Gateway assignment for SIM card group",
        "description": "This action will asynchronously assign a provisioned Private Wireless Gateway to the SIM card group. Completing this operation defines that all SIM cards in the SIM card group will get their traffic controlled by the associated Private Wireless Gateway. This operation will also imply that new SIM cards assigned to a group will inherit its network definitions. If it's moved to a different group that doesn't have a Private Wireless Gateway, it'll use Telnyx's default mobile network configuration.",
        "operationId": "SetPrivateWirelessGatewayForSimCardGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardGroupId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPrivateWirelessGatewayForSimCardGroup"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardGroupActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_card_order_preview": {
      "post": {
        "tags": [
          "SIM Card Orders"
        ],
        "summary": "Preview SIM card orders",
        "description": "Preview SIM card order purchases.",
        "operationId": "PreviewSimCardOrders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewSimCardOrders"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardOrdersPreviewResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_orders": {
      "get": {
        "tags": [
          "SIM Card Orders"
        ],
        "summary": "Get all SIM card orders",
        "description": "Get all SIM card orders according to filters.",
        "operationId": "GetSimCardOrders",
        "parameters": [
          {
            "$ref": "#/components/parameters/FilterCreatedAt"
          },
          {
            "$ref": "#/components/parameters/FilterUpdatedAt"
          },
          {
            "$ref": "#/components/parameters/FilterQuantity"
          },
          {
            "$ref": "#/components/parameters/FilterCostByAmount"
          },
          {
            "$ref": "#/components/parameters/FilterCostByCurrency"
          },
          {
            "$ref": "#/components/parameters/FilterAddressById"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByStreetAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByExtendedAddress"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByLocality"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByAdministrativeArea"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByCountryCode"
          },
          {
            "$ref": "#/components/parameters/FilterAddressByPostalCode"
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllSimCardOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "SIM Card Orders"
        ],
        "summary": "Create a SIM card order",
        "description": "Creates a new order for SIM cards.",
        "operationId": "CreateSimCardOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimCardOrderCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateSimCardOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_card_orders/{id}": {
      "get": {
        "tags": [
          "SIM Card Orders"
        ],
        "summary": "Get a single SIM card order",
        "description": "Get a single SIM card order by its ID.",
        "operationId": "GetSimCardOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardOrderResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get all SIM cards",
        "description": "Get all SIM cards belonging to the user that match the given filters.",
        "operationId": "GetSimCards",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/IncludeSIMCardGroup"
          },
          {
            "$ref": "#/components/parameters/FilterSIMCardGroupId"
          },
          {
            "name": "filter[tags]",
            "in": "query",
            "description": "A list of SIM card tags to filter on.<br/><br/>\n If the SIM card contains <b><i>all</i></b> of the given <code>tags</code> they will be found.<br/><br/>\nFor example, if the SIM cards have the following tags: <ul>\n  <li><code>['customers', 'staff', 'test']</code>\n  <li><code>['test']</code></li>\n  <li><code>['customers']</code></li>\n</ul>\nSearching for <code>['customers', 'test']</code> returns only the first because it's the only one with both tags.<br/> Searching for <code>test</code> returns the first two SIMs, because both of them have such tag.<br/> Searching for <code>customers</code> returns the first and last SIMs.<br/>\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[iccid]",
            "in": "query",
            "description": "A search string to partially match for the SIM card's ICCID.",
            "schema": {
              "type": "string",
              "example": "89310410106543789301"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter by a SIM card's status.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "enabled",
                  "disabled",
                  "standby",
                  "data_limit_exceeded",
                  "unauthorized_imei"
                ],
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts SIM cards by the given field. Defaults to ascending order unless field is prefixed with a minus sign.",
            "schema": {
              "enum": [
                "current_billing_period_consumed_data.amount"
              ],
              "type": "string"
            },
            "example": "-current_billing_period_consumed_data.amount"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchSimCardsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/actions/bulk_set_public_ips": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request bulk setting SIM card public IPs.",
        "description": "This API triggers an asynchronous operation to set a public IP for each of the specified SIM cards.<br/>\nFor each SIM Card a SIM Card Action will be generated. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.\n",
        "operationId": "SetPublicIPsBulk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPublicIPsBulk"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/BulkSIMCardActionResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/actions/validate_registration_codes": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Validate SIM cards registration codes",
        "description": "It validates whether SIM card registration codes are valid or not.",
        "operationId": "ValidateRegistrationCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateRegistrationCodes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIMCardRegistrationCodeValidations"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}": {
      "delete": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Deletes a SIM card",
        "description": "The SIM card will be decommissioned, removed from your account and you will stop being charged.<br />The SIM card won't be able to connect to the network after the deletion is completed, thus making it impossible to consume data.<br/>\nTransitioning to the disabled state may take a period of time.\nUntil the transition is completed, the SIM card status will be disabling <code>disabling</code>.<br />In order to re-enable the SIM card, you will need to re-register it.",
        "operationId": "DeleteSimCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          },
          {
            "name": "report_lost",
            "in": "query",
            "description": "Enables deletion of disabled eSIMs that can't be uninstalled from a device. This is irreversible and the eSIM cannot be re-registered.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get SIM card",
        "description": "Returns the details regarding a specific SIM card.",
        "operationId": "GetSimCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          },
          {
            "$ref": "#/components/parameters/IncludeSIMCardGroup"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Update a SIM card",
        "description": "Updates SIM card data",
        "operationId": "UpdateSimCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SIMCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateSimCardResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}/actions/disable": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request a SIM card disable",
        "description": "This API disables a SIM card, disconnecting it from the network and making it impossible to consume data.<br/>\nThe API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the disabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.\n",
        "operationId": "DisableSimCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/{id}/actions/enable": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request a SIM card enable",
        "description": "This API enables a SIM card, connecting it to the network and making it possible to consume data.<br/>\nTo enable a SIM card, it must be associated with a SIM card group.<br/>\nThe API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the enabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.\n",
        "operationId": "EnableSimCard",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/{id}/actions/remove_public_ip": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request removing a SIM card public IP",
        "description": "This API removes an existing public IP from a SIM card. <br/><br/>\n The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.",
        "operationId": "RemoveSimCardPublicIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/{id}/actions/set_public_ip": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request setting a SIM card public IP",
        "description": "This API makes a SIM card reachable on the public internet by mapping a random public IP to the SIM card. <br/><br/>\n The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. <br/><br/>\n Setting a Public IP to a SIM Card incurs a charge and will only succeed if the account has sufficient funds.",
        "operationId": "SetSimCardPublicIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          },
          {
            "name": "region_code",
            "in": "query",
            "description": "The code of the region where the public IP should be assigned. A list of available regions can be found at the regions endpoint",
            "schema": {
              "type": "string",
              "example": "dc2"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/{id}/actions/set_standby": {
      "post": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Request setting a SIM card to standby",
        "description": "The SIM card will be able to connect to the network once the process to set it to standby has been completed, thus making it possible to consume data.<br/>\nTo set a SIM card to standby, it must be associated with SIM card group.<br/>\nThe API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the standby state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.\n",
        "operationId": "SetSimCardStandby",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/SIMCardActionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/sim_cards/{id}/activation_code": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get activation code for an eSIM",
        "description": "It returns the activation code for an eSIM.<br/><br/>\n This API is only available for eSIMs. If the given SIM is a physical SIM card, or has already been installed, an error will be returned.\n",
        "operationId": "GetSimCardActivationCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardActivationCodeResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}/device_details": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get SIM card device details",
        "description": "It returns the device details where a SIM card is currently being used.\n",
        "operationId": "GetSimCardDeviceDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardDeviceDetailsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}/public_ip": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "Get SIM card public IP definition",
        "description": "It returns the public IP requested for a SIM card.\n",
        "operationId": "GetSimCardPublicIp",
        "parameters": [
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SIMCardPublicIPResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sim_cards/{id}/wireless_connectivity_logs": {
      "get": {
        "tags": [
          "SIM Cards"
        ],
        "summary": "List wireless connectivity logs",
        "description": "This API allows listing a paginated collection of Wireless Connectivity Logs associated with a SIM Card, for troubleshooting purposes.",
        "operationId": "GetWirelessConnectivityLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/SIMCardId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WirelessConnectivityLogCollectionResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/siprec_connectors": {
      "post": {
        "tags": [
          "SIPREC Connectors"
        ],
        "summary": "Create a SIPREC connector",
        "description": "Creates a new SIPREC connector configuration.",
        "operationId": "createSiprecConnector",
        "requestBody": {
          "description": "The parameters required to create or update a SIPREC connector.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiprecConnector"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SiprecConnectorResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/siprec_connectors/{connector_name}": {
      "delete": {
        "tags": [
          "SIPREC Connectors"
        ],
        "summary": "Delete a SIPREC connector",
        "description": "Deletes a stored SIPREC connector.",
        "operationId": "deleteSiprecConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/SiprecConnectorName"
          }
        ],
        "responses": {
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "SIPREC Connectors"
        ],
        "summary": "Retrieve a SIPREC connector",
        "description": "Returns details of a stored SIPREC connector.",
        "operationId": "getSiprecConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/SiprecConnectorName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SiprecConnectorResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "SIPREC Connectors"
        ],
        "summary": "Update a SIPREC connector",
        "description": "Updates a stored SIPREC connector configuration.",
        "operationId": "updateSiprecConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/SiprecConnectorName"
          }
        ],
        "requestBody": {
          "description": "The parameters required to create or update a SIPREC connector.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiprecConnector"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SiprecConnectorResponseBody"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/buckets/{bucketName}/ssl_certificate": {
      "delete": {
        "tags": [
          "Bucket SSL Certificate"
        ],
        "summary": "Remove SSL Certificate",
        "description": "Deletes an SSL certificate and its matching secret.",
        "operationId": "RemoveStorageSSLCertificate",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "Bucket Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "SSL Certificate Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SSLCertificate"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Bucket SSL Certificate"
        ],
        "summary": "Get Bucket SSL Certificate",
        "description": "Returns the stored certificate detail of a bucket, if applicable.",
        "operationId": "GetStorageSSLCertificates",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "SSL Certificate Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SSLCertificate"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Bucket SSL Certificate"
        ],
        "summary": "Add SSL Certificate",
        "description": "Uploads an SSL certificate and its matching secret so that you can use Telnyx’s storage as your CDN.",
        "operationId": "AddStorageSSLCertificate",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddStorageSSLCertificate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SSL Certificate Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SSLCertificate"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/buckets/{bucketName}/usage/api": {
      "get": {
        "tags": [
          "Bucket Usage"
        ],
        "summary": "Get API Usage",
        "description": "Returns the detail on API usage on a bucket of a particular time period, group by method category.",
        "operationId": "GetStorageAPIUsage",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "name": "filter[start_time]",
            "in": "query",
            "description": "The start time of the period to filter the usage (ISO microsecond format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-01-01T00:00:00.0000000+00:00"
          },
          {
            "name": "filter[end_time]",
            "in": "query",
            "description": "The end time of the period to filter the usage (ISO microsecond format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-01-01T00:00:00.0000000+00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket Usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStorageAPIUsage_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/buckets/{bucketName}/usage/storage": {
      "get": {
        "tags": [
          "Bucket Usage"
        ],
        "summary": "Get Bucket Usage",
        "description": "Returns the amount of storage space and number of files a bucket takes up.",
        "operationId": "GetBucketUsage",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Bucket Storage Usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBucketUsage_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/buckets/{bucketName}/{objectName}/presigned_url": {
      "post": {
        "tags": [
          "Presigned Object URLs"
        ],
        "summary": "Create Presigned Object URL",
        "description": "Returns a timed and authenticated URL to get an object. This is the equivalent to AWS S3’s “presigned” URL. Please note that Telnyx performs authentication differently from AWS S3 and you MUST NOT use the presign method of AWS s3api CLI or sdk to generate the presigned URL. \n\nRefer to: https://developers.telnyx.com/docs/cloud-storage/presigned-urls\n",
        "operationId": "CreatePresignedObjectUrl",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "name": "objectName",
            "in": "path",
            "description": "The name of the object",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PresignedObjectUrlParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presigned URL Object Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresignedObjectUrl"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migration_source_coverage": {
      "get": {
        "tags": [
          "Data Migration"
        ],
        "summary": "List Migration Source coverage",
        "description": "",
        "operationId": "ListMigrationSourceCoverage",
        "responses": {
          "200": {
            "description": "List Migrations Source Coverage Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMigrationSourceCoverage_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migration_sources": {
      "get": {
        "tags": [
          "Data Migration"
        ],
        "summary": "List all Migration Sources",
        "description": "",
        "operationId": "ListMigrationSources",
        "responses": {
          "200": {
            "description": "List Migration Sources Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMigrationSources_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Create a Migration Source",
        "description": "Create a source from which data can be migrated from.",
        "operationId": "CreateMigrationSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrationSourceParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Migration Source Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationSourceParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migration_sources/{id}": {
      "delete": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Delete a Migration Source",
        "description": "",
        "operationId": "DeleteMigrationSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the data migration source.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Create Migration Source Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationSourceParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Get a Migration Source",
        "description": "",
        "operationId": "GetMigrationSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the data migration source.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Create Migration Source Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationSourceParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migrations": {
      "get": {
        "tags": [
          "Data Migration"
        ],
        "summary": "List all Migrations",
        "description": "",
        "operationId": "ListMigrations",
        "responses": {
          "200": {
            "description": "List Migrations Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMigrations_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Create a Migration",
        "description": "Initiate a migration of data from an external provider into Telnyx Cloud Storage. Currently, only S3 is supported.",
        "operationId": "CreateMigration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrationParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Migration Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migrations/{id}": {
      "get": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Get a Migration",
        "description": "",
        "operationId": "GetMigration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the data migration.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Create Migration Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/storage/migrations/{id}/actions/stop": {
      "post": {
        "tags": [
          "Data Migration"
        ],
        "summary": "Stop a Migration",
        "description": "",
        "operationId": "StopMigration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the data migration.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Create Migration Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MigrationParams"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "List sub number orders",
        "description": "Get a paginated list of sub number orders.",
        "operationId": "ListSubNumberOrders",
        "parameters": [
          {
            "name": "filter[status]",
            "in": "query",
            "description": "Filter sub number orders by status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[order_request_id]",
            "in": "query",
            "description": "ID of the number order the sub number order belongs to",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c293"
            }
          },
          {
            "name": "filter[country_code]",
            "in": "query",
            "description": "ISO alpha-2 country code.",
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "name": "filter[phone_number_type]",
            "in": "query",
            "description": "Phone Number Type",
            "schema": {
              "type": "string",
              "example": "local"
            }
          },
          {
            "name": "filter[phone_numbers_count]",
            "in": "query",
            "description": "Amount of numbers in the sub number order",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListSubNumberOrdersResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders/{id}/requirement_group": {
      "post": {
        "tags": [
          "Requirement Groups"
        ],
        "summary": "Update requirement group for a sub number order",
        "operationId": "updateSubNumberOrderRequirementGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the sub number order",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSubNumberOrderRequirementGroup"
              },
              "example": {
                "requirement_group_id": "a4b201f9-8646-4e54-a7d2-b2e403eeaf8c"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sub number order requirement group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubNumberOrderRequirementGroupResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders/{sub_number_order_id}": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a sub number order",
        "description": "Get an existing sub number order.",
        "operationId": "GetSubNumberOrder",
        "parameters": [
          {
            "name": "sub_number_order_id",
            "in": "path",
            "description": "The sub number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[include_phone_numbers]",
            "in": "query",
            "description": "Include the first 50 phone number objects in the results",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Update a sub number order's requirements",
        "description": "Updates a sub number order.",
        "operationId": "UpdateSubNumberOrder",
        "parameters": [
          {
            "name": "sub_number_order_id",
            "in": "path",
            "description": "The sub number order ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubNumberOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders/{sub_number_order_id}/cancel": {
      "patch": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Cancel a sub number order",
        "description": "Allows you to cancel a sub number order in 'pending' status.",
        "operationId": "CancelSubNumberOrder",
        "parameters": [
          {
            "name": "sub_number_order_id",
            "in": "path",
            "description": "The ID of the sub number order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubNumberOrderResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders_report": {
      "post": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Create a sub number orders report",
        "description": "Create a CSV report for sub number orders. The report will be generated asynchronously and can be downloaded once complete.",
        "operationId": "CreateSubNumberOrdersReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubNumberOrdersReportRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/SubNumberOrdersReportResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "background"
      }
    },
    "/sub_number_orders_report/{report_id}": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Retrieve a sub number orders report",
        "description": "Get the status and details of a sub number orders report.",
        "operationId": "GetSubNumberOrdersReport",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "description": "The unique identifier of the sub number orders report",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "12ade33a-21c0-473b-b055-b3c836e1c293"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubNumberOrdersReportResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "responsive"
      }
    },
    "/sub_number_orders_report/{report_id}/download": {
      "get": {
        "tags": [
          "Phone Number Orders"
        ],
        "summary": "Download a sub number orders report",
        "description": "Download the CSV file for a completed sub number orders report. The report status must be 'success' before the file can be downloaded.",
        "operationId": "DownloadSubNumberOrdersReport",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "description": "The unique identifier of the sub number orders report",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "12ade33a-21c0-473b-b055-b3c836e1c293"
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file download",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadSubNumberOrdersReport_200"
                },
                "example": "id,order_request_id,is_block_sub_number_order,status,phone_number_type,requirements_met,phone_numbers_count,country_code,user_id,customer_reference,created_at,updated_at\n1758d6ed-61a0-4d7a-bf57-b5dced413d33,f486fc2c-4fdf-4849-930d-b3045373e839,False,success,local,True,1,US,0d7ef697-df19-413a-b724-56b0539f5397,STRING,2025-05-23 14:33:12.376686,2025-05-23 14:33:15.624916"
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-endpoint-cost": "light",
        "x-latency-category": "background"
      }
    },
    "/telephony_credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List all credentials",
        "description": "List all On-demand Credentials.",
        "operationId": "FindTelephonyCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/OptionalTag"
          },
          {
            "$ref": "#/components/parameters/FilterName"
          },
          {
            "$ref": "#/components/parameters/FilterStatus"
          },
          {
            "$ref": "#/components/parameters/FilterResourceId"
          },
          {
            "$ref": "#/components/parameters/FilterSipUsername"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllTelephonyCredentialResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "summary": "Create a credential",
        "description": "Create a credential.",
        "operationId": "CreateTelephonyCredential",
        "requestBody": {
          "description": "Parameters that can be defined during credential creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelephonyCredentialCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/{id}": {
      "delete": {
        "tags": [
          "Credentials"
        ],
        "summary": "Delete a credential",
        "description": "Delete an existing credential.",
        "operationId": "DeleteTelephonyCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "Get a credential",
        "description": "Get the details of an existing On-demand Credential.",
        "operationId": "GetTelephonyCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Credentials"
        ],
        "summary": "Update a credential",
        "description": "Update an existing credential.",
        "operationId": "UpdateTelephonyCredential",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a credential",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelephonyCredentialUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TelephonyCredentialResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/telephony_credentials/{id}/token": {
      "post": {
        "tags": [
          "Access Tokens"
        ],
        "summary": "Create an Access Token.",
        "description": "Create an Access Token (JWT) for the credential.",
        "operationId": "CreateTelephonyCredentialToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifies the resource.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "JWT",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTelephonyCredentialToken_201"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Calls": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch multiple call resources",
        "description": "Returns multiple call resouces for an account. This endpoint is eventually consistent.",
        "operationId": "GetTexmlCalls",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/Status"
          },
          {
            "$ref": "#/components/parameters/StartTime"
          },
          {
            "$ref": "#/components/parameters/StartTime_gt"
          },
          {
            "$ref": "#/components/parameters/StartTime_lt"
          },
          {
            "$ref": "#/components/parameters/EndTime"
          },
          {
            "$ref": "#/components/parameters/EndTime_gt"
          },
          {
            "$ref": "#/components/parameters/EndTime_lt"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetCallsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Initiate an outbound call",
        "description": "Initiate an outbound TeXML call. Telnyx will request TeXML from the XML Request URL configured for the connection in the Mission Control Portal.",
        "operationId": "InitiateTexmlCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          }
        ],
        "requestBody": {
          "description": "Iniatiate Call request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/InitiateCallResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch a call",
        "description": "Returns an individual call identified by its CallSid. This endpoint is eventually consistent.",
        "operationId": "GetTexmlCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallSid"
          },
          {
            "$ref": "#/components/parameters/AccountSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetCallResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Update call",
        "description": "Update TeXML call. Please note that the keys present in the payload MUST BE formatted in CamelCase as specified in the example.",
        "operationId": "UpdateTexmlCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallSid"
          },
          {
            "$ref": "#/components/parameters/AccountSid"
          }
        ],
        "requestBody": {
          "description": "Update Call request object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetCallResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Recordings.json": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch recordings for a call",
        "description": "Returns recordings for a call identified by call_sid.",
        "operationId": "FetchTeXMLCallRecordings",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlGetCallRecordingsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Request recording for a call",
        "description": "Starts recording with specified parameters for call idientified by call_sid.",
        "operationId": "StartTeXMLCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          }
        ],
        "requestBody": {
          "description": "Starts call recording on a call.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlCreateCallRecordingRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlCreateCallRecordingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Recordings/{recording_sid}.json": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Update recording on a call",
        "description": "Updates recording resource for particular call.",
        "operationId": "UpdateTeXMLCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          },
          {
            "$ref": "#/components/parameters/RecordingSid"
          }
        ],
        "requestBody": {
          "description": "Update call recording on a call.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlUpdateCallRecordingRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlCreateCallRecordingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Siprec.json": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Request siprec session for a call",
        "description": "Starts siprec session with specified parameters for call idientified by call_sid.",
        "operationId": "StartTeXMLSiprecSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          }
        ],
        "requestBody": {
          "description": "Starts a SIPREC session.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlCreateSiprecSessionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlCreateSiprecSessionResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Siprec/{siprec_sid}.json": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Updates siprec session for a call",
        "description": "Updates siprec session identified by siprec_sid.",
        "operationId": "UpdateTeXMLSiprecSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          },
          {
            "$ref": "#/components/parameters/SiprecSid"
          }
        ],
        "requestBody": {
          "description": "Updates a SIPREC session.",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlUpdateSiprecSessionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlUpdateSiprecSessionResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Streams.json": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Start streaming media from a call.",
        "description": "Starts streaming media from a call to a specific WebSocket address.",
        "operationId": "StartTeXMLCallStreaming",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          }
        ],
        "requestBody": {
          "description": "Start streaming media from a call",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlCreateCallStreamingRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlCreateCallStreamingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Calls/{call_sid}/Streams/{streaming_sid}.json": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Update streaming on a call",
        "description": "Updates streaming resource for particular call.",
        "operationId": "UpdateTeXMLCallStreaming",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/CallSid"
          },
          {
            "$ref": "#/components/parameters/StreamingSid"
          }
        ],
        "requestBody": {
          "description": "Update streaming",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TexmlUpdateCallStreamingRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlUpdateCallStreamingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "List conference resources",
        "description": "Lists conference resources.",
        "operationId": "GetTexmlConferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/FriendlyName"
          },
          {
            "$ref": "#/components/parameters/ConferenceStatus"
          },
          {
            "$ref": "#/components/parameters/DateCreated"
          },
          {
            "$ref": "#/components/parameters/DateUpdated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetConferencesResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences/{conference_sid}": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch a conference resource",
        "description": "Returns a conference resource.",
        "operationId": "GetTexmlConference",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Update a conference resource",
        "description": "Updates a conference resource.",
        "operationId": "UpdateTexmlConference",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "requestBody": {
          "description": "Update Conference request object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetConferenceResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences/{conference_sid}/Participants": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "List conference participants",
        "description": "Lists conference participants",
        "operationId": "GetTexmlConferenceParticipants",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetParticipantsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Dial a new conference participant",
        "description": "Dials a new conference participant",
        "operationId": "DialTexmlConferenceParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "requestBody": {
          "description": "Dial Conference Participant request object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DialConferenceParticipantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DialParticipantResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences/{conference_sid}/Participants/{call_sid_or_participant_label}": {
      "delete": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Delete a conference participant",
        "description": "Deletes a conference participant",
        "operationId": "DeleteTexmlConferenceParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          },
          {
            "$ref": "#/components/parameters/CallSidOrParticipantLabel"
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Get conference participant resource",
        "description": "Gets conference participant resource",
        "operationId": "GetTexmlConferenceParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          },
          {
            "$ref": "#/components/parameters/CallSidOrParticipantLabel"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetParticipantResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Update a conference participant",
        "description": "Updates a conference participant",
        "operationId": "UpdateTexmlConferenceParticipant",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          },
          {
            "$ref": "#/components/parameters/CallSidOrParticipantLabel"
          }
        ],
        "requestBody": {
          "description": "Update Conference Participant request object",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConferenceParticipantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetParticipantResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences/{conference_sid}/Recordings": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "List conference recordings",
        "description": "Lists conference recordings",
        "operationId": "GetTexmlConferenceRecordings",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetConferenceRecordingsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml/Accounts/{account_sid}/Conferences/{conference_sid}/Recordings.json": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch recordings for a conference",
        "description": "Returns recordings for a conference identified by conference_sid.",
        "operationId": "FetchTeXMLConferenceRecordings",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/ConferenceSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlGetCallRecordingsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Recordings.json": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch multiple recording resources",
        "description": "Returns multiple recording resources for an account.",
        "operationId": "GetTeXMLCallRecordings",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSizeTexml"
          },
          {
            "$ref": "#/components/parameters/TexmlDateCreated"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlGetCallRecordingsResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Recordings/{recording_sid}.json": {
      "delete": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Delete recording resource",
        "description": "Deletes recording resource identified by recording id.",
        "operationId": "DeleteTeXMLCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/RecordingSid"
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      },
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch recording resource",
        "description": "Returns recording resource identified by recording id.",
        "operationId": "GetTeXMLCallRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/RecordingSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlGetCallRecordingResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Transcriptions.json": {
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "List recording transcriptions",
        "description": "Returns multiple recording transcription resources for an account.",
        "operationId": "GetTeXMLRecordingTranscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/PageToken"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlListRecordingTranscriptionResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/Accounts/{account_sid}/Transcriptions/{recording_transcription_sid}.json": {
      "delete": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Delete a recording transcription",
        "description": "Permanently deletes a recording transcription.",
        "operationId": "DeleteTeXMLRecordingTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/RecordingTranscriptionSid"
          }
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      },
      "get": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Fetch a recording transcription resource",
        "description": "Returns the recording transcription resource identified by its ID.",
        "operationId": "GetTeXMLRecordingTranscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountSid"
          },
          {
            "$ref": "#/components/parameters/RecordingTranscriptionSid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlGetRecordingTranscriptionResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/calls/{application_id}": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "(Deprecated) Initiate an outbound call",
        "description": "Initiate an outbound TeXML call. Telnyx will request TeXML from the XML Request URL configured for the connection in the Mission Control Portal.",
        "operationId": "DeprecatedInitiateTexmlCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/ApplicationId"
          }
        ],
        "requestBody": {
          "description": "Iniatiate Call request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeprecatedInitiateCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeprecatedInitiateCallResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/calls/{call_sid}/update": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "(Deprecated) Update call",
        "description": "Update TeXML call. Please note that the keys present in the payload MUST BE formatted in CamelCase as specified in the example.",
        "operationId": "DeprecatedUpdateTexmlCall",
        "parameters": [
          {
            "$ref": "#/components/parameters/CallSid"
          }
        ],
        "requestBody": {
          "description": "Update Call request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateTeXMLCallResponse"
          }
        },
        "x-latency-category": "responsive",
        "x-group-parameters": "true"
      }
    },
    "/texml/secrets": {
      "post": {
        "tags": [
          "TeXML REST Commands"
        ],
        "summary": "Create a TeXML secret",
        "description": "Create a TeXML secret which can be later used as a Dynamic Parameter for TeXML when using Mustache Templates in your TeXML. In your TeXML you will be able to use your secret name, and this name will be replaced by the actual secret value when processing the TeXML on Telnyx side.  The secrets are not visible in any logs.",
        "operationId": "CreateTexmlSecret",
        "requestBody": {
          "description": "Create TeXML secret request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeXMLSecretRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateTeXMLSecretResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/texml_applications": {
      "get": {
        "tags": [
          "TeXML Applications"
        ],
        "summary": "List all TeXML Applications",
        "description": "Returns a list of your TeXML Applications.",
        "operationId": "FindTexmlApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSizeApp"
          },
          {
            "name": "filter[friendly_name][contains]",
            "in": "query",
            "description": "If present, applications with <code>friendly_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
            "schema": {
              "type": "string",
              "default": "null"
            }
          },
          {
            "$ref": "#/components/parameters/FilterOutboundVoiceProfileId"
          },
          {
            "$ref": "#/components/parameters/SortApplication"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllTexmlApplicationsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      },
      "post": {
        "tags": [
          "TeXML Applications"
        ],
        "summary": "Creates a TeXML Application",
        "description": "Creates a TeXML Application.",
        "operationId": "CreateTexmlApplication",
        "requestBody": {
          "description": "Parameters that can be set when creating a TeXML Application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTexmlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "interactive"
      }
    },
    "/texml_applications/{id}": {
      "delete": {
        "tags": [
          "TeXML Applications"
        ],
        "summary": "Deletes a TeXML Application",
        "description": "Deletes a TeXML Application.",
        "operationId": "DeleteTexmlApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponseApp"
          }
        },
        "x-latency-category": "interactive"
      },
      "get": {
        "tags": [
          "TeXML Applications"
        ],
        "summary": "Retrieve a TeXML Application",
        "description": "Retrieves the details of an existing TeXML Application.",
        "operationId": "GetTexmlApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponseApp"
          }
        },
        "x-latency-category": "interactive"
      },
      "patch": {
        "tags": [
          "TeXML Applications"
        ],
        "summary": "Update a TeXML Application",
        "description": "Updates settings of an existing TeXML Application.",
        "operationId": "UpdateTexmlApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "description": "Parameters that can be updated in a TeXML Application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTexmlApplicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TexmlApplicationResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponseApp"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/text-to-speech/speech": {
      "post": {
        "tags": [
          "Text to Speech Commands"
        ],
        "summary": "Generate speech from text",
        "description": "Converts the provided text to speech using the specified voice and returns audio data",
        "operationId": "generateTextToSpeech",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/generateTextToSpeech"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio data generated from the provided text",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "$ref": "#/components/schemas/generateTextToSpeech_200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/text-to-speech/voices": {
      "get": {
        "tags": [
          "Text to Speech Commands"
        ],
        "summary": "List available text to speech voices",
        "description": "Returns a list of voices that can be used with the text to speech commands.",
        "operationId": "listTextToSpeechVoices",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Filter voices by provider",
            "schema": {
              "enum": [
                "aws",
                "azure",
                "elevenlabs",
                "telnyx"
              ],
              "type": "string"
            }
          },
          {
            "name": "elevenlabs_api_key_ref",
            "in": "query",
            "description": "Reference to your ElevenLabs API key stored in the Telnyx Portal",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with list of available voices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listTextToSpeechVoices_200"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        },
        "x-latency-category": "interactive"
      }
    },
    "/usage_reports": {
      "get": {
        "tags": [
          "Usage Reports (BETA)"
        ],
        "summary": "Get Telnyx product usage data (BETA)",
        "description": "Get Telnyx usage data by product, broken out by the specified dimensions",
        "operationId": "GetUsageReports",
        "parameters": [
          {
            "name": "product",
            "in": "query",
            "description": "Telnyx product",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "product=wireless": {
                "summary": "wireless",
                "value": "wireless"
              },
              "product=messaging": {
                "summary": "messaging",
                "value": "messaging"
              }
            }
          },
          {
            "name": "dimensions",
            "in": "query",
            "description": "Breakout by specified product dimensions",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "dimensions=direction&dimensions=currency&dimensions=message_type": {
                "summary": "Dimensions aggregation list",
                "value": "dimensions=direction&dimensions=currency&dimensions=message_type"
              }
            }
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "Specified product usage values",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "metrics=cost&metrics=billed_sec": {
                "summary": "Metrics aggregation list",
                "value": "metrics=cost&metrics=billed_sec"
              }
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The start date for the time range you are interested in. The maximum time range is 31 days. Format: YYYY-MM-DDTHH:mm:ssZ",
            "schema": {
              "type": "string"
            },
            "examples": {
              "start_date=2024-02-01T00:00:00Z": {
                "summary": "Aggregate for records with timestamp starting at specified date and time.",
                "value": "2024-02-01T00:00:00Z"
              }
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The end date for the time range you are interested in. The maximum time range is 31 days. Format: YYYY-MM-DDTHH:mm:ssZ",
            "schema": {
              "type": "string"
            },
            "examples": {
              "end_date=2024-03-01T00:00:00Z": {
                "summary": "Aggregate for records with timestamp ending at specified date and time.",
                "value": "2024-03-01T00:00:00Z"
              }
            }
          },
          {
            "name": "date_range",
            "in": "query",
            "description": "A more user-friendly way to specify the timespan you want to filter by. More options can be found in the Telnyx API Reference docs.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "date_range=today": {
                "summary": "today - Searches for records with timestamp starting at `00:00:00` of the current day",
                "value": "today"
              },
              "date_range=last_3_days": {
                "summary": "last_3_days - Searches for records with timestamp starting at `00:00:00` since 3 days ago",
                "value": "last_3_days"
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter records on dimensions",
            "schema": {
              "type": "string"
            },
            "examples": {
              "filter[currency]=USD": {
                "summary": "Filter currency on USD",
                "value": "filter[currency]=USD"
              },
              "filter[direction]=inbound": {
                "summary": "Filter direction on Inbound",
                "value": "filter[direction]=inbound"
              },
              "filter[country_code]=NLD": {
                "summary": "Filter country code on NLD",
                "value": "filter[country_code]=NLD"
              }
            }
          },
          {
            "name": "managed_accounts",
            "in": "query",
            "description": "Return the aggregations for all Managed Accounts under the user making the request.",
            "schema": {
              "type": "boolean"
            },
            "examples": {
              "managed_accounts=true": {
                "summary": "Fetch aggregations for all Managed Accounts",
                "value": false
              }
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "Page[Number]",
              "minimum": 1,
              "exclusiveMinimum": true,
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "Page[Size]",
              "maximum": 5000,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the sort order for results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "defaultOrder": {
                "summary": "Default Order (No Sort)",
                "value": ""
              },
              "sort=created_at": {
                "summary": "Sorts search results using the `created_at` date-time in ascending order",
                "value": "created_at"
              },
              "sort=-created_at": {
                "summary": "Sorts search results using the `-created_at` date-time in descending order",
                "value": "-created_at"
              }
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Specify the response format (csv or json). JSON is returned by default, even if not specified.",
            "schema": {
              "enum": [
                "csv",
                "json"
              ],
              "type": "string"
            },
            "examples": {
              "format=json": {
                "summary": "Get the response in JSON format",
                "value": "json"
              },
              "format=csv": {
                "summary": "Get the response in CSV format",
                "value": "csv"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageReportsResponse"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsageReports_200"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          },
          { }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/usage_reports/options": {
      "get": {
        "tags": [
          "Usage Reports (BETA)"
        ],
        "summary": "Get Usage Reports query options (BETA)",
        "description": "Get the Usage Reports options for querying usage, including the products available and their respective metrics and dimensions",
        "operationId": "ListUsageReportsOptions",
        "parameters": [
          {
            "name": "product",
            "in": "query",
            "description": "Options (dimensions and metrics) for a given product. If none specified, all products will be returned.",
            "schema": {
              "type": "string"
            },
            "examples": {
              "product=wireless": {
                "summary": "Specify a product if you know what you're looking for",
                "value": "wireless"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageReportsOptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": [ ]
          },
          { }
        ],
        "x-latency-category": "interactive"
      }
    },
    "/user_addresses": {
      "get": {
        "tags": [
          "UserAddresses"
        ],
        "summary": "List all user addresses",
        "description": "Returns a list of your user addresses.",
        "operationId": "FindUserAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceEquals"
          },
          {
            "$ref": "#/components/parameters/FilterCustomerReferenceContains"
          },
          {
            "$ref": "#/components/parameters/FilterStreetAddress"
          },
          {
            "$ref": "#/components/parameters/SortUserAddress"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAllUserAddressResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "UserAddresses"
        ],
        "summary": "Creates a user address",
        "description": "Creates a user address.",
        "operationId": "CreateUserAddress",
        "requestBody": {
          "description": "Parameters that can be defined during user address creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddressCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserAddressResponse"
          }
        },
        "x-endpoint-cost": "medium",
        "x-latency-category": "responsive"
      }
    },
    "/user_addresses/{id}": {
      "get": {
        "tags": [
          "UserAddresses"
        ],
        "summary": "Retrieve a user address",
        "description": "Retrieves the details of an existing user address.",
        "operationId": "GetUserAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "user address ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UserAddressResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/user_tags": {
      "get": {
        "tags": [
          "User Tags"
        ],
        "summary": "List User Tags",
        "description": "List all user tags.",
        "operationId": "GetUserTags",
        "parameters": [
          {
            "name": "filter[starts_with]",
            "in": "query",
            "description": "Filter tags by prefix",
            "schema": {
              "type": "string",
              "example": "my-tag"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListUserTagsResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/by_phone_number/{phone_number}": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "List verifications by phone number",
        "operationId": "ListVerifications",
        "parameters": [
          {
            "name": "phone_number",
            "in": "path",
            "description": "The phone number associated with the verifications to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "+E164 formatted phone number.",
              "example": "+13035551234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerificationsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/by_phone_number/{phone_number}/actions/verify": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Verify verification code by phone number",
        "operationId": "VerifyVerificationCodeByPhoneNumber",
        "parameters": [
          {
            "name": "phone_number",
            "in": "path",
            "description": "The phone number associated with the verification code being verified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "+E164 formatted phone number.",
              "example": "+13035551234"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyVerificationCodeRequestByPhoneNumber"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected verify response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyVerificationCodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/call": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger Call verification",
        "operationId": "CreateVerificationCall",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestCall"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/flashcall": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger Flash call verification",
        "operationId": "CreateFlashcallVerification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestFlashcall"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/sms": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Trigger SMS verification",
        "operationId": "CreateVerificationSms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerificationRequestSMS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/{verification_id}": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Retrieve verification",
        "operationId": "RetrieveVerification",
        "parameters": [
          {
            "name": "verification_id",
            "in": "path",
            "description": "The identifier of the verification to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveVerificationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verifications/{verification_id}/actions/verify": {
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Verify verification code by ID",
        "operationId": "VerifyVerificationCodeById",
        "parameters": [
          {
            "name": "verification_id",
            "in": "path",
            "description": "The identifier of the verification to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyVerificationCodeRequestById"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected verify response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyVerificationCodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verified_numbers": {
      "get": {
        "tags": [
          "Verified Numbers"
        ],
        "summary": "List all Verified Numbers",
        "description": "Gets a paginated list of Verified Numbers.",
        "operationId": "ListVerifiedNumbers",
        "parameters": [
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "page[size]",
              "type": "integer",
              "default": 25
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "page[number]",
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerifiedNumbersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedRequestErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Verified Numbers"
        ],
        "summary": "Request phone number verification",
        "description": "Initiates phone number verification procedure.",
        "operationId": "CreateVerifiedNumber",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerifiedNumber"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVerifiedNumberResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedRequestErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verified_numbers/{phone_number}": {
      "delete": {
        "tags": [
          "Verified Numbers"
        ],
        "summary": "Delete a verified number",
        "operationId": "DeleteVerifiedNumber",
        "parameters": [
          {
            "name": "phone_number",
            "in": "path",
            "description": "The phone number being deleted.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "+E164 formatted phone number.",
              "example": "+15551234567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedNumberResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedRequestErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Verified Numbers"
        ],
        "summary": "Retrieve a verified number",
        "operationId": "GetVerifiedNumber",
        "parameters": [
          {
            "name": "phone_number",
            "in": "path",
            "description": "The phone number being requested.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "+E164 formatted phone number.",
              "example": "+15551234567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected verifications response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedNumberResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedRequestErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verified_numbers/{phone_number}/actions/verify": {
      "post": {
        "tags": [
          "Verified Numbers"
        ],
        "summary": "Submit verification code",
        "operationId": "VerifyVerificationCode",
        "parameters": [
          {
            "name": "phone_number",
            "in": "path",
            "description": "The phone number being verified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "+E164 formatted phone number.",
              "example": "+15551234567"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyVerificationCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedNumberResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedRequestErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntityErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verify_profiles": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "List all Verify profiles",
        "description": "Gets a paginated list of Verify profiles.",
        "operationId": "ListProfiles",
        "parameters": [
          {
            "name": "filter[name]",
            "in": "query",
            "schema": {
              "title": "filter[name]",
              "type": "string",
              "description": "Optional filter for profile names."
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "schema": {
              "title": "page[size]",
              "type": "integer",
              "default": 25
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "schema": {
              "title": "page[number]",
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerifyProfilesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-group-parameters": "true",
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Verify"
        ],
        "summary": "Create a Verify profile",
        "description": "Creates a new Verify profile to associate verifications with.",
        "operationId": "CreateVerifyProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVerifyProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verify_profiles/templates": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Retrieve Verify profile message templates",
        "description": "List all Verify profile message templates.",
        "operationId": "ListProfileMessageTemplates",
        "responses": {
          "200": {
            "description": "Expected Verify profile message template response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVerifyProfileMessageTemplateResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/verify_profiles/{verify_profile_id}": {
      "delete": {
        "tags": [
          "Verify"
        ],
        "summary": "Delete Verify profile",
        "operationId": "DeleteProfile",
        "parameters": [
          {
            "name": "verify_profile_id",
            "in": "path",
            "description": "The identifier of the Verify profile to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Retrieve Verify profile",
        "description": "Gets a single Verify profile.",
        "operationId": "GetVerifyProfile",
        "parameters": [
          {
            "name": "verify_profile_id",
            "in": "path",
            "description": "The identifier of the Verify profile to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Verify"
        ],
        "summary": "Update Verify profile",
        "operationId": "UpdateVerifyProfile",
        "parameters": [
          {
            "name": "verify_profile_id",
            "in": "path",
            "description": "The identifier of the Verify profile to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVerifyProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected Verify profile response to a valid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyProfileResponseDataWrapper"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/virtual_cross_connects": {
      "get": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "List all Virtual Cross Connects",
        "description": "List all Virtual Cross Connects.",
        "operationId": "ListVirtualCrossConnects",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[network_id]",
            "in": "query",
            "description": "The associated network id to filter on.",
            "schema": {
              "type": "string",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "Create a Virtual Cross Connect",
        "description": "Create a new Virtual Cross Connect.<br /><br />For AWS and GCE, you have the option of creating the primary connection first and the secondary connection later. You also have the option of disabling the primary and/or secondary connections at any time and later re-enabling them. With Azure, you do not have this option. Azure requires both the primary and secondary connections to be created at the same time and they can not be independantly disabled.",
        "operationId": "CreateVirtualCrossConnect",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualCrossConnectCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/virtual_cross_connects/{id}": {
      "delete": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "Delete a Virtual Cross Connect",
        "description": "Delete a Virtual Cross Connect.",
        "operationId": "DeleteVirtualCrossConnect",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "Retrieve a Virtual Cross Connect",
        "description": "Retrieve a Virtual Cross Connect.",
        "operationId": "GetVirtualCrossConnect",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "Update the Virtual Cross Connect",
        "description": "Update the Virtual Cross Connect.<br /><br />Cloud IPs can only be patched during the `created` state, as GCE will only inform you of your generated IP once the pending connection requested has been accepted. Once the Virtual Cross Connect has moved to `provisioning`, the IPs can no longer be patched.<br /><br />Once the Virtual Cross Connect has moved to `provisioned` and you are ready to enable routing, you can toggle the routing announcements to `true`.",
        "operationId": "UpdateVirtualCrossConnect",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualCrossConnectPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/virtual_cross_connects_coverage": {
      "get": {
        "tags": [
          "Virtual Cross Connects"
        ],
        "summary": "List Virtual Cross Connect Cloud Coverage",
        "description": "List Virtual Cross Connects Cloud Coverage.<br /><br />This endpoint shows which cloud regions are available for the `location_code` your Virtual Cross Connect will be provisioned in.",
        "operationId": "ListVirtualCrossConnectCoverage",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filters[available_bandwidth][contains]",
            "in": "query",
            "description": "The available bandwidth to filter on.",
            "schema": {
              "type": "integer"
            },
            "example": 50
          },
          {
            "name": "filter[cloud_provider]",
            "in": "query",
            "description": "The Telnyx region code",
            "schema": {
              "enum": [
                "aws",
                "azure",
                "gce"
              ],
              "type": "string",
              "description": "The Virtual Private Cloud provider.",
              "example": "aws"
            }
          },
          {
            "name": "filter[cloud_provider_region]",
            "in": "query",
            "description": "The cloud provider region code to filter on",
            "schema": {
              "type": "string",
              "description": "The region of specific cloud provider.",
              "example": "us-east-1"
            }
          },
          {
            "name": "filter[location.region]",
            "in": "query",
            "description": "The region of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "AMER"
            }
          },
          {
            "name": "filter[location.site]",
            "in": "query",
            "description": "The site of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "SJC"
            }
          },
          {
            "name": "filter[location.pop]",
            "in": "query",
            "description": "The POP of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "SV1"
            }
          },
          {
            "name": "filter[location.code]",
            "in": "query",
            "description": "The code of associated location to filter on.",
            "schema": {
              "type": "string",
              "example": "silicon_valley-ca"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/VirtualCrossConnectCoverageListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/webhook_deliveries": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhook deliveries",
        "description": "Lists webhook_deliveries for the authenticated user",
        "operationId": "GetWebhookDeliveries",
        "parameters": [
          {
            "name": "filter[status][eq]",
            "in": "query",
            "description": "Return only webhook_deliveries matching the given `status`",
            "schema": {
              "enum": [
                "delivered",
                "failed"
              ],
              "type": "string",
              "example": "delivered"
            }
          },
          {
            "name": "filter[event_type]",
            "in": "query",
            "description": "Return only webhook_deliveries matching the given value of `event_type`. Accepts multiple values separated by a `,`.",
            "schema": {
              "type": "string",
              "example": "call_initiated,call.initiated"
            }
          },
          {
            "name": "filter[webhook][contains]",
            "in": "query",
            "description": "Return only webhook deliveries whose `webhook` component contains the given text",
            "schema": {
              "type": "string",
              "example": "call.initiated"
            }
          },
          {
            "name": "filter[attempts][contains]",
            "in": "query",
            "description": "Return only webhook_deliveries whose `attempts` component contains the given text",
            "schema": {
              "type": "string",
              "example": "https://fallback.example.com/webhooks"
            }
          },
          {
            "name": "filter[started_at][gte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery started later than or at given ISO 8601 datetime",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[started_at][lte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery started earlier than or at given ISO 8601 datetime",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[finished_at][gte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery finished later than or at given ISO 8601 datetime",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "name": "filter[finished_at][lte]",
            "in": "query",
            "description": "Return only webhook_deliveries whose delivery finished earlier than or at given ISO 8601 datetime",
            "schema": {
              "type": "string",
              "example": "2019-03-29T11:10:00Z"
            }
          },
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ListWebhookDeliveriesResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/webhook_deliveries/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Find webhook_delivery details by ID",
        "description": "Provides webhook_delivery debug data, such as timestamps, delivery status and attempts.",
        "operationId": "GetWebhookDelivery",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniquely identifies the webhook_delivery.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "C9C0797E-901D-4349-A33C-C2C8F31A92C2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook delivery record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/webhook_delivery"
                    }
                  }
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireguard_interfaces": {
      "get": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "List all WireGuard Interfaces",
        "description": "List all WireGuard Interfaces.",
        "operationId": "ListWireguardInterfaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[network_id]",
            "in": "query",
            "description": "The associated network id to filter on.",
            "schema": {
              "type": "string",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardInterfaceListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Create a WireGuard Interface",
        "description": "Create a new WireGuard Interface. Current limitation of 10 interfaces per user can be created.",
        "operationId": "CreateWireguardInterface",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireguardInterfaceCreate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/WireguardInterfaceResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireguard_interfaces/{id}": {
      "delete": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Delete a WireGuard Interface",
        "description": "Delete a WireGuard Interface.",
        "operationId": "DeleteWireguardInterface",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardInterfaceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Retrieve a WireGuard Interfaces",
        "description": "Retrieve a WireGuard Interfaces.",
        "operationId": "GetWireguardInterface",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardInterfaceResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireguard_peers": {
      "get": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "List all WireGuard Peers",
        "description": "List all WireGuard peers.",
        "operationId": "ListWireguardPeers",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "name": "filter[wireguard_interface_id]",
            "in": "query",
            "description": "The id of the associated WireGuard interface to filter on.",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardPeerListResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Create a WireGuard Peer",
        "description": "Create a new WireGuard Peer. Current limitation of 5 peers per interface can be created.",
        "operationId": "CreateWireguardPeer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireguardPeerCreate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/WireguardPeerResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireguard_peers/{id}": {
      "delete": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Delete the WireGuard Peer",
        "description": "Delete the WireGuard peer.",
        "operationId": "DeleteWireguardPeer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardPeerResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Retrieve the WireGuard Peer",
        "description": "Retrieve the WireGuard peer.",
        "operationId": "GetWireguardPeer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardPeerResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "patch": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Update the WireGuard Peer",
        "description": "Update the WireGuard peer.",
        "operationId": "UpdateWireguardPeer",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireguardPeerPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/WireguardPeerResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireguard_peers/{id}/config": {
      "get": {
        "tags": [
          "WireGuard Interfaces"
        ],
        "summary": "Retrieve Wireguard config template for Peer",
        "description": "Retrieve Wireguard config template for Peer",
        "operationId": "GetWireguardPeerConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetWireguardPeerConfig_200"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/wireless/detail_records_reports": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get all Wireless Detail Records (WDRs) Reports",
        "description": "Returns the WDR Reports that match the given parameters.",
        "operationId": "GetWdrReports",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageNumber"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetWdrReportsResponse"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Create a Wireless Detail Records (WDRs) Report",
        "description": "Asynchronously create a report containing Wireless Detail Records (WDRs) for the SIM cards that consumed wireless data in the given time period.\n",
        "operationId": "CreateWdrReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WdrReportRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateWdrReportResponse"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/wireless/detail_records_reports/{id}": {
      "delete": {
        "tags": [
          "Reporting"
        ],
        "summary": "Delete a Wireless Detail Record (WDR) Report",
        "description": "Deletes one specific WDR report.",
        "operationId": "DeleteWdrReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeleteWdrReportResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Get a Wireless Detail Record (WDR) Report",
        "description": "Returns one specific WDR report",
        "operationId": "GetWdrReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResourceId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetWdrReportResponse"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "background"
      }
    },
    "/wireless/regions": {
      "get": {
        "tags": [
          "Wireless Regions"
        ],
        "summary": "Get all wireless regions",
        "description": "Retrieve all wireless regions for the given product.",
        "operationId": "WirelessRegionsGetAll",
        "parameters": [
          {
            "name": "product",
            "in": "query",
            "description": "The product for which to list regions (e.g., 'public_ips', 'private_wireless_gateways').",
            "required": true,
            "schema": {
              "type": "string",
              "example": "public_ips"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of wireless regions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WirelessRegionsGetAll_200"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "default": {
            "$ref": "#/components/responses/GenericErrorResponse"
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/{bucketName}": {
      "delete": {
        "tags": [
          "Bucket"
        ],
        "summary": "DeleteBucket",
        "description": "Deletes a bucket. The bucket must be empty for it to be deleted.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html"
        },
        "operationId": "DeleteBucket",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBucket_204"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "ListObjectsV2",
        "description": "List all objects contained in a given bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html"
        },
        "operationId": "ListObjects",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 4,
              "type": "string"
            }
          },
          {
            "name": "list-type",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ListObjectsResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "head": {
        "tags": [
          "Bucket"
        ],
        "summary": "HeadBucket",
        "description": "Determines if a bucket exists and you have permission to access it.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadBucket.html"
        },
        "operationId": "HeadBucket",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeadBucket_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "post": {
        "tags": [
          "Object"
        ],
        "summary": "DeleteObjects",
        "description": "Deletes one or multiple objects from a given bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjects.html"
        },
        "operationId": "DeleteObjects",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The bucket name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/DeleteObjectsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteObjectsResponse"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Bucket"
        ],
        "summary": "CreateBucket",
        "description": "Create a bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html"
        },
        "operationId": "CreateBucket",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 4,
              "type": "string",
              "example": "mybucket"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/CreateBucketRequest"
              }
            }
          }
        },
        "responses": {
          "409": {
            "description": "BucketAlreadyExists",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBucket_409"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    },
    "/{bucketName}/{objectName}": {
      "delete": {
        "tags": [
          "Object"
        ],
        "summary": "DeleteObject",
        "description": "Delete an object from a given bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html"
        },
        "operationId": "DeleteObject",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The bucket name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectName",
            "in": "path",
            "description": "The object name.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteObject_204"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "get": {
        "tags": [
          "Object"
        ],
        "summary": "GetObject",
        "description": "Retrieves an object from a given bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html"
        },
        "operationId": "GetObject",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The bucket name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectName",
            "in": "path",
            "description": "The object name.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetObject_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "head": {
        "tags": [
          "Object"
        ],
        "summary": "HeadObject",
        "description": "Retrieves metadata from an object without returning the object itself.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadObject.html"
        },
        "operationId": "HeadObject",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The bucket name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectName",
            "in": "path",
            "description": "The object name.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeadObject_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      },
      "put": {
        "tags": [
          "Object"
        ],
        "summary": "PutObject",
        "description": "Add an object to a bucket.",
        "externalDocs": {
          "url": "https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html"
        },
        "operationId": "PutObject",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The bucket name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectName",
            "in": "path",
            "description": "The object name.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "Content-type",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutObject_200"
                }
              }
            }
          }
        },
        "x-latency-category": "responsive"
      }
    }
  },
  "components": {
    "schemas": {
      "AIAssistantStartRequest": {
        "title": "AIAssistantStartRequest",
        "type": "object",
        "properties": {
          "assistant": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the AI assistant to use"
              },
              "openai_api_key_ref": {
                "type": "string",
                "description": "Reference to the OpenAI API key. Required only when using OpenAI models"
              },
              "instructions": {
                "type": "string",
                "description": "The system instructions that the voice assistant uses during the start assistant command. This will overwrite the instructions set in the assistant configuration.",
                "example": "You are a friendly voice assistant."
              }
            },
            "description": "AI Assistant configuration"
          },
          "voice": {
            "type": "string",
            "description": "The voice to be used by the voice assistant. Currently we support ElevenLabs, Telnyx and AWS voices.\n\n **Supported Providers:**\n- **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility.\n- **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).)\n- **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.BaseModel.John`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration secret under `\"voice_settings\": {\"api_key_ref\": \"<secret_id>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).\n - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`",
            "default": "Telnyx.KokoroTTS.af",
            "example": "Telnyx.KokoroTTS.af"
          },
          "voice_settings": {
            "description": "The settings associated with the voice selected"
          },
          "greeting": {
            "type": "string",
            "description": "Text that will be played when the assistant starts, if none then nothing will be played when the assistant starts. The greeting can be text for any voice or SSML for `AWS.Polly.<voice_id>` voices. There is a 3,000 character limit.",
            "example": "Hello, can you tell me your age and where you live?"
          },
          "interruption_settings": {
            "$ref": "#/components/schemas/InterruptionSettings"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionConfig"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "AIAssistantStopRequest": {
        "title": "AI Assistant Stop Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "AWSVoiceSettings": {
        "title": "AWS Voice Settings",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "AcceptSuggestionsRequest": {
        "title": "AcceptSuggestionsRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the address."
          }
        }
      },
      "AccessIPAddressListResponseSchema": {
        "title": "AccessIPAddressListResponseSchema",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessIPAddressResponseSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AccessIPAddressPOST": {
        "title": "AccessIPAddressPOST",
        "required": [
          "ip_address"
        ],
        "type": "object",
        "properties": {
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "AccessIPAddressResponseSchema": {
        "title": "AccessIPAddressResponseSchema",
        "required": [
          "id",
          "ip_address",
          "source",
          "status",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CloudflareSyncStatus"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccessIPRangeListResponseSchema": {
        "title": "AccessIPRangeListResponseSchema",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessIPRangeResponseSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AccessIPRangePOST": {
        "title": "AccessIPRangePOST",
        "required": [
          "cidr_block"
        ],
        "type": "object",
        "properties": {
          "cidr_block": {
            "title": "Cidr Block",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "AccessIPRangeResponseSchema": {
        "title": "AccessIPRangeResponseSchema",
        "required": [
          "id",
          "cidr_block",
          "status",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "cidr_block": {
            "title": "Cidr Block",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CloudflareSyncStatus"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "user_id": {
            "title": "User Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetRequirementGroups_200": {
        "title": "GetRequirementGroups_200",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RequirementGroup"
        }
      },
      "ActionsParticipantsRequest": {
        "title": "ActionsParticipantsRequest",
        "type": "object",
        "properties": {
          "participants": {
            "oneOf": [
              {
                "enum": [
                  "all"
                ],
                "type": "string",
                "example": "all"
              }
            ],
            "description": "Either a list of participant id to perform the action on, or the keyword \"all\" to perform the action on all participant."
          },
          "exclude": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "7b61621f-62e0-4aad-ab11-9fd19e272e73"
            },
            "description": "List of participant id to exclude from the action."
          }
        }
      },
      "ActiveCall": {
        "title": "Active Call",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "client_state",
          "record_type",
          "call_duration"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "call"
            ],
            "type": "string",
            "example": "call"
          },
          "call_session_id": {
            "type": "string",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "client_state": {
            "type": "string",
            "description": "State received from a command.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "call_duration": {
            "type": "integer",
            "description": "Indicates the duration of the call in seconds",
            "example": 50
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "call_duration": 50,
          "record_type": "call"
        }
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the address.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "address"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "first_name": {
            "type": "string",
            "description": "The first name associated with the address. An address must have either a first last name or a business name.",
            "example": "Alfred"
          },
          "last_name": {
            "type": "string",
            "description": "The last name associated with the address. An address must have either a first last name or a business name.",
            "example": "Foster"
          },
          "business_name": {
            "type": "string",
            "description": "The business name associated with the address. An address must have either a first last name or a business name.",
            "example": "Toy-O'Kon"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number associated with the address.",
            "example": "+12125559000"
          },
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "neighborhood": {
            "type": "string",
            "description": "The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Ciudad de los deportes"
          },
          "borough": {
            "type": "string",
            "description": "The borough of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Guadalajara"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          },
          "address_book": {
            "type": "boolean",
            "description": "Indicates whether or not the address should be considered part of your list of addresses that appear for regular use.",
            "default": true,
            "example": false
          },
          "validate_address": {
            "type": "boolean",
            "description": "Indicates whether or not the address should be validated for emergency use upon creation or not. This should be left with the default value of `true` unless you have used the `/addresses/actions/validate` endpoint to validate the address separately prior to creation. If an address is not validated for emergency use upon creation and it is not valid, it will not be able to be used for emergency services.",
            "default": true,
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "AddressCreate": {
        "title": "AddressCreate",
        "required": [
          "first_name",
          "last_name",
          "business_name",
          "street_address",
          "locality",
          "country_code"
        ],
        "type": "object",
        "properties": {
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "first_name": {
            "type": "string",
            "description": "The first name associated with the address. An address must have either a first last name or a business name.",
            "example": "Alfred"
          },
          "last_name": {
            "type": "string",
            "description": "The last name associated with the address. An address must have either a first last name or a business name.",
            "example": "Foster"
          },
          "business_name": {
            "type": "string",
            "description": "The business name associated with the address. An address must have either a first last name or a business name.",
            "example": "Toy-O'Kon"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number associated with the address.",
            "example": "+12125559000"
          },
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "neighborhood": {
            "type": "string",
            "description": "The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Ciudad de los deportes"
          },
          "borough": {
            "type": "string",
            "description": "The borough of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Guadalajara"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          },
          "address_book": {
            "type": "boolean",
            "description": "Indicates whether or not the address should be considered part of your list of addresses that appear for regular use.",
            "default": true,
            "example": false
          },
          "validate_address": {
            "type": "boolean",
            "description": "Indicates whether or not the address should be validated for emergency use upon creation or not. This should be left with the default value of `true` unless you have used the `/addresses/actions/validate` endpoint to validate the address separately prior to creation. If an address is not validated for emergency use upon creation and it is not valid, it will not be able to be used for emergency services.",
            "default": true,
            "example": true
          }
        }
      },
      "AddressSuggestionResponse": {
        "title": "AddressSuggestionResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "accepted": {
                "type": "boolean",
                "description": "Indicates if the address suggestions are accepted."
              },
              "id": {
                "type": "string",
                "description": "The UUID of the location.",
                "format": "uuid"
              },
              "record_type": {
                "enum": [
                  "address_suggestion"
                ],
                "type": "string"
              }
            }
          }
        }
      },
      "AdvancedOrderRequest": {
        "title": "AdvancedOrderRequest",
        "type": "object",
        "properties": {
          "country_code": {
            "title": "Country Code",
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "default": "US"
          },
          "comments": {
            "title": "Comments",
            "maxLength": 255,
            "type": "string"
          },
          "quantity": {
            "title": "Quantity",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer",
            "default": 1
          },
          "area_code": {
            "title": "Area Code",
            "maxLength": 3,
            "type": "string"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "mobile",
              "toll_free",
              "shared_cost",
              "national",
              "landline"
            ],
            "type": "string",
            "default": "local"
          },
          "features": {
            "title": "Features",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "sms",
                "mms",
                "voice",
                "fax",
                "emergency"
              ]
            }
          },
          "customer_reference": {
            "title": "Customer Reference",
            "type": "string"
          }
        }
      },
      "AdvancedOrderResponse": {
        "title": "AdvancedOrderResponse",
        "type": "object",
        "properties": {
          "country_code": {
            "title": "Country Code",
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "default": "US"
          },
          "comments": {
            "title": "Comments",
            "maxLength": 255,
            "type": "string"
          },
          "quantity": {
            "title": "Quantity",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer",
            "default": 1
          },
          "area_code": {
            "title": "Area Code",
            "maxLength": 3,
            "type": "string"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "mobile",
              "toll_free",
              "shared_cost",
              "national",
              "landline"
            ],
            "type": "string"
          },
          "features": {
            "title": "Features",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "sms",
                "mms",
                "voice",
                "fax",
                "emergency"
              ],
              "type": "string"
            }
          },
          "customer_reference": {
            "title": "Customer Reference",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "enum": [
              "pending",
              "processing",
              "ordered"
            ],
            "type": "string"
          },
          "orders": {
            "title": "Orders",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "description": "An Advanced Order Response"
      },
      "AltBusinessIdType": {
        "title": "AltBusinessIdType",
        "enum": [
          "NONE",
          "DUNS",
          "GIIN",
          "LEI"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "An enumeration."
      },
      "AmdDetailRecord": {
        "title": "AmdDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Feature invocation id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "invoked_at": {
            "type": "string",
            "description": "Feature invocation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "feature": {
            "enum": [
              "PREMIUM"
            ],
            "type": "string",
            "description": "Feature name"
          },
          "tags": {
            "type": "string",
            "description": "User-provided tags",
            "example": "tag1,tag2"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Billing Group id",
            "example": "01977831-abdd-4894-84f3-244385621424"
          },
          "billing_group_name": {
            "type": "string",
            "description": "Name of the Billing Group specified in billing_group_id",
            "example": "Billing group name"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection id",
            "example": "1684947189014463919"
          },
          "connection_name": {
            "type": "string",
            "description": "Connection name",
            "example": "Name of the connection with id specified in connection_id field"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the related call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the related call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": true
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.002"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "invocations"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "default": "amd_detail_record",
            "example": "amd_detail_record"
          }
        }
      },
      "AnchorsiteOverride": {
        "title": "Anchorsite Override",
        "enum": [
          "Latency",
          "Chicago, IL",
          "Ashburn, VA",
          "San Jose, CA",
          "Sydney, Australia",
          "Amsterdam, Netherlands",
          "London, UK",
          "Toronto, Canada",
          "Vancouver, Canada",
          "Frankfurt, Germany"
        ],
        "type": "string",
        "description": "`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.",
        "default": "Latency",
        "example": "Amsterdam, Netherlands"
      },
      "AnswerRequest": {
        "title": "Answer Request",
        "type": "object",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            },
            "description": "Custom headers to be added to the SIP INVITE response."
          },
          "preferred_codecs": {
            "enum": [
              "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
            ],
            "type": "string",
            "description": "The list of comma-separated codecs in a preferred order for the forked media to be received.",
            "example": "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
          },
          "sip_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            },
            "description": "SIP headers to be added to the SIP INVITE response. Currently only User-to-User header is supported."
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "stream_url": {
            "type": "string",
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "type": "string",
            "description": "Specifies which track should be streamed.",
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "stream_codec": {
            "$ref": "#/components/schemas/StreamCodec"
          },
          "stream_bidirectional_mode": {
            "$ref": "#/components/schemas/StreamBidirectionalMode"
          },
          "stream_bidirectional_codec": {
            "$ref": "#/components/schemas/StreamBidirectionalCodec"
          },
          "stream_bidirectional_target_legs": {
            "$ref": "#/components/schemas/StreamBidirectionalTargetLegs"
          },
          "send_silence_when_idle": {
            "type": "boolean",
            "description": "Generate silence RTP packets when no transmission available.",
            "default": false,
            "example": true
          },
          "webhook_url": {
            "type": "string",
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "enum": [
              "POST",
              "GET"
            ],
            "type": "string",
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "example": "GET"
          },
          "transcription": {
            "type": "boolean",
            "description": "Enable transcription upon call answer. The default value is false.",
            "default": false,
            "example": true
          },
          "transcription_config": {
            "$ref": "#/components/schemas/TranscriptionStartRequest"
          },
          "record": {
            "enum": [
              "record-from-answer"
            ],
            "type": "string",
            "description": "Start recording automatically after an event. Disabled by default.",
            "example": "record-from-answer"
          },
          "record_channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "Defines which channel should be recorded ('single' or 'dual') when `record` is specified.",
            "default": "dual",
            "example": "single"
          },
          "record_format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "Defines the format of the recording ('wav' or 'mp3') when `record` is specified.",
            "default": "mp3",
            "example": "wav"
          },
          "record_max_length": {
            "type": "integer",
            "description": "Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "record_timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "record_track": {
            "enum": [
              "both",
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).",
            "default": "both",
            "example": "outbound"
          },
          "record_trim": {
            "enum": [
              "trim-silence"
            ],
            "type": "string",
            "description": "When set to `trim-silence`, silence will be removed from the beginning and end of the recording.",
            "example": "trim-silence"
          },
          "record_custom_file_name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.",
            "example": "my_recording_file_name"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "send_silence_when_idle": true
        }
      },
      "DeleteRecordings": {
        "title": "DeleteRecordings",
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of call recording IDs to delete."
      },
      "AssignProfileToCampaignRequest": {
        "title": "AssignProfileToCampaignRequest",
        "required": [
          "messagingProfileId"
        ],
        "type": "object",
        "properties": {
          "messagingProfileId": {
            "title": "Messagingprofileid",
            "type": "string",
            "description": "The ID of the messaging profile that you want to link to the specified campaign.",
            "example": "4001767e-ce0f-4cae-9d5f-0d5e636e7809"
          },
          "tcrCampaignId": {
            "title": "Tcrcampaignid",
            "type": "string",
            "description": "The TCR ID of the shared campaign you want to link to the specified messaging profile (for campaigns not created using Telnyx 10DLC services only). If you supply this ID in the request, do not also include a campaignId.",
            "example": "CWZTFH1"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "The ID of the campaign you want to link to the specified messaging profile. If you supply this ID in the request, do not also include a tcrCampaignId.",
            "example": "4b300178-131c-d902-d54e-72d90ba1620j"
          }
        }
      },
      "AssignProfileToCampaignResponse": {
        "title": "AssignProfileToCampaignResponse",
        "required": [
          "messagingProfileId",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "messagingProfileId": {
            "title": "Messagingprofileid",
            "type": "string",
            "description": "The ID of the messaging profile that you want to link to the specified campaign.",
            "example": "4001767e-ce0f-4cae-9d5f-0d5e636e7809"
          },
          "tcrCampaignId": {
            "title": "Tcrcampaignid",
            "type": "string",
            "description": "The TCR ID of the shared campaign you want to link to the specified messaging profile (for campaigns not created using Telnyx 10DLC services only). If you supply this ID in the request, do not also include a campaignId.",
            "example": "CWZTFH1"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "The ID of the campaign you want to link to the specified messaging profile. If you supply this ID in the request, do not also include a tcrCampaignId.",
            "example": "4b300178-131c-d902-d54e-72d90ba1620j"
          },
          "taskId": {
            "title": "Taskid",
            "type": "string",
            "description": "The ID of the task associated with assigning a messaging profile to a campaign.",
            "example": "667a80f8-b0a9-49d0-b9ab-a7a1bcc45086"
          }
        }
      },
      "AssignmentTaskStatusResponse": {
        "title": "AssignmentTaskStatusResponse",
        "required": [
          "taskId",
          "status"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "title": "Taskid",
            "type": "string"
          },
          "status": {
            "type": "string",
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStatus"
              }
            ],
            "description": "The status of the task associated with assigning a messaging profile to a campaign.",
            "example": "pending"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "title": "Updatedat",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Assistant": {
        "title": "Assistant",
        "required": [
          "id",
          "name",
          "created_at",
          "model",
          "instructions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "description": "ID of the model to use. You can use the [Get models API](https://developers.telnyx.com/api/inference/inference-embedding/get-models-public-models-get) to see all of your available models,"
          },
          "instructions": {
            "type": "string",
            "description": "System instructions for the assistant. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "tools": {
            "$ref": "#/components/schemas/AssistantTools"
          },
          "greeting": {
            "type": "string",
            "description": "Text that the assistant will use to start the conversation. This may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "llm_api_key_ref": {
            "type": "string",
            "description": "This is only needed when using third-party inference providers. The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your LLM provider's API key. Warning: Free plans are unlikely to work with this integration."
          },
          "voice_settings": {
            "$ref": "#/components/schemas/VoiceSettings"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionSettings"
          },
          "telephony_settings": {
            "$ref": "#/components/schemas/TelephonySettings"
          },
          "messaging_settings": {
            "$ref": "#/components/schemas/MessagingSettings"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnabledFeatures"
            }
          },
          "insight_settings": {
            "$ref": "#/components/schemas/InsightSettings"
          },
          "privacy_settings": {
            "$ref": "#/components/schemas/PrivacySettings"
          },
          "dynamic_variables_webhook_url": {
            "type": "string",
            "description": "If the dynamic_variables_webhook_url is set for the assistant, we will send a request at the start of the conversation. See our [guide](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables) for more information."
          },
          "dynamic_variables": {
            "type": "object",
            "description": "Map of dynamic variables and their values"
          },
          "import_metadata": {
            "$ref": "#/components/schemas/ImportMetadata"
          }
        }
      },
      "AssistantChatReq": {
        "title": "AssistantChatReq",
        "required": [
          "content",
          "conversation_id"
        ],
        "type": "object",
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          }
        }
      },
      "AssistantChatResponse": {
        "title": "AssistantChatResponse",
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "AssistantDeletedResponse": {
        "title": "AssistantDeletedResponse",
        "required": [
          "id",
          "object",
          "deleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "object": {
            "title": "Object",
            "type": "string"
          },
          "deleted": {
            "title": "Deleted",
            "type": "boolean"
          }
        },
        "description": "Aligns with the OpenAI API:\nhttps://platform.openai.com/docs/api-reference/assistants/deleteAssistant"
      },
      "AssistantTools": {
        "title": "AssistantTools",
        "type": "array",
        "items": { },
        "description": "The tools that the assistant can use. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
      },
      "AssistantsListData": {
        "title": "AssistantsListData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assistant"
            }
          }
        }
      },
      "AudioTranscriptionRequest": {
        "title": "AudioTranscriptionRequest",
        "required": [
          "model"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The audio file object to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. File uploads are limited to 100 MB. Cannot be used together with `file_url`",
            "format": "binary"
          },
          "file_url": {
            "type": "string",
            "description": "Link to audio file in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm. Support for hosted files is limited to 100MB. Cannot be used together with `file`",
            "example": "https://example.com/file.mp3"
          },
          "model": {
            "enum": [
              "distil-whisper/distil-large-v2",
              "openai/whisper-large-v3-turbo"
            ],
            "type": "string",
            "description": "ID of the model to use. `distil-whisper/distil-large-v2` is lower latency but English-only. `openai/whisper-large-v3-turbo` is multi-lingual but slightly higher latency.",
            "default": "distil-whisper/distil-large-v2",
            "example": "distil-whisper/distil-large-v2"
          },
          "response_format": {
            "enum": [
              "json",
              "verbose_json"
            ],
            "type": "string",
            "description": "The format of the transcript output. Use `verbose_json` to take advantage of timestamps.",
            "default": "json",
            "example": "json"
          },
          "timestamp_granularities[]": {
            "enum": [
              "segment"
            ],
            "type": "string",
            "description": "The timestamp granularities to populate for this transcription. `response_format` must be set verbose_json to use timestamp granularities. Currently `segment` is supported.",
            "example": "json"
          }
        }
      },
      "AudioTranscriptionResponse": {
        "title": "AudioTranscriptionResponse",
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The transcribed text for the audio file."
          },
          "duration": {
            "type": "number",
            "description": "The duration of the audio file in seconds. This is only included if `response_format` is set to `verbose_json`."
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioTranscriptionResponseSegments"
            },
            "description": "Segments of the transcribed text and their corresponding details. This is only included if `response_format` is set to `verbose_json`."
          }
        }
      },
      "AudioTranscriptionResponseSegments": {
        "title": "AudioTranscriptionResponseSegments",
        "required": [
          "id",
          "start",
          "end",
          "text"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier of the segment."
          },
          "start": {
            "type": "number",
            "description": "Start time of the segment in seconds."
          },
          "end": {
            "type": "number",
            "description": "End time of the segment in seconds."
          },
          "text": {
            "type": "string",
            "description": "Text content of the segment."
          }
        }
      },
      "AuditEventChanges": {
        "title": "Audit Event Changes",
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "The name of the field that was changed. May use the dot notation to indicate nested fields.",
            "example": "nested.field.name"
          },
          "to": {
            "type": "object",
            "description": "The new value of the field. Can be any JSON type.",
            "nullable": true,
            "example": 12345
          },
          "from": {
            "type": "object",
            "description": "The previous value of the field. Can be any JSON type.",
            "nullable": true,
            "example": 54321
          }
        },
        "description": "Details of the changes made to a resource."
      },
      "AuditLog": {
        "title": "Audit Log Entry",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the audit log entry.",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user who made the change.",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "record_type": {
            "type": "string",
            "description": "The type of the resource being audited.",
            "example": "audit_event"
          },
          "resource_id": {
            "type": "string",
            "description": "Unique identifier for the resource that was changed.",
            "example": "550e8400-e29b-41d4-a716-446655440002"
          },
          "alternate_resource_id": {
            "type": "string",
            "description": "An alternate identifier for a resource which may be considered unique enough to identify the resource but is not the primary identifier for the resource. For example, this field could be used to store the phone number value for a phone number when the primary database identifier is a separate distinct value.",
            "nullable": true,
            "example": "+14155551234"
          },
          "change_made_by": {
            "enum": [
              "telnyx",
              "account_manager",
              "account_owner",
              "organization_member"
            ],
            "type": "string",
            "description": "Indicates if the change was made by Telnyx on your behalf, the organization owner, a member of your organization, or in the case of managed accounts, the account manager.",
            "example": "organization_owner"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditEventChanges"
            },
            "description": "Details of the changes made to the resource.",
            "nullable": true
          },
          "organization_id": {
            "type": "string",
            "description": "Unique identifier for the organization that owns the resource.",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440003"
          },
          "change_type": {
            "type": "string",
            "description": "The type of change that occurred.",
            "example": "update"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the change occurred.",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.0000000+00:00"
          }
        }
      },
      "AuditLogList": {
        "title": "Audit Log List",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "AuthenticationProvider": {
        "title": "AuthenticationProvider",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the authentication provider.",
            "format": "uuid",
            "example": "35146afd-df93-4963-b1e9-1a085e2ae874"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "authentication_provider"
          },
          "name": {
            "type": "string",
            "description": "The name associated with the authentication provider.",
            "example": "Okta"
          },
          "short_name": {
            "type": "string",
            "description": "The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.",
            "example": "myorg"
          },
          "organization_id": {
            "type": "string",
            "description": "The id from the Organization the authentication provider belongs to.",
            "format": "uuid",
            "example": "24b4a4bb-c4df-46ad-bbcb-23fc741c5ad7"
          },
          "active": {
            "type": "boolean",
            "description": "The active status of the authentication provider",
            "default": true,
            "example": true
          },
          "settings": {
            "type": "object",
            "properties": {
              "assertion_consumer_service_url": {
                "type": "string",
                "description": "The Assertion Consumer Service URL for the service provider (Telnyx).",
                "format": "uri",
                "example": "https://api.telnyx.com/sso/saml/auth/myorg"
              },
              "service_provider_entity_id": {
                "type": "string",
                "description": "The Entity ID for the service provider (Telnyx).",
                "format": "uri",
                "example": "https://api.telnyx.com/sso/saml/metadata/myorg"
              },
              "idp_entity_id": {
                "type": "string",
                "description": "The Entity ID for the identity provider (IdP).",
                "format": "uri",
                "example": "https://myorg.myidp.com/saml/metadata"
              },
              "idp_sso_target_url": {
                "type": "string",
                "description": "The SSO target url for the identity provider (IdP).",
                "format": "uri",
                "example": "https://myorg.myidp.com/trust/saml2/http-post/sso"
              },
              "idp_cert_fingerprint": {
                "type": "string",
                "description": "The certificate fingerprint for the identity provider (IdP)",
                "example": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7"
              },
              "idp_cert_fingerprint_algorithm": {
                "enum": [
                  "sha1",
                  "sha256",
                  "sha384",
                  "sha512"
                ],
                "type": "string",
                "description": "The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
                "default": "sha1",
                "example": "sha256"
              },
              "name_identifier_format": {
                "type": "string",
                "description": "The name identifier format associated with the authentication provider. This must be the same for both the Identity Provider (IdP) and the service provider (Telnyx).",
                "example": "urn:oasis:names:tc:SAML:1.1:nameid-format"
              }
            },
            "description": "The settings associated with the authentication provider."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "AuthenticationProviderCreate": {
        "title": "AuthenticationProviderCreate",
        "required": [
          "name",
          "short_name",
          "settings"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name associated with the authentication provider.",
            "example": "Okta"
          },
          "short_name": {
            "type": "string",
            "description": "The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.",
            "example": "myorg"
          },
          "active": {
            "type": "boolean",
            "description": "The active status of the authentication provider",
            "default": true,
            "example": true
          },
          "settings": {
            "$ref": "#/components/schemas/settings"
          },
          "settings_url": {
            "type": "string",
            "description": "The URL for the identity provider metadata file to populate the settings automatically. If the settings attribute is provided, that will be used instead.",
            "format": "uri",
            "example": "https://myorg.myidp.com/saml/metadata"
          }
        }
      },
      "AutoRechargePref": {
        "title": "AutoRechargePref",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the auto recharge preference.",
            "example": "1524126400473204723"
          },
          "record_type": {
            "type": "string",
            "description": "The record type.",
            "example": "auto_recharge_pref"
          },
          "threshold_amount": {
            "type": "string",
            "description": "The threshold amount at which the account will be recharged.",
            "format": "decimal",
            "example": "104.00"
          },
          "recharge_amount": {
            "type": "string",
            "description": "The amount to recharge the account, the actual recharge amount will be the amount necessary to reach the threshold amount plus the recharge amount.",
            "format": "decimal",
            "example": "104.00"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether auto recharge is enabled.",
            "example": true
          },
          "invoice_enabled": {
            "type": "boolean",
            "example": true
          },
          "preference": {
            "enum": [
              "credit_paypal",
              "ach"
            ],
            "type": "string",
            "description": "The payment preference for auto recharge.",
            "example": "credit_paypal"
          }
        }
      },
      "AutoRechargePrefRequest": {
        "title": "AutoRechargePrefRequest",
        "type": "object",
        "properties": {
          "threshold_amount": {
            "type": "string",
            "description": "The threshold amount at which the account will be recharged.",
            "format": "decimal",
            "example": "104.00"
          },
          "recharge_amount": {
            "type": "string",
            "description": "The amount to recharge the account, the actual recharge amount will be the amount necessary to reach the threshold amount plus the recharge amount.",
            "format": "decimal",
            "example": "104.00"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether auto recharge is enabled.",
            "example": true
          },
          "invoice_enabled": {
            "type": "boolean",
            "example": true
          },
          "preference": {
            "enum": [
              "credit_paypal",
              "ach"
            ],
            "type": "string",
            "description": "The payment preference for auto recharge.",
            "example": "credit_paypal"
          }
        }
      },
      "AutoRespConfigCreateSchema": {
        "title": "AutoRespConfigCreateSchema",
        "required": [
          "op",
          "keywords",
          "country_code"
        ],
        "type": "object",
        "properties": {
          "op": {
            "title": "Op",
            "enum": [
              "start",
              "stop",
              "info"
            ],
            "type": "string"
          },
          "keywords": {
            "title": "Keywords",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resp_text": {
            "title": "Resp Text",
            "type": "string",
            "example": "Thank you for your message"
          },
          "country_code": {
            "title": "Country Code",
            "type": "string",
            "example": "US"
          }
        }
      },
      "AutorespConfigResponseSchema": {
        "title": "AutorespConfigResponseSchema",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AutorespConfigSchema"
          }
        }
      },
      "AutorespConfigSchema": {
        "title": "AutorespConfigSchema",
        "required": [
          "op",
          "keywords",
          "country_code",
          "id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "op": {
            "title": "Op",
            "enum": [
              "start",
              "stop",
              "info"
            ],
            "type": "string",
            "example": "start"
          },
          "keywords": {
            "title": "Keywords",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resp_text": {
            "title": "Resp Text",
            "type": "string",
            "example": "Thank you for subscribing to our service."
          },
          "country_code": {
            "title": "Country Code",
            "type": "string",
            "example": "*"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "example": "b8f9c1c0-5b5a-4b1e-8c1c-0b5a4b1e8c1c"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AutorespConfigsResponseSchema": {
        "title": "AutorespConfigsResponseSchema",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutorespConfigSchema"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "description": "List of Auto-Response Settings"
      },
      "AvailablePhoneNumber": {
        "title": "AvailablePhoneNumber",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "available_phone_number"
            ],
            "type": "string",
            "example": "available_phone_number"
          },
          "phone_number": {
            "type": "string",
            "example": "+19705555098"
          },
          "vanity_format": {
            "type": "string"
          },
          "best_effort": {
            "type": "boolean",
            "description": "Specifies whether the phone number is an exact match based on the search criteria or not.",
            "example": false
          },
          "quickship": {
            "type": "boolean",
            "description": "Specifies whether the phone number can receive calls immediately after purchase or not.",
            "example": true
          },
          "reservable": {
            "type": "boolean",
            "description": "Specifies whether the phone number can be reserved before purchase or not.",
            "example": true
          },
          "region_information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInformation"
            }
          },
          "cost_information": {
            "$ref": "#/components/schemas/CostInformation"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "example": {
          "record_type": "available_phone_number",
          "phone_number": "+19705555098",
          "vanity_format": "",
          "best_effort": false,
          "quickship": true,
          "reservable": true,
          "region_information": [
            {
              "region_type": "country_code",
              "region_name": "US"
            }
          ],
          "cost_information": {
            "upfront_cost": "2025-03-21",
            "monthly_cost": "6.54",
            "currency": "USD"
          },
          "features": [
            {
              "name": "sms"
            },
            {
              "name": "voice"
            }
          ]
        }
      },
      "AvailablePhoneNumberBlock": {
        "title": "AvailablePhoneNumberBlock",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "available_phone_number_block"
            ],
            "type": "string",
            "example": "available_phone_number_block"
          },
          "starting_number": {
            "type": "string",
            "example": "+19705555000"
          },
          "range": {
            "type": "integer",
            "example": 10
          },
          "region_information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInformation"
            }
          },
          "cost_information": {
            "$ref": "#/components/schemas/CostInformation"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          }
        },
        "example": {
          "record_type": "available_phone_number_block",
          "phone_number": "+19705555000",
          "range": 10,
          "region_information": [
            {
              "region_type": "country_code",
              "region_name": "US"
            }
          ],
          "cost_information": {
            "upfront_cost": "2025-03-21",
            "monthly_cost": "6.54",
            "currency": "USD"
          },
          "features": [
            {
              "name": "sms"
            },
            {
              "name": "voice"
            }
          ]
        }
      },
      "AvailablePhoneNumbersMetadata": {
        "title": "AvailablePhoneNumbersMetadata",
        "type": "object",
        "properties": {
          "total_results": {
            "type": "integer",
            "example": 1
          },
          "best_effort_results": {
            "type": "integer",
            "example": 0
          }
        },
        "example": {
          "total_results": 100,
          "best_effort_results": 50
        }
      },
      "AvailableService": {
        "title": "Available service",
        "enum": [
          "cloud_vpn",
          "private_wireless_gateway",
          "virtual_cross_connect"
        ],
        "type": "string"
      },
      "CreatePrivateWirelessGateway": {
        "title": "CreatePrivateWirelessGateway",
        "required": [
          "network_id",
          "name"
        ],
        "type": "object",
        "properties": {
          "network_id": {
            "type": "string",
            "description": "The identification of the related network resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "name": {
            "type": "string",
            "description": "The private wireless gateway name.",
            "example": "My private wireless gateway"
          },
          "region_code": {
            "type": "string",
            "description": "The code of the region where the private wireless gateway will be assigned. A list of available regions can be found at the regions endpoint",
            "example": "dc2"
          }
        }
      },
      "UpdatePortoutStatus": {
        "title": "UpdatePortoutStatus",
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Provide a reason if rejecting the port out request",
            "example": "I do not recognize this transaction"
          }
        }
      },
      "PostPortRequestSupportingDocuments": {
        "title": "PostPortRequestSupportingDocuments",
        "type": "object",
        "properties": {
          "documents": {
            "maxItems": 10,
            "minItems": 1,
            "type": "array",
            "items": {
              "required": [
                "type",
                "document_id"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "loa",
                    "invoice"
                  ],
                  "type": "string",
                  "description": "Identifies the type of the document",
                  "example": "loa"
                },
                "document_id": {
                  "type": "string",
                  "description": "Identifies the associated document",
                  "format": "uuid",
                  "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
                }
              }
            },
            "description": "List of supporting documents parameters"
          }
        }
      },
      "PostPortRequestComment": {
        "title": "PostPortRequestComment",
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Comment to post on this portout request"
          }
        }
      },
      "AzureConfigurationData": {
        "title": "Azure Blob Storage Configuration Data",
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Name of the bucket to be used to store recording files.",
            "example": "example-bucket"
          },
          "account_name": {
            "type": "string",
            "description": "Azure Blob Storage account name.",
            "example": "my-account"
          },
          "account_key": {
            "type": "string",
            "description": "Azure Blob Storage account key.",
            "example": "bPxRfiCYEXAMPLEKEY"
          }
        }
      },
      "BackgroundTaskStatus": {
        "title": "BackgroundTaskStatus",
        "enum": [
          "queued",
          "processing",
          "success",
          "failure",
          "partial_success"
        ],
        "type": "string",
        "description": "Status of an embeddings task."
      },
      "BackgroundTasksQueryResponse": {
        "title": "BackgroundTasksQueryResponse",
        "required": [
          "user_id",
          "task_id",
          "task_name",
          "status",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "type": "string"
          },
          "task_id": {
            "title": "Task Id",
            "type": "string"
          },
          "task_name": {
            "title": "Task Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BackgroundTaskStatus"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "title": "Finished At",
            "type": "string",
            "format": "date-time"
          },
          "bucket": {
            "title": "Bucket",
            "type": "string"
          }
        }
      },
      "BackgroundTasksQueryResponseData": {
        "title": "BackgroundTasksQueryResponseData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundTasksQueryResponse"
            }
          }
        }
      },
      "BillingBundleResponse": {
        "title": "BillingBundleResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BillingBundleSchema"
          }
        }
      },
      "BillingBundleSchema": {
        "title": "BillingBundleSchema",
        "required": [
          "id",
          "name",
          "cost_code",
          "active",
          "is_public",
          "created_at",
          "bundle_limits"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Bundle's ID, this is used to identify the bundle in the API.",
            "format": "uuid",
            "example": "7ecd040e-6bac-4139-9160-3c0427d98fea"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Bundle's name, this is used to identify the bundle in the UI.",
            "example": "Australia Basic"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "Slugified version of the bundle's name.",
            "example": "basic-au-e4f8"
          },
          "cost_code": {
            "title": "Cost Code",
            "type": "string",
            "description": "Bundle's cost code, this is used to identify the bundle in the billing system.",
            "example": "BUNDLE-PRICING-BASIC-MRC"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "If that bundle is active or not."
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Available to all customers or only to specific customers."
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "Date the bundle was created.",
            "format": "date"
          },
          "bundle_limits": {
            "title": "Bundle Limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleLimitSchema"
            }
          }
        }
      },
      "BillingBundleSummary": {
        "title": "BillingBundleSummary",
        "required": [
          "id",
          "name",
          "cost_code",
          "is_public",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Bundle's ID, this is used to identify the bundle in the API.",
            "format": "uuid",
            "example": "7ecd040e-6bac-4139-9160-3c0427d98fea"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Bundle's name, this is used to identify the bundle in the UI.",
            "example": "Australia Basic"
          },
          "slug": {
            "title": "Slug",
            "type": "string",
            "description": "Slugified version of the bundle's name.",
            "example": "basic-au-e4f8"
          },
          "cost_code": {
            "title": "Cost Code",
            "type": "string",
            "description": "Bundle's cost code, this is used to identify the bundle in the billing system.",
            "example": "BUNDLE-PRICING-BASIC-MRC"
          },
          "is_public": {
            "title": "Is Public",
            "type": "boolean",
            "description": "Available to all customers or only to specific customers."
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "Date the bundle was created.",
            "format": "date"
          },
          "mrc_price": {
            "title": "Mrc Price",
            "type": "number",
            "description": "Monthly recurring charge price.",
            "format": "float",
            "example": 2
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Bundle's currency code.",
            "example": "USD"
          },
          "specs": {
            "title": "Specs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BillingGroup": {
        "title": "BillingGroup",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "billing_group"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "billing_group"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "organization_id": {
            "type": "string",
            "description": "Identifies the organization that owns the resource.",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "name": {
            "type": "string",
            "description": "A user-specified name for the billing group",
            "example": "My billing group name"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "deleted_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was removed.",
            "format": "date-time",
            "nullable": true,
            "example": null
          }
        },
        "example": {
          "record_type": "billing_group",
          "id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "organization_id": "f1486bae-f067-460c-ad43-73a92848f902",
          "name": "My billing group name",
          "created_at": "2019-10-15T10:07:15.5270000+00:00",
          "updated_at": "2019-10-15T10:07:15.5270000+00:00",
          "deleted_at": null
        }
      },
      "BookAppointmentTool": {
        "title": "BookAppointmentTool",
        "required": [
          "type",
          "book_appointment"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "book_appointment"
            ],
            "type": "string"
          },
          "book_appointment": {
            "$ref": "#/components/schemas/BookAppointmentToolParams"
          }
        }
      },
      "BookAppointmentToolParams": {
        "title": "BookAppointmentToolParams",
        "required": [
          "event_type_id",
          "api_key_ref"
        ],
        "type": "object",
        "properties": {
          "event_type_id": {
            "type": "integer",
            "description": "Event Type ID for which slots are being fetched. [cal.com](https://cal.com/docs/api-reference/v2/bookings/create-a-booking#body-event-type-id)"
          },
          "api_key_ref": {
            "type": "string",
            "description": "Reference to an integration secret that contains your Cal.com API key. You would pass the `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your Cal.com API key.",
            "example": "my_calcom_api_key"
          },
          "attendee_name": {
            "type": "string",
            "description": "The name of the attendee [cal.com](https://cal.com/docs/api-reference/v2/bookings/create-a-booking#body-attendee-name). If not provided, the assistant will ask for the attendee's name."
          },
          "attendee_timezone": {
            "type": "string",
            "description": "The timezone of the attendee [cal.com](https://cal.com/docs/api-reference/v2/bookings/create-a-booking#body-attendee-timezone). If not provided, the assistant will ask for the attendee's timezone."
          }
        }
      },
      "BrandBasic": {
        "title": "ListedBrand",
        "type": "object",
        "properties": {
          "brandId": {
            "type": "string",
            "description": "Unique identifier assigned to the brand.",
            "example": "4b206179-f731-8ab7-f19c-34e19d22ide9"
          },
          "tcrBrandId": {
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "example": "BBRAND1"
          },
          "entityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "identityStatus": {
            "$ref": "#/components/schemas/BrandIdentityStatus"
          },
          "companyName": {
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "Example Company Inc."
          },
          "displayName": {
            "type": "string",
            "description": "Display or marketing name of the brand.",
            "example": "Example Company"
          },
          "email": {
            "type": "string",
            "description": "Valid email address of brand support contact.",
            "example": "examplename@examplecompany.com"
          },
          "website": {
            "type": "string",
            "description": "Brand website URL.",
            "example": "www.examplecompany.com"
          },
          "failureReasons": {
            "title": "failureReasons",
            "description": "Failure reasons for brand"
          },
          "status": {
            "title": "status",
            "enum": [
              "OK",
              "REGISTRATION_PENDING",
              "REGISTRATION_FAILED"
            ],
            "description": "Status of the brand"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time that the brand was created at.",
            "example": "2021-03-08T17:57:48.801186"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time that the brand was last updated at.",
            "example": "2021-03-08T17:57:48.801186"
          },
          "assignedCampaingsCount": {
            "type": "integer",
            "description": "Number of campaigns associated with the brand",
            "example": 2
          }
        }
      },
      "BrandFeedback": {
        "title": "BrandFeedback",
        "required": [
          "brandId",
          "category"
        ],
        "type": "object",
        "properties": {
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "ID of the brand being queried about",
            "example": "d88dd2aa-1bb9-4ef0-9ec8-1752b80316a5"
          },
          "category": {
            "title": "Category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandFeedbackCategory"
            },
            "description": "A list of reasons why brand creation/revetting didn't go as planned"
          }
        }
      },
      "BrandFeedbackCategory": {
        "title": "BrandFeedbackCategory",
        "required": [
          "id",
          "displayName",
          "description",
          "fields"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "One of `TAX_ID`, `STOCK_SYMBOL`, `GOVERNMENT_ENTITY`, `NONPROFIT`, and `OTHERS`",
            "example": "TAX_ID"
          },
          "displayName": {
            "title": "Displayname",
            "type": "string",
            "description": "Human-readable version of the `id` field",
            "example": "Tax Id"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Long-form description of the feedback with additional information",
            "example": "Tax Id does not match with the company name or business type."
          },
          "fields": {
            "title": "Fields",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of relevant fields in the originally-submitted brand json"
          }
        }
      },
      "BrandIdentityStatus": {
        "title": "BrandIdentityStatus",
        "enum": [
          "VERIFIED",
          "UNVERIFIED",
          "SELF_DECLARED",
          "VETTED_VERIFIED"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "The verification status of an active brand"
      },
      "BrandOptionalAttributes": {
        "title": "BrandOptionalAttributes",
        "type": "object",
        "properties": {
          "taxExemptStatus": {
            "title": "Taxexemptstatus",
            "type": "string",
            "description": "The tax exempt status of the brand"
          }
        }
      },
      "BrandRecordSetCSP": {
        "title": "BrandRecordSetCSP",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandBasic"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer",
            "example": 1
          },
          "totalRecords": {
            "title": "Totalrecords",
            "type": "integer",
            "example": 1
          }
        }
      },
      "BrandRelationship": {
        "title": "BrandRelationship",
        "enum": [
          "BASIC_ACCOUNT",
          "SMALL_ACCOUNT",
          "MEDIUM_ACCOUNT",
          "LARGE_ACCOUNT",
          "KEY_ACCOUNT"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Brand relationship to the CSP."
      },
      "BridgeRequest": {
        "title": "Bridge Request",
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "properties": {
          "call_control_id": {
            "type": "string",
            "description": "The Call Control ID of the call you want to bridge with, can't be used together with queue parameter or video_room_id parameter.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "queue": {
            "type": "string",
            "description": "The name of the queue you want to bridge with, can't be used together with call_control_id parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.",
            "example": "support"
          },
          "video_room_id": {
            "type": "string",
            "description": "The ID of the video room you want to bridge with, can't be used together with call_control_id parameter or queue parameter.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "video_room_context": {
            "type": "string",
            "description": "The additional parameter that will be passed to the video conference. It is a text field and the user can decide how to use it. For example, you can set the participant name or pass JSON text. It can be used only with video_room_id parameter.",
            "example": "Alice"
          },
          "park_after_unbridge": {
            "type": "string",
            "description": "Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.",
            "example": "self"
          },
          "play_ringtone": {
            "type": "boolean",
            "description": "Specifies whether to play a ringtone if the call you want to bridge with has not yet been answered.",
            "default": false,
            "example": true
          },
          "ringtone": {
            "enum": [
              "at",
              "au",
              "be",
              "bg",
              "br",
              "ch",
              "cl",
              "cn",
              "cz",
              "de",
              "dk",
              "ee",
              "es",
              "fi",
              "fr",
              "gr",
              "hu",
              "il",
              "in",
              "it",
              "jp",
              "lt",
              "mx",
              "my",
              "nl",
              "no",
              "nz",
              "ph",
              "pl",
              "pt",
              "ru",
              "se",
              "sg",
              "th",
              "tw",
              "uk",
              "us-old",
              "us",
              "ve",
              "za"
            ],
            "type": "string",
            "description": "Specifies which country ringtone to play when `play_ringtone` is set to `true`. If not set, the US ringtone will be played.",
            "default": "us",
            "example": "pl"
          },
          "record": {
            "enum": [
              "record-from-answer"
            ],
            "type": "string",
            "description": "Start recording automatically after an event. Disabled by default.",
            "example": "record-from-answer"
          },
          "record_channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "Defines which channel should be recorded ('single' or 'dual') when `record` is specified.",
            "default": "dual",
            "example": "single"
          },
          "record_format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "Defines the format of the recording ('wav' or 'mp3') when `record` is specified.",
            "default": "mp3",
            "example": "wav"
          },
          "record_max_length": {
            "type": "integer",
            "description": "Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "record_timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "record_track": {
            "enum": [
              "both",
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).",
            "default": "both",
            "example": "outbound"
          },
          "record_trim": {
            "enum": [
              "trim-silence"
            ],
            "type": "string",
            "description": "When set to `trim-silence`, silence will be removed from the beginning and end of the recording.",
            "example": "trim-silence"
          },
          "record_custom_file_name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.",
            "example": "my_recording_file_name"
          },
          "mute_dtmf": {
            "enum": [
              "none",
              "both",
              "self",
              "opposite"
            ],
            "type": "string",
            "description": "When enabled, DTMF tones are not passed to the call participant. The webhooks containing the DTMF information will be sent.",
            "default": "none",
            "example": "opposite"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "park_after_unbridge": "self"
        }
      },
      "CreatePortoutReport": {
        "title": "CreatePortoutReport",
        "required": [
          "report_type",
          "params"
        ],
        "type": "object",
        "properties": {
          "report_type": {
            "enum": [
              "export_portouts_csv"
            ],
            "type": "string",
            "description": "Identifies the type of report",
            "example": "export_portouts_csv"
          },
          "params": { }
        },
        "description": "The parameters for generating a new port-out related report."
      },
      "BucketAPIUsageResponse": {
        "title": "BucketAPIUsageResponse",
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BucketOps"
            }
          },
          "total": {
            "$ref": "#/components/schemas/BucketOpsTotal"
          },
          "timestamp": {
            "type": "string",
            "description": "The time the usage was recorded",
            "format": "date-time"
          }
        }
      },
      "BucketIds": {
        "title": "BucketIds",
        "required": [
          "bucket_ids"
        ],
        "type": "object",
        "properties": {
          "bucket_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of [embedded storage buckets](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding) to use for retrieval-augmented generation."
          },
          "max_num_results": {
            "type": "integer",
            "description": "The maximum number of results to retrieve as context for the language model."
          }
        }
      },
      "BucketNotFoundError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        }
      },
      "BucketOps": {
        "title": "BucketOps",
        "type": "object",
        "properties": {
          "bytes_sent": {
            "type": "integer",
            "description": "The number of bytes sent"
          },
          "bytes_received": {
            "type": "integer",
            "description": "The number of bytes received"
          },
          "ops": {
            "type": "integer",
            "description": "The number of operations"
          },
          "successful_ops": {
            "type": "integer",
            "description": "The number of successful operations"
          },
          "category": {
            "enum": [
              "list_bucket",
              "list_buckets",
              "get-bucket_location",
              "create_bucket",
              "stat_bucket",
              "get_bucket_versioning",
              "set_bucket_versioning",
              "get_obj",
              "put_obj",
              "delete_obj"
            ],
            "type": "string",
            "description": "The category of the bucket operation",
            "example": "put_obj"
          }
        }
      },
      "BucketOpsTotal": {
        "title": "BucketOpsTotal",
        "type": "object",
        "properties": {
          "bytes_sent": {
            "type": "integer",
            "description": "The number of bytes sent"
          },
          "bytes_received": {
            "type": "integer",
            "description": "The number of bytes received"
          },
          "ops": {
            "type": "integer",
            "description": "The number of operations"
          },
          "successful_ops": {
            "type": "integer",
            "description": "The number of successful operations"
          }
        }
      },
      "BucketUsage": {
        "title": "BucketUsage",
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "The size of the bucket in bytes"
          },
          "size_kb": {
            "type": "integer",
            "description": "The size of the bucket in kilobytes"
          },
          "num_objects": {
            "type": "integer",
            "description": "The number of objects in the bucket"
          },
          "timestamp": {
            "type": "string",
            "description": "The time the snapshot was taken",
            "format": "date-time"
          }
        }
      },
      "BulkMessagingSettingsUpdatePhoneNumbers": {
        "title": "BulkMessagingSettingsUpdatePhoneNumbers",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "messaging_numbers_bulk_update"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "messaging_numbers_bulk_update"
          },
          "order_id": {
            "type": "string",
            "description": "Order ID to verify bulk update status.",
            "format": "uuid",
            "readOnly": true
          },
          "success": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "Phoned numbers updated successfully."
          },
          "pending": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "Phone numbers pending to be updated."
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "Phone numbers that failed to update."
          }
        },
        "example": {
          "record_type": "messaging_numbers_bulk_update",
          "order_id": "00000000-0000-0000-0000-000000000000",
          "success": [
            "+18880000000",
            "+18880000001",
            "+18880000002"
          ],
          "pending": [ ],
          "failed": [ ]
        }
      },
      "BulkMessagingSettingsUpdatePhoneNumbersRequest": {
        "title": "BulkMessagingSettingsUpdatePhoneNumbersRequest",
        "required": [
          "messaging_profile_id",
          "numbers"
        ],
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Configure the messaging profile these phone numbers are assigned to:\n\n* Set this field to `\"\"` to unassign each number from their respective messaging profile\n* Set this field to a quoted UUID of a messaging profile to assign these numbers to that messaging profile"
          },
          "numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "The list of phone numbers to update."
          }
        },
        "example": {
          "messaging_profile_id": "00000000-0000-0000-0000-000000000000",
          "numbers": [
            "+18880000000",
            "+18880000001",
            "+18880000002"
          ]
        }
      },
      "BulkSIMCardAction": {
        "title": "BulkSIMCardAction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "bulk_sim_card_action"
          },
          "action_type": {
            "enum": [
              "bulk_set_public_ips"
            ],
            "type": "string",
            "description": "The operation type. It can be one of the following: <br/>\n<ul>\n<li><code>bulk_set_public_ips</code> - set a public IP for each specified SIM card.</li>\n</ul>",
            "readOnly": true,
            "example": "bulk_set_public_ips"
          },
          "settings": {
            "type": "object",
            "description": "A JSON object representation of the bulk action payload.",
            "readOnly": true
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2020-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2020-02-03T22:25:27.521Z"
          }
        },
        "description": "This object represents a bulk SIM card action. It groups SIM card actions created through a bulk endpoint under a single resource for further lookup."
      },
      "BulkSIMCardActionDetailed": {
        "title": "BulkSIMCardActionDetailed",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "bulk_sim_card_action"
          },
          "action_type": {
            "enum": [
              "bulk_set_public_ips"
            ],
            "type": "string",
            "description": "The operation type. It can be one of the following: <br/>\n<ul>\n<li><code>bulk_set_public_ips</code> - set a public IP for each specified SIM card.</li>\n</ul>",
            "readOnly": true,
            "example": "bulk_set_public_ips"
          },
          "settings": {
            "type": "object",
            "description": "A JSON object representation of the bulk action payload.",
            "readOnly": true
          },
          "sim_card_actions_summary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SIMCardActionsSummary"
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2020-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2020-02-03T22:25:27.521Z"
          }
        }
      },
      "BundleLimitDirection": {
        "title": "BundleLimitDirection",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "BundleLimitSchema": {
        "title": "BundleLimitSchema",
        "required": [
          "id",
          "service",
          "metric",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "example": "e6a32ea9-953b-4622-bbba-9f7bcf7e6717"
          },
          "service": {
            "title": "Service",
            "type": "string",
            "example": "E911"
          },
          "metric": {
            "title": "Metric",
            "type": "string",
            "example": "number"
          },
          "limit": {
            "title": "Limit",
            "type": "integer",
            "example": 1
          },
          "rate": {
            "title": "Rate",
            "type": "string",
            "example": "5"
          },
          "country_iso": {
            "title": "Country Iso",
            "type": "string",
            "example": "AU"
          },
          "country_code": {
            "title": "Country Code",
            "type": "integer",
            "example": 61
          },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Use country_iso instead",
            "deprecated": true
          },
          "direction": {
            "$ref": "#/components/schemas/BundleLimitDirection"
          },
          "types": {
            "title": "Types",
            "type": "array",
            "items": {
              "type": "string",
              "example": "local"
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date"
          },
          "billing_service": {
            "title": "Billing Service",
            "type": "string",
            "example": "emergency"
          }
        }
      },
      "Call": {
        "title": "Call",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "call"
            ],
            "type": "string",
            "example": "call"
          },
          "call_session_id": {
            "type": "string",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "is_alive": {
            "type": "boolean",
            "description": "Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).",
            "example": true
          },
          "client_state": {
            "type": "string",
            "description": "State received from a command.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "call_duration": {
            "type": "integer",
            "description": "Indicates the duration of the call in seconds",
            "example": 50
          },
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the call started",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_time": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the call ended. Only present when the call is not alive",
            "example": "2019-01-23T18:11:52.574Z"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "is_alive": false,
          "call_duration": 50,
          "start_time": "2019-01-23T18:10:02.574Z",
          "end_time": "2019-01-23T18:11:52.574Z",
          "record_type": "call"
        }
      },
      "CallAIGatherEnded": {
        "title": "Call AI Gather Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.ai_gather.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.ai_gather.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
              },
              "connection_id": {
                "type": "string",
                "description": "Telnyx connection ID used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "message_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The content of the message",
                      "example": "Hello, I'm 29 and I live in Paris."
                    },
                    "role": {
                      "enum": [
                        "assistant",
                        "user"
                      ],
                      "type": "string",
                      "description": "The role of the message sender",
                      "example": "user"
                    }
                  }
                },
                "description": "The history of the messages exchanged during the AI gather"
              },
              "result": {
                "type": "object",
                "description": "The result of the AI gather, its type depends of the `parameters` provided in the command",
                "example": {
                  "age": 29,
                  "city": "Paris"
                }
              },
              "status": {
                "enum": [
                  "valid",
                  "invalid"
                ],
                "type": "string",
                "description": "Reflects how command ended.",
                "example": "valid"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.ai_gather.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "status": "valid",
            "message_history": [
              {
                "content": "Hello, can you tell me your age and where you live?",
                "role": "assistant"
              },
              {
                "content": "Hello, I'm 29 and I live in Paris?",
                "role": "user"
              }
            ],
            "result": {
              "age": 29,
              "city": "Paris"
            }
          }
        }
      },
      "CallAIGatherEndedEvent": {
        "title": "Call AI Gather Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAIGatherEnded"
          }
        }
      },
      "CallAIGatherMessageHistoryUpdated": {
        "title": "Call AI Gather Message History Updated",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.ai_gather.message_history_updated"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.ai_gather.message_history_updated"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
              },
              "connection_id": {
                "type": "string",
                "description": "Telnyx connection ID used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "message_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The content of the message",
                      "example": "Hello, I'm 29 and I live in Paris."
                    },
                    "role": {
                      "enum": [
                        "assistant",
                        "user"
                      ],
                      "type": "string",
                      "description": "The role of the message sender",
                      "example": "user"
                    }
                  }
                },
                "description": "The history of the messages exchanged during the AI gather"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.ai_gather.message_history_updated",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "message_history": [
              {
                "content": "Hello, can you tell me your age and where you live?",
                "role": "assistant"
              },
              {
                "content": "Hello, I'm 29 and I live in Paris?",
                "role": "user"
              }
            ]
          }
        }
      },
      "CallAIGatherMessageHistoryUpdatedEvent": {
        "title": "Call AI Gather Message History Updated Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAIGatherMessageHistoryUpdated"
          }
        }
      },
      "CallAIGatherPartialResults": {
        "title": "Call AI Gather Partial Results",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.ai_gather.partial_results"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.ai_gather.partial_results"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ"
              },
              "connection_id": {
                "type": "string",
                "description": "Telnyx connection ID used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "message_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "description": "The content of the message",
                      "example": "Hello, I'm 29 and I live in Paris."
                    },
                    "role": {
                      "enum": [
                        "assistant",
                        "user"
                      ],
                      "type": "string",
                      "description": "The role of the message sender",
                      "example": "user"
                    }
                  }
                },
                "description": "The history of the messages exchanged during the AI gather"
              },
              "partial_results": {
                "type": "object",
                "description": "The partial result of the AI gather, its type depends of the `parameters` provided in the command",
                "example": {
                  "age": 29,
                  "city": "Paris"
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.ai_gather.partial_results",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "message_history": [
              {
                "content": "Hello, can you tell me your age and where you live?",
                "role": "assistant"
              },
              {
                "content": "Hello, I'm 29 and I live in Paris?",
                "role": "user"
              }
            ],
            "partial_results": {
              "age": 29,
              "city": "Paris"
            }
          }
        }
      },
      "CallAIGatherPartialResultsEvent": {
        "title": "Call AI Gather Partial Results Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAIGatherPartialResults"
          }
        }
      },
      "CallAnswered": {
        "title": "Call Answered",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.answered"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.answered"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "custom_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomSipHeader"
                },
                "description": "Custom headers set on answer command"
              },
              "sip_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SipHeader"
                },
                "description": "User-to-User and Diversion headers from sip invite."
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "start_time": {
                "type": "string",
                "description": "ISO 8601 datetime of when the call started.",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.5219920+00:00"
              },
              "state": {
                "enum": [
                  "answered"
                ],
                "type": "string",
                "description": "State received from a command.",
                "example": "answered"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of tags associated to number."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.answered",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "start_time": "2018-02-02T22:25:27.5219920+00:00",
            "state": "answered"
          }
        }
      },
      "CallAnsweredEvent": {
        "title": "Call Answered Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallAnswered"
          }
        }
      },
      "CallBridged": {
        "title": "Call Bridged",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.bridged"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.bridged"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.bridged",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "state": "bridged"
          }
        }
      },
      "CallBridgedEvent": {
        "title": "Call Bridged Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallBridged"
          }
        }
      },
      "CallControlApplication": {
        "title": "Call Control Application",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "enum": [
              "Latency",
              "Chicago, IL",
              "Ashburn, VA",
              "San Jose, CA"
            ],
            "type": "string",
            "description": "`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "default": "\"Latency\"",
            "example": "\"Amsterdam, Netherlands\""
          },
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "dtmf_type": {
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "default": "RFC 2833",
            "example": "Inband"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags assigned to the Call Control Application."
          },
          "id": {
            "type": "string",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "record_type": {
            "enum": [
              "call_control_application"
            ],
            "type": "string",
            "default": "call_control_application"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was last updated",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as `https`.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as `https`.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "redact_dtmf_debug_logging": {
            "type": "boolean",
            "description": "When enabled, DTMF digits entered by users will be redacted in debug logs to protect PII data entered through IVR interactions.",
            "default": false,
            "example": true
          }
        },
        "example": {
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "application_name": "call-router",
          "created_at": "2018-02-02T22:25:27.521Z",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "id": "1293384261075731499",
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "record_type": "call_control_application",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_event_url": "https://example.com",
          "webhook_timeout_secs": 25,
          "redact_dtmf_debug_logging": true
        }
      },
      "CallControlApplicationInbound": {
        "title": "Call Control Application Inbound",
        "type": "object",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "default": null,
            "example": 10
          },
          "shaken_stir_enabled": {
            "type": "boolean",
            "description": "When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.",
            "default": false,
            "example": false
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
            "default": null,
            "example": "example"
          },
          "sip_subdomain_receive_settings": {
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "default": "from_anyone",
            "example": "only_my_connections"
          }
        }
      },
      "CallControlApplicationOutbound": {
        "title": "Call Control Application Outbound",
        "type": "object",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
            "default": null,
            "example": 10
          },
          "outbound_voice_profile_id": {
            "type": "string",
            "description": "Identifies the associated outbound voice profile.",
            "format": "int64",
            "example": "1293384261075731499"
          }
        }
      },
      "CallControlCommandResult": {
        "title": "Call Control Command Result",
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        },
        "example": {
          "result": "ok"
        }
      },
      "CallControlCommandResultWithRecordingId": {
        "title": "Call Control Command Result With Recording ID",
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          },
          "recording_id": {
            "type": "string",
            "description": "The ID of the recording. Only present when the record parameter is set to record-from-answer.",
            "format": "uuid",
            "example": "d7e9c1d4-8b2a-4b8f-b3a7-9a671c9e9b0a"
          }
        },
        "example": {
          "result": "ok",
          "recording_id": "d7e9c1d4-8b2a-4b8f-b3a7-9a671c9e9b0a"
        }
      },
      "republishPortoutEvent_201": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "CallCost": {
        "title": "Call Cost Received Event",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.cost"
            ],
            "type": "string",
            "description": "The type of the event being delivered",
            "example": "call.cost"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies a webhook",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "meta": {
            "type": "object",
            "properties": {
              "meta": {
                "type": "object",
                "properties": {
                  "attempt": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "The number of attempts made to deliver the webhook",
                    "example": 1
                  },
                  "delivered_to": {
                    "type": "string",
                    "description": "The URL where webhook was sent",
                    "example": "https://example.com"
                  }
                }
              }
            }
          },
          "payload": {
            "type": "object",
            "properties": {
              "billed_duration_secs": {
                "minimum": 0,
                "type": "integer",
                "description": "The number of seconds for which this call will be billed",
                "example": 0
              },
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Identifies the type of resource.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "cost_parts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "billed_duration_secs": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "The number of seconds for which this item will be billed",
                      "example": 0
                    },
                    "call_part": {
                      "type": "string",
                      "description": "The service incurring a charge",
                      "example": "call-control"
                    },
                    "cost": {
                      "minimum": 0.0,
                      "type": "number",
                      "description": "The billed cost of the item, in currency shown in the `currency` field",
                      "example": 0
                    },
                    "currency": {
                      "type": "string",
                      "description": "The currency in which `cost` is measured",
                      "example": "USD"
                    },
                    "rate": {
                      "minimum": 0.0,
                      "type": "number",
                      "description": "The cost per unit of the item incurring a charge",
                      "example": 0.001
                    }
                  }
                }
              },
              "total_cost": {
                "minimum": 0.0,
                "type": "number",
                "description": "The billed cost of the call",
                "example": 0
              },
              "status": {
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd"
                ],
                "type": "string",
                "description": "Reflects how command ended.",
                "example": "valid"
              }
            }
          }
        }
      },
      "CallDtmfReceived": {
        "title": "Call DTMF Received",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.dtmf.received"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.dtmf.received"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Identifies the type of resource.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "digit": {
                "type": "string",
                "description": "The received DTMF digit or symbol.",
                "example": "#"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dtmf.received",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digit": "#"
          }
        }
      },
      "CallDtmfReceivedEvent": {
        "title": "Call DTMF Received Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallDtmfReceived"
          }
        }
      },
      "CallEnqueued": {
        "title": "Call Enqueued",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.enqueued"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.enqueued"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "queue": {
                "type": "string",
                "description": "The name of the queue",
                "example": "support"
              },
              "current_position": {
                "type": "integer",
                "description": "Current position of the call in the queue.",
                "example": 7
              },
              "queue_avg_wait_time_secs": {
                "type": "integer",
                "description": "Average time call spends in the queue in seconds.",
                "example": 60
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.enqueued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "current_position": 5
          }
        }
      },
      "CallEnqueuedEvent": {
        "title": "Call Enqueued Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallEnqueued"
          }
        }
      },
      "CallEvent": {
        "title": "Call Event",
        "required": [
          "record_type",
          "call_leg_id",
          "call_session_id",
          "event_timestamp",
          "name",
          "type",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "call_event"
            ],
            "type": "string",
            "example": "call_event"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies an individual call leg.",
            "example": "308fe500-5213-11e9-ace7-02420a0f0668"
          },
          "call_session_id": {
            "type": "string",
            "description": "Uniquely identifies the call control session. A session may include multiple call leg events.",
            "example": "308fec30-5213-11e9-9d3f-02420a0f0668"
          },
          "event_timestamp": {
            "type": "string",
            "description": "Event timestamp",
            "example": "2019-03-29T11:10:19.127783Z"
          },
          "name": {
            "type": "string",
            "description": "Event name",
            "example": "call.hangup"
          },
          "type": {
            "enum": [
              "command",
              "webhook"
            ],
            "type": "string",
            "description": "Event type",
            "example": "webhook"
          },
          "metadata": {
            "type": "object",
            "description": "Event metadata, which includes raw event, and extra information based on event type"
          }
        },
        "example": {
          "record_type": "call_event",
          "call_leg_id": "308fe500-5213-11e9-ace7-02420a0f0668",
          "call_session_id": "308fec30-5213-11e9-9d3f-02420a0f0668",
          "event_timestamp": "2019-03-29T11:10:19.127783Z",
          "name": "call.hangup",
          "type": "webhook",
          "metadata": { }
        }
      },
      "CallForkStarted": {
        "title": "Call Fork Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.fork.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.fork.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_control_id": {
                "type": "string",
                "description": "Unique ID for controlling the call.",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "stream_type": {
                "enum": [
                  "decrypted"
                ],
                "type": "string",
                "description": "Type of media streamed. It can be either 'raw' or 'decrypted'.",
                "example": "decrypted"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_type": "decrypted"
          }
        }
      },
      "CallForkStartedEvent": {
        "title": "Call Fork Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStarted"
          }
        }
      },
      "CallForkStopped": {
        "title": "Call Fork Stopped",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.fork.stopped"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.fork.stopped"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_control_id": {
                "type": "string",
                "description": "Unique ID for controlling the call.",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "stream_type": {
                "enum": [
                  "decrypted"
                ],
                "type": "string",
                "description": "Type of media streamed. It can be either 'raw' or 'decrypted'.",
                "example": "decrypted"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.fork.stopped",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_type": "decrypted"
          }
        }
      },
      "CallForkStoppedEvent": {
        "title": "Call Fork Stopped Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallForkStopped"
          }
        }
      },
      "CallForwarding": {
        "title": "CallForwarding",
        "type": "object",
        "properties": {
          "call_forwarding_enabled": {
            "type": "boolean",
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "default": true,
            "example": true
          },
          "forwards_to": {
            "type": "string",
            "description": "The phone number to which inbound calls to this number are forwarded. Inbound calls will not be forwarded if this field is left blank. If set, must be a +E.164-formatted phone number."
          },
          "forwarding_type": {
            "enum": [
              "always",
              "on-failure"
            ],
            "type": "string",
            "description": "Call forwarding type. 'forwards_to' must be set for this to have an effect.",
            "example": "always"
          }
        },
        "description": "The call forwarding settings for a phone number.",
        "example": {
          "call_forwarding_enabled": true,
          "forwards_to": "+13035559123",
          "forwarding_type": "always"
        }
      },
      "CallGatherEnded": {
        "title": "Call Gather Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.gather.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.gather.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "digits": {
                "type": "string",
                "description": "The received DTMF digit or symbol.",
                "example": "5503"
              },
              "status": {
                "enum": [
                  "valid",
                  "invalid",
                  "call_hangup",
                  "cancelled",
                  "cancelled_amd",
                  "timeout"
                ],
                "type": "string",
                "description": "Reflects how command ended.",
                "example": "valid"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.gather.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "digits": "123",
            "status": "valid"
          }
        }
      },
      "CallGatherEndedEvent": {
        "title": "Call Gather Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallGatherEnded"
          }
        }
      },
      "CallHangup": {
        "title": "Call Hangup",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.hangup"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.hangup"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "custom_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomSipHeader"
                },
                "description": "Custom headers set on answer command"
              },
              "sip_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SipHeader"
                },
                "description": "User-to-User and Diversion headers from sip invite."
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "start_time": {
                "type": "string",
                "description": "ISO 8601 datetime of when the call started.",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.5219920+00:00"
              },
              "state": {
                "enum": [
                  "hangup"
                ],
                "type": "string",
                "description": "State received from a command.",
                "example": "hangup"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of tags associated to number."
              },
              "hangup_cause": {
                "enum": [
                  "call_rejected",
                  "normal_clearing",
                  "originator_cancel",
                  "timeout",
                  "time_limit",
                  "user_busy",
                  "not_found",
                  "unspecified"
                ],
                "type": "string",
                "description": "The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`).",
                "example": "call_rejected"
              },
              "hangup_source": {
                "enum": [
                  "caller",
                  "callee",
                  "unknown"
                ],
                "type": "string",
                "description": "The party who ended the call (`callee`, `caller`, `unknown`).",
                "example": "caller"
              },
              "sip_hangup_cause": {
                "type": "string",
                "description": "The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`.",
                "example": "603"
              },
              "call_quality_stats": {
                "type": "object",
                "properties": {
                  "inbound": {
                    "type": "object",
                    "properties": {
                      "jitter_max_variance": {
                        "type": "string",
                        "description": "Maximum jitter variance for inbound audio.",
                        "example": "2.74"
                      },
                      "jitter_packet_count": {
                        "type": "string",
                        "description": "Number of packets used for jitter calculation on inbound audio.",
                        "example": "0"
                      },
                      "mos": {
                        "type": "string",
                        "description": "Mean Opinion Score (MOS) for inbound audio quality.",
                        "example": "4.50"
                      },
                      "packet_count": {
                        "type": "string",
                        "description": "Total number of inbound audio packets.",
                        "example": "591"
                      },
                      "skip_packet_count": {
                        "type": "string",
                        "description": "Number of skipped inbound packets (packet loss).",
                        "example": "9"
                      }
                    },
                    "description": "Inbound call quality statistics."
                  },
                  "outbound": {
                    "type": "object",
                    "properties": {
                      "packet_count": {
                        "type": "string",
                        "description": "Total number of outbound audio packets.",
                        "example": "0"
                      },
                      "skip_packet_count": {
                        "type": "string",
                        "description": "Number of skipped outbound packets (packet loss).",
                        "example": "0"
                      }
                    },
                    "description": "Outbound call quality statistics."
                  }
                },
                "description": "Call quality statistics aggregated from the CHANNEL_HANGUP_COMPLETE event. Only includes metrics that are available (filters out nil values). Returns nil if no metrics are available.",
                "nullable": true,
                "example": {
                  "inbound": {
                    "jitter_max_variance": "2.74",
                    "jitter_packet_count": "0",
                    "mos": "4.50",
                    "packet_count": "591",
                    "skip_packet_count": "9"
                  },
                  "outbound": {
                    "packet_count": "0",
                    "skip_packet_count": "0"
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.hangup",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "start_time": "2018-02-02T22:20:27.5219920+00:00",
            "state": "hangup",
            "hangup_cause": "call_rejected",
            "hangup_source": "caller",
            "sip_hangup_cause": "603",
            "call_quality_stats": {
              "inbound": {
                "jitter_max_variance": "2.74",
                "jitter_packet_count": "0",
                "mos": "4.50",
                "packet_count": "591",
                "skip_packet_count": "9"
              },
              "outbound": {
                "packet_count": "0",
                "skip_packet_count": "0"
              }
            }
          }
        }
      },
      "CallHangupEvent": {
        "title": "Call Hangup Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallHangup"
          }
        }
      },
      "CallInitiated": {
        "title": "Call Initiated",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.initiated"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.initiated"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "connection_codecs": {
                "type": "string",
                "description": "The list of comma-separated codecs enabled for the connection.",
                "example": "G722,PCMU,PCMA"
              },
              "offered_codecs": {
                "type": "string",
                "description": "The list of comma-separated codecs offered by caller.",
                "example": "G722,PCMU,PCMA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "custom_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomSipHeader"
                },
                "description": "Custom headers from sip invite"
              },
              "sip_headers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SipHeader"
                },
                "description": "User-to-User and Diversion headers from sip invite."
              },
              "shaken_stir_attestation": {
                "type": "string",
                "description": "SHAKEN/STIR attestation level.",
                "example": "A"
              },
              "shaken_stir_validated": {
                "type": "boolean",
                "description": "Whether attestation was successfully validated or not.",
                "example": true
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "caller_id_name": {
                "type": "string",
                "description": "Caller id.",
                "example": "+35319605860"
              },
              "call_screening_result": {
                "type": "string",
                "description": "Call screening result.",
                "example": "spam_likely"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "direction": {
                "enum": [
                  "incoming",
                  "outgoing"
                ],
                "type": "string",
                "description": "Whether the call is `incoming` or `outgoing`.",
                "example": "incoming"
              },
              "state": {
                "enum": [
                  "parked",
                  "bridging"
                ],
                "type": "string",
                "description": "State received from a command.",
                "example": "parked"
              },
              "start_time": {
                "type": "string",
                "description": "ISO 8601 datetime of when the call started.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5219920+00:00"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of tags associated to number."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.initiated",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "direction": "incoming",
            "state": "parked"
          }
        }
      },
      "CallInitiatedEvent": {
        "title": "Call Initiated Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallInitiated"
          }
        }
      },
      "CallLeftQueue": {
        "title": "Call Left Queue",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.dequeued"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.dequeued"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "queue": {
                "type": "string",
                "description": "The name of the queue",
                "example": "support"
              },
              "queue_position": {
                "type": "integer",
                "description": "Last position of the call in the queue.",
                "example": 7
              },
              "reason": {
                "enum": [
                  "bridged",
                  "bridging-in-process",
                  "hangup",
                  "leave",
                  "timeout"
                ],
                "type": "string",
                "description": "The reason for leaving the queue",
                "example": "bridged"
              },
              "wait_time_secs": {
                "type": "integer",
                "description": "Time call spent in the queue in seconds.",
                "example": 60
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.dequeued",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "queue": "support",
            "queue_position": 3,
            "reason": "leave"
          }
        }
      },
      "CallLeftQueueEvent": {
        "title": "Call Left Queue Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallLeftQueue"
          }
        }
      },
      "CallMachineDetectionEnded": {
        "title": "Call Machine Detection Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.machine.detection.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.machine.detection.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "result": {
                "enum": [
                  "human",
                  "machine",
                  "not_sure"
                ],
                "type": "string",
                "description": "Answering machine detection result.",
                "example": "machine"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "human"
          }
        }
      },
      "CallMachineDetectionEndedEvent": {
        "title": "Call Machine Detection Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineDetectionEnded"
          }
        }
      },
      "CallMachineGreetingEnded": {
        "title": "Call Machine Greeting Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.machine.greeting.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.machine.greeting.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "result": {
                "enum": [
                  "beep_detected",
                  "ended",
                  "not_sure"
                ],
                "type": "string",
                "description": "Answering machine greeting ended result.",
                "example": "ended"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "ended"
          }
        }
      },
      "CallMachineGreetingEndedEvent": {
        "title": "Call Machine Greeting Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachineGreetingEnded"
          }
        }
      },
      "CallMachinePremiumDetectionEnded": {
        "title": "Call Machine Premium Detection Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.machine.premium.detection.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.machine.premium.detection.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "result": {
                "enum": [
                  "human_residence",
                  "human_business",
                  "machine",
                  "silence",
                  "fax_detected",
                  "not_sure"
                ],
                "type": "string",
                "description": "Premium Answering Machine Detection result.",
                "example": "machine"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.premium.detection.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "machine"
          }
        }
      },
      "CallMachinePremiumDetectionEndedEvent": {
        "title": "Call Machine Premium Detection Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachinePremiumDetectionEnded"
          }
        }
      },
      "CallMachinePremiumGreetingEnded": {
        "title": "Call Machine Premium Greeting Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.machine.premium.greeting.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.machine.premium.greeting.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              },
              "result": {
                "enum": [
                  "beep_detected",
                  "no_beep_detected"
                ],
                "type": "string",
                "description": "Premium Answering Machine Greeting Ended result.",
                "example": "beep_detected"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.machine.premium.greeting.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "from": "+35319605860",
            "to": "+35319605860",
            "result": "beep_detected"
          }
        }
      },
      "CallMachinePremiumGreetingEndedEvent": {
        "title": "Call Machine Premium Greeting Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallMachinePremiumGreetingEnded"
          }
        }
      },
      "CallPlaybackEnded": {
        "title": "Call Playback Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.playback.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.playback.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "overlay": {
                "type": "boolean",
                "description": "Whether the stopped audio was in overlay mode or not.",
                "example": false
              },
              "status": {
                "enum": [
                  "file_not_found",
                  "call_hangup",
                  "unknown",
                  "cancelled",
                  "cancelled_amd",
                  "completed",
                  "failed"
                ],
                "type": "string",
                "description": "Reflects how command ended.",
                "example": "completed"
              },
              "status_detail": {
                "type": "string",
                "description": "Provides details in case of failure.",
                "example": "Received curl error 22 HTTP error code 404 trying to fetch http://mediaurl.com."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_name": "my_media_uploaded_to_media_storage_api",
            "overlay": false,
            "status": "completed"
          }
        }
      },
      "CallPlaybackEndedEvent": {
        "title": "Call Playback Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackEnded"
          }
        }
      },
      "CallPlaybackStarted": {
        "title": "Call Playback Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.playback.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.playback.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "overlay": {
                "type": "boolean",
                "description": "Whether the audio is going to be played in overlay mode or not.",
                "example": false
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "media_url": "http://example.com/audio.wav",
            "overlay": false
          }
        }
      },
      "CallPlaybackStartedEvent": {
        "title": "Call Playback Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallPlaybackStarted"
          }
        }
      },
      "CallRecording": {
        "title": "CallRecording",
        "type": "object",
        "properties": {
          "inbound_call_recording_enabled": {
            "type": "boolean",
            "description": "When enabled, any inbound call to this number will be recorded.",
            "default": false
          },
          "inbound_call_recording_format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "The audio file format for calls being recorded.",
            "default": "wav"
          },
          "inbound_call_recording_channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
            "default": "single"
          }
        },
        "description": "The call recording settings for a phone number.",
        "example": {
          "inbound_call_recording_enabled": true,
          "inbound_call_recording_format": "wav",
          "inbound_call_recording_channels": "single"
        }
      },
      "CallRecordingSaved": {
        "title": "Call Recording Saved",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.recording.saved"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.recording.saved"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "recording_started_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when recording started.",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.5219920+00:00"
              },
              "recording_ended_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when recording ended.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5219920+00:00"
              },
              "channels": {
                "enum": [
                  "single",
                  "dual"
                ],
                "type": "string",
                "description": "Whether recording was recorded in `single` or `dual` channel.",
                "example": "single"
              },
              "recording_urls": {
                "type": "object",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "description": "Recording URL in requested `mp3` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3"
                  },
                  "wav": {
                    "type": "string",
                    "description": "Recording URL in requested `wav` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.wav"
                  }
                },
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings."
              },
              "public_recording_urls": {
                "type": "object",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "description": "Recording URL in requested `mp3` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3"
                  },
                  "wav": {
                    "type": "string",
                    "description": "Recording URL in requested `wav` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.wav"
                  }
                },
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "recording_started_at": "2018-02-02T22:20:27.5219920+00:00",
            "recording_ended_at": "2018-02-02T22:20:27.5219920+00:00",
            "channels": "single",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        }
      },
      "CallRecordingSavedEvent": {
        "title": "Call Recording Saved Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallRecordingSaved"
          }
        }
      },
      "CallReferCompleted": {
        "title": "CallReferCompleted",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.refer.completed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.refer.completed"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Unique ID for controlling the call.",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "sip_notify_response": {
                "type": "integer",
                "description": "SIP NOTIFY event status for tracking the REFER attempt.",
                "example": 200
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.completed",
          "id": "4ce4366d-8d87-44be-a00b-942154e9c5f5",
          "occurred_at": "2020-03-30T13:29:44.6500000+00:00",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 200,
            "to": "+13129457420"
          }
        }
      },
      "CallReferCompletedEvent": {
        "title": "Call Refer Completed Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferCompleted"
          }
        }
      },
      "CallReferFailed": {
        "title": "CallReferFailed",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.refer.failed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.refer.failed"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Unique ID for controlling the call.",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "sip_notify_response": {
                "type": "integer",
                "description": "SIP NOTIFY event status for tracking the REFER attempt.",
                "example": 603
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.failed",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.1300130+00:00",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 603,
            "to": "+13129457420"
          }
        }
      },
      "CallReferFailedEvent": {
        "title": "Call Refer Failed Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferFailed"
          }
        }
      },
      "CallReferStarted": {
        "title": "Call Refer Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.refer.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.refer.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Unique ID for controlling the call.",
                "example": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "from": {
                "type": "string",
                "description": "Number or SIP URI placing the call.",
                "example": "+35319605860"
              },
              "sip_notify_response": {
                "type": "integer",
                "description": "SIP NOTIFY event status for tracking the REFER attempt.",
                "example": 100
              },
              "to": {
                "type": "string",
                "description": "Destination number or SIP URI of the call.",
                "example": "+13129457420"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.refer.started",
          "id": "fbeb70e0-54eb-4e26-8d19-56b43e66f754",
          "occurred_at": "2020-03-30T13:29:42.1300130+00:00",
          "payload": {
            "call_control_id": "v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA",
            "call_leg_id": "817f7de8-728a-11ea-9ce6-02420a0f8969",
            "call_session_id": "817f8c2a-728a-11ea-9cbe-02420a0f8969",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "connection_id": "1289082222292239760",
            "from": "+35319605860",
            "sip_notify_response": 100,
            "to": "+13129457420"
          }
        }
      },
      "CallReferStartedEvent": {
        "title": "Call Refer Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallReferStarted"
          }
        }
      },
      "CallRequest": {
        "title": "Dial Request",
        "required": [
          "connection_id",
          "to",
          "from"
        ],
        "type": "object",
        "properties": {
          "to": {
            "description": "The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of strings"
          },
          "from": {
            "type": "string",
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format.",
            "example": "+18005550101"
          },
          "from_display_name": {
            "type": "string",
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "example": "Company Name"
          },
          "connection_id": {
            "type": "string",
            "description": "The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination."
          },
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "preferred_codecs": {
            "type": "string",
            "description": "The list of comma-separated codecs in a preferred order for the forked media to be received.",
            "example": "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 600 seconds.",
            "format": "int32",
            "default": 30,
            "example": 60
          },
          "time_limit_secs": {
            "maximum": 14400,
            "minimum": 30,
            "type": "integer",
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "format": "int32",
            "default": 14400,
            "example": 600
          },
          "answering_machine_detection": {
            "enum": [
              "premium",
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ],
            "type": "string",
            "description": "Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.premium.detection.ended` webhook with one of the following results: `human_residence`, `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is detected, you will receive another `call.machine.greeting.ended` webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive `call.machine.greeting.ended` if a beep is detected.",
            "default": "disabled"
          },
          "answering_machine_detection_config": {
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "type": "integer",
                "description": "Maximum timeout threshold for overall detection.",
                "format": "int32",
                "default": 3500,
                "example": 5000
              },
              "after_greeting_silence_millis": {
                "type": "integer",
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "format": "int32",
                "default": 800,
                "example": 1000
              },
              "between_words_silence_millis": {
                "type": "integer",
                "description": "Maximum threshold for silence between words.",
                "format": "int32",
                "default": 50,
                "example": 100
              },
              "greeting_duration_millis": {
                "type": "integer",
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "format": "int32",
                "default": 3500,
                "example": 1500
              },
              "initial_silence_millis": {
                "type": "integer",
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "format": "int32",
                "default": 3500,
                "example": 1800
              },
              "maximum_number_of_words": {
                "type": "integer",
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "format": "int32",
                "default": 5,
                "example": 3
              },
              "maximum_word_length_millis": {
                "type": "integer",
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "format": "int32",
                "default": 3500,
                "example": 2000
              },
              "silence_threshold": {
                "type": "integer",
                "description": "Minimum noise threshold for any analysis.",
                "format": "int32",
                "default": 256,
                "example": 512
              },
              "greeting_total_analysis_time_millis": {
                "type": "integer",
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "format": "int32",
                "default": 5000,
                "example": 7500
              },
              "greeting_silence_duration_millis": {
                "type": "integer",
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "format": "int32",
                "default": 1500,
                "example": 2000
              }
            },
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance."
          },
          "conference_config": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Conference ID to be joined",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "conference_name": {
                "type": "string",
                "description": "Conference name to be joined",
                "example": "telnyx-conference"
              },
              "early_media": {
                "type": "boolean",
                "description": "Controls the moment when dialled call is joined into conference. If set to `true` user will be joined as soon as media is available (ringback). If `false` user will be joined when call is answered. Defaults to `true`",
                "default": true,
                "example": false
              },
              "end_conference_on_exit": {
                "type": "boolean",
                "description": "Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".",
                "example": true
              },
              "soft_end_conference_on_exit": {
                "type": "boolean",
                "description": "Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".",
                "example": true
              },
              "hold": {
                "type": "boolean",
                "description": "Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".",
                "example": true
              },
              "hold_audio_url": {
                "type": "string",
                "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".",
                "example": "http://example.com/message.wav"
              },
              "hold_media_name": {
                "type": "string",
                "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "mute": {
                "type": "boolean",
                "description": "Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".",
                "example": true
              },
              "start_conference_on_enter": {
                "type": "boolean",
                "description": "Whether the conference should be started after the participant joins the conference. Defaults to \"false\".",
                "example": true
              },
              "start_conference_on_create": {
                "type": "boolean",
                "description": "Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".",
                "example": false
              },
              "supervisor_role": {
                "enum": [
                  "barge",
                  "monitor",
                  "none",
                  "whisper"
                ],
                "type": "string",
                "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
                "example": "whisper"
              },
              "whisper_call_control_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only."
              },
              "beep_enabled": {
                "enum": [
                  "always",
                  "never",
                  "on_enter",
                  "on_exit"
                ],
                "type": "string",
                "description": "Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.",
                "example": "on_exit"
              }
            },
            "description": "Optional configuration parameters to dial new participant into a conference."
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            },
            "description": "Custom headers to be added to the SIP INVITE."
          },
          "billing_group_id": {
            "type": "string",
            "description": "Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore others Dial commands with the same `command_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "link_to": {
            "type": "string",
            "description": "Use another call's control id for sharing the same call session id",
            "example": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg=="
          },
          "media_encryption": {
            "enum": [
              "disabled",
              "SRTP",
              "DTLS"
            ],
            "type": "string",
            "description": "Defines whether media should be encrypted on the call.",
            "default": "disabled"
          },
          "sip_auth_username": {
            "type": "string",
            "description": "SIP Authentication username used for SIP challenges."
          },
          "sip_auth_password": {
            "type": "string",
            "description": "SIP Authentication password used for SIP challenges."
          },
          "sip_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            },
            "description": "SIP headers to be added to the SIP INVITE request. Currently only User-to-User header is supported."
          },
          "sip_transport_protocol": {
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "type": "string",
            "description": "Defines SIP transport protocol to be used on the call.",
            "default": "UDP"
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "stream_url": {
            "type": "string",
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "type": "string",
            "description": "Specifies which track should be streamed.",
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "stream_codec": {
            "$ref": "#/components/schemas/StreamCodec"
          },
          "stream_bidirectional_mode": {
            "$ref": "#/components/schemas/StreamBidirectionalMode"
          },
          "stream_bidirectional_codec": {
            "$ref": "#/components/schemas/StreamBidirectionalCodec"
          },
          "stream_bidirectional_target_legs": {
            "$ref": "#/components/schemas/StreamBidirectionalTargetLegs"
          },
          "stream_bidirectional_sampling_rate": {
            "$ref": "#/components/schemas/StreamBidirectionalSamplingRate"
          },
          "stream_establish_before_call_originate": {
            "type": "boolean",
            "description": "Establish websocket connection before dialing the destination. This is useful for cases where the websocket connection takes a long time to establish.",
            "default": false,
            "example": true
          },
          "send_silence_when_idle": {
            "type": "boolean",
            "description": "Generate silence RTP packets when no transmission available.",
            "default": false,
            "example": true
          },
          "webhook_url": {
            "type": "string",
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "enum": [
              "POST",
              "GET"
            ],
            "type": "string",
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "example": "GET"
          },
          "record": {
            "enum": [
              "record-from-answer"
            ],
            "type": "string",
            "description": "Start recording automatically after an event. Disabled by default.",
            "example": "record-from-answer"
          },
          "record_channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "Defines which channel should be recorded ('single' or 'dual') when `record` is specified.",
            "default": "dual",
            "example": "single"
          },
          "record_format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "Defines the format of the recording ('wav' or 'mp3') when `record` is specified.",
            "default": "mp3",
            "example": "wav"
          },
          "record_max_length": {
            "type": "integer",
            "description": "Defines the maximum length for the recording in seconds when `record` is specified. The minimum value is 0. The maximum value is 43200. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 1000
          },
          "record_timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected when `record` is specified. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite).",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "record_track": {
            "enum": [
              "both",
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).",
            "default": "both",
            "example": "outbound"
          },
          "record_trim": {
            "enum": [
              "trim-silence"
            ],
            "type": "string",
            "description": "When set to `trim-silence`, silence will be removed from the beginning and end of the recording.",
            "example": "trim-silence"
          },
          "record_custom_file_name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.",
            "example": "my_recording_file_name"
          },
          "supervise_call_control_id": {
            "type": "string",
            "description": "The call leg which will be supervised by the new call.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "supervisor_role": {
            "enum": [
              "barge",
              "whisper",
              "monitor"
            ],
            "type": "string",
            "description": "The role of the supervisor call. 'barge' means that supervisor call hears and is being heard by both ends of the call (caller & callee). 'whisper' means that only supervised_call_control_id hears supervisor but supervisor can hear everything. 'monitor' means that nobody can hear supervisor call, but supervisor can hear everything on the call.",
            "default": "barge"
          },
          "enable_dialogflow": {
            "type": "boolean",
            "description": "Enables Dialogflow for the current call. The default value is false.",
            "default": false,
            "example": true
          },
          "dialogflow_config": {
            "$ref": "#/components/schemas/DialogflowConfig"
          },
          "transcription": {
            "type": "boolean",
            "description": "Enable transcription upon call answer. The default value is false.",
            "default": false,
            "example": true
          },
          "transcription_config": {
            "$ref": "#/components/schemas/TranscriptionStartRequest"
          }
        },
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "conference_config": {
            "conference_name": "telnyx-conference",
            "start_conference_on_enter": true
          },
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "link_to": "ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg==",
          "media_encryption": "SRTP",
          "sip_auth_username": "username",
          "sip_auth_password": "password",
          "sip_headers": [
            {
              "name": "User-to-User",
              "value": "12345"
            }
          ],
          "sip_transport_protocol": "TLS",
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks",
          "send_silence_when_idle": true,
          "enable_dialogflow": false,
          "dialogflow_config": {
            "analyze_sentiment": false,
            "partial_automated_agent_reply": false
          }
        }
      },
      "CallResource": {
        "title": "Call resource",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "answered_by": {
            "enum": [
              "human",
              "machine",
              "not_sure"
            ],
            "type": "string",
            "description": "The value of the answering machine detection result, if this feature was enabled for the call.",
            "example": "human"
          },
          "caller_name": {
            "type": "string",
            "description": "Caller ID, if present.",
            "example": "CALLER"
          },
          "date_created": {
            "type": "string",
            "description": "The timestamp of when the resource was created.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "date_updated": {
            "type": "string",
            "description": "The timestamp of when the resource was last updated.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "direction": {
            "enum": [
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "The direction of this call.",
            "example": "inbound"
          },
          "duration": {
            "type": "string",
            "description": "The duration of this call, given in seconds.",
            "example": "12"
          },
          "end_time": {
            "type": "string",
            "description": "The end time of this call.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "from": {
            "type": "string",
            "description": "The phone number or SIP address that made this call.",
            "example": "+13123456789"
          },
          "from_formatted": {
            "type": "string",
            "description": "The from number formatted for display.",
            "example": "(312) 345-6789"
          },
          "price": {
            "type": "string",
            "description": "The price of this call, the currency is specified in the price_unit field. Only populated when the call cost feature is enabled for the account.",
            "example": "0.10"
          },
          "price_unit": {
            "type": "string",
            "description": "The unit in which the price is given.",
            "example": "USD"
          },
          "sid": {
            "type": "string",
            "description": "The identifier of this call.",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "start_time": {
            "type": "string",
            "description": "The start time of this call.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "status": {
            "enum": [
              "ringing",
              "in-progress",
              "canceled",
              "completed",
              "failed",
              "busy",
              "no-answer"
            ],
            "type": "string",
            "description": "The status of this call.",
            "example": "completed'"
          },
          "to": {
            "type": "string",
            "description": "The phone number or SIP address that received this call.",
            "example": "+13987654321"
          },
          "to_formatted": {
            "type": "string",
            "description": "The to number formatted for display.",
            "example": "(398) 765-4321"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this call.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls/v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA.json"
          }
        },
        "example": {
          "account_sid": "61bf923e-5e4d-4595-a110-56190ea18a1b",
          "answered_by": null,
          "caller_name": "+13122010094",
          "date_created": "Thu, 15 Jun 2023 09:56:45 +0000",
          "date_updated": "Thu, 15 Jun 2023 09:56:56 +0000",
          "direction": "inbound",
          "duration": "11",
          "end_time": "Thu, 15 Jun 2023 09:56:56 +0000",
          "from": "+13123456789",
          "from_formatted": "(312) 345-6789",
          "price": null,
          "price_unit": null,
          "sid": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA",
          "start_time": "Thu, 15 Jun 2023 09:56:45 +0000",
          "status": "completed",
          "to": "+13987654321",
          "to_formatted": "(398) 765-4321",
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls/v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA.json"
        }
      },
      "CallResourceIndex": {
        "title": "Multiple call resources",
        "type": "object",
        "properties": {
          "calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallResource"
            }
          },
          "end": {
            "type": "integer",
            "description": "The number of the last element on the page, zero-indexed.",
            "example": 19
          },
          "first_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1",
            "example": "accepted"
          },
          "next_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
            "example": "accepted"
          },
          "page": {
            "type": "integer",
            "description": "Current page number, zero-indexed.",
            "example": 0
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items on the page",
            "example": 20
          },
          "start": {
            "type": "integer",
            "description": "The number of the first element on the page, zero-indexed.",
            "example": 0
          },
          "uri": {
            "type": "string",
            "description": "The URI of the current page.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1"
          }
        },
        "example": {
          "calls": [ ],
          "end": 0,
          "first_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1",
          "next_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
          "page": 0,
          "page_size": 1,
          "start": 0,
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1"
        }
      },
      "CallSiprecFailed": {
        "title": "Siprec Failed",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "siprec.failed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "siprec.failed"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.6132950+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "failure_cause": {
                "type": "string",
                "description": "Q850 reason why siprec session failed.",
                "example": "no_answer"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "siprec.failed",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.6132950+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "failure_cause": "no_answer"
          }
        }
      },
      "CallSiprecFailedEvent": {
        "title": "Siprec Failed Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSiprecFailed"
          }
        }
      },
      "CallSiprecStarted": {
        "title": "Siprec Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "siprec.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "siprec.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:06:32.0594360+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "siprec.started",
          "id": "7d743d69-f7e8-4761-b7d4-8cacf9d3c031",
          "occurred_at": "2021-12-15T14:06:32.0594360+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "CallSiprecStartedEvent": {
        "title": "Siprec Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSiprecStarted"
          }
        }
      },
      "CallSiprecStopped": {
        "title": "Siprec Stopped",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "siprec.stopped"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "siprec.stopped"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.6132950+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "hangup_cause": {
                "type": "string",
                "description": "Q850 reason why the SIPREC session was stopped.",
                "example": "normal_clearing"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "siprec.stopped",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.6132950+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "hangup_cause": "normal_clearing"
          }
        }
      },
      "CallSiprecStoppedEvent": {
        "title": "Siprec Stopped Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSiprecStopped"
          }
        }
      },
      "CallSpeakEnded": {
        "title": "Call Speak Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.speak.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.speak.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "status": {
                "enum": [
                  "completed",
                  "call_hangup",
                  "cancelled_amd"
                ],
                "type": "string",
                "description": "Reflects how the command ended.",
                "example": "completed"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "status": "completed"
          }
        }
      },
      "CallSpeakEndedEvent": {
        "title": "Call Speak Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakEnded"
          }
        }
      },
      "CallSpeakStarted": {
        "title": "Call Speak Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.speak.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.speak.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "CallSpeakStartedEvent": {
        "title": "Call Speak Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallSpeakStarted"
          }
        }
      },
      "CallStreamingFailed": {
        "title": "Streaming Failed",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "streaming.failed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "streaming.failed"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.6132950+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "failure_reason": {
                "type": "string",
                "description": "A short description explaning why the media streaming failed.",
                "example": "connection_failed"
              },
              "stream_id": {
                "type": "string",
                "description": "Identifies the streaming.",
                "format": "uuid",
                "example": "1edb94f9-7ef0-4150-b502-e0ebadfd9491"
              },
              "stream_params": {
                "type": "object",
                "properties": {
                  "stream_url": {
                    "type": "string",
                    "description": "The destination WebSocket address where the stream is going to be delivered.",
                    "example": "wss://www.example.com/websocket"
                  },
                  "track": {
                    "enum": [
                      "inbound_track",
                      "outbound_track",
                      "both_tracks"
                    ],
                    "type": "string",
                    "description": "Specifies which track should be streamed.",
                    "default": "inbound_track",
                    "example": "inbound_track"
                  }
                },
                "description": "Streaming parameters as they were originally given to the Call Control API."
              },
              "stream_type": {
                "enum": [
                  "websocket",
                  "dialogflow"
                ],
                "type": "string",
                "description": "The type of stream connection the stream is performing.",
                "example": "websocket"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.failed",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.6132950+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "failure_reason": "connection_failed",
            "stream_id": "1edb94f9-7ef0-4150-b502-e0ebadfd9491",
            "stream_params": {
              "stream_url": "wss://www.example.com/websocket",
              "stream_track": "inbound_track"
            },
            "stream_type": "websocket"
          }
        }
      },
      "CallStreamingFailedEvent": {
        "title": "Streaming Failed Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingFailed"
          }
        }
      },
      "CallStreamingStarted": {
        "title": "Streaming Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "streaming.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "streaming.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:06:32.0594360+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "stream_url": {
                "type": "string",
                "description": "Destination WebSocket address where the stream is going to be delivered.",
                "example": "wss://www.example.com/websocket"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.started",
          "id": "7d743d69-f7e8-4761-b7d4-8cacf9d3c031",
          "occurred_at": "2021-12-15T14:06:32.0594360+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_url": "wss://www.example.com/websocket"
          }
        }
      },
      "CallStreamingStartedEvent": {
        "title": "Streaming Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingStarted"
          }
        }
      },
      "CallStreamingStopped": {
        "title": "Streaming Stopped",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "streaming.stopped"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "streaming.stopped"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "25dc3731-e51e-4927-a50d-a61cc25984b1"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2021-12-15T14:11:24.6132950+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "31f19208-5db0-11ec-9ea7-02420a0d3a69"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "stream_url": {
                "type": "string",
                "description": "Destination WebSocket address where the stream is going to be delivered.",
                "example": "wss://www.example.com/websocket"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "streaming.stopped",
          "id": "25dc3731-e51e-4927-a50d-a61cc25984b1",
          "occurred_at": "2021-12-15T14:11:24.6132950+00:00",
          "payload": {
            "call_control_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "call_session_id": "31f19208-5db0-11ec-9ea7-02420a0d3a69",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "stream_url": "wss://www.example.com/websocket"
          }
        }
      },
      "CallStreamingStoppedEvent": {
        "title": "Streaming Stopped Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CallStreamingStopped"
          }
        }
      },
      "CallWithRecordingId": {
        "title": "Call With Recording ID",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "call"
            ],
            "type": "string",
            "example": "call"
          },
          "call_session_id": {
            "type": "string",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "is_alive": {
            "type": "boolean",
            "description": "Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).",
            "example": true
          },
          "client_state": {
            "type": "string",
            "description": "State received from a command.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "call_duration": {
            "type": "integer",
            "description": "Indicates the duration of the call in seconds",
            "example": 50
          },
          "recording_id": {
            "type": "string",
            "description": "The ID of the recording. Only present when the record parameter is set to record-from-answer.",
            "format": "uuid",
            "example": "d7e9c1d4-8b2a-4b8f-b3a7-9a671c9e9b0a"
          },
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the call started",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_time": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the call ended. Only present when the call is not alive",
            "example": "2019-01-23T18:11:52.574Z"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "is_alive": false,
          "call_duration": 50,
          "record_type": "call",
          "recording_id": "d7e9c1d4-8b2a-4b8f-b3a7-9a671c9e9b0a",
          "start_time": "2019-01-23T18:10:02.574Z",
          "end_time": "2019-01-23T18:11:52.574Z"
        }
      },
      "CallbackWebhookMeta": {
        "title": "CallbackWebhookMeta",
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "The number of times the callback webhook has been attempted.",
            "example": 1
          },
          "delivered_to": {
            "type": "string",
            "description": "The URL that the callback webhook was delivered to.",
            "example": "https://example.com/webhook"
          }
        }
      },
      "CallerName": {
        "title": "CallerName",
        "type": "object",
        "properties": {
          "caller_name": {
            "type": "string",
            "description": "The name of the requested phone number's owner as per the CNAM database",
            "example": "TELNYX LLC"
          },
          "error_code": {
            "type": "string",
            "description": "A caller-name lookup specific error code, expressed as a stringified 5-digit integer",
            "example": "10001"
          }
        }
      },
      "CampaignCost": {
        "title": "CampaignCost",
        "required": [
          "campaignUsecase",
          "monthlyCost",
          "upFrontCost",
          "description"
        ],
        "type": "object",
        "properties": {
          "campaignUsecase": {
            "title": "Campaignusecase",
            "type": "string"
          },
          "monthlyCost": {
            "title": "Monthlycost",
            "type": "string"
          },
          "upFrontCost": {
            "title": "Upfrontcost",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "CampaignDeletionResponse": {
        "title": "CampaignDeletionResponse",
        "required": [
          "time"
        ],
        "type": "object",
        "properties": {
          "time": {
            "title": "Time",
            "type": "number"
          },
          "record_type": {
            "title": "Record Type",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "CampaignRecordSet_CSP": {
        "title": "CampaignRecordSet_CSP",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TelnyxCampaignWithAssignedCount_CSP"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "totalRecords": {
            "title": "Totalrecords",
            "type": "integer"
          }
        }
      },
      "CampaignRequest": {
        "title": "CampaignRequest",
        "required": [
          "brandId",
          "description",
          "usecase"
        ],
        "type": "object",
        "properties": {
          "ageGated": {
            "title": "Agegated",
            "type": "boolean",
            "description": "Age gated message content in campaign."
          },
          "autoRenewal": {
            "title": "Autorenewal",
            "type": "boolean",
            "description": "Campaign subscription auto-renewal option. If set to true, then campaign will automatically renewal at end of billing cycle."
          },
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Alphanumeric identifier of the brand associated with this campaign."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "directLending": {
            "title": "Directlending",
            "type": "boolean",
            "description": "Direct lending or loan arrangement"
          },
          "embeddedLink": {
            "title": "Embeddedlink",
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?"
          },
          "embeddedPhone": {
            "title": "Embeddedphone",
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?"
          },
          "helpKeywords": {
            "title": "Helpkeywords",
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "helpMessage": {
            "title": "Helpmessage",
            "type": "string",
            "description": "Help message of the campaign."
          },
          "messageFlow": {
            "title": "Messageflow",
            "type": "string",
            "description": "Message flow description."
          },
          "mnoIds": {
            "title": "Mnoids",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Submit campaign to given list of MNOs by MNO's network ID. Default is all MNOs if no value provided."
          },
          "numberPool": {
            "title": "Numberpool",
            "type": "boolean",
            "description": "Does campaign utilize pool of phone numbers?"
          },
          "optinKeywords": {
            "title": "Optinkeywords",
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "title": "Optinmessage",
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutKeywords": {
            "title": "Optoutkeywords",
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "optoutMessage": {
            "title": "Optoutmessage",
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "referenceId": {
            "title": "Referenceid",
            "type": "string",
            "description": "Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations."
          },
          "resellerId": {
            "title": "Resellerid",
            "type": "string",
            "description": "Alphanumeric identifier of the reseller that you want to associate with this campaign."
          },
          "sample1": {
            "title": "Sample1",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "title": "Sample2",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "title": "Sample3",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "title": "Sample4",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "title": "Sample5",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "subUsecases": {
            "title": "Subusecases",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases"
          },
          "subscriberHelp": {
            "title": "Subscriberhelp",
            "type": "boolean",
            "description": "Does campaign responds to help keyword(s)?"
          },
          "subscriberOptin": {
            "title": "Subscriberoptin",
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?"
          },
          "subscriberOptout": {
            "title": "Subscriberoptout",
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?"
          },
          "tag": {
            "title": "Tag",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to be set on the Campaign."
          },
          "termsAndConditions": {
            "title": "Termsandconditions",
            "type": "boolean",
            "description": "Is terms and conditions accepted?"
          },
          "privacyPolicyLink": {
            "title": "PrivacyPolicyLink",
            "type": "string",
            "description": "Link to the campaign's privacy policy."
          },
          "termsAndConditionsLink": {
            "title": "TermsAndConditionsLink",
            "type": "string",
            "description": "Link to the campaign's terms and conditions."
          },
          "embeddedLinkSample": {
            "title": "EmbeddedLinkSample",
            "type": "string",
            "description": "Sample of an embedded link that will be sent to subscribers."
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent.",
            "example": "https://webhook.com/67ea78a8-9f32-4d04-b62d-f9502e8e5f93"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Failover webhook to which campaign status updates are sent.",
            "example": "https://webhook.com/93711262-23e5-4048-a966-c0b2a16d5963"
          }
        },
        "description": "CampaignRequest object describes the campaign to be submitted via '/campaignBuilder/brand/{brandId}/usecase/{usecase}' operation. It is also used in operations for retrieving status of campaign request and for updating a pending request."
      },
      "CampaignSharingChain": {
        "title": "CampaignSharingChain",
        "type": "object",
        "properties": {
          "sharedByMe": {
            "$ref": "#/components/schemas/CampaignSharingStatus"
          },
          "sharedWithMe": {
            "$ref": "#/components/schemas/CampaignSharingStatus"
          }
        }
      },
      "CampaignSharingStatus": {
        "title": "CampaignSharingStatus",
        "type": "object",
        "properties": {
          "downstreamCnpId": {
            "title": "Downstreamcnpid",
            "type": "string"
          },
          "sharedDate": {
            "title": "Shareddate",
            "type": "string"
          },
          "sharingStatus": {
            "title": "Sharingstatus",
            "type": "string"
          },
          "statusDate": {
            "title": "Statusdate",
            "type": "string"
          },
          "upstreamCnpId": {
            "title": "Upstreamcnpid",
            "type": "string"
          }
        }
      },
      "CampaignStatusUpdateEvent": {
        "title": "Campaign Status Update Event",
        "type": "object",
        "properties": {
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Brand ID associated with the campaign.",
            "example": "d88dd2aa-1bb9-4ef0-9ec8-1752b80316a5"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "The ID of the campaign.",
            "example": "4b300178-131c-d902-d54e-72d90ba1620j"
          },
          "createDate": {
            "title": "CreateDate",
            "type": "string",
            "description": "Unix timestamp when campaign was created."
          },
          "cspId": {
            "title": "Cspid",
            "type": "string",
            "description": "Alphanumeric identifier of the CSP associated with this campaign."
          },
          "isTMobileRegistered": {
            "title": "IsTMobileRegistered",
            "type": "boolean",
            "description": "Indicates whether the campaign is registered with T-Mobile."
          }
        }
      },
      "Carrier": {
        "title": "Carrier",
        "type": "object",
        "properties": {
          "mobile_country_code": {
            "type": "string",
            "description": "Region code that matches the specific country calling code if the requested phone number type is mobile",
            "example": "US"
          },
          "mobile_network_code": {
            "type": "string",
            "description": "National destination code (NDC), with a 0 prefix, if an NDC is found and the requested phone number type is mobile",
            "example": "0866"
          },
          "name": {
            "type": "string",
            "description": "SPID (Service Provider ID) name, if the requested phone number has been ported; otherwise, the name of carrier who owns the phone number block",
            "example": "Telnyx/4"
          },
          "type": {
            "enum": [
              "fixed line",
              "mobile",
              "voip",
              "fixed line or mobile",
              "toll free",
              "premium rate",
              "shared cost",
              "personal number",
              "pager",
              "uan",
              "voicemail",
              "unknown"
            ],
            "type": "string",
            "description": "A phone number type that identifies the type of service associated with the requested phone number",
            "example": "voip"
          },
          "error_code": {
            "type": "string",
            "description": "Unused",
            "example": null
          },
          "normalized_carrier": {
            "type": "string",
            "description": "If known to Telnyx and applicable, the primary network carrier.",
            "example": "AT&T"
          }
        }
      },
      "CdrGetSyncUsageReportResponse": {
        "title": "CdrGetSyncUsageReportResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CdrUsageReportResponse"
          }
        }
      },
      "CdrUsageReportResponse": {
        "title": "CdrUsageReportResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource",
            "format": "uuid"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": "[1234567890L, 9876543210L]"
          },
          "aggregation_type": {
            "enum": [
              "NO_AGGREGATION",
              "CONNECTION",
              "TAG",
              "BILLING_GROUP"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ],
            "type": "string"
          },
          "report_url": {
            "type": "string",
            "example": "http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv"
          },
          "result": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "record_type": {
            "type": "string",
            "example": "cdr_usage_report"
          },
          "product_breakdown": {
            "enum": [
              "NO_BREAKDOWN",
              "DID_VS_TOLL_FREE",
              "COUNTRY",
              "DID_VS_TOLL_FREE_PER_COUNTRY"
            ],
            "type": "string"
          }
        }
      },
      "ChatCompletionRequest": {
        "title": "ChatCompletionRequest",
        "required": [
          "messages"
        ],
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionSystemMessageParam"
            },
            "description": "A list of the previous chat messages for context."
          },
          "model": {
            "type": "string",
            "description": "The language model to chat with. If you are optimizing for speed + price, try `meta-llama/Meta-Llama-3.1-8B-Instruct`. For quality, try `meta-llama/Meta-Llama-3.1-70B-Instruct`. Or explore our [LLM Library](https://telnyx.com/products/llm-library).",
            "default": "meta-llama/Meta-Llama-3.1-8B-Instruct"
          },
          "api_key_ref": {
            "type": "string",
            "description": "If you are using an external inference provider like xAI or OpenAI, this field allows you to pass along a reference to your API key. After creating an [integration secret](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for you API key, pass the secret's `identifier` in this field."
          },
          "stream": {
            "type": "boolean",
            "description": "Whether or not to stream data-only server-sent events as they become available.",
            "default": false
          },
          "temperature": {
            "type": "number",
            "description": "Adjusts the \"creativity\" of the model. Lower values make the model more deterministic and repetitive, while higher values make the model more random and creative.",
            "default": 0.1
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of completion tokens the model should generate."
          },
          "tools": {
            "type": "array",
            "items": { },
            "description": "The `function` tool type follows the same schema as the [OpenAI Chat Completions API](https://platform.openai.com/docs/api-reference/chat). The `retrieval` tool type is unique to Telnyx. You may pass a list of [embedded storage buckets](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding) for retrieval-augmented generation."
          },
          "tool_choice": {
            "enum": [
              "none",
              "auto",
              "required"
            ],
            "type": "string"
          },
          "response_format": {
            "$ref": "#/components/schemas/ChatCompletionResponseFormatParam"
          },
          "guided_json": {
            "type": "object",
            "description": "Must be a valid JSON schema. If specified, the output will follow the JSON schema."
          },
          "guided_regex": {
            "type": "string",
            "description": "If specified, the output will follow the regex pattern."
          },
          "guided_choice": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If specified, the output will be exactly one of the choices."
          },
          "min_p": {
            "type": "number",
            "description": "This is an alternative to `top_p` that [many prefer](https://github.com/huggingface/transformers/issues/27670). Must be in [0, 1]."
          },
          "n": {
            "type": "number",
            "description": "This will return multiple choices for you instead of a single chat completion."
          },
          "use_beam_search": {
            "type": "boolean",
            "description": "Setting this to `true` will allow the model to [explore more completion options](https://huggingface.co/blog/how-to-generate#beam-search). This is not supported by OpenAI.",
            "default": false
          },
          "best_of": {
            "type": "integer",
            "description": "This is used with `use_beam_search` to determine how many candidate beams to explore."
          },
          "length_penalty": {
            "type": "number",
            "description": "This is used with `use_beam_search` to prefer shorter or longer completions.",
            "default": 1
          },
          "early_stopping": {
            "type": "boolean",
            "description": "This is used with `use_beam_search`. If `true`, generation stops as soon as there are `best_of` complete candidates; if `false`, a heuristic is applied and the generation stops when is it very unlikely to find better candidates.",
            "default": false
          },
          "logprobs": {
            "type": "boolean",
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
            "default": false
          },
          "top_logprobs": {
            "type": "integer",
            "description": "This is used with `logprobs`. An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability."
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Higher values will penalize the model from repeating the same output tokens.",
            "default": 0
          },
          "presence_penalty": {
            "type": "number",
            "description": "Higher values will penalize the model from repeating the same output tokens.",
            "default": 0
          },
          "top_p": {
            "type": "number",
            "description": "An alternative or complement to `temperature`. This adjusts how many of the top possibilities to consider."
          }
        }
      },
      "ChatCompletionResponseFormatParam": {
        "title": "ChatCompletionResponseFormatParam",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "text",
              "json_object"
            ],
            "type": "string"
          }
        }
      },
      "ChatCompletionSystemMessageParam": {
        "title": "ChatCompletionSystemMessageParam",
        "required": [
          "content",
          "role"
        ],
        "type": "object",
        "properties": {
          "content": { },
          "role": {
            "enum": [
              "system",
              "user",
              "assistant",
              "tool"
            ],
            "type": "string"
          }
        }
      },
      "ChatCompletionToolParam": {
        "title": "Function",
        "required": [
          "function",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "function"
            ],
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionDefinition"
          }
        }
      },
      "CheckAvailabilityTool": {
        "title": "CheckAvailabilityTool",
        "required": [
          "type",
          "check_availability"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "check_availability"
            ],
            "type": "string"
          },
          "check_availability": {
            "$ref": "#/components/schemas/CheckAvailabilityToolParams"
          }
        }
      },
      "CheckAvailabilityToolParams": {
        "title": "CheckAvailabilityToolParams",
        "required": [
          "event_type_id",
          "api_key_ref"
        ],
        "type": "object",
        "properties": {
          "event_type_id": {
            "type": "integer",
            "description": "Event Type ID for which slots are being fetched. [cal.com](https://cal.com/docs/api-reference/v2/slots/get-available-slots#parameter-event-type-id)"
          },
          "api_key_ref": {
            "type": "string",
            "description": "Reference to an integration secret that contains your Cal.com API key. You would pass the `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your Cal.com API key.",
            "example": "my_calcom_api_key"
          }
        }
      },
      "CivicAddress": {
        "title": "Civic Address",
        "type": "object",
        "properties": {
          "id": {
            "title": "UUID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "civic_address"
          },
          "city_or_town": {
            "type": "string",
            "example": "Chicago"
          },
          "city_or_town_alias": {
            "type": "string"
          },
          "company_name": {
            "type": "string",
            "example": "Telnyx"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "country_or_district": {
            "type": "string",
            "example": "US"
          },
          "default_location_id": {
            "type": "string",
            "description": "Identifies what is the default location in the list of locations.",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "example": "Texas Office"
          },
          "house_number": {
            "type": "string",
            "example": "600"
          },
          "house_number_suffix": {
            "type": "string"
          },
          "postal_or_zip_code": {
            "type": "string",
            "example": "78701"
          },
          "state_or_province": {
            "type": "string",
            "example": "TX"
          },
          "street_name": {
            "type": "string",
            "example": "Congress"
          },
          "street_suffix": {
            "type": "string",
            "example": "St"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          }
        },
        "example": {
          "id": "07a4dc5d-9b3b-4ba2-88a4-6ba172316c65",
          "record_type": "civic_address",
          "city_or_town": "Austin",
          "city_or_town_alias": null,
          "company_name": "Telnyx",
          "country": "US",
          "county_or_district": "US",
          "default_location_id": "18ded4bb-b694-44c1-a89b-a35b7acd4c9e",
          "description": "Austin Office",
          "house_number": "600",
          "house_number_suffix": null,
          "locations": [
            {
              "id": "18ded4bb-b694-44c1-a89b-a35b7acd4c9e",
              "additional_info": null,
              "description": "Austin Office",
              "is_default": true
            },
            {
              "id": "d420a57f-c4ae-4697-87e1-fbefd9e86f72",
              "additional_info": "14th Floor",
              "description": null,
              "is_default": false
            }
          ],
          "postal_or_zip_code": "78701",
          "state_or_province": "TX",
          "street_name": "Congress Street",
          "street_suffix": null
        }
      },
      "ClientStateUpdateRequest": {
        "title": "Update client state Request",
        "required": [
          "client_state"
        ],
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d"
        }
      },
      "CloudflareSyncStatus": {
        "title": "CloudflareSyncStatus",
        "enum": [
          "pending",
          "added"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ClusterNode": {
        "title": "ClusterNode",
        "required": [
          "filename",
          "text"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "The corresponding source file of your embedded storage bucket that the node is from."
          },
          "text": {
            "type": "string",
            "description": "The text of the node."
          }
        }
      },
      "ClusteringRequestInfo": {
        "title": "ClusteringRequestInfo",
        "required": [
          "task_id",
          "status",
          "bucket",
          "created_at",
          "finished_at",
          "min_cluster_size",
          "min_subcluster_size"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "bucket": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "min_cluster_size": {
            "type": "integer"
          },
          "min_subcluster_size": {
            "type": "integer"
          }
        }
      },
      "ClusteringRequestInfoData": {
        "title": "ClusteringRequestInfoData",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusteringRequestInfo"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ClusteringStatusResponse": {
        "title": "ClusteringStatusResponse",
        "required": [
          "status",
          "bucket",
          "clusters"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "bucket": {
            "type": "string"
          },
          "clusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecursiveCluster"
            }
          }
        }
      },
      "ClusteringStatusResponseData": {
        "title": "ClusteringStatusResponseData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ClusteringStatusResponse"
          }
        }
      },
      "CnamListing": {
        "title": "CnamListing",
        "type": "object",
        "properties": {
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Enables CNAM listings for this number. Requires cnam_listing_details to also be set.",
            "default": false
          },
          "cnam_listing_details": {
            "type": "string",
            "description": "The CNAM listing details for this number. Must be alphanumeric characters or spaces with a maximum length of 15. Requires cnam_listing_enabled to also be set to true."
          }
        },
        "description": "The CNAM listing settings for a phone number.",
        "example": {
          "cnam_listing_enabled": true,
          "cnam_listing_details": "example"
        }
      },
      "Comment": {
        "title": "Comment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "body": {
            "type": "string",
            "example": "Hi there, ...."
          },
          "commenter": {
            "type": "string",
            "readOnly": true,
            "example": "user@company.com"
          },
          "commenter_type": {
            "enum": [
              "admin",
              "user"
            ],
            "type": "string",
            "readOnly": true,
            "example": "user"
          },
          "comment_record_type": {
            "enum": [
              "sub_number_order",
              "requirement_group"
            ],
            "type": "string",
            "example": "sub_number_order"
          },
          "comment_record_id": {
            "type": "string",
            "format": "uuid",
            "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
          },
          "read_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the comment was read.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the comment was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the comment was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          }
        }
      },
      "CompleteOTAUpdate": {
        "title": "OTAUpdate",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "ota_update"
          },
          "sim_card_id": {
            "type": "string",
            "description": "The identification UUID of the related SIM card resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "enum": [
              "sim_card_network_preferences"
            ],
            "type": "string",
            "description": "Represents the type of the operation requested. This will relate directly to the source of the request.",
            "example": "sim_card_network_preferences"
          },
          "status": {
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "type": "string",
            "example": "in-progress"
          },
          "settings": {
            "type": "object",
            "properties": {
              "mobile_network_operators_preferences": {
                "$ref": "#/components/schemas/MobileNetworkOperatorsPreferencesResponse"
              }
            },
            "description": "A JSON object representation of the operation. The information present here will relate directly to the source of the OTA request."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "description": "This object represents an Over the Air (OTA) update request. It allows tracking the current status of a operation that apply settings in a particular SIM card. <br/><br/>",
        "example": {
          "created_at": "2018-02-02T22:25:27.521Z",
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ota_update",
          "settings": {
            "mobile_network_operators_preferences": [
              {
                "mobile_network_operator_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
                "mobile_network_operator_name": "AT&T Mobility (USACG)",
                "priority": 0
              }
            ]
          },
          "sim_card_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "status": "in-progress",
          "type": "sim_card_network_preferences",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "Conference": {
        "title": "Conference",
        "required": [
          "record_type",
          "id",
          "name",
          "created_at",
          "expires_at"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "conference"
            ],
            "type": "string",
            "example": "conference"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the conference",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the conference",
            "example": "All hands meeting"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference will expire",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the conference was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "sv1"
          },
          "status": {
            "enum": [
              "init",
              "in_progress",
              "completed"
            ],
            "type": "string",
            "description": "Status of the conference",
            "example": "completed"
          },
          "end_reason": {
            "enum": [
              "all_left",
              "ended_via_api",
              "host_left",
              "time_exceeded"
            ],
            "type": "string",
            "description": "Reason why the conference ended",
            "example": "all_left"
          },
          "ended_by": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call Control ID which ended the conference",
                "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
              },
              "call_session_id": {
                "type": "string",
                "description": "Call Session ID which ended the conference",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            },
            "description": "IDs related to who ended the conference. It is expected for them to all be there or all be null"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the conference",
            "example": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
          }
        },
        "example": {
          "record_type": "conference",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "All hands meeting",
          "created_at": "2019-01-23T18:10:02.574Z",
          "expires_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "region": "sv1",
          "status": "completed",
          "end_reason": "all_left",
          "ended_by": {
            "call_control_id": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ==",
            "call_session_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          },
          "connection_id": "3fa85f64-9191-4567-b3fc-2c963f66afa6"
        }
      },
      "ConferenceCommandResult": {
        "title": "Conference Command Result",
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "example": "ok"
          }
        },
        "example": {
          "result": "ok"
        }
      },
      "ConferenceCreated": {
        "title": "Conference Created",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.created"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.created"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "conference_id": {
                "type": "string",
                "description": "Conference ID that the participant joined.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.created",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceCreatedEvent": {
        "title": "Conference Created Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceCreated"
          }
        }
      },
      "ConferenceDetailRecord": {
        "title": "ConferenceDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "name": {
            "type": "string",
            "description": "Conference name",
            "example": "My Conference"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "started_at": {
            "type": "string",
            "description": "Conference start time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "ended_at": {
            "type": "string",
            "description": "Conference end time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "expires_at": {
            "type": "string",
            "description": "Conference expiry time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "region": {
            "type": "string",
            "description": "Region where the conference is hosted",
            "example": "ch1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection id",
            "example": "1583941447772537867"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "participant_count": {
            "type": "integer",
            "description": "Number of participants that joined the conference call",
            "example": 5
          },
          "participant_call_sec": {
            "type": "integer",
            "description": "Sum of the conference call duration for all participants in seconds",
            "example": 100
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": false
          },
          "record_type": {
            "type": "string",
            "default": "conference_detail_record",
            "example": "conference_detail_record"
          }
        }
      },
      "ConferenceEnded": {
        "title": "Conference Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "conference_id": {
                "type": "string",
                "description": "Conference ID that the participant joined.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              },
              "reason": {
                "enum": [
                  "all_left",
                  "host_left",
                  "time_exceeded"
                ],
                "type": "string",
                "description": "Reason the conference ended."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00",
            "reason": "host_left"
          }
        }
      },
      "ConferenceEndedEvent": {
        "title": "Conference Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceEnded"
          }
        }
      },
      "ConferenceFloorChangedEvent": {
        "title": "Conference Floor Changed",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.floor.changed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.floor.changed"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call Control ID of the new speaker.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "Call Leg ID of the new speaker.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "Call Session ID of the new speaker.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "conference_id": {
                "type": "string",
                "description": "Conference ID that had a speaker change event.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.floor.changed",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceHoldRequest": {
        "title": "Conference Hold Request",
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold."
          },
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ],
          "audio_url": "http://example.com/message.wav"
        }
      },
      "ConferenceMuteRequest": {
        "title": "Conference Mute Request",
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of unique identifiers and tokens for controlling the call. When empty all participants will be muted."
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "ConferenceParticipantDetailRecord": {
        "title": "ConferenceParticipantDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Participant id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "conference_id": {
            "type": "string",
            "description": "Conference id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "joined_at": {
            "type": "string",
            "description": "Participant join time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "left_at": {
            "type": "string",
            "description": "Participant leave time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "destination_number": {
            "type": "string",
            "description": "Number called by the participant to join the conference",
            "example": "+18005550199"
          },
          "originating_number": {
            "type": "string",
            "description": "Participant origin number used in the conference call",
            "example": "+18005550199"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies the conference call leg",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_session_id": {
            "type": "string",
            "description": "Telnyx UUID that identifies with conference call session",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "call_sec": {
            "type": "integer",
            "description": "Duration of the conference call in seconds",
            "example": 100
          },
          "billed_sec": {
            "type": "integer",
            "description": "Duration of the conference call for billing purposes",
            "example": 120
          },
          "is_telnyx_billable": {
            "type": "boolean",
            "description": "Indicates whether Telnyx billing charges might be applicable",
            "example": true
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.002"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "minutes"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "default": "conference_participant_detail_record",
            "example": "conference_participant_detail_record"
          }
        }
      },
      "ConferenceParticipantJoined": {
        "title": "Conference Participant Joined",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.joined"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.joined"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "conference_id": {
                "type": "string",
                "description": "Conference ID that the participant joined.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.joined",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        }
      },
      "ConferenceParticipantJoinedEvent": {
        "title": "Conference Participant Joined Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantJoined"
          }
        }
      },
      "ConferenceParticipantLeft": {
        "title": "Conference Participant Left",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.left"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.left"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5210000+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "conference_id": {
                "type": "string",
                "description": "Conference ID that the participant joined.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.left",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
          }
        }
      },
      "ConferenceParticipantLeftEvent": {
        "title": "Conference Participant Left Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantLeft"
          }
        }
      },
      "ConferenceParticipantPlaybackEnded": {
        "title": "Conference Participant Playback Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.playback.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.playback.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Participant's call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceParticipantPlaybackEndedEvent": {
        "title": "Conference Participant Playback Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackEnded"
          }
        }
      },
      "ConferenceParticipantPlaybackStarted": {
        "title": "Conference Participant Playback Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.playback.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.playback.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Participant's call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceParticipantPlaybackStartedEvent": {
        "title": "Conference Participant Playback Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantPlaybackStarted"
          }
        }
      },
      "ConferenceParticipantSpeakEnded": {
        "title": "Conference Participant Speak Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.speak.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.speak.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Participant's call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceParticipantSpeakEndedEvent": {
        "title": "Conference Participant Speak Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakEnded"
          }
        }
      },
      "ConferenceParticipantSpeakStarted": {
        "title": "Conference Participant Speak Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.participant.speak.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.participant.speak.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Participant's call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.participant.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceParticipantSpeakStartedEvent": {
        "title": "Conference Participant Speak Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceParticipantSpeakStarted"
          }
        }
      },
      "ConferencePlayRequest": {
        "title": "Conference Play Request",
        "type": "object",
        "properties": {
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "loop": {
            "$ref": "#/components/schemas/Loopcount"
          },
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference."
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav"
        }
      },
      "ConferencePlaybackEnded": {
        "title": "Conference Playback Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.playback.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.playback.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferencePlaybackEndedEvent": {
        "title": "Conference Playback Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackEnded"
          }
        }
      },
      "ConferencePlaybackStarted": {
        "title": "Conference Playback Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.playback.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.playback.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "media_url": {
                "type": "string",
                "description": "The audio URL being played back, if audio_url has been used to start.",
                "example": "http://example.com/audio.wav"
              },
              "media_name": {
                "type": "string",
                "description": "The name of the audio media file being played back, if media_name has been used to start.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.playback.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "media_url": "https://www.example.com/audio.mp3",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferencePlaybackStartedEvent": {
        "title": "Conference Playback Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferencePlaybackStarted"
          }
        }
      },
      "ConferenceRecordingResource": {
        "title": "Conference recording resource",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "description": "The identifier of the related participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "channels": {
            "type": "integer",
            "description": "The number of channels in the recording.",
            "example": 1
          },
          "conference_sid": {
            "type": "string",
            "description": "The identifier of the related conference.",
            "example": "6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f"
          },
          "date_created": {
            "type": "string",
            "description": "The timestamp of when the resource was created.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "date_updated": {
            "type": "string",
            "description": "The timestamp of when the resource was last updated.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "duration": {
            "type": "integer",
            "description": "Duratin of the recording in seconds.",
            "example": 10
          },
          "error_code": {
            "type": "string",
            "description": "The recording error, if any.",
            "example": null
          },
          "media_url": {
            "type": "string",
            "description": "The URL to use to download the recording.",
            "example": "https://www.example.com/download.mp3"
          },
          "sid": {
            "type": "string",
            "description": "The unique identifier of the recording.",
            "example": "136285da-4b74-46f1-a016-fe2982fa77c3"
          },
          "source": {
            "enum": [
              "DialVerb",
              "Conference",
              "OutboundAPI",
              "Trunking",
              "RecordVerb",
              "StartCallRecordingAPI",
              "StartConferenceRecordingAPI"
            ],
            "type": "string",
            "description": "How the recording was started.",
            "example": "StartConferenceRecordingAPI"
          },
          "start_time": {
            "type": "string",
            "description": "The timestamp of when the recording was started.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "status": {
            "enum": [
              "processing",
              "absent",
              "completed",
              "deleted"
            ],
            "type": "string",
            "description": "The status of the recording.",
            "example": "completed"
          },
          "subresource_uris": {
            "type": "object",
            "description": "A list of related resources identified by their relative URIs.",
            "example": {
              "transcriptions": null
            }
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this recording.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings/136285da-4b74-46f1-a016-fe2982fa77c3.json"
          }
        },
        "example": {
          "account_sid": "4e71926f-8f13-450e-b91c-23c2ef786aa6",
          "call_sid": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ",
          "channels": 1,
          "conference_sid": "6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f",
          "date_created": "Fri, 27 Oct 2023 07:41:58 +0000",
          "date_updated": "Fri, 27 Oct 2023 07:41:58 +0000",
          "duration": 5,
          "error_code": null,
          "media_url": "https://www.example.com/download.mp3",
          "sid": "136285da-4b74-46f1-a016-fe2982fa77c3",
          "source": "StartConferenceRecordingAPI",
          "start_time": "Fri, 27 Oct 2023 07:41:58 +0000",
          "status": "completed",
          "subresource_uris": {
            "transcriptions": null
          },
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings/136285da-4b74-46f1-a016-fe2982fa77c3.json"
        }
      },
      "ConferenceRecordingResourceIndex": {
        "title": "Multiple conference recording resources",
        "type": "object",
        "properties": {
          "recordings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConferenceRecordingResource"
            }
          },
          "end": {
            "type": "integer",
            "description": "The number of the last element on the page, zero-indexed.",
            "example": 19
          },
          "first_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?page=0&pagesize=20",
            "example": "accepted"
          },
          "next_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
            "example": "accepted"
          },
          "page": {
            "type": "integer",
            "description": "Current page number, zero-indexed.",
            "example": 0
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items on the page",
            "example": 20
          },
          "start": {
            "type": "integer",
            "description": "The number of the first element on the page, zero-indexed.",
            "example": 0
          },
          "uri": {
            "type": "string",
            "description": "The URI of the current page.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?Page=0&PageSize=1"
          }
        },
        "example": {
          "participants": [ ],
          "end": 0,
          "first_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?page=0&pagesize=20",
          "next_page_uri": null,
          "page": 0,
          "page_size": 20,
          "start": 0,
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?page=0&pagesize=20"
        }
      },
      "ConferenceRecordingSaved": {
        "title": "Conference Recording Saved",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.recording.saved"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.recording.saved"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Participant's call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "channels": {
                "enum": [
                  "single",
                  "dual"
                ],
                "type": "string",
                "description": "Whether recording was recorded in `single` or `dual` channel.",
                "example": "single"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference that is being recorded.",
                "format": "uuid",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "format": {
                "enum": [
                  "wav",
                  "mp3"
                ],
                "type": "string",
                "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
                "example": "mp3"
              },
              "public_recording_urls": {
                "type": "object",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "description": "Recording URL in requested `mp3` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3"
                  },
                  "wav": {
                    "type": "string",
                    "description": "Recording URL in requested `wav` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.wav"
                  }
                },
                "description": "Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation."
              },
              "recording_ended_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when recording ended.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5219920+00:00"
              },
              "recording_id": {
                "type": "string",
                "description": "ID of the conference recording.",
                "format": "uuid",
                "example": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47"
              },
              "recording_started_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when recording started.",
                "format": "date-time",
                "example": "2018-02-02T22:20:27.5219920+00:00"
              },
              "recording_urls": {
                "type": "object",
                "properties": {
                  "mp3": {
                    "type": "string",
                    "description": "Recording URL in requested `mp3` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.mp3"
                  },
                  "wav": {
                    "type": "string",
                    "description": "Recording URL in requested `wav` format.",
                    "nullable": true,
                    "example": "http://example.com/recording.wav"
                  }
                },
                "description": "Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.recording.saved",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "channels": "single",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "format": "mp3",
            "public_recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            },
            "recording_ended_at": "2018-02-02T22:20:27.5219920+00:00",
            "recording_id": "4577f9a2-cf0e-44f3-ac57-9f95fb03fa47",
            "recording_started_at": "2021-05-11T10:17:03.6921070+00:00",
            "recording_urls": {
              "mp3": "http://example.com/recording.mp3",
              "wav": "http://example.com/recording.wav"
            }
          }
        }
      },
      "ConferenceRecordingSavedEvent": {
        "title": "Conference Recording Saved Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceRecordingSaved"
          }
        }
      },
      "ConferenceResource": {
        "title": "Conference resource",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "api_version": {
            "type": "string",
            "description": "The version of the API that was used to make the request.",
            "example": "v2/texml"
          },
          "call_sid_ending_conference": {
            "type": "string",
            "description": "Caller ID, if present.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "date_created": {
            "type": "string",
            "description": "The timestamp of when the resource was created.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "date_updated": {
            "type": "string",
            "description": "The timestamp of when the resource was last updated.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "friendly_name": {
            "type": "string",
            "description": "A string that you assigned to describe this conference room.",
            "example": "weekly_review_call"
          },
          "reason_conference_ended": {
            "enum": [
              "participant-with-end-conference-on-exit-left",
              "last-participant-left",
              "conference-ended-via-api",
              "time-exceeded"
            ],
            "type": "string",
            "description": "The reason why a conference ended. When a conference is in progress, will be null.",
            "example": "time-exceeded"
          },
          "region": {
            "type": "string",
            "description": "A string representing the region where the conference is hosted.",
            "example": "dc2"
          },
          "sid": {
            "type": "string",
            "description": "The unique identifier of the conference.",
            "example": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1"
          },
          "status": {
            "enum": [
              "init",
              "in-progress",
              "completed"
            ],
            "type": "string",
            "description": "The status of this conference.",
            "example": "in-progress"
          },
          "subresource_uris": {
            "type": "object",
            "description": "A list of related resources identified by their relative URIs.",
            "example": {
              "participants": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants.json",
              "recordings": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Recordings.json"
            }
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this conference.",
            "example": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1.json"
          }
        },
        "example": {
          "account_sid": "4e71926f-8f13-450e-b91c-23c2ef786aa6",
          "api_version": "v2/texml",
          "call_sid_ending_conference": null,
          "date_created": "Fri, 27 Oct 2023 07:41:58 +0000",
          "date_updated": "Fri, 27 Oct 2023 07:41:58 +0000",
          "friendly_name": "weekly_review_call",
          "reason_conference_ended": null,
          "region": "dc2",
          "sid": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1",
          "status": "in-progress",
          "subresource_uris": {
            "participants": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants.json",
            "recordings": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Recordings.json"
          },
          "uri": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1.json"
        }
      },
      "ConferenceResourceIndex": {
        "title": "Multiple conference resources",
        "type": "object",
        "properties": {
          "conferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConferenceResource"
            }
          },
          "end": {
            "type": "integer",
            "description": "The number of the last element on the page, zero-indexed.",
            "example": 19
          },
          "first_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1",
            "example": "accepted"
          },
          "next_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
            "example": "accepted"
          },
          "page": {
            "type": "integer",
            "description": "Current page number, zero-indexed.",
            "example": 0
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items on the page",
            "example": 20
          },
          "start": {
            "type": "integer",
            "description": "The number of the first element on the page, zero-indexed.",
            "example": 0
          },
          "uri": {
            "type": "string",
            "description": "The URI of the current page.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1"
          }
        },
        "example": {
          "conferences": [ ],
          "end": 0,
          "first_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1",
          "next_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
          "page": 0,
          "page_size": 1,
          "start": 0,
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1"
        }
      },
      "createPortingPhoneNumberExtension": {
        "title": "createPortingPhoneNumberExtension",
        "required": [
          "porting_phone_number_id",
          "extension_range",
          "activation_ranges"
        ],
        "type": "object",
        "properties": {
          "porting_phone_number_id": {
            "type": "string",
            "description": "Identifies the porting phone number associated with this porting phone number extension.",
            "format": "uuid",
            "example": "f24151b6-3389-41d3-8747-7dd8c681e5e2"
          },
          "extension_range": {
            "required": [
              "start_at",
              "end_at"
            ],
            "type": "object",
            "properties": {
              "start_at": {
                "type": "integer",
                "description": "Specifies the start of the extension range for this porting phone number extension.",
                "example": 1
              },
              "end_at": {
                "type": "integer",
                "description": "Specifies the end of the extension range for this porting phone number extension.",
                "example": 10
              }
            }
          },
          "activation_ranges": {
            "type": "array",
            "items": {
              "required": [
                "start_at",
                "end_at"
              ],
              "type": "object",
              "properties": {
                "start_at": {
                  "type": "integer",
                  "description": "Specifies the start of the activation range. Must be greater or equal the start of the extension range.",
                  "example": 1
                },
                "end_at": {
                  "type": "integer",
                  "description": "Specifies the end of the activation range. It must be no more than the end of the extension range.",
                  "example": 10
                }
              }
            },
            "description": "Specifies the activation ranges for this porting phone number extension. The activation range must be within the extension range and should not overlap with other activation ranges."
          }
        }
      },
      "ConferenceSpeakEnded": {
        "title": "Conference Speak Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.speak.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.speak.ended"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.ended",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceSpeakEndedEvent": {
        "title": "Conference Speak Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakEnded"
          }
        }
      },
      "ConferenceSpeakRequest": {
        "title": "Conference Speak Request",
        "required": [
          "payload",
          "voice"
        ],
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text."
          },
          "payload": {
            "type": "string",
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "example": "Say this to participants"
          },
          "payload_type": {
            "enum": [
              "text",
              "ssml"
            ],
            "type": "string",
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "example": "ssml"
          },
          "voice": {
            "type": "string",
            "description": "Specifies the voice used in speech synthesis.\n\n- Define voices using the format `<Provider>.<Model>.<VoiceId>`. Specifying only the provider will give default values for voice_id and model_id.\n\n **Supported Providers:**\n- **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility.\n- **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).)\n- **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.eleven_multilingual_v2.21m00Tcm4TlvDq8ikWAM`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration identifier secret in `\"voice_settings\": {\"api_key_ref\": \"<secret_identifier>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).\n - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`\n\nFor service_level basic, you may define the gender of the speaker (male or female).",
            "example": "Telnyx.KokoroTTS.af"
          },
          "voice_settings": {
            "description": "The settings associated with the voice selected"
          },
          "language": {
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "type": "string",
            "description": "The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.",
            "example": "en-US"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ],
          "payload": "Say this to participants",
          "payload_type": "text",
          "voice": "female",
          "language": "en-US",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ConferenceSpeakStarted": {
        "title": "Conference Speak Started",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "conference.speak.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "conference.speak.started"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "creator_call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session that started the conference.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "conference_id": {
                "type": "string",
                "description": "ID of the conference the text was spoken in.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5210000+00:00"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "conference.speak.started",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "creator_call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "conference_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "occured_at": "2018-02-02T22:25:27.5210000+00:00"
          }
        }
      },
      "ConferenceSpeakStartedEvent": {
        "title": "Conference Speak Started Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConferenceSpeakStarted"
          }
        }
      },
      "ConferenceStopRequest": {
        "title": "Conference Stop Request",
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of call control ids identifying participants the audio file should stop be played to. If not given, the audio will be stoped to the entire conference."
          }
        }
      },
      "ConferenceUnholdRequest": {
        "title": "Conference Unhold Request",
        "required": [
          "call_control_ids"
        ],
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unheld."
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "ConferenceUnmuteRequest": {
        "title": "Conference Unmute Request",
        "type": "object",
        "properties": {
          "call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unmuted. When empty all participants will be unmuted."
          }
        },
        "example": {
          "call_control_ids": [
            "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          ]
        }
      },
      "Connection": {
        "title": "Connection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the specific resource.",
            "format": "int64",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent.",
            "format": "url",
            "default": null,
            "nullable": true,
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "outbound_voice_profile_id": {
            "title": "Outbound Voice Profile ID",
            "type": "string",
            "description": "Identifies the associated outbound voice profile.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "outbound_voice_profile_id": "1293384261075731499"
        }
      },
      "createPortingPhoneNumberBlock": {
        "title": "createPortingPhoneNumberBlock",
        "required": [
          "phone_number_range",
          "activation_ranges"
        ],
        "type": "object",
        "properties": {
          "phone_number_range": {
            "required": [
              "start_at",
              "end_at"
            ],
            "type": "object",
            "properties": {
              "start_at": {
                "pattern": "^\\+\\d{7,15}$",
                "type": "string",
                "description": "Specifies the start of the phone number range for this porting phone number block.",
                "example": "+4930244999901"
              },
              "end_at": {
                "pattern": "^\\+\\d{7,15}$",
                "type": "string",
                "description": "Specifies the end of the phone number range for this porting phone number block.",
                "example": "+4930244999910"
              }
            }
          },
          "activation_ranges": {
            "type": "array",
            "items": {
              "required": [
                "start_at",
                "end_at"
              ],
              "type": "object",
              "properties": {
                "start_at": {
                  "pattern": "^\\+\\d{7,15}$",
                  "type": "string",
                  "description": "Specifies the start of the activation range. Must be greater or equal the start of the extension range.",
                  "example": "+4930244999901"
                },
                "end_at": {
                  "pattern": "^\\+\\d{7,15}$",
                  "type": "string",
                  "description": "Specifies the end of the activation range. It must be no more than the end of the extension range.",
                  "example": "+4930244999910"
                }
              }
            },
            "description": "Specifies the activation ranges for this porting phone number block. The activation range must be within the block range and should not overlap with other activation ranges."
          }
        }
      },
      "VerifyPortingVerificationCodes": {
        "title": "VerifyPortingVerificationCodes",
        "type": "object",
        "properties": {
          "verification_codes": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "verification_codes": [
            {
              "phone_number": "+61424000001",
              "code": "12345"
            },
            {
              "phone_number": "+61424000002",
              "code": "54321"
            }
          ]
        }
      },
      "SendPortingVerificationCodes_201": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "SendPortingVerificationCodes": {
        "title": "SendPortingVerificationCodes",
        "type": "object",
        "properties": {
          "phone_numbers": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verification_method": {
            "enum": [
              "sms",
              "call"
            ],
            "type": "string"
          }
        },
        "example": {
          "phone_numbers": [
            "+61424000001",
            "+61424000002"
          ],
          "verification_method": "sms"
        }
      },
      "DeleteAdditionalDocument_204": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "CreateAdditionalDocuments": {
        "title": "CreateAdditionalDocuments",
        "type": "object",
        "properties": {
          "additional_documents": {
            "maxItems": 100,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "document_type": {
                  "enum": [
                    "loa",
                    "invoice",
                    "csr",
                    "other"
                  ],
                  "type": "string",
                  "description": "The type of document being created."
                },
                "document_id": {
                  "type": "string",
                  "description": "The document identification",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "example": {
          "additional_documents": [
            {
              "document_id": "22771a52-c43a-4539-80db-9dd9ec36e237",
              "document_type": "loa"
            },
            {
              "document_id": "d91474e6-4ebc-4ec1-b379-c596eeb405d6",
              "document_type": "invoice"
            }
          ]
        }
      },
      "ConnectionRtcpSettings": {
        "title": "Connection RTCP Settings",
        "type": "object",
        "properties": {
          "port": {
            "enum": [
              "rtcp-mux",
              "rtp+1"
            ],
            "description": "RTCP port by default is rtp+1, it can also be set to rtcp-mux",
            "default": "rtp+1"
          },
          "capture_enabled": {
            "type": "boolean",
            "description": "BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.",
            "default": false,
            "example": true
          },
          "report_frequency_secs": {
            "type": "integer",
            "description": "RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.",
            "default": 5,
            "example": 10
          }
        },
        "example": {
          "port": "rtcp-mux",
          "capture_enabled": true,
          "report_frequency_secs": 10
        }
      },
      "ConsumedData": {
        "title": "ConsumedData",
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "default": "MB",
            "example": "MB"
          },
          "amount": {
            "type": "string",
            "format": "decimal",
            "example": "2048.1"
          }
        },
        "description": "Represents the amount of data consumed."
      },
      "Conversation": {
        "title": "Conversation",
        "required": [
          "id",
          "created_at",
          "metadata",
          "last_message_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "description": "The datetime the conversation was created.",
            "format": "date-time",
            "example": "2025-04-15T13:07:28.7640000+00:00"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the conversation. Telnyx provides several pieces of metadata, but customers can also add their own.",
            "example": {
              "telnyx_conversation_channel": "phone_call",
              "telnyx_agent_target": "+13128675309",
              "telnyx_end_user_target": "+13128675309",
              "assistant_id": "assistant-123"
            }
          },
          "last_message_at": {
            "type": "string",
            "description": "The datetime of the latest message in the conversation.",
            "format": "date-time",
            "example": "2025-04-15T13:07:28.7640000+00:00"
          }
        }
      },
      "ConversationChannelType": {
        "title": "ConversationChannelType",
        "enum": [
          "phone_call",
          "sms_chat"
        ],
        "type": "string"
      },
      "ConversationInsight": {
        "title": "ConversationInsight",
        "required": [
          "id",
          "status",
          "created_at",
          "conversation_insights"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the conversation insight."
          },
          "status": {
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed"
            ],
            "type": "string",
            "description": "Current status of the insight generation for the conversation."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp of when the object was created.",
            "format": "date-time"
          },
          "conversation_insights": {
            "type": "array",
            "items": {
              "required": [
                "result",
                "insight_id"
              ],
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "description": "Insight result from the conversation. If the insight has a JSON schema, this will be stringified JSON object."
                },
                "insight_id": {
                  "type": "string",
                  "description": "Unique identifier for the insight configuration."
                }
              }
            },
            "description": "List of insights extracted from the conversation."
          }
        }
      },
      "ConversationInsightListData": {
        "title": "ConversationInsightListData",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationInsight"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ConversationMessage": {
        "title": "ConversationMessage",
        "required": [
          "role",
          "text"
        ],
        "type": "object",
        "properties": {
          "role": {
            "enum": [
              "user",
              "assistant",
              "tool"
            ],
            "type": "string",
            "description": "The role of the message sender."
          },
          "text": {
            "type": "string",
            "description": "The message content. Can be null for tool calls."
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "type",
                "function"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the tool call."
                },
                "type": {
                  "enum": [
                    "function"
                  ],
                  "type": "string",
                  "description": "Type of the tool call."
                },
                "function": {
                  "required": [
                    "name",
                    "arguments"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the function to call."
                    },
                    "arguments": {
                      "type": "string",
                      "description": "JSON-formatted arguments to pass to the function."
                    }
                  }
                }
              }
            },
            "description": "Optional tool calls made by the assistant."
          },
          "created_at": {
            "type": "string",
            "description": "The datetime the message was created on the conversation. This does not necesarily correspond to the time the message was sent. The best field to use to determine the time the end user experienced the message is `sent_at`.",
            "format": "date-time",
            "example": "2025-04-15T13:07:28.7640000+00:00"
          },
          "sent_at": {
            "type": "string",
            "description": "The datetime the message was sent to the end user.",
            "format": "date-time",
            "example": "2025-04-15T13:07:28.7640000+00:00"
          }
        }
      },
      "ConversationMessageListData": {
        "title": "ConversationMessageListData",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversationMessage"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ConversationsListData": {
        "title": "ConversationsListData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Conversation"
            }
          }
        }
      },
      "CostInformation": {
        "title": "CostInformation",
        "type": "object",
        "properties": {
          "upfront_cost": {
            "type": "string",
            "example": "3.21"
          },
          "monthly_cost": {
            "type": "string",
            "example": "6.54"
          },
          "currency": {
            "type": "string",
            "description": "The ISO 4217 code for the currency.",
            "example": "USD"
          }
        },
        "example": {
          "upfront_cost": "3.21",
          "monthly_cost": "6.54",
          "currency": "USD"
        }
      },
      "CountryCoverage": {
        "title": "CountryCoverage",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Country ISO code"
          },
          "numbers": {
            "type": "boolean"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of features supported"
          },
          "phone_number_type": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Phone number type"
          },
          "reservable": {
            "type": "boolean",
            "description": "Supports reservable"
          },
          "quickship": {
            "type": "boolean",
            "description": "Supports quickship"
          },
          "international_sms": {
            "type": "boolean"
          },
          "p2p": {
            "type": "boolean"
          },
          "local": {
            "type": "object",
            "properties": {
              "features": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "reservable": {
                "type": "boolean"
              },
              "quickship": {
                "type": "boolean"
              },
              "international_sms": {
                "type": "boolean"
              },
              "p2p": {
                "type": "boolean"
              }
            }
          },
          "toll_free": {
            "type": "object",
            "properties": {
              "features": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "reservable": {
                "type": "boolean"
              },
              "quickship": {
                "type": "boolean"
              },
              "international_sms": {
                "type": "boolean"
              },
              "p2p": {
                "type": "boolean"
              }
            }
          },
          "mobile": {
            "type": "object"
          },
          "national": {
            "type": "object"
          },
          "inventory_coverage": {
            "type": "boolean",
            "description": "Indicates whether country can be queried with inventory coverage endpoint"
          },
          "shared_cost": {
            "type": "object"
          }
        },
        "example": {
          "United States of America": {
            "code": "US",
            "numbers": true,
            "features": [
              "hd_voice",
              "emergency",
              "voice",
              "mms",
              "fax",
              "sms",
              "international_sms"
            ],
            "phone_number_type": [
              "local",
              "local",
              "local",
              "local",
              "toll_free"
            ],
            "reservable": true,
            "quickship": true,
            "international_sms": true,
            "p2p": true,
            "local": {
              "features": [
                "hd_voice",
                "voice",
                "international_sms",
                "mms",
                "fax",
                "sms",
                "emergency"
              ],
              "reservable": true,
              "quickship": false,
              "international_sms": true,
              "p2p": true
            },
            "toll_free": {
              "features": [
                "voice",
                "mms",
                "fax",
                "sms",
                "emergency"
              ],
              "reservable": true,
              "quickship": true,
              "international_sms": false,
              "p2p": false
            },
            "mobile": { },
            "national": { },
            "inventory_coverage": true,
            "shared_cost": { }
          }
        }
      },
      "CreateAndroidPushCredentialRequest": {
        "title": "Create Android Push Credential Request",
        "required": [
          "type",
          "project_account_json_file",
          "alias"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "android"
            ],
            "type": "string",
            "description": "Type of mobile push credential. Should be <code>android</code> here"
          },
          "project_account_json_file": {
            "type": "object",
            "description": "Private key file in JSON format",
            "example": {
              "private_key": "BBBB0J56jd8kda:APA91vjb11BCjvxx3Jxja...",
              "client_email": "account@customer.org"
            }
          },
          "alias": {
            "type": "string",
            "description": "Alias to uniquely identify the credential",
            "example": "LucyAndroidCredential"
          }
        }
      },
      "CreateAssistantRequest": {
        "title": "CreateAssistantRequest",
        "required": [
          "name",
          "model",
          "instructions"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "description": "ID of the model to use. You can use the [Get models API](https://developers.telnyx.com/api/inference/inference-embedding/get-models-public-models-get) to see all of your available models,"
          },
          "instructions": {
            "type": "string",
            "description": "System instructions for the assistant. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "tools": {
            "$ref": "#/components/schemas/AssistantTools"
          },
          "description": {
            "type": "string"
          },
          "greeting": {
            "type": "string",
            "description": "Text that the assistant will use to start the conversation. This may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "llm_api_key_ref": {
            "type": "string",
            "description": "This is only needed when using third-party inference providers. The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your LLM provider's API key. Warning: Free plans are unlikely to work with this integration."
          },
          "voice_settings": {
            "$ref": "#/components/schemas/VoiceSettings"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionSettings"
          },
          "telephony_settings": {
            "$ref": "#/components/schemas/TelephonySettings"
          },
          "messaging_settings": {
            "$ref": "#/components/schemas/MessagingSettings"
          },
          "enabled_features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnabledFeatures"
            }
          },
          "insight_settings": {
            "$ref": "#/components/schemas/InsightSettings"
          },
          "privacy_settings": {
            "$ref": "#/components/schemas/PrivacySettings"
          },
          "dynamic_variables_webhook_url": {
            "type": "string",
            "description": "If the dynamic_variables_webhook_url is set for the assistant, we will send a request at the start of the conversation. See our [guide](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables) for more information."
          },
          "dynamic_variables": {
            "type": "object",
            "description": "Map of dynamic variables and their default values"
          }
        }
      },
      "CreateBrand": {
        "title": "CreateBrand",
        "required": [
          "entityType",
          "displayName",
          "country",
          "email",
          "vertical"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityType"
              }
            ],
            "description": "Entity type behind the brand. This is the form of business establishment."
          },
          "displayName": {
            "title": "Displayname",
            "maxLength": 100,
            "type": "string",
            "description": "Display name, marketing name, or DBA name of the brand.",
            "example": "ABC Mobile"
          },
          "companyName": {
            "title": "Companyname",
            "maxLength": 100,
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "ABC Inc."
          },
          "firstName": {
            "title": "Firstname",
            "maxLength": 100,
            "type": "string",
            "description": "First name of business contact.",
            "example": "John"
          },
          "lastName": {
            "title": "Lastname",
            "maxLength": 100,
            "type": "string",
            "description": "Last name of business contact.",
            "example": "Smith"
          },
          "ein": {
            "title": "Ein",
            "maxLength": 20,
            "type": "string",
            "description": "(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.",
            "example": "111111111"
          },
          "phone": {
            "title": "Phone",
            "maxLength": 20,
            "type": "string",
            "description": "Valid phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "street": {
            "title": "Street",
            "maxLength": 100,
            "type": "string",
            "description": "Street number and name.",
            "example": "123"
          },
          "city": {
            "title": "City",
            "maxLength": 100,
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "title": "State",
            "maxLength": 20,
            "type": "string",
            "description": "State. Must be 2 letters code for United States.",
            "example": "NY"
          },
          "postalCode": {
            "title": "Postalcode",
            "maxLength": 10,
            "type": "string",
            "description": "Postal codes. Use 5 digit zipcode for United States",
            "example": "10001"
          },
          "country": {
            "title": "Country",
            "maxLength": 2,
            "type": "string",
            "description": "ISO2 2 characters country code. Example: US - United States",
            "example": "US"
          },
          "email": {
            "title": "Email",
            "maxLength": 100,
            "type": "string",
            "description": "Valid email address of brand support contact."
          },
          "stockSymbol": {
            "title": "Stocksymbol",
            "maxLength": 10,
            "type": "string",
            "description": "(Required for public company) stock symbol.",
            "example": "ABC"
          },
          "stockExchange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StockExchange"
              }
            ],
            "description": "(Required for public company) stock exchange.",
            "example": "NASDAQ"
          },
          "ipAddress": {
            "title": "Ipaddress",
            "maxLength": 50,
            "type": "string",
            "description": "IP address of the browser requesting to create brand identity."
          },
          "website": {
            "title": "Website",
            "maxLength": 100,
            "type": "string",
            "description": "Brand website URL.",
            "example": "http://www.abcmobile.com"
          },
          "vertical": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Vertical"
              }
            ],
            "description": "Vertical or industry segment of the brand."
          },
          "isReseller": {
            "title": "Isreseller",
            "type": "boolean",
            "default": false
          },
          "mock": {
            "title": "Mock",
            "type": "boolean",
            "description": "Mock brand for testing purposes. Defaults to false.",
            "default": false
          },
          "mobilePhone": {
            "title": "Mobilephone",
            "maxLength": 20,
            "type": "string",
            "description": "Valid mobile phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "businessContactEmail": {
            "title": "BusinessContactEmail",
            "type": "string",
            "description": "Business contact email.\n\nRequired if `entityType` is `PUBLIC_PROFIT`.",
            "example": "name@example.com"
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook URL for brand status updates.",
            "example": "https://webhook.com/67ea78a8-9f32-4d04-b62d-f9502e8e5f93"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Webhook failover URL for brand status updates.",
            "example": "https://webhook.com/9010a453-4df8-4be6-a551-1070892888d6"
          }
        }
      },
      "CreateBucketRequest": {
        "title": "CreateBucketRequest",
        "type": "object",
        "properties": {
          "LocationConstraint": {
            "type": "string"
          }
        },
        "xml": {
          "name": "CreateBucketConfiguration",
          "wrapped": true
        }
      },
      "CreateCallControlApplicationRequest": {
        "title": "Create Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "type": "object",
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "enum": [
              "Latency",
              "Chicago, IL",
              "Ashburn, VA",
              "San Jose, CA"
            ],
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "default": "\"Latency\"",
            "example": "\"Amsterdam, Netherlands\""
          },
          "dtmf_type": {
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "default": "RFC 2833",
            "example": "Inband"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "redact_dtmf_debug_logging": {
            "type": "boolean",
            "description": "When enabled, DTMF digits entered by users will be redacted in debug logs to protect PII data entered through IVR interactions.",
            "default": false,
            "example": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "redact_dtmf_debug_logging": true
        }
      },
      "CreateConferenceRequest": {
        "title": "Create Conference Request",
        "required": [
          "call_control_id",
          "name"
        ],
        "type": "object",
        "properties": {
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
          },
          "name": {
            "type": "string",
            "description": "Name of the conference",
            "example": "Business"
          },
          "beep_enabled": {
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "type": "string",
            "description": "Whether a beep sound should be played when participants join and/or leave the conference.",
            "default": "never",
            "example": "on_exit"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. The client_state will be updated for the creator call leg and will be used for all webhooks related to the created conference.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "comfort_noise": {
            "type": "boolean",
            "description": "Toggle background comfort noise.",
            "default": true,
            "example": false
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "duration_minutes": {
            "type": "integer",
            "description": "Time length (minutes) after which the conference will end.",
            "example": 5
          },
          "hold_audio_url": {
            "type": "string",
            "description": "The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\".",
            "example": "http://example.com/message.wav"
          },
          "hold_media_name": {
            "type": "string",
            "description": "The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\".",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "max_participants": {
            "type": "integer",
            "description": "The maximum number of active conference participants to allow. Must be between 2 and 800. Defaults to 250",
            "example": 3
          },
          "start_conference_on_create": {
            "type": "boolean",
            "description": "Whether the conference should be started on creation. If the conference isn't started all participants that join are automatically put on hold. Defaults to \"true\".",
            "example": false
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "name": "Business",
          "beep_enabled": "always",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "duration_minutes": 5,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "start_conference_on_create": false,
          "max_participants": 250
        }
      },
      "CreateConversationRequest": {
        "title": "CreateConversationRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the conversation."
          }
        }
      },
      "CreateCredentialConnectionRequest": {
        "title": "Create Credential Connection Request",
        "required": [
          "user_name",
          "password",
          "connection_name"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "title": "Connection Name",
            "type": "string",
            "description": "A user-assigned name to help manage the connection.",
            "example": "office-connection"
          },
          "sip_uri_calling_preference": {
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ],
            "type": "string",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal)."
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": false
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2",
              "texml"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1, v2 or texml. Note - texml can only be set when the outbound object parameter call_parking_enabled is included and set to true.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "active": true,
          "password": "my123secure456password789",
          "user_name": "myusername123",
          "anchorsite_override": "Latency",
          "connection_name": "my name",
          "sip_uri_calling_preference": " disabled",
          "default_on_hold_comfort_noise_enabled": false,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": "G722",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "US",
            "t38_reinvite_source": "customer",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateExternalConnectionRequest": {
        "title": "Create External Connection Request",
        "required": [
          "external_sip_connection",
          "outbound/outbound_voice_profile_id"
        ],
        "type": "object",
        "properties": {
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "external_sip_connection": {
            "$ref": "#/components/schemas/ExternalSipConnectionZoomOnly"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "external_sip_connection": "zoom",
          "active": false,
          "outbound": {
            "outbound_voice_profile_id": "1911630617284445511"
          }
        }
      },
      "CreateExternalConnectionUploadRequest": {
        "title": "Create Upload Request",
        "required": [
          "external_sip_connection",
          "outbound/outbound_voice_profile_id"
        ],
        "type": "object",
        "properties": {
          "number_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Phone number ID from the Telnyx API."
            }
          },
          "usage": {
            "enum": [
              "calling_user_assignment",
              "first_party_app_assignment"
            ],
            "type": "string",
            "description": "The use case of the upload request. NOTE: `calling_user_assignment` is not supported for toll free numbers."
          },
          "additional_usages": {
            "type": "array",
            "items": {
              "enum": [
                "calling_user_assignment",
                "first_party_app_assignment"
              ],
              "type": "string",
              "description": "Additional use cases of the upload request. If not provided, all supported usages will be used."
            }
          },
          "location_id": {
            "type": "string",
            "description": "Identifies the location to assign all phone numbers to.",
            "format": "uuid"
          },
          "civic_address_id": {
            "type": "string",
            "description": "Identifies the civic address to assign all phone numbers to.",
            "format": "uuid"
          }
        },
        "example": {
          "number_ids": [
            "3920457616934164700",
            "3920457616934164701",
            "3920457616934164702",
            "3920457616934164703"
          ],
          "usage": "first_party_app_assignment",
          "location_id": "67ea7693-9cd5-4a68-8c76-abb3aa5bf5d2"
        }
      },
      "CreateFaxApplicationRequest": {
        "title": "Create Fax Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "type": "object",
        "properties": {
          "application_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Fax Application."
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateFineTuningJobRequest": {
        "title": "CreateFineTuningJobRequest",
        "required": [
          "model",
          "training_file"
        ],
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The base model that is being fine-tuned."
          },
          "training_file": {
            "type": "string",
            "description": "The storage bucket or object used for training."
          },
          "suffix": {
            "type": "string",
            "description": "Optional suffix to append to the fine tuned model's name."
          },
          "hyperparameters": {
            "required": [
              "model",
              "training_file"
            ],
            "type": "object",
            "properties": {
              "n_epochs": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset. 'auto' decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.",
                "default": 3
              }
            },
            "description": "The hyperparameters used for the fine-tuning job."
          }
        }
      },
      "CreateFqdnConnectionRequest": {
        "title": "Create FQDN Connection Request",
        "required": [
          "connection_name"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "default": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "title": "Connection Name",
            "type": "string",
            "description": "A user-assigned name to help manage the connection.",
            "example": "office-connection"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "microsoft_teams_sbc": {
            "type": "boolean",
            "description": "When enabled, the connection will be created for Microsoft Teams Direct Routing. A *.mstsbc.telnyx.tech FQDN will be created for the connection automatically.",
            "default": false
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "$ref": "#/components/schemas/WebhookApiVersion"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundFqdn"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "ani_override": "+1234567890",
            "ani_override_type": "always",
            "call_parking_enabled": true,
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "instant_ringback_enabled": true,
            "ip_authentication_method": "token",
            "ip_authentication_token": "aBcD1234",
            "localization": "string",
            "outbound_voice_profile_id": "1293384261075731499",
            "t38_reinvite_source": "customer",
            "tech_prefix": "0123",
            "encrypted_media": "string",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10
          }
        }
      },
      "CreateFqdnRequest": {
        "title": "Create Fqdn Request",
        "required": [
          "fqdn",
          "dns_record_type",
          "connection_id"
        ],
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this IP should be attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "nullable": true,
            "example": 5060
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          }
        },
        "example": {
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 8080,
          "dns_record_type": "a"
        }
      },
      "CreateGroupMMSMessageRequest": {
        "title": "CreateGroupMMSMessageRequest",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number, in +E.164 format, used to send the message.",
            "format": "address"
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Receiving address (+E.164 formatted phone number or short code).",
              "format": "address",
              "example": "+E.164"
            },
            "description": "A list of destinations. No more than 8 destinations are allowed."
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string."
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            },
            "description": "A list of media URLs. The total media size must be less than 1 MB."
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          }
        },
        "example": {
          "from": "+13125551234",
          "to": [
            "+18655551234",
            "+14155551234"
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true
        }
      },
      "CreateInboundIpRequest": {
        "title": "Create Inbound Ip Request",
        "type": "object",
        "properties": {
          "ani_number_format": {
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "type": "string",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
            "default": "E.164-national"
          },
          "dnis_number_format": {
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "type": "string",
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_routing_method": {
            "enum": [
              "sequential",
              "round-robin"
            ],
            "type": "string",
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed."
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "default": null
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)",
            "default": false
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "enum": [
              "US",
              "Europe",
              "Australia"
            ],
            "type": "string",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "default": "US"
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls."
          },
          "sip_subdomain_receive_settings": {
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user)."
          },
          "timeout_1xx_secs": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          },
          "shaken_stir_enabled": {
            "type": "boolean",
            "description": "When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.",
            "default": false
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": "G722",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20,
          "shaken_stir_enabled": true
        }
      },
      "CreateIntegrationSecretRequest": {
        "title": "CreateIntegrationSecretRequest",
        "required": [
          "identifier",
          "type"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "title": "Identifier",
            "type": "string",
            "description": "The unique identifier of the secret."
          },
          "type": {
            "title": "Type",
            "enum": [
              "bearer",
              "basic"
            ],
            "type": "string",
            "description": "The type of secret."
          },
          "token": {
            "title": "Token",
            "type": "string",
            "description": "The token for the secret. Required for bearer type secrets, ignored otherwise."
          },
          "username": {
            "title": "Username",
            "type": "string",
            "description": "The username for the secret. Required for basic type secrets, ignored otherwise."
          },
          "password": {
            "title": "Password",
            "type": "string",
            "description": "The password for the secret. Required for basic type secrets, ignored otherwise."
          }
        }
      },
      "CreateIosPushCredentialRequest": {
        "title": "Create iOS push credential request",
        "required": [
          "type",
          "certificate",
          "private_key",
          "alias"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "ios"
            ],
            "type": "string",
            "description": "Type of mobile push credential. Should be <code>ios</code> here"
          },
          "certificate": {
            "type": "string",
            "description": "Certificate as received from APNs",
            "example": "-----BEGIN CERTIFICATE----- MIIGVDCCBTKCAQEAsNlRJVZn9ZvXcECQm65czs... -----END CERTIFICATE-----"
          },
          "private_key": {
            "type": "string",
            "description": "Corresponding private key to the certificate as received from APNs",
            "example": "-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAsNlRJVZn9ZvXcECQm65czs... -----END RSA PRIVATE KEY-----"
          },
          "alias": {
            "type": "string",
            "description": "Alias to uniquely identify the credential",
            "example": "LucyIosCredential"
          }
        }
      },
      "CreateIpConnectionRequest": {
        "title": "Create IP Connection Request",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "transport_protocol": {
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP",
            "example": "UDP"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true,
            "example": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false,
            "example": true
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false,
            "example": false
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CreateInboundIpRequest"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": false,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound:": {
            "ani_number_format": "+E.164",
            "dns_number_format": "+e164",
            "codecs": "G722",
            "default_primary_ip_id": "192.168.0.0",
            "default_tertiary_ip_id": "192.168.0.0",
            "default_secondary_ip_id": "192.168.0.0",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "test",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "customer",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateIpRequest": {
        "title": "Create Ip Request",
        "required": [
          "ip_address"
        ],
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          }
        },
        "example": {
          "connection_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "ip_address": "192.168.0.0",
          "port": 5060
        }
      },
      "CreateLongCodeMessageRequest": {
        "title": "CreateLongCodeMessageRequest",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number, in +E.164 format, used to send the message.",
            "format": "address"
          },
          "to": {
            "type": "string",
            "description": "Receiving address (+E.164 formatted phone number or short code).",
            "format": "address",
            "example": "+E.164"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            },
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The protocol for sending the message, either SMS or MMS."
          },
          "auto_detect": {
            "type": "boolean",
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+13125550002",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateManagedAccountRequest": {
        "title": "Create Managed Account Request",
        "required": [
          "business_name"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address for the managed account. If not provided, the email address will be generated based on the email address of the manager account.",
            "example": "new_managed_account@customer.org"
          },
          "password": {
            "type": "string",
            "description": "Password for the managed account. If a password is not supplied, the account will not be able to be signed into directly. (A password reset may still be performed later to enable sign-in via password.)",
            "example": "3jVjLq!tMuWKyWx4NN*CvhnB"
          },
          "business_name": {
            "type": "string",
            "description": "The name of the business for which the new managed account is being created, that will be used as the managed accounts's organization's name.",
            "example": "Larry's Cat Food Inc"
          },
          "managed_account_allow_custom_pricing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the managed account is able to have custom pricing set for it or not. If false, uses the pricing of the manager account. Defaults to false. This value may be changed after creation, but there may be time lag between when the value is changed and pricing changes take effect.",
            "example": false
          },
          "rollup_billing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the billing information and charges to the managed account \"roll up\" to the manager account. If true, the managed account will not have its own balance and will use the shared balance with the manager account. This value cannot be changed after account creation without going through Telnyx support as changes require manual updates to the account ledger. Defaults to false.",
            "example": false
          }
        },
        "example": {
          "email": "larry_cat_food@customer.org",
          "password": "3jVjLq!tMuWKyWx4NN*CvhnB",
          "business_name": "Larry's Cat Food Inc",
          "managed_account_allow_custom_pricing": false,
          "rollup_billing": false
        }
      },
      "CreateMessageRequest": {
        "title": "CreateMessageRequest",
        "required": [
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).\n\n**Required if sending with a phone number, short code, or alphanumeric sender ID.**\n",
            "format": "address"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.\n\n**Required if sending via number pool or with an alphanumeric sender ID.**\n"
          },
          "to": {
            "type": "string",
            "description": "Receiving address (+E.164 formatted phone number or short code).",
            "format": "address",
            "example": "+E.164"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            },
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The protocol for sending the message, either SMS or MMS."
          },
          "auto_detect": {
            "type": "boolean",
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateMessagingHostedNumberOrderRequest": {
        "title": "CreateMessagingHostedNumberOrderRequest",
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            },
            "description": "Phone numbers to be used for hosted messaging."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Automatically associate the number with this messaging profile ID when the order is complete."
          }
        },
        "example": {
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "phone_numbers": [
            "+18665550001",
            "+18665550002"
          ]
        }
      },
      "CreateMessagingProfileRequest": {
        "title": "CreateMessagingProfileRequest",
        "required": [
          "name",
          "whitelisted_destinations"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A user friendly name for the messaging profile."
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code."
            },
            "description": "Destinations to which the messaging profile is allowed to send. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]` all destinations will be allowed."
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the messaging profile is enabled or not.",
            "default": true
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.",
            "default": "2"
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "nullable": true
          },
          "daily_spend_limit": {
            "pattern": "^[0-9]+(?:\\.[0-9]+)?$",
            "type": "string",
            "description": "The maximum amount of money (in USD) that can be spent by this profile before midnight UTC."
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Whether to enforce the value configured by `daily_spend_limit`."
          },
          "mms_fall_back_to_sms": {
            "type": "boolean",
            "description": "enables SMS fallback for MMS messages.",
            "default": false
          },
          "mms_transcoding": {
            "type": "boolean",
            "description": "enables automated resizing of MMS media.",
            "default": false
          }
        },
        "example": {
          "name": "My name",
          "enabled": true,
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "webhook_api_version": "2",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 1,
            "skip_unhealthy": true,
            "sticky_sender": false,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "whitelisted_destinations": [
            "US"
          ]
        }
      },
      "CreateNumberBlockOrderRequest": {
        "title": "CreateNumberBlockOrderRequest",
        "required": [
          "starting_number",
          "range"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_block_order"
          },
          "starting_number": {
            "type": "string",
            "description": "Starting phone number block",
            "format": "e164_phone_number",
            "writeOnly": true,
            "example": "+19705555000"
          },
          "range": {
            "type": "integer",
            "description": "The phone number range included in the block.",
            "writeOnly": true,
            "example": 10
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "readOnly": true,
            "example": 10
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with this phone number.",
            "example": "346789098765567"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "readOnly": true,
            "example": true
          },
          "errors": {
            "type": "string",
            "description": "Errors the reservation could happen upon",
            "readOnly": true,
            "example": "Number is already on hold"
          }
        },
        "example": {
          "starting_number": "+19705555000",
          "range": 10
        }
      },
      "CreateNumberOrderRequest": {
        "title": "CreateNumberOrderRequest",
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "required": [
                "phone_number"
              ],
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "description": "e164_phone_number",
                  "example": "+19705555098"
                },
                "requirement_group_id": {
                  "type": "string",
                  "description": "ID of requirement group to use to satisfy number requirements",
                  "example": "dbbd94ee-9079-488f-80ba-f566b247fd7"
                },
                "bundle_id": {
                  "type": "string",
                  "description": "ID of bundle to associate the number to",
                  "example": "bc8e4d67-33a0-4cbb-af74-7b58f05bd494"
                }
              }
            },
            "writeOnly": true
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with this phone number.",
            "example": "346789098765567"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          }
        },
        "example": {
          "phone_numbers": [
            {
              "phone_number": "+19705555098",
              "bundle_id": "bc8e4d67-33a0-4cbb-af74-7b58f05bd494"
            },
            {
              "phone_number": "+492111609539",
              "requirement_group_id": "dbbd94ee-9079-488f-80ba-f566b247fd79"
            }
          ],
          "connection_id": "346789098765567",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600",
          "billing_group_id": "abc85f64-5717-4562-b3fc-2c9600",
          "customer_reference": "MY REF 001"
        }
      },
      "CreateNumberPoolMessageRequest": {
        "title": "CreateNumberPoolMessageRequest",
        "required": [
          "to",
          "messaging_profile_id"
        ],
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "type": "string",
            "description": "Receiving address (+E.164 formatted phone number or short code).",
            "format": "address",
            "example": "+E.164"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            },
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The protocol for sending the message, either SMS or MMS."
          },
          "auto_detect": {
            "type": "boolean",
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "to": [
            "+13125550002"
          ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateNumberReservationRequest": {
        "title": "CreateNumberReservationRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_reservation"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedPhoneNumber"
            }
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the entire reservation.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the numbers reservation was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number reservation was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "number_reservation",
          "phone_numbers": [
            {
              "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
              "record_type": "reserved_phone_number",
              "phone_number": "+19705555098",
              "status": "pending",
              "created_at": "2018-01-01",
              "updated_at": "2018-01-01",
              "expired_at": "2018-01-01"
            }
          ],
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "CreateOutboundVoiceProfileRequest": {
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office"
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "nullable": true,
            "example": 10
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "default": true,
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "default": false,
            "example": true
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "format": "uuid",
            "default": null,
            "nullable": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        },
        "example": {
          "name": "office",
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "CreatePortingOrder": {
        "title": "CreatePortingOrder",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of +E.164 formatted phone numbers"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer-specified reference number for customer bookkeeping purposes",
            "example": "Acct 123abc"
          }
        }
      },
      "CreatePortingOrderComment": {
        "title": "CreatePortingOrderComment",
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "example": "Please, let me know when the port completes"
          }
        }
      },
      "CreateRoomClientTokenRequest": {
        "title": "CreateRoomClientTokenRequest",
        "type": "object",
        "properties": {
          "token_ttl_secs": {
            "maximum": 3600,
            "minimum": 10,
            "type": "integer",
            "description": "The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
            "default": 600,
            "example": 600
          },
          "refresh_token_ttl_secs": {
            "maximum": 86400,
            "minimum": 60,
            "type": "integer",
            "description": "The time to live in seconds of the Refresh Token, after that time the Refresh Token is invalid and can't be used to refresh Client Token.",
            "default": 3600,
            "example": 3600
          }
        }
      },
      "CreateRoomCompositionRequest": {
        "title": "CreateRoomCompositionRequest",
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "The desired format of the room composition.",
            "default": "mp4",
            "nullable": true,
            "example": "mp4"
          },
          "resolution": {
            "type": "string",
            "description": "The desired resolution (width/height in pixels) of the resulting video of the room composition. Both width and height are required to be between 16 and 1280; and width * height should not exceed 1280 * 720",
            "default": "1280x720",
            "nullable": true,
            "example": "800x600"
          },
          "session_id": {
            "type": "string",
            "description": "id of the room session associated with the room composition.",
            "format": "uuid",
            "nullable": true,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "video_layout": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/VideoRegion"
            },
            "description": "Describes the video layout of the room composition in terms of regions."
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this room composition will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this room composition will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          }
        }
      },
      "CreateRoomRequest": {
        "title": "CreateRoomRequest",
        "type": "object",
        "properties": {
          "unique_name": {
            "type": "string",
            "description": "The unique (within the Telnyx account scope) name of the room.",
            "example": "My room"
          },
          "max_participants": {
            "maximum": 50,
            "minimum": 2,
            "type": "integer",
            "description": "The maximum amount of participants allowed in a room. If new participants try to join after that limit is reached, their request will be rejected.",
            "default": 10,
            "example": 10
          },
          "enable_recording": {
            "type": "boolean",
            "description": "Enable or disable recording for that room.",
            "default": false,
            "example": true
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this room will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this room will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          }
        }
      },
      "CreateScheduledEventRequest": {
        "title": "CreateScheduledEventRequest",
        "required": [
          "telnyx_conversation_channel",
          "telnyx_end_user_target",
          "telnyx_agent_target",
          "scheduled_at_fixed_datetime"
        ],
        "type": "object",
        "properties": {
          "telnyx_conversation_channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "telnyx_end_user_target": {
            "title": "Telnyx End User Target",
            "type": "string",
            "description": "The phone number, SIP URI, to schedule the call or text to."
          },
          "telnyx_agent_target": {
            "title": "Telnyx Agent Target",
            "type": "string",
            "description": "The phone number, SIP URI, to schedule the call or text from."
          },
          "scheduled_at_fixed_datetime": {
            "title": "Scheduled At Fixed Datetime",
            "type": "string",
            "description": "The datetime at which the event should be scheduled. Formatted as ISO 8601.",
            "format": "date-time",
            "example": "2025-04-15T13:07:28.7640000+00:00"
          },
          "text": {
            "type": "string",
            "description": "Required for sms scheduled events. The text to be sent to the end user."
          },
          "conversation_metadata": {
            "title": "Conversation Metadata",
            "type": "object",
            "additionalProperties": { },
            "description": "Metadata associated with the conversation. Telnyx provides several pieces of metadata, but customers can also add their own."
          }
        }
      },
      "CreateShortCodeMessageRequest": {
        "title": "CreateShortCodeMessageRequest",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number, in +E.164 format, used to send the message.",
            "format": "address"
          },
          "to": {
            "type": "string",
            "description": "Receiving address (+E.164 formatted phone number or short code).",
            "format": "address",
            "example": "+E.164"
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "url"
            },
            "description": "A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url"
          },
          "use_profile_webhooks": {
            "type": "boolean",
            "description": "If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.",
            "default": true
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The protocol for sending the message, either SMS or MMS."
          },
          "auto_detect": {
            "type": "boolean",
            "description": "Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.",
            "default": false
          }
        },
        "example": {
          "from": "+18445550001",
          "to": "+18445550001",
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media_urls": [
            "http://example.com"
          ],
          "webhook_url": "http://example.com/webhooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "use_profile_webhooks": true,
          "type": "MMS"
        }
      },
      "CreateSubNumberOrdersReportRequest": {
        "title": "CreateSubNumberOrdersReportRequest",
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "Filter by order status",
            "example": "success"
          },
          "country_code": {
            "type": "string",
            "description": "Filter by country code",
            "example": "US"
          },
          "created_at_gt": {
            "type": "string",
            "description": "Filter for orders created after this date",
            "format": "date-time",
            "example": "2023-04-05T10:22:08.2305490+00:00"
          },
          "created_at_lt": {
            "type": "string",
            "description": "Filter for orders created before this date",
            "format": "date-time",
            "example": "2025-06-05T10:22:08.2305490+00:00"
          },
          "order_request_id": {
            "type": "string",
            "description": "Filter by specific order request ID",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c293"
          },
          "customer_reference": {
            "type": "string",
            "description": "Filter by customer reference",
            "example": "STRING"
          }
        },
        "example": {
          "status": "success",
          "country_code": "US",
          "created_at_gt": "2023-04-05T10:22:08.2305490+00:00",
          "created_at_lt": "2025-06-05T10:22:08.2305490+00:00",
          "order_request_id": "12ade33a-21c0-473b-b055-b3c836e1c293",
          "customer_reference": "STRING"
        }
      },
      "CreateTeXMLSecretRequest": {
        "title": "Create TeXML Secret request",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name used as a reference for the secret, if the name already exists within the account its value will be replaced",
            "example": "My Secret Name"
          },
          "value": {
            "type": "string",
            "description": "Secret value which will be used when rendering the TeXML template",
            "example": "My Secret Value"
          }
        },
        "example": {
          "name": "My Secret Name",
          "value": "My Secret Value"
        }
      },
      "CreateTeXMLSecretResult": {
        "title": "Create TeXML Secret result",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My Secret Name"
          },
          "value": {
            "$ref": "#/components/schemas/CreateTeXMLSecretResult_value"
          }
        },
        "example": {
          "name": "My Secret Name",
          "value": "*****"
        }
      },
      "CreateTexmlApplicationRequest": {
        "title": "Create Texml Application Request",
        "required": [
          "friendly_name",
          "voice_url"
        ],
        "type": "object",
        "properties": {
          "friendly_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "title": "First Command Timeout",
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "title": "First Command Timeout Secs",
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Texml Application."
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "url",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "format": "url",
            "default": null,
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "format": "url",
            "default": null,
            "example": "https://example.com"
          },
          "status_callback_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "default": "post",
            "example": "get"
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "shaken_stir_enabled": {
                "type": "boolean",
                "description": "When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.",
                "default": false,
                "example": false
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "friendly_name": "call-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "tags": [
            "tag1",
            "tag2"
          ],
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CreateUserBundlesBulkRequest": {
        "title": "CreateUserBundlesBulkRequest",
        "type": "object",
        "properties": {
          "idempotency_key": {
            "type": "string",
            "description": "Idempotency key for the request. Can be any UUID, but should always be unique for each request.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "items": {
            "type": "array",
            "items": {
              "required": [
                "billing_bundle_id",
                "quantity"
              ],
              "type": "object",
              "properties": {
                "billing_bundle_id": {
                  "type": "string",
                  "description": "Quantity of user bundles to order.",
                  "format": "uuid",
                  "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of user bundles to order."
                }
              }
            },
            "writeOnly": true
          }
        }
      },
      "CreateVerificationRequestCall": {
        "title": "CreateVerificationRequestCall",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "+E164 formatted phone number.",
            "example": "+13035551234"
          },
          "verify_profile_id": {
            "type": "string",
            "description": "The identifier of the associated Verify profile.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "custom_code": {
            "type": "string",
            "description": "Send a self-generated numeric code to the end-user",
            "default": null,
            "nullable": true,
            "example": "43612"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds the verification code is valid for.",
            "example": 300
          }
        },
        "description": "The request body when creating a verification."
      },
      "CreateVerificationRequestFlashcall": {
        "title": "CreateVerificationRequestFlashcall",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "+E164 formatted phone number.",
            "example": "+13035551234"
          },
          "verify_profile_id": {
            "type": "string",
            "description": "The identifier of the associated Verify profile.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds the verification code is valid for.",
            "example": 300
          }
        },
        "description": "The request body when creating a verification."
      },
      "CreateVerificationRequestSMS": {
        "title": "CreateVerificationRequestSMS",
        "required": [
          "phone_number",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "+E164 formatted phone number.",
            "example": "+13035551234"
          },
          "verify_profile_id": {
            "type": "string",
            "description": "The identifier of the associated Verify profile.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "custom_code": {
            "type": "string",
            "description": "Send a self-generated numeric code to the end-user",
            "default": null,
            "nullable": true,
            "example": "43612"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds the verification code is valid for.",
            "example": 300
          }
        },
        "description": "The request body when creating a verification."
      },
      "CreateVerificationResponse": {
        "title": "CreateVerifyVerificationResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Verification"
          }
        }
      },
      "CreateVerifiedNumberResponse": {
        "title": "CreateVerifiedNumberResponse",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "example": "+15551234567"
          },
          "verification_method": {
            "type": "string",
            "example": "sms"
          }
        }
      },
      "CreateVerifyProfileCallRequest": {
        "title": "CreateVerifyProfileCallRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "CreateVerifyProfileFlashcallRequest": {
        "title": "CreateVerifyProfileFlashcallRequest",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "CreateVerifyProfileSMSRequest": {
        "title": "CreateVerifyProfileSMSRequest",
        "required": [
          "whitelisted_destinations"
        ],
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "default": "Telnyx",
            "nullable": true
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "UpdatePortingOrdersActivationJob": {
        "title": "UpdatePortingOrdersActivationJob",
        "type": "object",
        "properties": {
          "activate_at": {
            "type": "string",
            "description": "The desired activation time. The activation time should be between any of the activation windows.",
            "format": "date-time",
            "example": "2019-01-01T00:00:00.0000000+00:00"
          }
        }
      },
      "CreatedUserBundlesResponse": {
        "title": "CreatedUserBundlesResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBundle"
            }
          }
        }
      },
      "CreatedVerificationCodesResponse": {
        "title": "CreatedVerificationCodesResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": { }
          }
        }
      },
      "SharePortingOrder": {
        "title": "SharePortingOrder",
        "type": "object",
        "properties": {
          "expires_in_seconds": {
            "maximum": 172800,
            "minimum": 1,
            "type": "integer",
            "description": "The number of seconds the token will be valid for"
          },
          "permissions": {
            "enum": [
              "porting_order.document.read",
              "porting_order.document.update"
            ],
            "type": "string",
            "description": "The permissions the token will have"
          }
        },
        "example": {
          "expires_in_seconds": 3600,
          "permissions": [
            "porting_order.document.read",
            "porting_order.document.update"
          ]
        }
      },
      "CredentialConnection": {
        "title": "Credential Connection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "credential_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters). At least one of the first 5 characters must be a letter.",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "created_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "sip_uri_calling_preference": {
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ],
            "type": "string",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).",
            "example": "disabled"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "credential_connection",
          "active": true,
          "user_name": "myusername123",
          "password": "my123secure456password789",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "sip_uri_calling_preference": "disabled",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtp+1",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 15,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "customer",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "CredentialInbound": {
        "title": "Credential Inbound",
        "type": "object",
        "properties": {
          "ani_number_format": {
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "type": "string",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
            "default": "E.164-national"
          },
          "dnis_number_format": {
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "type": "string",
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "default": null
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)",
            "default": false
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "timeout_1xx_secs": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "default": 3
          },
          "timeout_2xx_secs": {
            "maximum": 600,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          },
          "shaken_stir_enabled": {
            "type": "boolean",
            "description": "When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.",
            "default": false
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": "G722",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "sip_compact_headers_enabled": true,
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20,
          "shaken_stir_enabled": true
        }
      },
      "CredentialOutbound": {
        "title": "Credential Outbound",
        "type": "object",
        "properties": {
          "call_parking_enabled": {
            "type": "boolean",
            "description": "Forces all SIP calls originated on this connection to be \"parked\" instead of \"bridged\" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next.",
            "default": false,
            "nullable": true
          },
          "ani_override": {
            "type": "string",
            "description": "Set a phone number as the ani_override value to override caller id number on outbound calls."
          },
          "ani_override_type": {
            "enum": [
              "always",
              "normal",
              "emergency"
            ],
            "type": "string",
            "description": "Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.",
            "default": "always"
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
            "default": null
          },
          "instant_ringback_enabled": {
            "type": "boolean",
            "description": "When set, ringback will not wait for indication before sending ringback tone to calling party.",
            "default": true
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "localization": {
            "type": "string",
            "description": "A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.",
            "default": "US",
            "example": "US"
          },
          "t38_reinvite_source": {
            "enum": [
              "telnyx",
              "customer",
              "disabled",
              "passthru",
              "caller-passthru",
              "callee-passthru"
            ],
            "type": "string",
            "description": "This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.",
            "default": "telnyx"
          },
          "outbound_voice_profile_id": {
            "title": "Outbound Voice Profile ID",
            "type": "string",
            "description": "Identifies the associated outbound voice profile.",
            "format": "int64",
            "example": "1293384261075731499"
          }
        },
        "example": {
          "call_parking_enabled": true,
          "ani_override": "always",
          "channel_limit": 10,
          "instant_ringback_enabled": true,
          "generate_ringback_tone": true,
          "localization": "US",
          "t38_reinvite_source": "customer",
          "outbound_voice_profile_id": "1293384261075731499"
        }
      },
      "DeletePortingOrder_204": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "CredentialsResponse": {
        "title": "CredentialsResponse",
        "required": [
          "data",
          "connection_id",
          "record_type"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomStorageConfiguration"
          },
          "connection_id": {
            "type": "string",
            "description": "Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.",
            "example": "1234567890"
          },
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          }
        }
      },
      "CsvDownload": {
        "title": "CsvDownload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "readOnly": true,
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "csv_download"
          },
          "url": {
            "type": "string",
            "description": "The URL at which the CSV file can be retrieved.",
            "example": "https://www.telnyx.com/sample/42587e44-3a3e-46de-9255-0c9a7a1d1ec7"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "failed",
              "expired"
            ],
            "type": "string",
            "description": "Indicates the completion level of the CSV report. Only complete CSV download requests will be able to be retrieved.",
            "default": "pending",
            "example": "pending"
          }
        },
        "example": {
          "id": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "record_type": "csv_download",
          "url": "https://www.telnyx.com/sample/42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "status": "pending"
        }
      },
      "Cursor": {
        "title": "Cursor",
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "description": "Opaque identifier of next page.",
            "example": "v1:g3QAAAADZAAKdGVsbnl4X2lkc2wAAAABbQAAACRlYmRiYzdkNi1kZWRmLTExZWQtYTM3MS0wMjQyMGFlZjAwYjRqZAAJdGltZXN0YW1wbggA8Le4pGhpVxdkAAR0eXBlZAAFYWZ0ZXI="
          },
          "before": {
            "type": "string",
            "description": "Opaque identifier of previous page.",
            "example": "v1:g3QAAAADZAAKdGVsbnl4X2lkc2wAAAABbQAAACRlYmRiYzdkNi1kZWRmLTExZWQtYTM3MS0wMjQyMGFlZjAwYjRqZAAJdGltZXN0YW1wbggA8Le4pGhpVxdkAAR0eXBlZAAFYWZ0ZXI="
          }
        }
      },
      "CursorPaginationMeta": {
        "title": "Cursor Pagination Meta",
        "type": "object",
        "properties": {
          "cursors": {
            "$ref": "#/components/schemas/Cursor"
          },
          "next": {
            "type": "string",
            "description": "Path to next page.",
            "example": "/v2/recording_transcriptions?page[after]=v1:g3QAAAADZAAKdGVsbnl4X2lkc2wAAAABbQAAACRlYmRiYzdkNi1kZWRmLTExZWQtYTM3MS0wMjQyMGFlZjAwYjRqZAAJdGltZXN0YW1wbggA8Le4pGhpVxdkAAR0eXBlZAAFYWZ0ZXI="
          },
          "previous": {
            "type": "string",
            "description": "Path to previous page.",
            "example": "/v2/recording_transcriptions?page[before]=v1:g3QAAAADZAAKdGVsbnl4X2lkc2wAAAABbQAAACRlYmRiYzdkNi1kZWRmLTExZWQtYTM3MS0wMjQyMGFlZjAwYjRqZAAJdGltZXN0YW1wbggA8Le4pGhpVxdkAAR0eXBlZAAFYWZ0ZXI="
          }
        }
      },
      "CustomSipHeader": {
        "title": "Custom SIP Header",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the header to add.",
            "example": "head_1"
          },
          "value": {
            "type": "string",
            "description": "The value of the header.",
            "example": "val_1"
          }
        },
        "example": {
          "name": "head_1",
          "value": "val_1"
        }
      },
      "CustomStorageConfiguration": {
        "title": "Custom Storage Configuration",
        "required": [
          "backend",
          "configuration"
        ],
        "type": "object",
        "properties": {
          "backend": {
            "enum": [
              "gcs",
              "s3",
              "azure"
            ],
            "type": "string",
            "example": "gcs"
          },
          "configuration": { }
        }
      },
      "CustomerServiceRecord": {
        "title": "CustomerServiceRecord",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this customer service record",
            "format": "uuid",
            "readOnly": true,
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number of the customer service record.",
            "example": "+12065551212"
          },
          "status": {
            "enum": [
              "pending",
              "completed",
              "failed"
            ],
            "type": "string",
            "description": "The status of the customer service record",
            "example": "completed"
          },
          "error_message": {
            "type": "string",
            "description": "The error message in case status is `failed`. This field would be null in case of `pending` or `completed` status.",
            "example": "CSR information not available."
          },
          "result": {
            "type": "object",
            "properties": {
              "carrier_name": {
                "type": "string",
                "description": "The name of the carrier that the customer service record is for.",
                "example": "ABC CARRIER, INC."
              },
              "associated_phone_numbers": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "+12065551212"
                },
                "description": "The associated phone numbers of the customer service record."
              },
              "admin": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the customer service record.",
                    "example": "John Doe"
                  },
                  "billing_phone_number": {
                    "type": "string",
                    "description": "The billing phone number of the customer service record.",
                    "example": "+12065551212"
                  },
                  "account_number": {
                    "type": "string",
                    "description": "The account number of the customer service record.",
                    "example": "1234567890"
                  },
                  "authorized_person_name": {
                    "type": "string",
                    "description": "The authorized person name of the customer service record.",
                    "example": "John Doe"
                  }
                },
                "description": "The admin of the customer service record."
              },
              "address": {
                "type": "object",
                "properties": {
                  "administrative_area": {
                    "type": "string",
                    "description": "The state of the address",
                    "example": "NY"
                  },
                  "locality": {
                    "type": "string",
                    "description": "The city of the address",
                    "example": "New York"
                  },
                  "postal_code": {
                    "type": "string",
                    "description": "The zip code of the address",
                    "example": "10001"
                  },
                  "street_address": {
                    "type": "string",
                    "description": "The street address",
                    "example": "123 Main St"
                  },
                  "full_address": {
                    "type": "string",
                    "description": "The full address",
                    "example": "123 Main St; New York; NY; 10001"
                  }
                },
                "description": "The address of the customer service record"
              }
            },
            "description": "The result of the CSR request. This field would be null in case of `pending` or `failed` status."
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "customer_service_record"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "CustomerServiceRecordAdditionalData": {
        "title": "CustomerServiceRecordAdditionalData",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the administrator of CSR.",
            "example": "Entity Inc."
          },
          "authorized_person_name": {
            "type": "string",
            "description": "The name of the authorized person.",
            "example": "John Doe"
          },
          "pin": {
            "type": "string",
            "description": "The PIN of the customer service record.",
            "example": "1234"
          },
          "account_number": {
            "type": "string",
            "description": "The account number of the customer service record.",
            "example": "123456789"
          },
          "customer_code": {
            "type": "string",
            "description": "The customer code of the customer service record.",
            "example": "123456789"
          },
          "address_line_1": {
            "type": "string",
            "description": "The first line of the address of the customer service record.",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "description": "The city of the customer service record.",
            "example": "New York"
          },
          "state": {
            "maxLength": 2,
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "The state of the customer service record.",
            "example": "NY"
          },
          "zip_code": {
            "maxLength": 5,
            "pattern": "^\\d{5}$",
            "type": "string",
            "description": "The zip code of the customer service record.",
            "example": "10001"
          },
          "billing_phone_number": {
            "pattern": "^\\+1\\d{10}$",
            "type": "string",
            "description": "The billing phone number of the customer service record.",
            "example": "+12065551212"
          }
        }
      },
      "CustomerServiceRecordPhoneNumberCoverage": {
        "title": "CustomerServiceRecordPhoneNumberCoverage",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number that is being verified.",
            "example": "+12223334444"
          },
          "has_csr_coverage": {
            "type": "boolean",
            "description": "Indicates whether the phone number is covered or not.",
            "example": true
          },
          "reason": {
            "type": "string",
            "description": "The reason why the phone number is not covered. Only returned if `has_csr_coverage` is false.",
            "example": "The phone number '+19999999999' is invalid."
          },
          "additional_data_required": {
            "type": "array",
            "items": {
              "enum": [
                "name",
                "authorized_person_name",
                "account_number",
                "customer_code",
                "pin",
                "address_line_1",
                "city",
                "state",
                "zip_code",
                "billing_phone_number"
              ],
              "type": "string",
              "example": "name"
            },
            "description": "Additional data required to perform CSR for the phone number. Only returned if `has_csr_coverage` is true."
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "customer_service_record_phone_number_coverage"
          }
        }
      },
      "CustomerServiceRecordStatusChangedEvent": {
        "title": "CustomerServiceRecordStatusChangedEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the callback event.",
            "format": "uuid",
            "example": "d3c462b5-8afa-4d48-9af1-4f9b1f00e7bd"
          },
          "event_type": {
            "enum": [
              "customer_service_record.status_changed"
            ],
            "type": "string",
            "description": "The type of the callback event.",
            "example": "customer_service_record.status_changed"
          },
          "payload": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the customer service record.",
                "format": "uuid",
                "example": "f1486bae-f067-460c-ad43-73a92848f902"
              },
              "phone_number": {
                "type": "string",
                "description": "The phone number of the customer service record.",
                "example": "+12065551212"
              },
              "status": {
                "enum": [
                  "pending",
                  "completed",
                  "failed"
                ],
                "type": "string",
                "description": "The status of the customer service record",
                "example": "completed"
              },
              "updated_at": {
                "type": "string",
                "description": "ISO 8601 formatted date indicating the last time where the resource was updated.",
                "format": "date-time",
                "example": "2021-03-19T10:07:15.5270000+00:00"
              }
            }
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the callback event occurred.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          }
        }
      },
      "DTMFTool": {
        "title": "DTMFTool",
        "required": [
          "type",
          "send_dtmf"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "send_dtmf"
            ],
            "type": "string"
          },
          "send_dtmf": {
            "type": "object"
          }
        }
      },
      "CreatePhoneNumberConfigurations": {
        "title": "CreatePhoneNumberConfigurations",
        "type": "object",
        "properties": {
          "phone_number_configurations": {
            "maxItems": 20,
            "type": "array",
            "items": {
              "required": [
                "porting_phone_number_id",
                "user_bundle_id"
              ],
              "type": "object",
              "properties": {
                "porting_phone_number_id": {
                  "type": "string",
                  "description": "Identifies the porting phone number to be configured.",
                  "format": "uuid",
                  "example": "927f4687-318c-44bc-9f2f-22a5898143a4"
                },
                "user_bundle_id": {
                  "type": "string",
                  "description": "Identifies the user bundle to be associated with the porting phone number.",
                  "format": "uuid",
                  "example": "ff901545-3e27-462a-ba9d-2b34654cab82"
                }
              }
            }
          }
        }
      },
      "DefaultGateway": {
        "title": "DefaultGateway",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "title": "DefaultGateway",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "default_gateway"
              },
              "network_id": {
                "type": "string",
                "description": "Network ID.",
                "format": "uuid",
                "readOnly": true,
                "example": "e66c496d-4a85-423b-8b2a-8e63fac20320"
              },
              "wireguard_peer_id": {
                "type": "string",
                "description": "Wireguard peer ID.",
                "format": "uuid",
                "example": "e66c496d-4a85-423b-8b2a-8e63fac20320"
              },
              "status": {
                "$ref": "#/components/schemas/InterfaceStatus"
              }
            }
          }
        ]
      },
      "DeleteObjectsRequest": {
        "title": "DeleteObjectsRequest",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            }
          },
          "xml": {
            "name": "Object"
          }
        },
        "xml": {
          "name": "Delete",
          "wrapped": true
        }
      },
      "DeleteObjectsResponse": {
        "title": "DeleteObjectsResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "DeprecatedInitiateCallRequest": {
        "title": "Initiate Call Request",
        "required": [
          "To",
          "From"
        ],
        "type": "object",
        "properties": {
          "To": {
            "type": "string",
            "description": "The phone number of the called party. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "From": {
            "type": "string",
            "description": "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "CallerId": {
            "type": "string",
            "description": "To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.",
            "example": "Info"
          },
          "Url": {
            "type": "string",
            "description": "The URL from which Telnyx will retrieve the TeXML call instructions.",
            "example": "https://www.example.com/instructions.xml"
          },
          "UrlMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.",
            "default": "POST",
            "example": "GET"
          },
          "FallbackUrl": {
            "type": "string",
            "description": "A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not responding.",
            "example": "https://www.example.com/instructions-fallback.xml"
          },
          "StatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send status callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "StatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `StatusCallback`.",
            "default": "POST",
            "example": "GET"
          },
          "StatusCallbackEvent": {
            "enum": [
              "initiated",
              "ringing",
              "answered",
              "completed"
            ],
            "type": "string",
            "description": "The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.",
            "default": "completed",
            "example": "iniated ringing"
          },
          "MachineDetection": {
            "enum": [
              "Enable",
              "Disable",
              "DetectMessageEnd"
            ],
            "type": "string",
            "description": "Enables Answering Machine Detection.",
            "default": "Disable",
            "example": "Enable"
          },
          "DetectionMode": {
            "enum": [
              "Premium",
              "Regular"
            ],
            "type": "string",
            "description": "Allows you to chose between Premium and Standard detections.",
            "default": "Regular",
            "example": "Premium"
          },
          "AsyncAmd": {
            "type": "boolean",
            "description": "Select whether to perform answering machine detection in the background. By default execution is blocked until Answering Machine Detection is completed.",
            "default": false,
            "example": true
          },
          "AsyncAmdStatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send AMD callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "AsyncAmdStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML Application setting.",
            "default": "POST",
            "example": "GET"
          },
          "MachineDetectionTimeout": {
            "maximum": 60000,
            "minimum": 500,
            "type": "integer",
            "description": "Maximum timeout threshold in milliseconds for overall detection.",
            "default": 30000,
            "example": 5000
          },
          "MachineDetectionSpeechThreshold": {
            "type": "integer",
            "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "MachineDetectionSpeechEndThreshold": {
            "type": "integer",
            "description": "Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.",
            "default": 800,
            "example": 2000
          },
          "MachineDetectionSilenceTimeout": {
            "type": "integer",
            "description": "If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "CancelPlaybackOnMachineDetection": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "CancelPlaybackOnDetectMessageEnd": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "PreferredCodecs": {
            "type": "string",
            "description": "The list of comma-separated codecs to be offered on a call.",
            "example": "PCMA,PCMU"
          },
          "Record": {
            "type": "boolean",
            "description": "Whether to record the entire participant's call leg. Defaults to `false`.",
            "example": false
          },
          "RecordingChannels": {
            "enum": [
              "mono",
              "dual"
            ],
            "type": "string",
            "description": "The number of channels in the final recording. Defaults to `mono`.",
            "example": "dual"
          },
          "RecordingStatusCallback": {
            "type": "string",
            "description": "The URL the recording callbacks will be sent to.",
            "example": "https://example.com/recording_status_callback"
          },
          "RecordingStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "RecordingStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.",
            "example": "in-progress completed absent"
          },
          "RecordingTimeout": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)",
            "default": 0,
            "example": 5
          },
          "RecordingTrack": {
            "enum": [
              "inbound",
              "outbound",
              "both"
            ],
            "type": "string",
            "description": "The audio track to record for the call. The default is `both`.",
            "example": "inbound"
          },
          "SipAuthPassword": {
            "type": "string",
            "description": "The password to use for SIP authentication.",
            "example": "1234"
          },
          "SipAuthUsername": {
            "type": "string",
            "description": "The username to use for SIP authentication.",
            "example": "user"
          },
          "Trim": {
            "enum": [
              "trim-silence",
              "do-not-trim"
            ],
            "type": "string",
            "description": "Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.",
            "example": "false"
          }
        },
        "example": {
          "To": "+13121230000",
          "From": "+13120001234",
          "Url": "https://www.example.com/texml.xml",
          "StatusCallback": "https://www.example.com/statuscallback-listener"
        }
      },
      "DetailRecord": {
        "title": "DetailRecord",
        "required": [
          "record_type",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "description": "An object following one of the schemas published in https://developers.telnyx.com/docs/api/v2/detail-records",
        "discriminator": {
          "propertyName": "record_type",
          "mapping": {
            "MessageDetailRecord": "#/components/schemas/MessageDetailRecord",
            "ConferenceDetailRecord": "#/components/schemas/ConferenceDetailRecord",
            "ConferenceParticipantDetailRecord": "#/components/schemas/ConferenceParticipantDetailRecord",
            "AmdDetailRecord": "#/components/schemas/AmdDetailRecord",
            "VerifyDetailRecord": "#/components/schemas/VerifyDetailRecord",
            "SimCardUsageDetailRecord": "#/components/schemas/SimCardUsageDetailRecord",
            "MediaStorageDetailRecord": "#/components/schemas/MediaStorageDetailRecord"
          }
        }
      },
      "DetailRecordsSearchResponse": {
        "title": "DetailRecordsSearchResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailRecord"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "DialConferenceParticipantRequest": {
        "title": "Create Conference Participant Request",
        "type": "object",
        "properties": {
          "Beep": {
            "enum": [
              "true",
              "false",
              "onEnter",
              "onExit"
            ],
            "type": "string",
            "description": "Whether to play a notification beep to the conference when the participant enters and exits.",
            "example": "onExit"
          },
          "StatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send status callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "StatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `StatusCallback`.",
            "example": "GET"
          },
          "StatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the call's state that should generate a call to `StatusCallback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.",
            "example": "answered completed"
          },
          "To": {
            "type": "string",
            "description": "The phone number of the called party. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "From": {
            "type": "string",
            "description": "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "Timeout": {
            "type": "integer",
            "description": "The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between 5 and 120, inclusive. The default value is 30.",
            "example": 30
          },
          "Muted": {
            "type": "boolean",
            "description": "Whether the participant should be muted.",
            "example": true
          },
          "StartConferenceOnEnter": {
            "type": "boolean",
            "description": "Whether to start the conference when the participant enters. Defaults to `true`.",
            "example": false
          },
          "EndConferenceOnExit": {
            "type": "boolean",
            "description": "Whether to end the conference when the participant leaves. Defaults to `false`.",
            "example": true
          },
          "EarlyMedia": {
            "type": "boolean",
            "description": "Whether participant shall be bridged to conference before the participant answers (from early media if available). Defaults to `false`.",
            "default": false,
            "example": true
          },
          "ConferenceStatusCallback": {
            "type": "string",
            "description": "The URL the conference callbacks will be sent to.",
            "example": "https://example.com/conference_status_callback"
          },
          "ConferenceStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "ConferenceStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the conference's state that should generate a call to `ConferenceStatusCallback`. Can be: `start`, `end`, `join` and `leave`. Separate multiple values with a space. By default no callbacks are sent.",
            "example": "start end join leave"
          },
          "WaitUrl": {
            "type": "string",
            "description": "The URL to call for an audio file to play while the participant is waiting for the conference to start.",
            "example": "https://www.example.com/wait_music.mp3"
          },
          "MaxParticipants": {
            "type": "integer",
            "description": "The maximum number of participants in the conference. Can be a positive integer from 2 to 800. The default value is 250.",
            "example": 30
          },
          "Coaching": {
            "type": "boolean",
            "description": "Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.",
            "example": false
          },
          "CallSidToCoach": {
            "type": "string",
            "description": "The SID of the participant who is being coached. The participant being coached is the only participant who can hear the participant who is coaching.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "CallerId": {
            "type": "string",
            "description": "To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.",
            "example": "Info"
          },
          "TimeLimit": {
            "type": "integer",
            "description": "The maximum duration of the call in seconds.",
            "example": 30
          },
          "MachineDetection": {
            "enum": [
              "Enable",
              "DetectMessageEnd"
            ],
            "type": "string",
            "description": "Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine.",
            "example": "Enable"
          },
          "MachineDetectionTimeout": {
            "type": "integer",
            "description": "How long answering machine detection should go on for before sending an `Unknown` result. Given in milliseconds.",
            "example": 1000
          },
          "MachineDetectionSpeechThreshold": {
            "type": "integer",
            "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "MachineDetectionSpeechEndThreshold": {
            "type": "integer",
            "description": "Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.",
            "default": 800,
            "example": 2000
          },
          "MachineDetectionSilenceTimeout": {
            "type": "integer",
            "description": "If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "AmdStatusCallback": {
            "type": "string",
            "description": "The URL the result of answering machine detection will be sent to.",
            "example": "https://www.example.com/amd_result"
          },
          "AmdStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "CancelPlaybackOnMachineDetection": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "CancelPlaybackOnDetectMessageEnd": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "PreferredCodecs": {
            "type": "string",
            "description": "The list of comma-separated codecs to be offered on a call.",
            "example": "PCMA,PCMU"
          },
          "Record": {
            "type": "boolean",
            "description": "Whether to record the entire participant's call leg. Defaults to `false`.",
            "example": false
          },
          "RecordingChannels": {
            "enum": [
              "mono",
              "dual"
            ],
            "type": "string",
            "description": "The number of channels in the final recording. Defaults to `mono`.",
            "example": "dual"
          },
          "RecordingStatusCallback": {
            "type": "string",
            "description": "The URL the recording callbacks will be sent to.",
            "example": "https://example.com/recording_status_callback"
          },
          "RecordingStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "RecordingStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.",
            "example": "in-progress completed absent"
          },
          "RecordingTrack": {
            "enum": [
              "inbound",
              "outbound",
              "both"
            ],
            "type": "string",
            "description": "The audio track to record for the call. The default is `both`.",
            "example": "inbound"
          },
          "SipAuthPassword": {
            "type": "string",
            "description": "The password to use for SIP authentication.",
            "example": "1234"
          },
          "SipAuthUsername": {
            "type": "string",
            "description": "The username to use for SIP authentication.",
            "example": "user"
          },
          "Trim": {
            "enum": [
              "trim-silence",
              "do-not-trim"
            ],
            "type": "string",
            "description": "Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.",
            "example": "false"
          },
          "ConferenceRecord": {
            "enum": [
              "true",
              "false",
              "record-from-start",
              "do-not-record"
            ],
            "type": "string",
            "description": "Whether to record the conference the participant is joining. Defualts to `do-not-record`. The boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record` respectively.",
            "example": "record-from-start"
          },
          "ConferenceRecordingStatusCallback": {
            "type": "string",
            "description": "The URL the conference recording callbacks will be sent to.",
            "example": "https://example.com/conference_recording_status_callback"
          },
          "ConferenceRecordingStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "ConferenceRecordingStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the conference recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`. `failed` and `absent` are synonymous.",
            "example": "in-progress completed failed absent"
          },
          "ConferenceRecordingTimeout": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)",
            "default": 0,
            "example": 5
          },
          "ConferenceTrim": {
            "enum": [
              "trim-silence",
              "do-not-trim"
            ],
            "type": "string",
            "description": "Whether to trim any leading and trailing silence from the conference recording. Defaults to `trim-silence`.",
            "example": "false"
          }
        },
        "example": {
          "To": "+12065550100",
          "From": "+12065550200"
        }
      },
      "DialogflowConfig": {
        "title": "Dialogflow Config",
        "type": "object",
        "properties": {
          "analyze_sentiment": {
            "type": "boolean",
            "description": "Enable sentiment analysis from Dialogflow.",
            "default": false,
            "example": true
          },
          "partial_automated_agent_reply": {
            "type": "boolean",
            "description": "Enable partial automated agent reply from Dialogflow.",
            "default": false,
            "example": true
          }
        }
      },
      "DialogflowConnection": {
        "title": "Dialogflow Connection Params",
        "required": [
          "service_account"
        ],
        "type": "object",
        "properties": {
          "service_account": {
            "type": "object",
            "description": "The JSON map to connect your Dialoglow account.",
            "example": "{\"service_account\":{\"type\":\"service_account\",\"project_id\":\"your-project-id\",\"private_key_id\":\"your-private-key\",\"private_key\":\"-----BEGIN PRIVATE KEY-----n-----END PRIVATE\",\"client_email\":\"example@example.com\",\"client_id\":\"your-client-id\",\"auth_uri\":\"http://example.com\",\"token_uri\":\"http://example.com\",\"auth_provider_x509_cert_url\":\"http://example.com\",\"client_x509_cert_url\":\"http://example.com\"}}"
          },
          "dialogflow_api": {
            "enum": [
              "cx",
              "es"
            ],
            "type": "string",
            "description": "Determine which Dialogflow will be used.",
            "default": "es",
            "example": "cx"
          },
          "conversation_profile_id": {
            "type": "string",
            "description": "The id of a configured conversation profile on your Dialogflow account. (If you use Dialogflow CX, this param is required)",
            "example": "a-VMHLWzTmKjiJw5S6O0-w"
          },
          "location": {
            "type": "string",
            "description": "The region of your agent is. (If you use Dialogflow CX, this param is required)",
            "example": "global"
          },
          "environment": {
            "type": "string",
            "description": "Which Dialogflow environment will be used.",
            "example": "development"
          }
        },
        "example": {
          "service_Account": "{\"type\":\"service_account\",\"project_id\":\"your-project-id\",\"private_key_id\":\"your-private-key\",\"private_key\":\"-----BEGIN PRIVATE KEY-----n-----END PRIVATE\",\"client_email\":\"example@example.com\",\"client_id\":\"your-client-id\",\"auth_uri\":\"http://example.com\",\"token_uri\":\"http://example.com\",\"auth_provider_x509_cert_url\":\"http://example.com\",\"client_x509_cert_url\":\"http://example.com\"}",
          "dialogflow_api": "cx",
          "conversation_profile_id": "a-VMHLWzTmKjiJw5S6O0-w",
          "location": "global",
          "environment": "development"
        }
      },
      "DialogflowConnectionResponse": {
        "title": "Dialogflow Connection Response",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Dialogflow Connection",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "example": "dialogflow_connections"
              },
              "connection_id": {
                "type": "string",
                "description": "Uniquely identifies a Telnyx application (Call Control).",
                "example": "1234541231"
              },
              "conversation_profile_id": {
                "type": "string",
                "description": "The id of a configured conversation profile on your Dialogflow account. (If you use Dialogflow CX, this param is required)",
                "example": "a-VMHLWzTmKjiJw5S6O0-w"
              },
              "environment": {
                "type": "string",
                "description": "Which Dialogflow environment will be used.",
                "example": "development"
              },
              "service_account": {
                "type": "string",
                "description": "The JSON map to connect your Dialoglow account.",
                "example": "****"
              }
            }
          }
        }
      },
      "Direction": {
        "title": "Direction",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string",
        "description": "The direction of the fax.",
        "example": "outbound"
      },
      "DocReqsRequirement": {
        "title": "DocReqsRequirement",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "requirement"
          },
          "country_code": {
            "type": "string",
            "description": "The 2-character (ISO 3166-1 alpha-2) country code where this requirement applies",
            "example": "FR"
          },
          "locality": {
            "type": "string",
            "description": "The locality where this requirement applies",
            "example": "Nice"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "national",
              "toll_free"
            ],
            "type": "string",
            "description": "Indicates the phone_number_type this requirement applies to. Leave blank if this requirement applies to all number_types.",
            "example": "local"
          },
          "action": {
            "enum": [
              "both",
              "ordering",
              "porting"
            ],
            "type": "string",
            "description": "Indicates whether this requirement applies to ordering, porting, or both",
            "example": "ordering"
          },
          "requirements_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocReqsRequirementType"
            },
            "description": "Lists the requirement types necessary to fulfill this requirement",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Identifies the associated document",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2021-04-09T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2021-04-12T20:20:20.020Z"
          }
        }
      },
      "DocReqsRequirementList": {
        "title": "DocReqsRequirementList",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DocReqsRequirement"
        }
      },
      "DocReqsRequirementType": {
        "title": "DocReqsRequirementType",
        "type": "object",
        "properties": {
          "acceptance_criteria": {
            "type": "object",
            "properties": {
              "time_limit": {
                "type": "string",
                "description": "Specifies time-based acceptance criteria",
                "example": "Current and not expired"
              },
              "locality_limit": {
                "type": "string",
                "description": "Specifies geography-based acceptance criteria",
                "example": "Issued by the same country that the phone number belongs to"
              },
              "acceptable_values": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "US"
                },
                "description": "Specifies the list of strictly possible values for the requirement. Ignored when empty"
              },
              "max_length": {
                "type": "integer",
                "description": "Maximum length allowed for the value",
                "example": 20
              },
              "min_length": {
                "type": "integer",
                "description": "Minimum length allowed for the value",
                "example": 16
              },
              "acceptable_characters": {
                "type": "string",
                "description": "Specifies the allowed characters as a string",
                "example": "abcdef0123456789"
              },
              "case_sensitive": {
                "type": "boolean",
                "description": "Specifies whether string matching should be case sensitive",
                "example": true
              },
              "regex": {
                "type": "string",
                "description": "A regular expression pattern that the value must match",
                "example": "^[A-Z0-9]+$"
              }
            },
            "description": "Specifies objective criteria for acceptance"
          },
          "description": {
            "type": "string",
            "description": "Describes the requirement type",
            "example": "Proves the customer has a physical address in the same locality as the phone number"
          },
          "example": {
            "type": "string",
            "description": "Provides one or more example of acceptable documents",
            "example": "Utility bill, internet bill, phone bill, or lease"
          },
          "type": {
            "enum": [
              "document",
              "address",
              "textual"
            ],
            "type": "string",
            "description": "Defines the type of this requirement type",
            "example": "document"
          },
          "name": {
            "type": "string",
            "description": "A short descriptive name for this requirement_type",
            "readOnly": true,
            "example": "Proof of Address"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource",
            "readOnly": true,
            "example": "requirement_type"
          },
          "id": {
            "type": "string",
            "description": "Identifies the associated document",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2021-04-09T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2021-04-12T20:20:20.020Z"
          }
        }
      },
      "DocReqsRequirementTypeList": {
        "title": "DocReqsRequirementTypeList",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DocReqsRequirementType"
        }
      },
      "DocServiceDocument": {
        "title": "DocServiceDocument",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DocServiceRecord"
          },
          {
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "document"
              },
              "content_type": {
                "type": "string",
                "description": "The document's content_type.",
                "readOnly": true,
                "example": "application/pdf"
              },
              "size": {
                "type": "object",
                "properties": {
                  "unit": {
                    "type": "string",
                    "description": "Identifies the unit",
                    "readOnly": true,
                    "example": "bytes"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "The number of bytes",
                    "readOnly": true,
                    "example": 123456
                  }
                },
                "description": "Indicates the document's filesize",
                "readOnly": true
              },
              "status": {
                "enum": [
                  "pending",
                  "verified",
                  "denied"
                ],
                "type": "string",
                "description": "Indicates the current document reviewing status",
                "readOnly": true,
                "example": "pending"
              },
              "sha256": {
                "type": "string",
                "description": "The document's SHA256 hash provided for optional verification purposes.",
                "readOnly": true,
                "example": "08a96c641c3a74e44eb59afb61a24f2cb9f4d7188748e76ba4bb5edfa3cb7d1c"
              },
              "filename": {
                "type": "string",
                "description": "The filename of the document.",
                "example": "test-document.pdf"
              },
              "customer_reference": {
                "type": "string",
                "description": "Optional reference string for customer tracking.",
                "example": "MY REF 001"
              }
            }
          }
        ]
      },
      "DocServiceDocumentLink": {
        "title": "DocServiceDocumentLink",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DocServiceRecord"
          },
          {
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "document_link"
              },
              "document_id": {
                "type": "string",
                "description": "Identifies the associated document.",
                "format": "uuid",
                "readOnly": true,
                "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
              },
              "linked_record_type": {
                "type": "string",
                "description": "The linked resource's record type.",
                "readOnly": true,
                "example": "porting_order"
              },
              "linked_resource_id": {
                "type": "string",
                "description": "Identifies the linked resource.",
                "readOnly": true,
                "example": "132091b4-442b-4a2a-b87f-61e707e46d54"
              }
            }
          }
        ]
      },
      "DocServiceRecord": {
        "title": "DocServiceRecord",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sample_record_type"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "DownlinkData": {
        "title": "DownlinkData",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Downlink data",
            "example": 1
          },
          "unit": {
            "enum": [
              "B",
              "KB",
              "MB"
            ],
            "type": "string",
            "description": "Transmission unit",
            "default": "MB"
          }
        }
      },
      "DtmfType": {
        "title": "DTMF Type",
        "enum": [
          "RFC 2833",
          "Inband",
          "SIP INFO"
        ],
        "type": "string",
        "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
        "default": "RFC 2833",
        "example": "Inband"
      },
      "DynamicEmergencyAddress": {
        "title": "DynamicEmergencyAddress",
        "required": [
          "house_number",
          "street_name",
          "locality",
          "administrative_area",
          "postal_code",
          "country_coude"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f1"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "dynamic_emergency_address"
          },
          "sip_geolocation_id": {
            "type": "string",
            "description": "Unique location reference string to be used in SIP INVITE from / p-asserted headers.",
            "readOnly": true,
            "example": "XYZ123"
          },
          "status": {
            "enum": [
              "pending",
              "activated",
              "rejected"
            ],
            "type": "string",
            "description": "Status of dynamic emergency address",
            "readOnly": true,
            "example": "pending"
          },
          "house_number": {
            "type": "string",
            "example": "600"
          },
          "house_suffix": {
            "type": "string"
          },
          "street_pre_directional": {
            "type": "string"
          },
          "street_name": {
            "type": "string",
            "example": "Congress"
          },
          "street_suffix": {
            "type": "string",
            "example": "St"
          },
          "street_post_directional": {
            "type": "string"
          },
          "extended_address": {
            "type": "string"
          },
          "locality": {
            "type": "string",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "example": "TX"
          },
          "postal_code": {
            "type": "string",
            "example": "78701"
          },
          "country_code": {
            "enum": [
              "US",
              "CA",
              "PR"
            ],
            "type": "string",
            "example": "US"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was created",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was last updated",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "DynamicEmergencyEndpoint": {
        "title": "DynamicEmergencyEndpoint",
        "required": [
          "dynamic_emergency_address_id",
          "callback_number",
          "caller_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "dynamic_emergency_endpoint"
          },
          "dynamic_emergency_address_id": {
            "type": "string",
            "description": "An id of a currently active dynamic emergency location.",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "status": {
            "enum": [
              "pending",
              "activated",
              "rejected"
            ],
            "type": "string",
            "description": "Status of dynamic emergency address",
            "readOnly": true,
            "example": "pending"
          },
          "sip_from_id": {
            "type": "string",
            "readOnly": true,
            "example": "FXDFWEDF"
          },
          "callback_number": {
            "type": "string",
            "example": "+13125550000"
          },
          "caller_name": {
            "type": "string",
            "example": "Jane Doe Desk Phone"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was created",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the resource was last updated",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "ESimPurchase": {
        "title": "SIMCardRegistration",
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "sim_card_group_id": {
            "type": "string",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Searchable tags associated with the SIM cards"
          },
          "product": {
            "type": "string",
            "description": "Type of product to be purchased, specify \"whitelabel\" to use a custom SPN",
            "example": "whitelabel"
          },
          "whitelabel_name": {
            "type": "string",
            "description": "Service Provider Name (SPN) for the Whitelabel eSIM product. It will be displayed as the mobile service name by operating systems of smartphones. This parameter must only contain letters, numbers and whitespaces.",
            "example": "Custom SPN"
          },
          "amount": {
            "minimum": 1,
            "type": "integer",
            "description": "The amount of eSIMs to be purchased.",
            "example": 10
          },
          "status": {
            "enum": [
              "enabled",
              "disabled",
              "standby"
            ],
            "type": "string",
            "description": "Status on which the SIM cards will be set after being successfully registered.",
            "default": "enabled",
            "example": "standby"
          }
        }
      },
      "ElevenLabsVoiceSettings": {
        "title": "ElevenLabs Voice Settings",
        "type": "object",
        "properties": {
          "api_key_ref": {
            "type": "string",
            "description": "The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your ElevenLabs API key. Warning: Free plans are unlikely to work with this integration.",
            "example": "my_elevenlabs_api_key"
          }
        }
      },
      "EligibilityNumberResponse": {
        "title": "EligibilityNumberResponse",
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "Detailed information about the eligibility status."
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format."
          },
          "eligible": {
            "type": "boolean",
            "description": "Whether the phone number is eligible for hosted messaging."
          },
          "eligible_status": {
            "enum": [
              "NUMBER_CAN_NOT_BE_REPEATED",
              "NUMBER_CAN_NOT_BE_VALIDATED",
              "NUMBER_CAN_NOT_BE_WIRELESS",
              "NUMBER_CAN_NOT_BE_ACTIVE_IN_YOUR_ACCOUNT",
              "NUMBER_CAN_NOT_HOSTED_WITH_A_TELNYX_SUBSCRIBER",
              "NUMBER_CAN_NOT_BE_IN_TELNYX",
              "NUMBER_IS_NOT_A_US_NUMBER",
              "NUMBER_IS_NOT_A_VALID_ROUTING_NUMBER",
              "NUMBER_IS_NOT_IN_E164_FORMAT",
              "BILLING_ACCOUNT_CHECK_FAILED",
              "BILLING_ACCOUNT_IS_ABOLISHED",
              "ELIGIBLE"
            ],
            "type": "string",
            "description": "The eligibility status of the phone number."
          }
        }
      },
      "EligibilityNumbersRequest": {
        "title": "EligibilityNumbersRequest",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Phone number to check eligibility",
              "format": "+E.164"
            },
            "description": "List of phone numbers to check eligibility"
          }
        }
      },
      "EligibilityNumbersResponse": {
        "title": "EligibilityNumbersResponse",
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EligibilityNumberResponse"
            },
            "description": "List of phone numbers with their eligibility status."
          }
        }
      },
      "EmbeddingBucketRequest": {
        "title": "EmbeddingBucketRequest",
        "required": [
          "bucket_name"
        ],
        "type": "object",
        "properties": {
          "bucket_name": {
            "title": "Bucket Name",
            "type": "string"
          },
          "document_chunk_size": {
            "title": "Document Chunk Size",
            "type": "integer",
            "default": 1024
          },
          "document_chunk_overlap_size": {
            "title": "Document Chunk Overlap Size",
            "type": "integer",
            "default": 512
          },
          "embedding_model": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportedEmbeddingModels"
              }
            ],
            "default": "thenlper/gte-large"
          },
          "loader": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportedEmbeddingLoaders"
              }
            ],
            "default": "default"
          }
        }
      },
      "EmbeddingMetadata": {
        "title": "EmbeddingMetadata",
        "required": [
          "source",
          "checksum",
          "embedding",
          "filename"
        ],
        "type": "object",
        "properties": {
          "source": {
            "title": "Source",
            "type": "string"
          },
          "checksum": {
            "title": "Checksum",
            "type": "string"
          },
          "embedding": {
            "title": "Embedding",
            "type": "string"
          },
          "filename": {
            "title": "Filename",
            "type": "string"
          },
          "certainty": {
            "title": "Certainty",
            "type": "number"
          },
          "loader_metadata": {
            "title": "Loader Metadata",
            "type": "object"
          }
        }
      },
      "EmbeddingResponse": {
        "title": "EmbeddingResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "task_id": {
                "title": "Task ID",
                "type": "string",
                "format": "uuid"
              },
              "task_name": {
                "title": "Task Name",
                "type": "string"
              },
              "status": {
                "title": "Status",
                "type": "string"
              },
              "created_at": {
                "title": "Created At",
                "type": "string"
              },
              "finished_at": {
                "title": "Finished At",
                "type": "string",
                "nullable": true
              },
              "user_id": {
                "title": "User ID",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        }
      },
      "EmbeddingSimilaritySearchDocument": {
        "title": "EmbeddingSimilaritySearchDocument",
        "required": [
          "document_chunk",
          "distance",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "document_chunk": {
            "title": "Document Chunk",
            "type": "string"
          },
          "distance": {
            "title": "Distance",
            "type": "number"
          },
          "metadata": {
            "$ref": "#/components/schemas/EmbeddingMetadata"
          }
        },
        "description": "Example document response from embedding service\n{\n  \"document_chunk\": \"your status? This is Vanessa Bloome...\",\n  \"distance\": 0.18607724,\n  \"metadata\": {\n    \"source\": \"https://us-central-1.telnyxstorage.com/scripts/bee_movie_script.txt\",\n    \"checksum\": \"343054dd19bab39bbf6761a3d20f1daa\",\n    \"embedding\": \"openai/text-embedding-ada-002\",\n    \"filename\": \"bee_movie_script.txt\",\n    \"certainty\": 0.9069613814353943,\n    \"loader_metadata\": {}\n  }\n}"
      },
      "EmbeddingSimilaritySearchRequest": {
        "title": "EmbeddingSimilaritySearchRequest",
        "required": [
          "bucket_name",
          "query"
        ],
        "type": "object",
        "properties": {
          "bucket_name": {
            "title": "Bucket Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "string"
          },
          "num_of_docs": {
            "title": "Num Of Docs",
            "type": "integer",
            "default": 3
          }
        }
      },
      "EmbeddingSimilaritySearchResponse": {
        "title": "EmbeddingSimilaritySearchResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingSimilaritySearchDocument"
            }
          }
        }
      },
      "EmbeddingUrlRequest": {
        "title": "EmbeddingUrlRequest",
        "required": [
          "url",
          "bucket_name"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "URL",
            "type": "string",
            "description": "The URL of the webpage to embed"
          },
          "bucket_name": {
            "title": "Bucket Name",
            "type": "string",
            "description": "Name of the bucket to store the embeddings. This bucket must already exist."
          }
        }
      },
      "EmbeddingsBucketFiles": {
        "title": "EmbeddingsBucketFiles",
        "required": [
          "filename",
          "status",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "title": "Filename",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "last_embedded_at": {
            "title": "Last Embedded At",
            "type": "string",
            "format": "date-time"
          },
          "error_reason": {
            "title": "Error Reason",
            "type": "string"
          }
        }
      },
      "EmbeddingsBucketFilesData": {
        "title": "EmbeddingsBucketFilesData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddingsBucketFiles"
            }
          }
        }
      },
      "EmergencySettings": {
        "title": "EmergencySettings",
        "type": "object",
        "properties": {
          "emergency_enabled": {
            "type": "boolean",
            "description": "Allows you to enable or disable emergency services on the phone number. In order to enable emergency services, you must also set an emergency_address_id.",
            "default": false
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the address to be used with emergency services.",
            "format": "int64"
          },
          "emergency_status": {
            "enum": [
              "disabled",
              "active",
              "provisioning",
              "deprovisioning",
              "provisioning-failed"
            ],
            "type": "string",
            "description": "Represents the state of the number regarding emergency activation.",
            "default": "disabled"
          }
        },
        "description": "The emergency services settings for a phone number.",
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "emergency_status": "active"
        }
      },
      "EnabledFeatures": {
        "title": "EnabledFeatures",
        "enum": [
          "telephony",
          "messaging"
        ],
        "type": "string",
        "description": "If `telephony` is enabled, the assistant will be able to make and receive calls. If `messaging` is enabled, the assistant will be able to send and receive messages."
      },
      "EncryptedMedia": {
        "title": "EncryptedMedia",
        "enum": [
          "SRTP"
        ],
        "type": "string",
        "description": "Enable use of SRTP for encryption. Cannot be set if the transport_portocol is TLS.",
        "nullable": true,
        "example": "SRTP"
      },
      "EnqueueRequest": {
        "title": "Enqueue Request",
        "required": [
          "queue_name"
        ],
        "type": "object",
        "properties": {
          "queue_name": {
            "type": "string",
            "description": "The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.",
            "example": "tier_1_support"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "max_wait_time_secs": {
            "type": "integer",
            "description": "The number of seconds after which the call will be removed from the queue.",
            "example": 600
          },
          "max_size": {
            "type": "integer",
            "description": "The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.",
            "default": 100,
            "example": 200
          }
        },
        "example": {
          "queue_name": "support",
          "max_wait_time_secs": 600,
          "max_size": 20,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "EntityType": {
        "title": "EntityType",
        "enum": [
          "PRIVATE_PROFIT",
          "PUBLIC_PROFIT",
          "NON_PROFIT",
          "GOVERNMENT"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Entity type behind the brand. This is the form of business establishment.",
        "example": "PRIVATE_PROFIT"
      },
      "EnumListResponse": {
        "title": "EnumListResponse",
        "type": "array",
        "items": { },
        "example": "[\"BASIC_ACCOUNT\", \"SMALL_ACCOUNT\", \"MEDIUM_ACCOUNT\", \"LARGE_ACCOUNT\", \"KEY_ACCOUNT\"]"
      },
      "EnumObjectResponse": {
        "title": "EnumObjectResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "example": "{\"AREIS\": \"AREIS\", \"BANDW\": \"Bandwidth\", \"SINCH\": \"Sinch\"}"
      },
      "EnumPaginatedResponse": {
        "title": "EnumPaginatedResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "example": "{\"page\": 1, \"records\": [{\"isin\": \"US68243Q1067\", \"iso2\": \"US\", \"symbol\": \"FLWS\", \"exchange\": \"NASDAQ\", \"displayName\": \"1-800 FLOWERS.COM, Inc.\"}, {\"isin\": \"US88025U1097\", \"iso2\": \"US\", \"symbol\": \"TXG\", \"exchange\": \"NASDAQ\", \"displayName\": \"10X GENOMICS INC CLASS A\"}], \"totalRecords\": 2}"
      },
      "Error": {
        "title": "Error",
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "format": "json-pointer"
              },
              "parameter": {
                "type": "string",
                "description": "Indicates which query parameter caused the error.",
                "example": "+15617819942"
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "ErrorRecord": {
        "title": "ErrorRecord",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "an application-specific error code, expressed as a stringified 5-digit integer",
            "example": "10003"
          },
          "title": {
            "type": "string",
            "description": "a short, human-readable summary of the problem, with NO punctuation, that SHOULD NOT CHANGE from occurrence to occurrence of the problem, except for purposes of localization",
            "example": "Metrics invalid values"
          },
          "detail": {
            "type": "string",
            "description": "a human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized",
            "example": "Available metrics values for sip-trunking: connected,cost,completed,call_sec,attempted,billed_sec."
          },
          "source": {
            "$ref": "#/components/schemas/SourceResponse"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          }
        }
      },
      "ErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                },
                "title": {
                  "type": "string"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "pointer": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Errors": {
        "title": "Errors",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "EventStatus": {
        "title": "EventStatus",
        "enum": [
          "pending",
          "in_progress",
          "completed",
          "failed"
        ],
        "type": "string"
      },
      "ExportPortingOrdersCSVReport": {
        "title": "ExportPortingOrdersCSVReport",
        "required": [
          "filters"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "status__in": {
                "type": "array",
                "items": {
                  "enum": [
                    "draft",
                    "in-process",
                    "submitted",
                    "exception",
                    "foc-date-confirmed",
                    "cancel-pending",
                    "ported",
                    "cancelled"
                  ],
                  "type": "string"
                },
                "description": "The status of the porting orders to include in the report."
              },
              "customer_reference__in": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "my-customer-reference"
                },
                "description": "The customer reference of the porting orders to include in the report."
              },
              "created_at__lt": {
                "type": "string",
                "description": "The date and time the porting order was created before.",
                "format": "date-time"
              },
              "created_at__gt": {
                "type": "string",
                "description": "The date and time the porting order was created after.",
                "format": "date-time"
              }
            },
            "description": "The filters to apply to the export porting order CSV report."
          }
        },
        "description": "The parameters for generating a porting orders CSV report."
      },
      "ExportPortoutsCSVReport": {
        "title": "ExportPortoutsCSVReport",
        "required": [
          "filters"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "status__in": {
                "type": "array",
                "items": {
                  "enum": [
                    "pending",
                    "authorized",
                    "ported",
                    "rejected",
                    "rejected-pending",
                    "canceled"
                  ],
                  "type": "string"
                },
                "description": "The status of the port-outs to include in the report."
              },
              "customer_reference__in": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "my-customer-reference"
                },
                "description": "The customer reference of the port-outs to include in the report."
              },
              "end_user_name": {
                "type": "string",
                "description": "The end user name of the port-outs to include in the report.",
                "example": "McPortersen"
              },
              "phone_numbers__overlaps": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "+1234567890"
                },
                "description": "A list of phone numbers that the port-outs phone numbers must overlap with."
              },
              "created_at__lt": {
                "type": "string",
                "description": "The date and time the port-out was created before.",
                "format": "date-time"
              },
              "created_at__gt": {
                "type": "string",
                "description": "The date and time the port-out was created after.",
                "format": "date-time"
              }
            },
            "description": "The filters to apply to the export port-out CSV report."
          }
        },
        "description": "The parameters for generating a port-outs CSV report."
      },
      "ExternalConnection": {
        "title": "External Connection",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "external_connection"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "credential_active": {
            "title": "Credential Active",
            "type": "boolean",
            "description": "If the credential associated with this service is active.",
            "default": false,
            "example": true
          },
          "external_sip_connection": {
            "$ref": "#/components/schemas/ExternalSipConnection"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1930241863466354012",
          "record_type": "external_connection",
          "external_sip_connection": "zoom",
          "credential_active": false,
          "active": false,
          "created_at": "2022-06-29T19:23:59Z",
          "updated_at": "2022-06-29T19:39:47Z",
          "outbound": {
            "outbound_voice_profile_id": "1911630617284445511"
          }
        }
      },
      "ExternalConnectionPhoneNumber": {
        "title": "Phone number details with relation to an external connection",
        "type": "object",
        "properties": {
          "ticket_id": {
            "title": "UUID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
          },
          "telephone_number": {
            "type": "string",
            "description": "Phone number in E164 format."
          },
          "number_id": {
            "type": "string",
            "description": "Phone number ID from the Telnyx API."
          },
          "civic_address_id": {
            "type": "string",
            "description": "Identifies the civic address assigned to the phone number.",
            "format": "uuid"
          },
          "location_id": {
            "type": "string",
            "description": "Identifies the location assigned to the phone number.",
            "format": "uuid"
          },
          "displayed_country_code": {
            "type": "string",
            "description": "The iso country code that will be displayed to the user when they receive a call from this phone number."
          },
          "acquired_capabilities": {
            "type": "array",
            "items": {
              "enum": [
                "FirstPartyAppAssignment",
                "InboundCalling",
                "Office365",
                "OutboundCalling",
                "UserAssignment"
              ],
              "type": "string",
              "description": "The capabilities that are available for this phone number on Microsoft Teams."
            }
          }
        }
      },
      "ExternalSipConnection": {
        "title": "External SIP Connection",
        "enum": [
          "zoom",
          "operator_connect"
        ],
        "type": "string",
        "description": "The service that will be consuming this connection.",
        "default": "zoom",
        "example": "zoom"
      },
      "ExternalSipConnectionZoomOnly": {
        "title": "External SIP Connection",
        "enum": [
          "zoom"
        ],
        "type": "string",
        "description": "The service that will be consuming this connection.",
        "default": "zoom",
        "example": "zoom"
      },
      "ExternalVetting": {
        "title": "ExternalVetting",
        "type": "object",
        "properties": {
          "evpId": {
            "title": "Evpid",
            "maxLength": 10,
            "type": "string",
            "description": "External vetting provider ID for the brand."
          },
          "vettingId": {
            "title": "vettingId",
            "type": "string",
            "description": "Unique ID that identifies a vetting transaction performed by a vetting provider. This ID is provided by the vetting provider at time of vetting."
          },
          "vettingToken": {
            "title": "vettingToken",
            "type": "string",
            "description": "Required by some providers for vetting record confirmation."
          },
          "vettingScore": {
            "title": "vettingScore",
            "type": "integer",
            "description": "Vetting score ranging from 0-100."
          },
          "vettingClass": {
            "title": "Vettingclass",
            "type": "string",
            "description": "Identifies the vetting classification."
          },
          "vettedDate": {
            "title": "vettedDate",
            "type": "string",
            "description": "Vetting effective date. This is the date when vetting was completed, or the starting effective date in ISO 8601 format. If this date is missing, then the vetting was not complete or not valid."
          },
          "createDate": {
            "title": "createDate",
            "type": "string",
            "description": "Vetting submission date. This is the date when the vetting request is generated in ISO 8601 format."
          }
        }
      },
      "ExternalWdrDetailRecordDto": {
        "title": "ExternalWdrDetailRecordDto",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "WDR id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Record created time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "cost": {
            "$ref": "#/components/schemas/WirelessCost"
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code.",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code.",
            "example": "01"
          },
          "downlink_data": {
            "$ref": "#/components/schemas/DownlinkData"
          },
          "duration_seconds": {
            "type": "number",
            "description": "Session duration in seconds.",
            "example": 1
          },
          "imsi": {
            "type": "string",
            "description": "International mobile subscriber identity.",
            "example": "123"
          },
          "rate": {
            "$ref": "#/components/schemas/WirelessRate"
          },
          "sim_group_name": {
            "type": "string",
            "description": "Defined sim group name",
            "example": "sim name"
          },
          "sim_group_id": {
            "type": "string",
            "description": "Sim group unique identifier",
            "example": "f05a189f-7c46-4531-ac56-1460dc465a42"
          },
          "sim_card_id": {
            "type": "string",
            "description": "Sim card unique identifier",
            "example": "877f80a6-e5b2-4687-9a04-88076265720f"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number",
            "example": "+12345678910"
          },
          "uplink_data": {
            "$ref": "#/components/schemas/UplinkData"
          },
          "record_type": {
            "type": "string",
            "example": "wdr"
          }
        }
      },
      "ExternalWdrGetDetailResponse": {
        "title": "ExternalWdrGetDetailResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalWdrDetailRecordDto"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "FailClusteringProcessRequest": {
        "title": "FailClusteringProcessRequest",
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "Fax": {
        "title": "Fax",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "fax"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fax"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "connection_id": {
            "type": "string",
            "description": "The ID of the connection used to send the fax.",
            "example": "234423"
          },
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "media_url": {
            "type": "string",
            "description": "The URL (or list of URLs) to the PDF used for the fax's media. media_url and media_name/contents can't be submitted together.",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "to": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
            "example": "+13127367276"
          },
          "from": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "example": "+13125790015"
          },
          "from_display_name": {
            "type": "string",
            "description": "The string used as the caller id name (SIP From Display Name) presented to the destination (`to` number).",
            "example": "Company Name"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "status": {
            "enum": [
              "queued",
              "media.processed",
              "originated",
              "sending",
              "delivered",
              "failed",
              "initiated",
              "receiving",
              "media.processing",
              "received"
            ],
            "type": "string",
            "description": "Status of the fax",
            "example": "queued"
          },
          "webhook_url": {
            "type": "string",
            "description": "URL that will receive fax webhooks"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "Optional failover URL that will receive fax webhooks if webhook_url doesn't return a 2XX response"
          },
          "store_media": {
            "type": "boolean",
            "description": "Should fax media be stored on temporary URL. It does not support media_name."
          },
          "stored_media_url": {
            "type": "string",
            "description": "If store_media was set to true, this is a link to temporary location. Link expires after 10 minutes."
          },
          "preview_url": {
            "type": "string",
            "description": "If `store_preview` was set to `true`, this is a link to temporary location. Link expires after 10 minutes."
          },
          "client_state": {
            "type": "string",
            "description": "State received from a command.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when resource was created",
            "format": "datetime"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when resource was updated",
            "format": "datetime"
          }
        },
        "example": {
          "record_type": "fax",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "connection_id": "c-1",
          "direction": "outbound",
          "from": "+123",
          "to": "+456",
          "media_url": "http://www.example.com/fax.pdf",
          "store_media": true,
          "stored_media_url": "https://s3.amazonaws.com/faxes-dev/user-1/cf4a6b52-bf8e-4945-9f49-611d0d2b083b.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=xxxxxxxxxx%2F20200505%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200505T095917Z&X-Amz-Expires=7200&X-Amz-SignedHeaders=host&X-Amz-Signature=fac2af40464fcc77673ad762db86e34f9c1b91a82699b5578c5327f53874df51",
          "preview_url": "https://s3.amazonaws.com/faxes-dev/user-1/cf4a6b52-bf8e-4945-9f49-611d0d2b083b_preview.tiff?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=xxxxxxxxxx%2F20200505%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200505T095917Z&X-Amz-Expires=7200&X-Amz-SignedHeaders=host&X-Amz-Signature=fac2af40464fcc77673ad762db86e34f9c1b91a82699b5578c5327f53874df51",
          "quality": "high",
          "webhook_url": "http://www.example.com/webhooks",
          "webhook_failover_url": "",
          "status": "queued",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "created_at": "2020-05-05T09:59:12",
          "updated_at": "2020-05-05T09:59:12"
        }
      },
      "FaxApplication": {
        "title": "Fax Application",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fax_application"
          },
          "application_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Fax Application."
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fax_application",
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "FaxDelivered": {
        "title": "FaxDelivered",
        "type": "object",
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "event_type": {
            "enum": [
              "fax.delivered"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "fax.delivered"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_duration_secs": {
                "type": "integer",
                "description": "The duration of the call in seconds.",
                "example": 25
              },
              "connection_id": {
                "type": "string",
                "description": "The ID of the connection used to send the fax.",
                "example": "234423"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "type": "string",
                "description": "Identifies the fax.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "original_media_url": {
                "type": "string",
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "type": "string",
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "example": "+13127367276"
              },
              "from": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "example": "+13125790015"
              },
              "user_id": {
                "type": "string",
                "description": "Identifier of the user to whom the fax belongs",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "page_count": {
                "type": "integer",
                "description": "Number of transferred pages",
                "example": 2
              },
              "status": {
                "enum": [
                  "delivered"
                ],
                "type": "string",
                "description": "The status of the fax.",
                "example": "delivered"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "data": {
            "event_type": "fax.delivered",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.0392040+00:00",
            "payload": {
              "call_duration_secs": 25,
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "page_count": 2,
              "status": "delivered",
              "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        }
      },
      "CreatePortingReport": {
        "title": "CreatePortingReport",
        "required": [
          "report_type",
          "params"
        ],
        "type": "object",
        "properties": {
          "report_type": {
            "enum": [
              "export_porting_orders_csv"
            ],
            "type": "string",
            "description": "Identifies the type of report",
            "example": "export_porting_orders_csv"
          },
          "params": { }
        },
        "description": "The parameters for generating a new porting related report."
      },
      "FaxFailed": {
        "title": "FaxFailed",
        "type": "object",
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "event_type": {
            "enum": [
              "fax.failed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "fax.failed"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "The ID of the connection used to send the fax.",
                "example": "234423"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "type": "string",
                "description": "Identifies the fax.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "original_media_url": {
                "type": "string",
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "type": "string",
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "example": "+13127367276"
              },
              "from": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "example": "+13125790015"
              },
              "user_id": {
                "type": "string",
                "description": "Identifier of the user to whom the fax belongs",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "failure_reason": {
                "enum": [
                  "rejected"
                ],
                "type": "string",
                "description": "Cause of the sending failure"
              },
              "status": {
                "enum": [
                  "failed"
                ],
                "type": "string",
                "description": "The status of the fax.",
                "example": "failed"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "data": {
            "event_type": "fax.failed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.0392040+00:00",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "failure_reason": "rejected",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "failed",
              "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        }
      },
      "DeleteLoaConfiguration_204": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "FaxMediaProcessed": {
        "title": "FaxMediaProcessed",
        "type": "object",
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "event_type": {
            "enum": [
              "fax.media.processed"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "fax.media.processed"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "The ID of the connection used to send the fax.",
                "example": "234423"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "type": "string",
                "description": "Identifies the fax.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "original_media_url": {
                "type": "string",
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "type": "string",
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "example": "+13127367276"
              },
              "from": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "example": "+13125790015"
              },
              "user_id": {
                "type": "string",
                "description": "Identifier of the user to whom the fax belongs",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "enum": [
                  "media.processed"
                ],
                "type": "string",
                "description": "The status of the fax.",
                "example": "media.processed"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "data": {
            "event_type": "fax.media.processed",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.0392040+00:00",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "media.processed",
              "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        }
      },
      "FaxQueued": {
        "title": "FaxQueued",
        "type": "object",
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "event_type": {
            "enum": [
              "fax.queued"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "fax.queued"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "The ID of the connection used to send the fax.",
                "example": "234423"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "type": "string",
                "description": "Identifies the fax.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "original_media_url": {
                "type": "string",
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "type": "string",
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "example": "+13127367276"
              },
              "from": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "example": "+13125790015"
              },
              "user_id": {
                "type": "string",
                "description": "Identifier of the user to whom the fax belongs",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "enum": [
                  "queued"
                ],
                "type": "string",
                "description": "The status of the fax.",
                "example": "queued"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "data": {
            "event_type": "fax.queued",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.0392040+00:00",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "queued",
              "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        }
      },
      "FaxSendingStarted": {
        "title": "FaxSendingStarted",
        "type": "object",
        "properties": {
          "record_type": {
            "$ref": "#/components/schemas/RecordType"
          },
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "event_type": {
            "enum": [
              "fax.sending.started"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "fax.sending.started"
          },
          "payload": {
            "type": "object",
            "properties": {
              "connection_id": {
                "type": "string",
                "description": "The ID of the connection used to send the fax.",
                "example": "234423"
              },
              "direction": {
                "$ref": "#/components/schemas/Direction"
              },
              "fax_id": {
                "type": "string",
                "description": "Identifies the fax.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "original_media_url": {
                "type": "string",
                "description": "The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
                "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
              },
              "media_name": {
                "type": "string",
                "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
                "example": "my_media_uploaded_to_media_storage_api"
              },
              "to": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
                "example": "+13127367276"
              },
              "from": {
                "type": "string",
                "description": "The phone number, in E.164 format, the fax will be sent from.",
                "example": "+13125790015"
              },
              "user_id": {
                "type": "string",
                "description": "Identifier of the user to whom the fax belongs",
                "format": "uuid",
                "example": "yfff7c54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "status": {
                "enum": [
                  "sending"
                ],
                "type": "string",
                "description": "The status of the fax.",
                "example": "sending"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              }
            }
          }
        },
        "example": {
          "data": {
            "event_type": "fax.sending.started",
            "id": "95479a2e-b947-470a-a88f-2da6dd07ae0f",
            "occurred_at": "2020-05-05T13:08:22.0392040+00:00",
            "payload": {
              "connection_id": "234423",
              "direction": "outbound",
              "fax_id": "f8338808-3dc6-4f2b-942a-5d1f39255784",
              "from": "+17733372107",
              "original_media_url": "http://www.example.com/fax.pdf",
              "status": "sending",
              "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
              "to": "+15107882622",
              "user_id": "19a75cea-02c6-4b9a-84fa-c9bc8341feb8"
            },
            "record_type": "event"
          }
        }
      },
      "Feature": {
        "title": "Feature",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "sms"
          }
        },
        "example": {
          "name": "sms"
        }
      },
      "FineTuningJob": {
        "title": "FineTuningJob",
        "required": [
          "created_at",
          "finished_at",
          "hyperparameters",
          "id",
          "model",
          "organization_id",
          "status",
          "trained_tokens",
          "training_file"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The name of the fine-tuned model that is being created."
          },
          "created_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created."
          },
          "finished_at": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.",
            "nullable": true
          },
          "hyperparameters": {
            "required": [
              "n_epochs"
            ],
            "type": "object",
            "properties": {
              "n_epochs": {
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
                "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
                "default": 3
              }
            },
            "description": "The hyperparameters used for the fine-tuning job."
          },
          "model": {
            "type": "string",
            "description": "The base model that is being fine-tuned."
          },
          "organization_id": {
            "type": "string",
            "description": "The organization that owns the fine-tuning job."
          },
          "status": {
            "enum": [
              "queued",
              "running",
              "succeeded",
              "failed",
              "cancelled"
            ],
            "type": "string",
            "description": "The current status of the fine-tuning job."
          },
          "trained_tokens": {
            "type": "integer",
            "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.",
            "nullable": true
          },
          "training_file": {
            "type": "string",
            "description": "The storage bucket or object used for training."
          }
        },
        "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API."
      },
      "FineTuningJobsListData": {
        "title": "FineTuningJobListData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuningJob"
            }
          }
        }
      },
      "PreviewLoaConfigurationParams": {
        "title": "PreviewLoaConfigurationParams",
        "required": [
          "name",
          "logo",
          "company_name",
          "address",
          "contact"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the LOA configuration",
            "example": "My LOA Configuration"
          },
          "logo": {
            "required": [
              "document_id"
            ],
            "type": "object",
            "properties": {
              "document_id": {
                "type": "string",
                "description": "The document identification",
                "format": "uuid"
              }
            },
            "description": "The logo of the LOA configuration"
          },
          "company_name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Telnyx"
          },
          "address": {
            "required": [
              "street_address",
              "locality",
              "administrative_area",
              "postal_code",
              "country_code"
            ],
            "type": "object",
            "properties": {
              "street_address": {
                "type": "string",
                "description": "The street address of the company",
                "example": "600 Congress Avenue"
              },
              "extended_address": {
                "type": "string",
                "description": "The extended address of the company",
                "example": "14th Floor"
              },
              "city": {
                "type": "string",
                "description": "The locality of the company",
                "example": "Austin"
              },
              "state": {
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "description": "The administrative area of the company",
                "example": "TX"
              },
              "zip_code": {
                "pattern": "^[0-9]{5}(?:-[0-9]{4})?$",
                "type": "string",
                "description": "The postal code of the company",
                "example": "78701"
              },
              "country_code": {
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "description": "The country code of the company",
                "example": "US"
              }
            },
            "description": "The address of the company."
          },
          "contact": {
            "required": [
              "email",
              "phone_number"
            ],
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email address of the contact",
                "format": "email",
                "example": "testing@telnyx.com"
              },
              "phone_number": {
                "pattern": "^\\+\\d{11,15}$",
                "type": "string",
                "description": "The phone number of the contact",
                "example": "+12003270001"
              }
            },
            "description": "The contact information of the company."
          }
        },
        "description": "The parameters for creating a new LOA configuration."
      },
      "republishPortingEvent_201": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "ForbiddenError": {
        "title": "ForbiddenError",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10010"
              },
              "title": {
                "example": "Authorization failed"
              },
              "detail": {
                "example": "You do not have permission to perform the requested action on the specified resource or resources."
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10010"
                  }
                }
              }
            }
          }
        ]
      },
      "Fqdn": {
        "title": "Fqdn",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fqdn"
          },
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this FQDN is attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "example": 5060
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fqdn",
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 5060,
          "dns_record_type": "a",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "FqdnConnection": {
        "title": "FQDN Connection",
        "required": [
          "connection_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "fqdn_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "title": "Connection Name",
            "type": "string",
            "description": "A user-assigned name to help manage the connection.",
            "example": "office-connection"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "microsoft_teams_sbc": {
            "type": "boolean",
            "description": "The connection is enabled for Microsoft Teams Direct Routing.",
            "default": false
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings.",
            "default": false
          },
          "user_name": {
            "type": "string",
            "description": "The username for the FQDN connection."
          },
          "password": {
            "type": "string",
            "description": "The password for the FQDN connection."
          },
          "rtp_pass_codecs_on_stream_change": {
            "type": "boolean",
            "description": "Defines if codecs should be passed on stream change."
          },
          "adjust_dtmf_timestamp": {
            "type": "boolean",
            "description": "Indicates whether DTMF timestamp adjustment is enabled."
          },
          "ignore_dtmf_duration": {
            "type": "boolean",
            "description": "Indicates whether DTMF duration should be ignored."
          },
          "ignore_mark_bit": {
            "type": "boolean",
            "description": "Indicates whether the mark bit should be ignored."
          },
          "call_cost_enabled": {
            "type": "boolean",
            "description": "Indicates whether call cost calculation is enabled."
          },
          "noise_suppression": {
            "type": "boolean",
            "description": "Indicates whether noise suppression is enabled."
          },
          "send_normalized_timestamps": {
            "type": "boolean",
            "description": "Indicates whether normalized timestamps should be sent."
          },
          "third_party_control_enabled": {
            "type": "boolean",
            "description": "Indicates whether third-party control is enabled."
          },
          "txt_name": {
            "type": "string",
            "description": "The name for the TXT record associated with the FQDN connection."
          },
          "txt_value": {
            "type": "string",
            "description": "The value for the TXT record associated with the FQDN connection."
          },
          "txt_ttl": {
            "type": "integer",
            "description": "The time to live for the TXT record associated with the FQDN connection."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "$ref": "#/components/schemas/WebhookApiVersion"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2020-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2020-02-03T22:25:27.521Z"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundFqdn"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "fqdn_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "ani_override": "string",
            "ani_override_type": "always",
            "call_parking_enabled": true,
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "instant_ringback_enabled": true,
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "localization": "string",
            "outbound_voice_profile_id": "1293384261075731499",
            "t38_reinvite_source": "customer",
            "tech_prefix": "string"
          }
        }
      },
      "FqdnConnectionTransportProtocol": {
        "title": "FqdnConnectionTransportProtocol",
        "enum": [
          "UDP",
          "TCP",
          "TLS"
        ],
        "type": "string",
        "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
        "default": "UDP"
      },
      "PostPortabilityCheck": {
        "title": "PostPortabilityCheck",
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of +E.164 formatted phone numbers to check for portability"
          }
        }
      },
      "FunctionDefinition": {
        "title": "FunctionDefinition",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          }
        }
      },
      "GCSConfigurationData": {
        "title": "Google Cloud Storage Configuration Data",
        "type": "object",
        "properties": {
          "credentials": {
            "type": "string",
            "description": "Opaque credential token used to authenticate and authorize with storage provider.",
            "format": "password",
            "example": "OPAQUE_CREDENTIALS_TOKEN"
          },
          "bucket": {
            "type": "string",
            "description": "Name of the bucket to be used to store recording files.",
            "example": "example-bucket"
          }
        }
      },
      "GatherRequest": {
        "title": "Gather",
        "type": "object",
        "properties": {
          "minimum_digits": {
            "type": "integer",
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "maximum_digits": {
            "type": "integer",
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "format": "int32",
            "default": 128,
            "example": 10
          },
          "timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait to complete the request.",
            "format": "int32",
            "default": 60000,
            "example": 60000
          },
          "inter_digit_timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for input between digits.",
            "format": "int32",
            "default": 5000,
            "example": 10000
          },
          "initial_timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for the first DTMF.",
            "format": "int32",
            "default": 5000,
            "example": 10000
          },
          "terminating_digit": {
            "type": "string",
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "example": "#"
          },
          "valid_digits": {
            "type": "string",
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "example": "123"
          },
          "gather_id": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "An id that will be sent back in the corresponding `call.gather.ended` webhook. Will be randomly generated if not specified.",
            "example": "my_gather_id"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "GatherUsingAIRequest": {
        "title": "Gather Using AI Request",
        "required": [
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "The parameters described as a JSON Schema object that needs to be gathered by the voice assistant. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format",
            "example": {
              "properties": {
                "age": {
                  "description": "The age of the customer.",
                  "type": "integer"
                },
                "location": {
                  "description": "The location of the customer.",
                  "type": "string"
                }
              },
              "required": [
                "age",
                "location"
              ],
              "type": "object"
            }
          },
          "assistant": {
            "$ref": "#/components/schemas/Assistant"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionConfig"
          },
          "language": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/GoogleTranscriptionLanguage"
              }
            ],
            "discriminator": {
              "propertyName": "transcription.model",
              "mapping": {
                "google": "#/components/schemas/GoogleTranscriptionLanguage"
              }
            }
          },
          "voice": {
            "type": "string",
            "description": "The voice to be used by the voice assistant. Currently we support ElevenLabs, Telnyx and AWS voices.\n\n **Supported Providers:**\n- **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility.\n- **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).)\n- **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.BaseModel.John`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration secret under `\"voice_settings\": {\"api_key_ref\": \"<secret_id>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).\n - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`",
            "default": "Telnyx.KokoroTTS.af",
            "example": "Telnyx.KokoroTTS.af"
          },
          "voice_settings": {
            "description": "The settings associated with the voice selected"
          },
          "greeting": {
            "type": "string",
            "description": "Text that will be played when the gathering starts, if none then nothing will be played when the gathering starts. The greeting can be text for any voice or SSML for `AWS.Polly.<voice_id>` voices. There is a 3,000 character limit.",
            "example": "Hello, can you tell me your age and where you live?"
          },
          "send_partial_results": {
            "type": "boolean",
            "description": "Default is `false`. If set to `true`, the voice assistant will send partial results via the `call.ai_gather.partial_results` [callback](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) in real time as individual fields are gathered. If set to `false`, the voice assistant will only send the final result via the `call.ai_gather.ended` callback.",
            "example": false
          },
          "send_message_history_updates": {
            "type": "boolean",
            "description": "Default is `false`. If set to `true`, the voice assistant will send updates to the message history via the `call.ai_gather.message_history_updated` [callback](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) in real time as the message history is updated.",
            "example": false
          },
          "message_history": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The content of the message",
                  "example": "Hello, I'm 29 and I live in Paris."
                },
                "role": {
                  "enum": [
                    "assistant",
                    "user"
                  ],
                  "type": "string",
                  "description": "The role of the message sender",
                  "example": "user"
                }
              }
            },
            "description": "The message history you want the voice assistant to be aware of, this can be useful to keep the context of the conversation, or to pass additional information to the voice assistant."
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "interruption_settings": {
            "$ref": "#/components/schemas/InterruptionSettings"
          },
          "user_response_timeout_ms": {
            "type": "integer",
            "description": "The number of milliseconds to wait for a user response before the voice assistant times out and check if the user is still there.",
            "default": 10000,
            "example": 5000
          }
        },
        "example": {
          "parameters": {
            "properties": {
              "age": {
                "description": "The age of the customer.",
                "type": "integer"
              },
              "location": {
                "description": "The location of the customer.",
                "type": "string"
              }
            },
            "required": [
              "age",
              "location"
            ],
            "type": "object"
          },
          "voice": "Telnyx.KokoroTTS.af",
          "greeting": "Hello, can you tell me your age and where you live?",
          "send_partial_results": true,
          "send_message_history_updates": true,
          "message_history": [
            {
              "content": "Hello, what's your name?",
              "role": "assistant"
            },
            {
              "content": "Hello, I'm John.",
              "role": "user"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "user_response_timeout_ms": 5000
        }
      },
      "GatherUsingAudioRequest": {
        "title": "Gather Using Audio Request",
        "type": "object",
        "properties": {
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played back at the beginning of each prompt. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back at the beginning of each prompt. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "invalid_audio_url": {
            "type": "string",
            "description": "The URL of a file to play when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file. invalid_media_name and invalid_audio_url cannot be used together in one request.",
            "example": "http://example.com/invalid.wav"
          },
          "invalid_media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "minimum_digits": {
            "type": "integer",
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "maximum_digits": {
            "type": "integer",
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "format": "int32",
            "default": 128,
            "example": 10
          },
          "maximum_tries": {
            "type": "integer",
            "description": "The maximum number of times the file should be played if there is no input from the user on the call.",
            "format": "int32",
            "default": 3,
            "example": 3
          },
          "timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for a DTMF response after file playback ends before a replaying the sound file.",
            "format": "int32",
            "default": 60000,
            "example": 60000
          },
          "terminating_digit": {
            "type": "string",
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "example": "#"
          },
          "valid_digits": {
            "type": "string",
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for input between digits.",
            "format": "int32",
            "default": 5000,
            "example": 10000
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://example.com/message.wav",
          "invalid_audio_url": "http://example.com/message.wav",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "timeout_millis": 10000,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GatherUsingSpeakRequest": {
        "title": "Gather Using Speak Request",
        "required": [
          "voice",
          "payload"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "example": "Say this on the call"
          },
          "invalid_payload": {
            "type": "string",
            "description": "The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 3,000 character limit.",
            "example": "Say this on the call"
          },
          "payload_type": {
            "enum": [
              "text",
              "ssml"
            ],
            "type": "string",
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "example": "ssml"
          },
          "service_level": {
            "enum": [
              "basic",
              "premium"
            ],
            "type": "string",
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "example": "premium"
          },
          "voice": {
            "type": "string",
            "description": "Specifies the voice used in speech synthesis.\n\n- Define voices using the format `<Provider>.<Model>.<VoiceId>`. Specifying only the provider will give default values for voice_id and model_id.\n\n **Supported Providers:**\n- **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility.\n- **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).)\n- **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.eleven_multilingual_v2.21m00Tcm4TlvDq8ikWAM`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration identifier secret in `\"voice_settings\": {\"api_key_ref\": \"<secret_identifier>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).\n - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`\n\nFor service_level basic, you may define the gender of the speaker (male or female).",
            "example": "Telnyx.KokoroTTS.af"
          },
          "voice_settings": {
            "description": "The settings associated with the voice selected"
          },
          "language": {
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "type": "string",
            "description": "The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.",
            "example": "en-US"
          },
          "minimum_digits": {
            "type": "integer",
            "description": "The minimum number of digits to fetch. This parameter has a minimum value of 1.",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "maximum_digits": {
            "type": "integer",
            "description": "The maximum number of digits to fetch. This parameter has a maximum value of 128.",
            "format": "int32",
            "default": 128,
            "example": 10
          },
          "maximum_tries": {
            "type": "integer",
            "description": "The maximum number of times that a file should be played back if there is no input from the user on the call.",
            "format": "int32",
            "default": 3,
            "example": 3
          },
          "timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.",
            "format": "int32",
            "default": 60000,
            "example": 60000
          },
          "terminating_digit": {
            "type": "string",
            "description": "The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.",
            "default": "#",
            "example": "#"
          },
          "valid_digits": {
            "type": "string",
            "description": "A list of all digits accepted as valid.",
            "default": "0123456789#*",
            "example": "123"
          },
          "inter_digit_timeout_millis": {
            "type": "integer",
            "description": "The number of milliseconds to wait for input between digits.",
            "format": "int32",
            "default": 5000,
            "example": 10000
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "say this on call",
          "invalid_payload": "say this on call",
          "payload_type": "text",
          "service_level": "premium",
          "voice": "male",
          "language": "arb",
          "minimum_digits": 1,
          "maximum_digits": 10,
          "terminating_digit": "#",
          "valid_digits": "123",
          "inter_digit_timeout_millis": 10000,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "GcbChannelZone": {
        "title": "Channel zone object",
        "required": [
          "record_type",
          "countries",
          "id",
          "name",
          "channels"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "channel_zone"
            ],
            "type": "string",
            "example": "channel_zone"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of countries (in ISO 3166-2, capitalized) members of the billing channel zone"
          },
          "id": {
            "type": "string",
            "example": "1653e6a1-4bfd-4857-97c6-6a51e1c34477"
          },
          "name": {
            "type": "string",
            "example": "Euro channel zone"
          },
          "channels": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the channel zone was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the channel zone was updated",
            "example": "2019-01-23T18:10:02.574Z"
          }
        }
      },
      "GcbPhoneNumber": {
        "title": "Phone Number object",
        "required": [
          "record_type",
          "channel_zone_id",
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "channel_zone_phone_number"
            ],
            "type": "string",
            "example": "channel_zone_phone_number"
          },
          "channel_zone_id": {
            "type": "string",
            "example": "1653e6a1-4bfd-4857-97c6-6a51e1c34477"
          },
          "id": {
            "type": "string",
            "example": "3da3c749-bb7d-4ad6-acae-ca0d415ae08b"
          },
          "phone_number": {
            "type": "string",
            "format": "+E.164",
            "example": "+15554441234"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the phone number was created",
            "example": "2019-01-23T18:10:02.574Z"
          }
        }
      },
      "GenericError": {
        "title": "GenericError",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "format": "json-pointer"
              },
              "parameter": {
                "type": "string",
                "description": "Indicates which query parameter caused the error."
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "GetSubRequestByPortingOrder": {
        "title": "GetSubRequestByPortingOrder",
        "type": "object",
        "properties": {
          "sub_request_id": {
            "type": "string",
            "description": "Identifies the Sub Request associated with the Porting Order",
            "example": "9787fb5f-cbe5-4de4-b765-3303774ee9fe"
          },
          "port_request_id": {
            "type": "string",
            "description": "Identifies the Port Request associated with the Porting Order",
            "example": "59b0762a-b274-4f76-ac32-4d5cf0272e66"
          }
        }
      },
      "GlobalIP": {
        "title": "GlobalIP",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "title": "Global IP",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "global_ip"
              },
              "ip_address": {
                "type": "string",
                "description": "The Global IP address.",
                "readOnly": true,
                "example": "198.51.100.1"
              },
              "ports": {
                "type": "object",
                "description": "A Global IP ports grouped by protocol code.",
                "example": {
                  "tcp": [
                    80,
                    8080
                  ],
                  "udp": [
                    5000,
                    5050
                  ]
                }
              },
              "name": {
                "type": "string",
                "description": "A user specified name for the address.",
                "example": "test interface"
              },
              "description": {
                "type": "string",
                "description": "A user specified description for the address.",
                "example": "test interface"
              }
            }
          }
        ]
      },
      "GlobalIPAllowedPort": {
        "title": "GlobalIPAllowedPort",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "global_ip_allowed_port"
          },
          "protocol_code": {
            "type": "string",
            "description": "The Global IP Protocol code.",
            "readOnly": true,
            "example": "tcp"
          },
          "name": {
            "type": "string",
            "description": "A name for the Global IP ports range.",
            "example": "TCP Registered"
          },
          "first_port": {
            "type": "integer",
            "description": "First port of a range.",
            "example": 1024
          },
          "last_port": {
            "type": "integer",
            "description": "Last port of a range.",
            "example": 49151
          }
        }
      },
      "GlobalIPHealthCheck": {
        "title": "GlobalIPHealthCheck",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "title": "Global IP health check",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "global_ip_health_check"
              },
              "health_check_type": {
                "type": "string",
                "description": "The Global IP health check type.",
                "example": "http_status_2xx"
              },
              "health_check_params": {
                "type": "object",
                "description": "A Global IP health check params.",
                "example": {
                  "path": "/",
                  "port": 8080
                }
              },
              "global_ip_id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              }
            }
          }
        ]
      },
      "GlobalIPProtocol": {
        "title": "GlobalIPProtocol",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "global_ip_protocol"
          },
          "code": {
            "type": "string",
            "description": "The Global IP Protocol code.",
            "readOnly": true,
            "example": "tcp"
          },
          "name": {
            "type": "string",
            "description": "A name for Global IP Protocol.",
            "example": "TCP"
          }
        }
      },
      "GlobalIpAssignment": {
        "title": "GlobalIpAssignment",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "title": "Global IP",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "global_ip_assignment"
              },
              "global_ip_id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "wireguard_peer_id": {
                "type": "string",
                "description": "Wireguard peer ID.",
                "format": "uuid",
                "example": "e66c496d-4a85-423b-8b2a-8e63fac20320"
              },
              "status": {
                "$ref": "#/components/schemas/InterfaceStatus"
              },
              "is_connected": {
                "type": "boolean",
                "description": "Wireguard peer is connected.",
                "readOnly": true
              },
              "is_in_maintenance": {
                "type": "boolean",
                "description": "Enable/disable BGP announcement."
              },
              "is_announced": {
                "type": "boolean",
                "description": "Status of BGP announcement.",
                "readOnly": true
              }
            }
          }
        ]
      },
      "GlobalIpAssignmentHealthMetric": {
        "title": "GlobalIpAssignmentHealthMetric",
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the metric.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.0000000+00:00"
          },
          "global_ip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "ip_address": {
                "type": "string",
                "description": "The Global IP address.",
                "readOnly": true,
                "example": null
              }
            }
          },
          "global_ip_assignment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP assignment ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "wireguard_peer_id": {
                "type": "string",
                "description": "Wireguard peer ID.",
                "format": "uuid",
                "example": "e66c496d-4a85-423b-8b2a-8e63fac20320"
              },
              "wireguard_peer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A user specified name for the interface.",
                    "example": "Wireguard Peer 1"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "The IP address of the interface.",
                    "example": "73.47.1.23"
                  }
                }
              }
            }
          },
          "health": {
            "type": "object",
            "properties": {
              "pass": {
                "type": "number",
                "description": "The number of successful health checks.",
                "example": 100
              },
              "fail": {
                "type": "number",
                "description": "The number of failed health checks.",
                "example": 0
              }
            }
          }
        }
      },
      "GlobalIpAssignmentUpdate": {
        "title": "GlobalIpAssignmentUpdate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GlobalIpAssignment"
          },
          {
            "title": "Global IP",
            "type": "object",
            "properties": {
              "global_ip_id": {
                "readOnly": true
              },
              "wireguard_peer_id": {
                "readOnly": true
              }
            }
          }
        ]
      },
      "GlobalIpAssignmentUsageMetric": {
        "title": "GlobalIpAssignmentUsageMetric",
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the metric.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.0000000+00:00"
          },
          "global_ip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "ip_address": {
                "type": "string",
                "description": "The Global IP address.",
                "readOnly": true,
                "example": "64.1.4.130"
              }
            }
          },
          "global_ip_assignment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP assignment ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "wireguard_peer_id": {
                "type": "string",
                "description": "Wireguard peer ID.",
                "format": "uuid",
                "example": "e66c496d-4a85-423b-8b2a-8e63fac20320"
              },
              "wireguard_peer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A user specified name for the interface.",
                    "example": "Wireguard Peer 1"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "The IP address of the interface.",
                    "example": "172.1.0.1"
                  }
                }
              }
            }
          },
          "transmitted": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "The amount of data transmitted.",
                "example": 100000
              },
              "unit": {
                "type": "string",
                "description": "The unit of the amount of data transmitted.",
                "example": "B"
              }
            }
          },
          "received": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "The amount of data received.",
                "example": 100000
              },
              "unit": {
                "type": "string",
                "description": "The unit of the amount of data received.",
                "example": "B"
              }
            }
          }
        }
      },
      "GlobalIpHealthCheckType": {
        "title": "GlobalIpHealthCheckType",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "global_ip_health_check_type"
          },
          "health_check_type": {
            "type": "string",
            "description": "Global IP Health check type.",
            "example": "http_status_2xx"
          },
          "health_check_params": {
            "type": "object",
            "description": "Global IP Health check params.",
            "example": {
              "health_check_params": {
                "path": "str",
                "port": "int"
              }
            }
          }
        }
      },
      "GlobalIpLatencyMetric": {
        "title": "GlobalIpLatencyMetric",
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the metric.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.0000000+00:00"
          },
          "global_ip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "ip_address": {
                "type": "string",
                "description": "The Global IP address.",
                "readOnly": true,
                "example": null
              }
            }
          },
          "prober_location": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Location ID.",
                "format": "uuid",
                "example": "1"
              },
              "name": {
                "type": "string",
                "description": "Location name.",
                "example": "Amsterdam"
              },
              "lat": {
                "type": "number",
                "description": "Latitude.",
                "example": 52.370216
              },
              "lon": {
                "type": "number",
                "description": "Longitude.",
                "example": 4.895168
              }
            }
          },
          "mean_latency": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "The average latency.",
                "example": 100
              },
              "unit": {
                "type": "string",
                "description": "The unit of the average latency.",
                "example": "ms"
              }
            }
          },
          "percentile_latency": {
            "type": "object",
            "properties": {
              "0": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The minimum latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the minimum latency.",
                    "example": "ms"
                  }
                }
              },
              "25": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The 25th percentile latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the 25th percentile latency.",
                    "example": "ms"
                  }
                }
              },
              "50": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The 50th percentile latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the 50th percentile latency.",
                    "example": "ms"
                  }
                }
              },
              "75": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The 75th percentile latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the 75th percentile latency.",
                    "example": "ms"
                  }
                }
              },
              "90": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The 90th percentile latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the 90th percentile latency.",
                    "example": "ms"
                  }
                }
              },
              "99": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The 99th percentile latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the 99th percentile latency.",
                    "example": "ms"
                  }
                }
              },
              "100": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The maximum latency.",
                    "example": 100
                  },
                  "unit": {
                    "type": "string",
                    "description": "The unit of the maximum latency.",
                    "example": "ms"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpUsageMetric": {
        "title": "GlobalIpUsageMetric",
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the metric.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00.0000000+00:00"
          },
          "global_ip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Global IP ID.",
                "format": "uuid",
                "example": "a836125b-20b6-452e-9c03-2653f09c7ed7"
              },
              "ip_address": {
                "type": "string",
                "description": "The Global IP address.",
                "readOnly": true,
                "example": "64.1.2.130"
              }
            }
          },
          "transmitted": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "The amount of data transmitted.",
                "example": 100000
              },
              "unit": {
                "type": "string",
                "description": "The unit of the amount of data transmitted.",
                "example": "B"
              }
            }
          },
          "received": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "description": "The amount of data received.",
                "example": 100000
              },
              "unit": {
                "type": "string",
                "description": "The unit of the amount of data received.",
                "example": "B"
              }
            }
          }
        }
      },
      "GoogleTranscriptionLanguage": {
        "title": "Google transcription engine list of languages",
        "enum": [
          "af",
          "sq",
          "am",
          "ar",
          "hy",
          "az",
          "eu",
          "bn",
          "bs",
          "bg",
          "my",
          "ca",
          "yue",
          "zh",
          "hr",
          "cs",
          "da",
          "nl",
          "en",
          "et",
          "fil",
          "fi",
          "fr",
          "gl",
          "ka",
          "de",
          "el",
          "gu",
          "iw",
          "hi",
          "hu",
          "is",
          "id",
          "it",
          "ja",
          "jv",
          "kn",
          "kk",
          "km",
          "ko",
          "lo",
          "lv",
          "lt",
          "mk",
          "ms",
          "ml",
          "mr",
          "mn",
          "ne",
          "no",
          "fa",
          "pl",
          "pt",
          "pa",
          "ro",
          "ru",
          "rw",
          "sr",
          "si",
          "sk",
          "sl",
          "ss",
          "st",
          "es",
          "su",
          "sw",
          "sv",
          "ta",
          "te",
          "th",
          "tn",
          "tr",
          "ts",
          "uk",
          "ur",
          "uz",
          "ve",
          "vi",
          "xh",
          "zu"
        ],
        "type": "string",
        "description": "Language to use for speech recognition",
        "default": "en",
        "example": "en"
      },
      "GoogleTranscriptionLanguageLong": {
        "title": "Google transcription engine list of languages",
        "enum": [
          "af-ZA",
          "am-ET",
          "ar-AE",
          "ar-BH",
          "ar-DZ",
          "ar-EG",
          "ar-IL",
          "ar-IQ",
          "ar-JO",
          "ar-KW",
          "ar-LB",
          "ar-MA",
          "ar-MR",
          "ar-OM",
          "ar-PS",
          "ar-QA",
          "ar-SA",
          "ar-TN",
          "ar-YE",
          "az-AZ",
          "bg-BG",
          "bn-BD",
          "bn-IN",
          "bs-BA",
          "ca-ES",
          "cs-CZ",
          "da-DK",
          "de-AT",
          "de-CH",
          "de-DE",
          "el-GR",
          "en-AU",
          "en-CA",
          "en-GB",
          "en-GH",
          "en-HK",
          "en-IE",
          "en-IN",
          "en-KE",
          "en-NG",
          "en-NZ",
          "en-PH",
          "en-PK",
          "en-SG",
          "en-TZ",
          "en-US",
          "en-ZA",
          "es-AR",
          "es-BO",
          "es-CL",
          "es-CO",
          "es-CR",
          "es-DO",
          "es-EC",
          "es-ES",
          "es-GT",
          "es-HN",
          "es-MX",
          "es-NI",
          "es-PA",
          "es-PE",
          "es-PR",
          "es-PY",
          "es-SV",
          "es-US",
          "es-UY",
          "es-VE",
          "et-EE",
          "eu-ES",
          "fa-IR",
          "fi-FI",
          "fil-PH",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "fr-FR",
          "gl-ES",
          "gu-IN",
          "hi-IN",
          "hr-HR",
          "hu-HU",
          "hy-AM",
          "id-ID",
          "is-IS",
          "it-CH",
          "it-IT",
          "iw-IL",
          "ja-JP",
          "jv-ID",
          "ka-GE",
          "kk-KZ",
          "km-KH",
          "kn-IN",
          "ko-KR",
          "lo-LA",
          "lt-LT",
          "lv-LV",
          "mk-MK",
          "ml-IN",
          "mn-MN",
          "mr-IN",
          "ms-MY",
          "my-MM",
          "ne-NP",
          "nl-BE",
          "nl-NL",
          "no-NO",
          "pa-Guru-IN",
          "pl-PL",
          "pt-BR",
          "pt-PT",
          "ro-RO",
          "ru-RU",
          "rw-RW",
          "si-LK",
          "sk-SK",
          "sl-SI",
          "sq-AL",
          "sr-RS",
          "ss-latn-za",
          "st-ZA",
          "su-ID",
          "sv-SE",
          "sw-KE",
          "sw-TZ",
          "ta-IN",
          "ta-LK",
          "ta-MY",
          "ta-SG",
          "te-IN",
          "th-TH",
          "tn-latn-za",
          "tr-TR",
          "ts-ZA",
          "uk-UA",
          "ur-IN",
          "ur-PK",
          "uz-UZ",
          "ve-ZA",
          "vi-VN",
          "xh-ZA",
          "yue-Hant-HK",
          "zh",
          "zh-TW",
          "zu-ZA"
        ],
        "type": "string",
        "description": "Language to use for speech recognition",
        "default": "en-US",
        "example": "en-US"
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HandoffTool": {
        "title": "HandoffTool",
        "required": [
          "type",
          "handoff"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "handoff"
            ],
            "type": "string"
          },
          "handoff": {
            "$ref": "#/components/schemas/HandoffToolParams"
          }
        },
        "description": "The handoff tool allows the assistant to hand off control of the conversation to another AI assistant. By default, this will happen transparently to the end user."
      },
      "HandoffToolParams": {
        "title": "HandoffToolParams",
        "required": [
          "ai_assistants"
        ],
        "type": "object",
        "properties": {
          "ai_assistants": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "id"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Helpful name for giving context on when to handoff to the assistant.",
                  "example": "Scheduling Specialist"
                },
                "id": {
                  "type": "string",
                  "description": "The ID of the assistant to hand off to.",
                  "example": "assistant-1234567890abcdef"
                }
              }
            },
            "description": "List of possible assistants that can receive a handoff."
          }
        }
      },
      "HangupRequest": {
        "title": "Hangup Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "HangupTool": {
        "title": "HangupTool",
        "required": [
          "type",
          "hangup"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "hangup"
            ],
            "type": "string"
          },
          "hangup": {
            "$ref": "#/components/schemas/HangupToolParams"
          }
        }
      },
      "HangupToolParams": {
        "title": "HangupToolParams",
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the function that will be passed to the assistant.",
            "default": "This tool is used to hang up the call."
          }
        }
      },
      "HostedNumber": {
        "title": "HostedNumber",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "messaging_hosted_number"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "description": "The messaging hosted phone number (+E.164 format)",
            "format": "+E.164"
          },
          "status": {
            "enum": [
              "deleted",
              "failed",
              "pending",
              "successful"
            ],
            "type": "string"
          }
        }
      },
      "PostAssignMessagingProfileToCampaign_202": {
        "title": "Response Assign Messaging Profile To Campaign Public Phonenumberassignmentbyprofile Post",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AssignProfileToCampaignResponse": "#/components/schemas/AssignProfileToCampaignResponse",
            "SettingsDataErrorMessage": "#/components/schemas/SettingsDataErrorMessage"
          }
        }
      },
      "ImportAssistantsRequest": {
        "title": "ImportAssistantsRequest",
        "required": [
          "provider",
          "api_key_ref"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "enum": [
              "elevenlabs",
              "vapi"
            ],
            "type": "string",
            "description": "The external provider to import assistants from."
          },
          "api_key_ref": {
            "type": "string",
            "description": "Integration secret pointer that refers to the API key for the external provider. This should be an identifier for an integration secret created via /v2/integration_secrets."
          }
        }
      },
      "ImportExternalVetting": {
        "title": "ImportExternalVetting",
        "required": [
          "evpId",
          "vettingId"
        ],
        "type": "object",
        "properties": {
          "evpId": {
            "title": "Evpid",
            "maxLength": 10,
            "type": "string",
            "description": "External vetting provider ID for the brand."
          },
          "vettingId": {
            "title": "Vettingid",
            "type": "string",
            "description": "Unique ID that identifies a vetting transaction performed by a vetting provider. This ID is provided by the vetting provider at time of vetting."
          },
          "vettingToken": {
            "title": "Vettingtoken",
            "type": "string",
            "description": "Required by some providers for vetting record confirmation."
          }
        }
      },
      "ImportMetadata": {
        "title": "ImportMetadata",
        "type": "object",
        "properties": {
          "import_provider": {
            "enum": [
              "elevenlabs",
              "vapi"
            ],
            "type": "string",
            "description": "Provider the assistant was imported from."
          },
          "import_id": {
            "type": "string",
            "description": "ID of the assistant in the provider's system."
          }
        }
      },
      "InboundFqdn": {
        "title": "Inbound FQDN",
        "type": "object",
        "properties": {
          "ani_number_format": {
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "type": "string",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
            "default": "E.164-national"
          },
          "dnis_number_format": {
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "type": "string",
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_routing_method": {
            "enum": [
              "sequential",
              "round-robin"
            ],
            "type": "string",
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or null, other values are not allowed.",
            "default": "sequential",
            "nullable": true
          },
          "default_primary_fqdn_id": {
            "type": "string",
            "description": "The default primary FQDN to use for the number. Only settable if the connection is\nof FQDN type. Value must be the ID of an FQDN set on the connection.",
            "format": "int64",
            "default": null,
            "nullable": true
          },
          "default_secondary_fqdn_id": {
            "type": "string",
            "description": "The default secondary FQDN to use for the number. Only settable if the connection is\nof FQDN type. Value must be the ID of an FQDN set on the connection.",
            "format": "int64",
            "default": null,
            "nullable": true
          },
          "default_tertiary_fqdn_id": {
            "type": "string",
            "description": "The default tertiary FQDN to use for the number. Only settable if the connection is\nof FQDN type. Value must be the ID of an FQDN set on the connection.",
            "format": "int64",
            "default": null,
            "nullable": true
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "default": null,
            "nullable": true
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)",
            "default": false
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "enum": [
              "US",
              "Europe",
              "Australia"
            ],
            "type": "string",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "default": "US"
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
            "default": null,
            "nullable": true
          },
          "sip_subdomain_receive_settings": {
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
            "default": "from_anyone"
          },
          "timeout_1xx_secs": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "default": 3
          },
          "timeout_2xx_secs": {
            "maximum": 600,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          },
          "shaken_stir_enabled": {
            "type": "boolean",
            "description": "When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.",
            "default": false
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dnis_number_format": "+e164",
          "codecs": [
            "G722"
          ],
          "default_routing_method": "sequential",
          "default_primary_fqdn_id": "1293384261075731497",
          "default_secondary_fqdn_id": "1293384261075731498",
          "default_tertiary_fqdn_id": "1293384261075731499",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20,
          "shaken_stir_enabled": true
        }
      },
      "InboundIp": {
        "title": "Inbound Ip",
        "type": "object",
        "properties": {
          "ani_number_format": {
            "enum": [
              "+E.164",
              "E.164",
              "+E.164-national",
              "E.164-national"
            ],
            "type": "string",
            "description": "This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
            "default": "E.164-national"
          },
          "dnis_number_format": {
            "enum": [
              "+e164",
              "e164",
              "national",
              "sip_username"
            ],
            "type": "string",
            "default": "e164"
          },
          "codecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.",
            "default": [
              "G722",
              "G711U",
              "G711A",
              "G729",
              "OPUS",
              "H.264"
            ]
          },
          "default_primary_ip_id": {
            "type": "string",
            "description": "The default primary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_secondary_ip_id": {
            "type": "string",
            "description": "The default secondary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_tertiary_ip_id": {
            "type": "string",
            "description": "The default tertiary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.",
            "example": "192.168.0.0"
          },
          "default_routing_method": {
            "enum": [
              "sequential",
              "round-robin"
            ],
            "type": "string",
            "description": "Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed."
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
            "default": null,
            "example": 10
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "isup_headers_enabled": {
            "type": "boolean",
            "description": "When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)",
            "default": false
          },
          "prack_enabled": {
            "type": "boolean",
            "description": "Enable PRACK messages as defined in RFC3262.",
            "default": false
          },
          "sip_compact_headers_enabled": {
            "type": "boolean",
            "description": "Defaults to true.",
            "default": true
          },
          "sip_region": {
            "enum": [
              "US",
              "Europe",
              "Australia"
            ],
            "type": "string",
            "description": "Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.",
            "default": "US"
          },
          "sip_subdomain": {
            "type": "string",
            "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls."
          },
          "sip_subdomain_receive_settings": {
            "enum": [
              "only_my_connections",
              "from_anyone"
            ],
            "type": "string",
            "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user)."
          },
          "timeout_1xx_secs": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "default": 3
          },
          "timeout_2xx_secs": {
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          },
          "shaken_stir_enabled": {
            "type": "boolean",
            "description": "When enabled the SIP Connection will receive the Identity header with Shaken/Stir data in the SIP INVITE message of inbound calls, even when using UDP transport.",
            "default": false
          }
        },
        "example": {
          "ani_number_format": "+E.164",
          "dns_number_format": "+e164",
          "codecs": "G722",
          "default_primary_ip_id": "192.168.0.0",
          "default_tertiary_ip_id": "192.168.0.0",
          "default_secondary_ip_id": "192.168.0.0",
          "default_routing_method": "sequential",
          "channel_limit": 10,
          "generate_ringback_tone": true,
          "isup_headers_enabled": true,
          "prack_enabled": true,
          "sip_compact_headers_enabled": true,
          "sip_region": "US",
          "sip_subdomain": "test",
          "sip_subdomain_receive_settings": "only_my_connections",
          "timeout_1xx_secs": 10,
          "timeout_2xx_secs": 20,
          "shaken_stir_enabled": true
        }
      },
      "InboundMessage": {
        "title": "InboundMessage",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid"
          },
          "event_type": {
            "enum": [
              "message.received"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "message.received"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time"
          },
          "payload": {
            "$ref": "#/components/schemas/InboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
          "event_type": "message.received",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "inbound",
            "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
            "type": "SMS",
            "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18665550001",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            },
            "to": [
              {
                "phone_number": "+18445550001",
                "status": "delivered",
                "carrier": "TELNYX LLC",
                "line_type": "VoIP"
              }
            ],
            "cc": [ ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [ ],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": {
              "amount": 0.0051,
              "currency": "USD"
            },
            "cost_breakdown": {
              "carrier_fee": {
                "amount": 0.00305,
                "currency": "USD"
              },
              "rate": {
                "amount": 0.00205,
                "currency": "USD"
              }
            },
            "tcr_campaign_id": "TCPA3X7",
            "tcr_campaign_billable": true,
            "tcr_campaign_registered": "REGISTERED",
            "received_at": "2019-01-23T18:10:02.5740000+00:00",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": [ ]
          }
        }
      },
      "InboundMessageEvent": {
        "title": "InboundMessageEvent",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboundMessage"
          }
        }
      },
      "InboundMessagePayload": {
        "title": "InboundMessagePayload",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "message"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "message"
          },
          "direction": {
            "enum": [
              "inbound"
            ],
            "type": "string",
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.",
            "example": "inbound"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The type of message. This value can be either 'sms' or 'mms'."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "description": "Receiving address (+E.164 formatted phone number or short code).",
                  "format": "address"
                },
                "status": {
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed",
                    "webhook_delivered"
                  ],
                  "type": "string"
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless"
                  ],
                  "type": "string",
                  "description": "The line-type of the receiver."
                }
              }
            }
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "description": "Receiving address (+E.164 formatted phone number or short code).",
                  "format": "address"
                },
                "status": {
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "delivered",
                    "sending_failed",
                    "delivery_failed",
                    "delivery_unconfirmed"
                  ],
                  "type": "string"
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless"
                  ],
                  "type": "string",
                  "description": "The line-type of the receiver."
                }
              }
            }
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).",
                "format": "address"
              },
              "status": {
                "enum": [
                  "received",
                  "delivered"
                ],
                "type": "string"
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the sender."
              },
              "line_type": {
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless"
                ],
                "type": "string",
                "description": "The line-type of the sender."
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The url of the media requested to be sent.",
                  "format": "url"
                },
                "content_type": {
                  "type": "string",
                  "description": "The MIME type of the requested media.",
                  "format": "mime-type"
                },
                "size": {
                  "type": "integer",
                  "description": "The size of the requested media."
                },
                "hash_sha256": {
                  "maxLength": 32,
                  "minLength": 32,
                  "type": "string",
                  "description": "The SHA256 hash of the requested media."
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the resource."
          },
          "cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount deducted from your account.",
                "format": "decimal"
              },
              "currency": {
                "type": "string",
                "description": "The ISO 4217 currency identifier.",
                "format": "iso4217"
              }
            },
            "nullable": true
          },
          "cost_breakdown": {
            "type": "object",
            "properties": {
              "carrier_fee": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The carrier fee amount.",
                    "format": "decimal"
                  },
                  "currency": {
                    "type": "string",
                    "description": "The ISO 4217 currency identifier.",
                    "format": "iso4217"
                  }
                }
              },
              "rate": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The rate amount applied.",
                    "format": "decimal"
                  },
                  "currency": {
                    "type": "string",
                    "description": "The ISO 4217 currency identifier.",
                    "format": "iso4217"
                  }
                }
              }
            },
            "description": "Detailed breakdown of the message cost components.",
            "nullable": true
          },
          "tcr_campaign_id": {
            "type": "string",
            "description": "The Campaign Registry (TCR) campaign ID associated with the message.",
            "nullable": true
          },
          "tcr_campaign_billable": {
            "type": "boolean",
            "description": "Indicates whether the TCR campaign is billable."
          },
          "tcr_campaign_registered": {
            "type": "string",
            "description": "The registration status of the TCR campaign.",
            "nullable": true,
            "example": "REGISTERED"
          },
          "received_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the message request was received.",
            "format": "date-time"
          },
          "sent_at": {
            "type": "string",
            "description": "Not used for inbound messages.",
            "format": "date-time",
            "nullable": true
          },
          "completed_at": {
            "type": "string",
            "description": "Not used for inbound messages.",
            "format": "date-time",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "description": "Not used for inbound messages.",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses."
          }
        },
        "example": {
          "record_type": "message",
          "direction": "inbound",
          "id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "type": "SMS",
          "messaging_profile_id": "0f512bda-ae1e-4597-8e11-e5f5686b97d3",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18665550001",
            "status": "delivered",
            "carrier": "T-MOBILE USA, INC.",
            "line_type": "Wireless"
          },
          "to": [
            {
              "phone_number": "+18445550001",
              "status": "delivered",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            }
          ],
          "cc": [ ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [ ],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": {
            "amount": "0.0051",
            "currency": "USD"
          },
          "cost_breakdown": {
            "carrier_fee": {
              "amount": "0.00305",
              "currency": "USD"
            },
            "rate": {
              "amount": "0.00205",
              "currency": "USD"
            }
          },
          "tcr_campaign_id": "TCPA3X7",
          "tcr_campaign_billable": true,
          "tcr_campaign_registered": "REGISTERED",
          "received_at": "2019-01-23T18:10:02.5740000+00:00",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": [ ]
        }
      },
      "InitiateCallRequest": {
        "title": "Initiate Call Request",
        "required": [
          "To",
          "From",
          "ApplicationSid"
        ],
        "type": "object",
        "properties": {
          "ApplicationSid": {
            "type": "string",
            "description": "The ID of the TeXML Application."
          },
          "To": {
            "type": "string",
            "description": "The phone number of the called party. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "From": {
            "type": "string",
            "description": "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.",
            "example": "+16175551212"
          },
          "CallerId": {
            "type": "string",
            "description": "To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.",
            "example": "Info"
          },
          "Url": {
            "type": "string",
            "description": "The URL from which Telnyx will retrieve the TeXML call instructions.",
            "example": "https://www.example.com/instructions.xml"
          },
          "UrlMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.",
            "default": "POST",
            "example": "GET"
          },
          "FallbackUrl": {
            "type": "string",
            "description": "A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not responding.",
            "example": "https://www.example.com/instructions-fallback.xml"
          },
          "StatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send status callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "StatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `StatusCallback`.",
            "default": "POST",
            "example": "GET"
          },
          "StatusCallbackEvent": {
            "enum": [
              "initiated",
              "ringing",
              "answered",
              "completed"
            ],
            "type": "string",
            "description": "The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.",
            "default": "completed",
            "example": "iniated ringing"
          },
          "MachineDetection": {
            "enum": [
              "Enable",
              "Disable",
              "DetectMessageEnd"
            ],
            "type": "string",
            "description": "Enables Answering Machine Detection.",
            "default": "Disable",
            "example": "Enable"
          },
          "DetectionMode": {
            "enum": [
              "Premium",
              "Regular"
            ],
            "type": "string",
            "description": "Allows you to chose between Premium and Standard detections.",
            "default": "Regular",
            "example": "Premium"
          },
          "AsyncAmd": {
            "type": "boolean",
            "description": "Select whether to perform answering machine detection in the background. By default execution is blocked until Answering Machine Detection is completed.",
            "default": false,
            "example": true
          },
          "AsyncAmdStatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send AMD callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "AsyncAmdStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML Application setting.",
            "default": "POST",
            "example": "GET"
          },
          "MachineDetectionTimeout": {
            "maximum": 60000,
            "minimum": 500,
            "type": "integer",
            "description": "Maximum timeout threshold in milliseconds for overall detection.",
            "default": 30000,
            "example": 5000
          },
          "MachineDetectionSpeechThreshold": {
            "type": "integer",
            "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "MachineDetectionSpeechEndThreshold": {
            "type": "integer",
            "description": "Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.",
            "default": 800,
            "example": 2000
          },
          "MachineDetectionSilenceTimeout": {
            "type": "integer",
            "description": "If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.",
            "default": 3500,
            "example": 2000
          },
          "CancelPlaybackOnMachineDetection": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "CancelPlaybackOnDetectMessageEnd": {
            "type": "boolean",
            "description": "Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.",
            "default": true,
            "example": false
          },
          "PreferredCodecs": {
            "type": "string",
            "description": "The list of comma-separated codecs to be offered on a call.",
            "example": "PCMA,PCMU"
          },
          "Record": {
            "type": "boolean",
            "description": "Whether to record the entire participant's call leg. Defaults to `false`.",
            "example": false
          },
          "RecordingChannels": {
            "enum": [
              "mono",
              "dual"
            ],
            "type": "string",
            "description": "The number of channels in the final recording. Defaults to `mono`.",
            "example": "dual"
          },
          "RecordingStatusCallback": {
            "type": "string",
            "description": "The URL the recording callbacks will be sent to.",
            "example": "https://example.com/recording_status_callback"
          },
          "RecordingStatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.",
            "example": "GET"
          },
          "RecordingStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.",
            "example": "in-progress completed absent"
          },
          "RecordingTimeout": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)",
            "default": 0,
            "example": 5
          },
          "RecordingTrack": {
            "enum": [
              "inbound",
              "outbound",
              "both"
            ],
            "type": "string",
            "description": "The audio track to record for the call. The default is `both`.",
            "example": "inbound"
          },
          "SendRecordingUrl": {
            "type": "boolean",
            "description": "Whether to send RecordingUrl in webhooks.",
            "default": true,
            "example": false
          },
          "SipAuthPassword": {
            "type": "string",
            "description": "The password to use for SIP authentication.",
            "example": "1234"
          },
          "SipAuthUsername": {
            "type": "string",
            "description": "The username to use for SIP authentication.",
            "example": "user"
          },
          "Trim": {
            "enum": [
              "trim-silence",
              "do-not-trim"
            ],
            "type": "string",
            "description": "Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.",
            "example": "false"
          }
        },
        "example": {
          "To": "+13121230000",
          "From": "+13120001234",
          "Url": "https://www.example.com/texml.xml",
          "StatusCallback": "https://www.example.com/statuscallback-listener"
        }
      },
      "InitiateCallResult": {
        "title": "Initaite TeXML Call Result",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "example": "+13120001234"
          },
          "to": {
            "type": "string",
            "example": "+13120000000"
          },
          "status": {
            "type": "string",
            "example": "accepted"
          }
        },
        "example": {
          "from": "+13120001234",
          "to": "+13121230000",
          "status": "queued"
        }
      },
      "InsightSettings": {
        "title": "InsightSettings",
        "type": "object",
        "properties": {
          "insight_group_id": {
            "type": "string",
            "description": "Reference to an Insight Group. Insights in this group will be run automatically for all the assistant's conversations."
          }
        }
      },
      "GetPartnerCampaignSharingStatus_200": {
        "title": "Response Get Sharing Status Public Partnercampaign  Campaignid  Sharing Get",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/CampaignSharingStatus"
        }
      },
      "IntegrationSecret": {
        "title": "IntegrationSecret",
        "required": [
          "record_type",
          "id",
          "identifier",
          "value",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "title": "Record Type",
            "type": "string",
            "example": "integration_secret"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "identifier": {
            "title": "Identifier",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IntegrationSecretCreatedResponse": {
        "title": "IntegrationSecretCreatedResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IntegrationSecret"
          }
        }
      },
      "IntegrationSecretsListData": {
        "title": "SecretsListData",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationSecret"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "Interface": {
        "title": "Interface",
        "type": "object",
        "properties": {
          "network_id": {
            "type": "string",
            "description": "The id of the network associated with the interface.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "name": {
            "type": "string",
            "description": "A user specified name for the interface.",
            "example": "test interface"
          },
          "status": {
            "$ref": "#/components/schemas/InterfaceStatus"
          }
        }
      },
      "InterfaceStatus": {
        "title": "InterfaceStatus",
        "enum": [
          "created",
          "provisioning",
          "provisioned",
          "deleting"
        ],
        "type": "string",
        "description": "The current status of the interface deployment.",
        "readOnly": true,
        "example": "provisioned"
      },
      "InterruptionSettings": {
        "title": "InterruptionSettings",
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "When true, allows users to interrupt the assistant while speaking",
            "default": true
          }
        },
        "description": "Settings for handling user interruptions during assistant speech"
      },
      "InventoryCoverage": {
        "title": "InventoryCoverage",
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "example": "318"
          },
          "group_type": {
            "type": "string",
            "example": "npa"
          },
          "number_range": {
            "type": "integer",
            "example": 1
          },
          "number_type": {
            "enum": [
              "did",
              "toll-free"
            ],
            "type": "string",
            "example": "did"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "national",
              "landline",
              "shared_cost",
              "mobile"
            ],
            "type": "string",
            "example": "local"
          },
          "coverage_type": {
            "enum": [
              "number",
              "block"
            ],
            "type": "string",
            "example": "number"
          },
          "record_type": {
            "type": "string",
            "example": "inventory_coverage_group"
          },
          "administrative_area": {
            "type": "string",
            "example": "NJ"
          },
          "count": {
            "type": "integer",
            "example": 3
          },
          "advance_requirements": {
            "type": "boolean",
            "description": "Indicates if the phone number requires advance requirements.",
            "example": true
          }
        },
        "example": {
          "group": "318",
          "group_type": "npa",
          "number_range": 1,
          "number_type": "did",
          "phone_number_type": "local",
          "coverage_type": "number",
          "record_type": "inventory_coverage_group",
          "administrative_area": "NJ",
          "count": 3,
          "advance_requirements": true
        }
      },
      "InventoryCoverageMetadata": {
        "title": "InventoryCoverageMetadata",
        "type": "object",
        "properties": {
          "total_results": {
            "type": "integer",
            "example": 25
          }
        },
        "example": {
          "total_results": 25
        }
      },
      "Ip": {
        "title": "Ip",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip"
          },
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip",
          "connection_id": "3456789987654",
          "ip_address": "192.168.0.0",
          "port": 5060,
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "IpConnection": {
        "title": "Ip Connection",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "int64",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ip_connection"
          },
          "active": {
            "type": "boolean",
            "description": "Defaults to true",
            "example": true
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string",
            "example": "string"
          },
          "transport_protocol": {
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP",
            "example": "UDP"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true,
            "example": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false,
            "example": true
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false,
            "example": false
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundIp"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "record_type": "ip_connection",
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "tags": [
            "tag1",
            "tag2"
          ],
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z",
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_primary_ip_id": "192.0.2.1",
            "default_secondary_ip_id": "198.51.100.1",
            "default_tertiary_ip_id": "203.0.113.1",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "customer",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "JoinConferenceRequest": {
        "title": "Join Conference Request",
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "properties": {
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call",
            "example": "v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=="
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string. Please note that the client_state will be updated for the participient call leg and the change will not affect conferencing webhooks unless the participient is the owner of the conference.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to \"false\".",
            "example": true
          },
          "soft_end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference should end after the participant leaves the conference. NOTE this doesn't hang up the other participants. Defaults to \"false\".",
            "example": true
          },
          "hold": {
            "type": "boolean",
            "description": "Whether the participant should be put on hold immediately after joining the conference. Defaults to \"false\".",
            "example": true
          },
          "hold_audio_url": {
            "type": "string",
            "description": "The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".",
            "example": "http://example.com/message.wav"
          },
          "hold_media_name": {
            "type": "string",
            "description": "The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when \"start_conference_on_create\" is set to \"false\". This property takes effect only if \"hold\" is set to \"true\".",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "mute": {
            "type": "boolean",
            "description": "Whether the participant should be muted immediately after joining the conference. Defaults to \"false\".",
            "example": true
          },
          "start_conference_on_enter": {
            "type": "boolean",
            "description": "Whether the conference should be started after the participant joins the conference. Defaults to \"false\".",
            "example": true
          },
          "supervisor_role": {
            "enum": [
              "barge",
              "monitor",
              "none",
              "whisper"
            ],
            "type": "string",
            "description": "Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. \"barge\" means the supervisor enters the conference as a normal participant. This is the same as \"none\". \"monitor\" means the supervisor is muted but can hear all participants. \"whisper\" means that only the specified \"whisper_call_control_ids\" can hear the supervisor. Defaults to \"none\".",
            "example": "whisper"
          },
          "whisper_call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only."
          },
          "beep_enabled": {
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "type": "string",
            "description": "Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.",
            "example": "on_exit"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "end_conference_on_exit": true,
          "hold": true,
          "hold_audio_url": "http://www.example.com/audio.wav",
          "mute": true,
          "start_conference_on_enter": true,
          "supervisor_role": "whisper",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "beep_enabled": "always"
        }
      },
      "LeaveConferenceRequest": {
        "title": "Leave Conference Request",
        "required": [
          "call_control_id"
        ],
        "type": "object",
        "properties": {
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call",
            "example": "f91269aa-61d1-417f-97b3-10e020e8bc47"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "beep_enabled": {
            "enum": [
              "always",
              "never",
              "on_enter",
              "on_exit"
            ],
            "type": "string",
            "description": "Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.",
            "example": "on_exit"
          }
        },
        "example": {
          "call_control_id": "c46e06d7-b78f-4b13-96b6-c576af9640ff",
          "beep_enabled": "never"
        }
      },
      "LeaveQueueRequest": {
        "title": "Leave Queue Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "LedgerBillingGroupReport": {
        "title": "LedgerBillingGroupReport",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "ledger_billing_group_report"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "ledger_billing_group_report"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid"
          },
          "organization_id": {
            "type": "string",
            "description": "Uniquely identifies the organization that owns the resource.",
            "format": "uuid"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "failed",
              "deleted"
            ],
            "type": "string",
            "description": "Status of the ledger billing group report"
          },
          "report_url": {
            "type": "string",
            "description": "External url of the ledger billing group report, if the status is complete",
            "format": "uri",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time"
          }
        },
        "example": {
          "record_type": "ledger_billing_group_report",
          "id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "organization_id": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "report_url": "https://example.com",
          "created_at": "2019-10-15T10:07:15.5270000+00:00",
          "updated_at": "2019-10-15T10:07:15.5270000+00:00"
        }
      },
      "ListAdvancedOrderResponse": {
        "title": "ListAdvancedOrderResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvancedOrderResponse"
            }
          }
        },
        "description": "An array of Advanced Order Responses"
      },
      "ListBucketsResponse": {
        "title": "ListBucketsResponse",
        "type": "object",
        "properties": {
          "Buckets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                },
                "CreationDate": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "xml": {
                "name": "Bucket"
              }
            },
            "xml": {
              "wrapped": true
            }
          }
        },
        "xml": {
          "name": "ListAllMyBucketsResult"
        }
      },
      "ListObjectsResponse": {
        "title": "ListObjectsResponse",
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Contents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Key": {
                  "type": "string"
                },
                "Size": {
                  "type": "number"
                },
                "LastModified": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "xml": {
          "name": "ListBucketResult"
        }
      },
      "ListPushCredentialsResponse": {
        "title": "ListPushCredentialsResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PushCredential"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "description": "Mobile mobile push credentials"
      },
      "ListVerificationsResponse": {
        "title": "ListVerificationsResponse",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Verification"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        }
      },
      "ListVerifiedNumbersResponse": {
        "title": "ListVerifiedNumbersResponse",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifiedNumberResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "description": "A paginated list of Verified Numbers"
      },
      "ListVerifyProfileMessageTemplateResponse": {
        "title": "ListVerifyProfileMessageTemplateResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifyProfileMessageTemplateResponse"
            }
          }
        },
        "description": "A list of Verify profile message templates"
      },
      "ListVerifyProfilesResponse": {
        "title": "ListVerifyProfilesResponse",
        "required": [
          "data",
          "meta"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifyProfileResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          }
        },
        "description": "A paginated list of Verify profiles"
      },
      "Location": {
        "title": "Location",
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Identifies the geographical region of location.",
            "example": "AMER"
          },
          "site": {
            "type": "string",
            "description": "Site of location.",
            "example": "ORD"
          },
          "pop": {
            "type": "string",
            "description": "Point of presence of location.",
            "example": "CH1"
          },
          "code": {
            "type": "string",
            "description": "Location code.",
            "example": "chicago-il"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of location.",
            "example": "Chicago IL, US"
          }
        }
      },
      "LocationResponse": {
        "title": "LocationResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "location_id": {
                "type": "string",
                "format": "uuid"
              },
              "static_emergency_address_id": {
                "type": "string",
                "format": "uuid"
              },
              "accepted_address_suggestions": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "LogMessage": {
        "title": "LogMessage",
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "format": "integer",
            "example": "10015"
          },
          "title": {
            "type": "string",
            "example": "Invalid attribute"
          },
          "detail": {
            "type": "string",
            "example": "The value provided for the attribute is not valid. Check the value used and try again."
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "format": "json-pointer",
                "example": "/attribute"
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "telephone_number": {
                "type": "string",
                "description": "The telephone number the log message is associated with, if any.",
                "example": "+12345678"
              },
              "external_connection_id": {
                "type": "string",
                "description": "The external connection the log message is associated with, if any.",
                "format": "int64",
                "example": "1293384261075731499"
              },
              "ticket_id": {
                "type": "string",
                "description": "The ticket ID for an operation that generated the log message, if any.",
                "format": "uuid",
                "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
              }
            }
          }
        }
      },
      "Loopcount": {
        "title": "Loopcount",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MMSFallback": {
        "title": "MMSFallback",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number in +E.164 format",
            "example": "+13125551234"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the message",
            "example": "Test Message"
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of media URLs"
          },
          "text": {
            "type": "string",
            "description": "Text",
            "example": "Hello world!"
          }
        }
      },
      "ManagedAccount": {
        "title": "ManagedAccount",
        "required": [
          "record_type",
          "id",
          "email",
          "api_key",
          "api_user",
          "api_token",
          "manager_account_id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "managed_account"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "managed_account"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the managed account.",
            "format": "UUID",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "email": {
            "type": "string",
            "description": "The managed account's email.",
            "format": "email",
            "example": "user@example.com"
          },
          "api_key": {
            "type": "string",
            "description": "The managed account's V2 API access key",
            "example": "KEY01236170692E74656C6E79782E636F6D_YmlnIGlyb24gaXMgZGVhZA"
          },
          "api_user": {
            "type": "string",
            "description": "The manager account's email, which serves as the V1 API user identifier",
            "example": "managed_account@example.com"
          },
          "api_token": {
            "type": "string",
            "description": "The managed account's V1 API token",
            "example": "x6oexQNHTs-fZ7-QsDMOeg"
          },
          "organization_name": {
            "type": "string",
            "description": "The organization the managed account is associated with.",
            "example": "Example Company LLC"
          },
          "manager_account_id": {
            "type": "string",
            "description": "The ID of the manager account associated with the managed account.",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "balance": {
            "$ref": "#/components/schemas/ManagedAccountBalance"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "managed_account_allow_custom_pricing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the managed account is able to have custom pricing set for it or not. If false, uses the pricing of the manager account. Defaults to false. There may be time lag between when the value is changed and pricing changes take effect.",
            "example": true
          },
          "rollup_billing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the billing information and charges to the managed account \"roll up\" to the manager account. If true, the managed account will not have its own balance and will use the shared balance with the manager account. This value cannot be changed after account creation without going through Telnyx support as changes require manual updates to the account ledger. Defaults to false.",
            "example": false
          }
        }
      },
      "ManagedAccountBalance": {
        "title": "ManagedAccountBalance",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "balance"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "balance"
          },
          "balance": {
            "type": "string",
            "description": "The account's current balance.",
            "format": "decimal",
            "example": "300.00"
          },
          "credit_limit": {
            "type": "string",
            "description": "The account's credit limit.",
            "format": "decimal",
            "example": "100.00"
          },
          "available_credit": {
            "type": "string",
            "description": "Available amount to spend (balance + credit limit)",
            "format": "decimal",
            "example": "400.00"
          },
          "currency": {
            "type": "string",
            "description": "The ISO 4217 currency identifier.",
            "format": "iso4217",
            "example": "USD"
          }
        },
        "example": {
          "record_type": "balance",
          "balance": "300.00",
          "credit_limit": "100.00",
          "available_credit": "400.00",
          "currency": "USD"
        }
      },
      "ManagedAccountMultiListing": {
        "title": "ManagedAccount",
        "required": [
          "record_type",
          "id",
          "email",
          "api_user",
          "manager_account_id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "managed_account"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "managed_account"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the managed account.",
            "format": "UUID",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "email": {
            "type": "string",
            "description": "The managed account's email.",
            "format": "email",
            "example": "user@example.com"
          },
          "api_user": {
            "type": "string",
            "description": "The manager account's email, which serves as the V1 API user identifier",
            "example": "managed_account@example.com"
          },
          "organization_name": {
            "type": "string",
            "description": "The organization the managed account is associated with.",
            "example": "Example Company LLC"
          },
          "manager_account_id": {
            "type": "string",
            "description": "The ID of the manager account associated with the managed account.",
            "example": "f65ceda4-6522-4ad6-aede-98de83385123"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "managed_account_allow_custom_pricing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the managed account is able to have custom pricing set for it or not. If false, uses the pricing of the manager account. Defaults to false. There may be time lag between when the value is changed and pricing changes take effect.",
            "example": true
          },
          "rollup_billing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the billing information and charges to the managed account \"roll up\" to the manager account. If true, the managed account will not have its own balance and will use the shared balance with the manager account. This value cannot be changed after account creation without going through Telnyx support as changes require manual updates to the account ledger. Defaults to false.",
            "example": false
          }
        }
      },
      "ManagedAccountsGlobalOutboundChannels": {
        "title": "Managed Accounts Global Outbound Channels",
        "type": "object",
        "properties": {
          "managed_account_allow_custom_pricing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the managed account is able to have custom pricing set for it or not. If false, uses the pricing of the manager account. Defaults to false. This value may be changed, but there may be time lag between when the value is changed and pricing changes take effect.",
            "example": false
          },
          "allocatable_global_outbound_channels": {
            "type": "integer",
            "description": "The total amount of allocatable global outbound channels available to the authenticated manager. Will be 0 if the feature is not enabled for their account.",
            "example": 500
          },
          "record_type": {
            "type": "string",
            "description": "The type of the data contained in this record.",
            "example": "allocatable_global_outbound_channels"
          },
          "total_global_channels_allocated": {
            "type": "integer",
            "description": "The total number of allocatable global outbound channels currently allocated across all managed accounts for the authenticated user. This includes any amount of channels allocated by default at managed account creation time. Will be 0 if the feature is not enabled for their account.",
            "example": 135
          }
        },
        "example": {
          "allocatable_global_outbound_channels": 500,
          "record_type": "allocatable_global_outbound_channels",
          "total_global_channels_allocated": 135
        }
      },
      "MdrDeleteUsageReportsResponse": {
        "title": "MdrDeleteUsageReportsResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrDetailResponse": {
        "title": "MdrDetailResponse",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Message sent time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "profile_name": {
            "type": "string",
            "description": "Configured profile name. New profiles can be created and configured on Telnyx portal",
            "example": "configured-profile-name"
          },
          "direction": {
            "type": "string",
            "description": "Direction of message - inbound or outbound.",
            "example": "outbound"
          },
          "parts": {
            "type": "number",
            "description": "Number of parts this message has. Max number of character is 160. If message contains more characters then that it will be broken down in multiple parts",
            "example": 2
          },
          "status": {
            "enum": [
              "GW_TIMEOUT",
              "DELIVERED",
              "DLR_UNCONFIRMED",
              "DLR_TIMEOUT",
              "RECEIVED",
              "GW_REJECT",
              "FAILED"
            ],
            "type": "string",
            "description": "Message status",
            "example": "DELIVERED"
          },
          "cld": {
            "type": "string",
            "description": "The destination number for a call, or the callee",
            "example": "+1555123456"
          },
          "cli": {
            "type": "string",
            "description": "The number associated with the person initiating the call, or the caller",
            "example": "+1555123456"
          },
          "rate": {
            "type": "string",
            "description": "Rate applied to the message",
            "example": "0.05"
          },
          "cost": {
            "type": "string",
            "description": "Final cost. Cost is calculated as rate * parts",
            "example": "0.1"
          },
          "currency": {
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ],
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD"
          },
          "id": {
            "type": "string",
            "description": "Id of message detail record",
            "example": "99b637f3-07fd-45ac-b9ca-b87208c24650"
          },
          "message_type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "Type of message",
            "example": "SMS"
          },
          "record_type": {
            "type": "string",
            "example": "mdr_report"
          }
        }
      },
      "MdrGetDetailResponse": {
        "title": "MdrGetDetailResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrDetailResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "MdrGetSyncUsageReportResponse": {
        "title": "MdrGetSyncUsageReportResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrGetUsageReportsByIdResponse": {
        "title": "MdrGetUsageReportsByIdResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrGetUsageReportsResponse": {
        "title": "MdrGetUsageReportsResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrUsageReportResponse"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "MdrPostUsageReportRequest": {
        "title": "MdrPostUsageReportRequest",
        "required": [
          "aggregation_type",
          "end_date",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "aggregation_type": {
            "enum": [
              "NO_AGGREGATION",
              "PROFILE",
              "TAGS"
            ],
            "type": "string"
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          }
        }
      },
      "MdrPostUsageReportsResponse": {
        "title": "MdrPostUsageReportsResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MdrUsageReportResponse"
          }
        }
      },
      "MdrUsageRecord": {
        "title": "MdrUsageRecord",
        "type": "object",
        "properties": {
          "cost": {
            "type": "string",
            "example": "0"
          },
          "direction": {
            "type": "string",
            "example": "outbound"
          },
          "product": {
            "type": "string",
            "example": "outbound"
          },
          "connection": {
            "type": "string",
            "example": "all"
          },
          "received": {
            "type": "string",
            "example": "0"
          },
          "delivered": {
            "type": "string",
            "example": "0"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "parts": {
            "type": "string",
            "example": "0"
          },
          "sent": {
            "type": "string",
            "example": "0"
          },
          "profile_id": {
            "type": "string",
            "example": "All"
          },
          "tags": {
            "type": "string",
            "example": "All"
          },
          "message_type": {
            "type": "string",
            "example": "SMS"
          },
          "tn_type": {
            "type": "string",
            "example": "TF"
          },
          "carrier_passthrough_fee": {
            "type": "string",
            "example": "0"
          }
        }
      },
      "MdrUsageReportResponse": {
        "title": "MdrUsageReportResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "aggregation_type": {
            "enum": [
              "NO_AGGREGATION",
              "PROFILE",
              "TAGS"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "PENDING",
              "COMPLETE",
              "FAILED",
              "EXPIRED"
            ],
            "type": "string"
          },
          "report_url": {
            "type": "string",
            "example": "http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MdrUsageRecord"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000-06:00"
          },
          "profiles": {
            "type": "string",
            "example": "My profile"
          },
          "record_type": {
            "type": "string",
            "example": "mdr_usage_report"
          }
        }
      },
      "MediaFeatures": {
        "title": "MediaFeatures",
        "type": "object",
        "properties": {
          "rtp_auto_adjust_enabled": {
            "type": "boolean",
            "description": "When RTP Auto-Adjust is enabled, the destination RTP address port will be automatically changed to match the source of the incoming RTP packets.",
            "default": true
          },
          "accept_any_rtp_packets_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will accept RTP packets from any customer-side IP address and port, not just those to which Telnyx is sending RTP.",
            "default": false
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Controls whether Telnyx will accept a T.38 re-INVITE for this phone number. Note that Telnyx will not send a T.38 re-INVITE; this option only controls whether one will be accepted.",
            "default": false
          }
        },
        "description": "The media features settings for a phone number.",
        "example": {
          "rtp_auto_adjust_enabled": true,
          "accept_any_rtp_packets_enabled": true,
          "t38_fax_gateway_enabled": true
        }
      },
      "OperatorConnectRefresh_202": {
        "title": "Operator Connect Refresh Response",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Describes wether or not the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the result of the operation",
            "example": "Operator connect refresh started"
          }
        }
      },
      "MediaResource": {
        "title": "Media Resource",
        "type": "object",
        "properties": {
          "media_name": {
            "type": "string",
            "description": "Uniquely identifies a media resource."
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource will expire and be deleted.",
            "example": "2020-01-23T18:10:02.574Z"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the media resource was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "content_type": {
            "type": "string",
            "description": "Content type of the file",
            "example": "application/xml"
          }
        },
        "example": {
          "media_name": "f5586561-8ff0-4291-a0ac-84fe544797bd",
          "expires_at": "2020-01-23T18:10:02.574Z",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "content_type": "application/xml"
        }
      },
      "MediaStorageDetailRecord": {
        "title": "MediaStorageDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the Media Storage Event",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Event creation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "asset_id": {
            "type": "string",
            "description": "Asset id",
            "example": "a46f4764-4ce4-4391-804c-02f00bc4ff9b"
          },
          "user_id": {
            "type": "string",
            "description": "User id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "org_id": {
            "type": "string",
            "description": "Organization owner id",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "action_type": {
            "type": "string",
            "description": "Type of action performed against the Media Storage API",
            "example": "upload"
          },
          "link_channel_type": {
            "type": "string",
            "description": "Link channel type",
            "example": "message"
          },
          "link_channel_id": {
            "type": "string",
            "description": "Link channel id",
            "example": "2065f482-64b9-4680-a3a9-c6d3142efdf7"
          },
          "status": {
            "type": "string",
            "description": "Request status",
            "example": "failed"
          },
          "webhook_id": {
            "type": "string",
            "description": "Webhook id",
            "example": "b46f4764-4ce4-4391-804c-02f00bc4ff9b"
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.0001"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing cost",
            "example": "events"
          },
          "cost": {
            "type": "string",
            "description": "Currency amount for Telnyx billing cost",
            "example": "0.004"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "default": "media_storage",
            "example": "media_storage"
          }
        }
      },
      "OperatorConnectRefresh_200": {
        "title": "Operator Connect Refresh Response",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Describes wether or not the operation was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "A message describing the result of the operation",
            "example": "Operator connect refresh already in progress"
          }
        }
      },
      "MessageDetailRecord": {
        "title": "MessageDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the message",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "user_id": {
            "type": "string",
            "description": "Identifier of the Telnyx account who owns the message",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "completed_at": {
            "type": "string",
            "description": "Message completion time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "created_at": {
            "type": "string",
            "description": "Message creation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "Message updated time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "sent_at": {
            "type": "string",
            "description": "Time when the message was sent",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "carrier": {
            "type": "string",
            "description": "Country-specific carrier used to send or receive the message",
            "example": "T-Mobile USA"
          },
          "carrier_fee": {
            "type": "string",
            "description": "Fee charged by certain carriers in order to deliver certain message types. Telnyx passes this fee on to the customer according to our pricing table",
            "example": "0.003"
          },
          "cld": {
            "type": "string",
            "description": "The recipient of the message (to parameter in the Messaging API)",
            "example": "+1555123456"
          },
          "cli": {
            "type": "string",
            "description": "The sender of the message (from parameter in the Messaging API). For Alphanumeric ID messages, this is the sender ID value",
            "example": "+1555123456"
          },
          "country_code": {
            "type": "string",
            "description": "Two-letter representation of the country of the cld property using the ISO 3166-1 alpha-2 format",
            "example": "US"
          },
          "delivery_status": {
            "type": "string",
            "description": "Final webhook delivery status",
            "example": "success: webhook succeeded"
          },
          "delivery_status_failover_url": {
            "type": "string",
            "description": "Failover customer-provided URL which Telnyx posts delivery status webhooks to",
            "example": "https://api.example.com/sms/telnyx/inbound"
          },
          "delivery_status_webhook_url": {
            "type": "string",
            "description": "Primary customer-provided URL which Telnyx posts delivery status webhooks to",
            "example": "https://api.example.com/sms/telnyx/inbound"
          },
          "direction": {
            "enum": [
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "Logical direction of the message from the Telnyx customer's perspective. It's inbound when the Telnyx customer receives the message, or outbound otherwise",
            "example": "outbound"
          },
          "fteu": {
            "type": "boolean",
            "description": "Indicates whether this is a Free-To-End-User (FTEU) short code message",
            "example": false
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID",
            "example": "01"
          },
          "message_type": {
            "enum": [
              "SMS",
              "MMS",
              "RCS"
            ],
            "type": "string",
            "description": "Describes the Messaging service used to send the message. Available services are: Short Message Service (SMS), Multimedia Messaging Service (MMS), and Rich Communication Services (RCS)",
            "example": "SMS"
          },
          "on_net": {
            "type": "boolean",
            "description": "Indicates whether both sender and recipient numbers are Telnyx-managed",
            "example": true
          },
          "profile_id": {
            "type": "string",
            "description": "Unique identifier of the Messaging Profile used to send or receive the message",
            "example": "30ef55db-c4a2-4c4a-9804-a68077973d07"
          },
          "profile_name": {
            "type": "string",
            "description": "Name of the Messaging Profile used to send or receive the message",
            "example": "My Messaging Profile"
          },
          "source_country_code": {
            "type": "string",
            "description": "Two-letter representation of the country of the cli property using the ISO 3166-1 alpha-2 format",
            "example": "US"
          },
          "status": {
            "enum": [
              "gw_timeout",
              "delivered",
              "dlr_unconfirmed",
              "dlr_timeout",
              "received",
              "gw_reject",
              "failed"
            ],
            "type": "string",
            "description": "Final status of the message after the delivery attempt",
            "example": "delivered"
          },
          "tags": {
            "type": "string",
            "description": "Comma-separated tags assigned to the Telnyx number associated with the message",
            "example": "tag1,tag2,tag3"
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "example": "0.003"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "cost": {
            "type": "string",
            "description": "Amount, in the user currency, for the Telnyx billing cost",
            "example": "0.003"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "40001"
            },
            "description": "Telnyx API error codes returned by the Telnyx gateway"
          },
          "parts": {
            "type": "integer",
            "description": "Number of message parts. The message is broken down in multiple parts when its length surpasses the limit of 160 characters",
            "example": 2
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the record schema",
            "default": "message_detail_record",
            "example": "message_detail_record"
          }
        }
      },
      "MessagingFeatureSet": {
        "title": "MessagingFeatureSet",
        "required": [
          "domestic_two_way",
          "international_inbound",
          "international_outbound"
        ],
        "type": "object",
        "properties": {
          "domestic_two_way": {
            "type": "boolean",
            "description": "Send messages to and receive messages from numbers in the same country."
          },
          "international_inbound": {
            "type": "boolean",
            "description": "Receive messages from numbers in other countries."
          },
          "international_outbound": {
            "type": "boolean",
            "description": "Send messages to numbers in other countries."
          }
        },
        "description": "The set of features available for a specific messaging use case (SMS or MMS). Features\ncan vary depending on the characteristics the phone number, as well as its current\nproduct configuration.\n",
        "nullable": true,
        "example": {
          "domestic_two_way": true,
          "international_inbound": false,
          "international_outbound": true
        }
      },
      "MessagingHostedNumberOrder": {
        "title": "MessagingHostedNumberOrder",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "messaging_hosted_number_order"
          },
          "id": {
            "type": "string",
            "description": "Resource unique identifier.",
            "format": "uuid",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Automatically associate the number with this messaging profile ID when the order is complete.",
            "nullable": true
          },
          "status": {
            "enum": [
              "failed",
              "pending",
              "successful"
            ],
            "type": "string"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostedNumber"
            }
          }
        },
        "example": {
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "record_type": "messaging_hosted_number_order",
          "messaging_profile_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "status": "pending",
          "phone_numbers": [
            {
              "record_type": "messaging_hosted_number",
              "id": "bf6307bd-884d-4c1f-b6ea-c62b8c495d3c",
              "phone_number": "+18665550001",
              "status": "pending"
            },
            {
              "record_type": "messaging_hosted_number",
              "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
              "phone_number": "+18665550002",
              "status": "pending"
            }
          ]
        }
      },
      "MessagingProfile": {
        "title": "MessagingProfile",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "messaging_profile"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "readOnly": true
          },
          "mms_fall_back_to_sms": {
            "type": "boolean",
            "description": "enables SMS fallback for MMS messages.",
            "default": false
          },
          "mms_transcoding": {
            "type": "boolean",
            "description": "enables automated resizing of MMS media.",
            "default": false
          },
          "name": {
            "type": "string",
            "description": "A user friendly name for the messaging profile."
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the messaging profile is enabled or not."
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format."
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code."
            },
            "description": "Destinations to which the messaging profile is allowed to send. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "type": "string",
            "description": "Secret used to authenticate with v1 endpoints."
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "nullable": true
          },
          "daily_spend_limit": {
            "pattern": "^[0-9]+(?:\\.[0-9]+)?$",
            "type": "string",
            "description": "The maximum amount of money (in USD) that can be spent by this profile before midnight UTC."
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Whether to enforce the value configured by `daily_spend_limit`."
          }
        },
        "example": {
          "record_type": "messaging_profile",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "created_at": "2019-01-23T18:10:02.5740000+00:00",
          "updated_at": "2019-01-23T18:10:02.5740000+00:00",
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c",
          "health_webhook_url": null,
          "mms_fall_back_to_sms": false,
          "mms_transcoding": false,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": false,
          "redaction_enabled": false,
          "redaction_level": 2
        }
      },
      "MessagingProfileDetailedMetric": {
        "title": "MessagingProfileDetailedMetric",
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the aggregated data.",
            "readOnly": true,
            "example": "2019-01-23T18:10:02.574Z"
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileMessageTypeMetrics"
            }
          }
        }
      },
      "MessagingProfileDetailedMetrics": {
        "title": "MessagingProfileDetailedMetrics",
        "type": "object",
        "properties": {
          "overview": {
            "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
          },
          "detailed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingProfileDetailedMetric"
            }
          }
        },
        "example": {
          "detailed": [
            {
              "metrics": [
                {
                  "label": "longcode",
                  "sent": 1000,
                  "delivered": 990,
                  "errors": 0.01,
                  "received": 750
                }
              ],
              "timestamp": "2019-01-23T18:10:02.5740000+00:00"
            }
          ],
          "overview": {
            "record_type": "messaging_profile_metrics",
            "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "phone_numbers": 250,
            "outbound": {
              "sent": 1000,
              "delivered": 990,
              "errors": 0.01
            },
            "inbound": {
              "received": 850
            }
          }
        }
      },
      "MessagingProfileHighLevelMetrics": {
        "title": "MessagingProfileHighLevelMetrics",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "messaging_profile_metrics"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "messaging_profile_metrics"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "number",
            "description": "The number of phone numbers associated with the messaging profile.",
            "readOnly": true
          },
          "outbound": {
            "type": "object",
            "properties": {
              "sent": {
                "type": "number",
                "description": "The number of outbound messages sent.",
                "readOnly": true
              },
              "delivered": {
                "type": "number",
                "description": "The number of outbound messages successfully delivered.",
                "readOnly": true
              },
              "error_ratio": {
                "type": "number",
                "description": "The ratio of messages sent that resulted in errors.",
                "readOnly": true
              }
            }
          },
          "inbound": {
            "type": "object",
            "properties": {
              "received": {
                "type": "number",
                "description": "The number of inbound messages received.",
                "readOnly": true
              }
            }
          }
        },
        "example": {
          "record_type": "messaging_profile_metrics",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "phone_numbers": 250,
          "outbound": {
            "sent": 1000,
            "delivered": 990,
            "errors": 0.01
          },
          "inbound": {
            "received": 850
          }
        }
      },
      "MessagingProfileMessageTypeMetrics": {
        "title": "MessagingProfileMessageTypeMetrics",
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The metric type.",
            "readOnly": true
          },
          "sent": {
            "type": "number",
            "description": "The number of outbound messages sent.",
            "readOnly": true
          },
          "delivered": {
            "type": "number",
            "description": "The number of outbound messages successfully delivered.",
            "readOnly": true
          },
          "outbound_error_ratio": {
            "type": "number",
            "description": "The ratio of outbound messages sent that resulted in errors.",
            "readOnly": true
          },
          "received": {
            "type": "number",
            "description": "The number of inbound messages received.",
            "readOnly": true
          }
        },
        "example": {
          "label": "longcode",
          "sent": 1000,
          "delivered": 990,
          "errors": 0.01,
          "received": 750
        }
      },
      "MessagingSettings": {
        "title": "MessagingSettings",
        "type": "object",
        "properties": {
          "default_messaging_profile_id": {
            "type": "string",
            "description": "Default Messaging Profile used for messaging exchanges with your assistant. This will be created automatically on assistant creation."
          },
          "delivery_status_webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to delivery statused for assistant messages will be sent."
          }
        }
      },
      "MessagingUrlDomain": {
        "title": "MessagingUrlDomain",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "url_domain": {
            "type": "string"
          },
          "use_case": {
            "type": "string"
          }
        },
        "example": {
          "record_type": "messaging_url_domain",
          "id": "464bd54e-a328-4b11-a131-28e6793cb6f2",
          "url_domain": "http://example.com",
          "use_case": "test"
        }
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "total_pages",
          "total_results",
          "page_number",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer"
          },
          "total_results": {
            "type": "integer"
          },
          "page_number": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          }
        }
      },
      "MetaResponse": {
        "title": "MetaResponse",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "This should likely be a URL to the relevant documentation",
            "example": "https://developers.telnyx.com/docs/overview/errors/10001"
          }
        }
      },
      "Metadata": {
        "title": "Metadata",
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "number",
            "description": "Total number of pages based on pagination settings",
            "format": "double",
            "example": 13
          },
          "total_results": {
            "type": "number",
            "description": "Total number of results",
            "format": "double",
            "example": 13
          },
          "page_number": {
            "type": "number",
            "description": "Current Page based on pagination settings (included when defaults are used.)",
            "format": "double",
            "example": 3
          },
          "page_size": {
            "type": "number",
            "description": "Number of results to return per page based on pagination settings (included when defaults are used.)",
            "format": "double",
            "example": 1
          }
        }
      },
      "MigrationParams": {
        "title": "MigrationParams",
        "required": [
          "source_id",
          "target_bucket_name",
          "target_region"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the data migration.",
            "readOnly": true
          },
          "source_id": {
            "type": "string",
            "description": "ID of the Migration Source from which to migrate data."
          },
          "target_bucket_name": {
            "type": "string",
            "description": "Bucket name to migrate the data into. Will default to the same name as the `source_bucket_name`."
          },
          "target_region": {
            "type": "string",
            "description": "Telnyx Cloud Storage region to migrate the data to."
          },
          "refresh": {
            "type": "boolean",
            "description": "If true, will continue to poll the source bucket to ensure new data is continually migrated over."
          },
          "last_copy": {
            "type": "string",
            "description": "Time when data migration was last copied from the source.",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "enum": [
              "pending",
              "checking",
              "migrating",
              "complete",
              "error",
              "stopped"
            ],
            "type": "string",
            "description": "Status of the migration.",
            "readOnly": true
          },
          "bytes_to_migrate": {
            "type": "integer",
            "description": "Total amount of data found in source bucket to migrate.",
            "readOnly": true
          },
          "bytes_migrated": {
            "type": "integer",
            "description": "Total amount of data that has been succesfully migrated.",
            "readOnly": true
          },
          "speed": {
            "type": "integer",
            "description": "Current speed of the migration.",
            "readOnly": true
          },
          "eta": {
            "type": "string",
            "description": "Estimated time the migration will complete.",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Time when data migration was created",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "MigrationSourceCoverageParams": {
        "title": "MigrationSourceCoverageParams",
        "type": "object",
        "properties": {
          "provider": {
            "enum": [
              "aws"
            ],
            "type": "string",
            "description": "Cloud provider from which to migrate data."
          },
          "source_region": {
            "type": "string",
            "description": "Provider region from which to migrate data."
          }
        }
      },
      "MigrationSourceParams": {
        "title": "MigrationSourceParams",
        "required": [
          "provider",
          "provider_auth",
          "bucket_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the data migration source.",
            "readOnly": true
          },
          "provider": {
            "enum": [
              "aws",
              "telnyx"
            ],
            "type": "string",
            "description": "Cloud provider from which to migrate data. Use 'telnyx' if you want to migrate data from one Telnyx bucket to another."
          },
          "source_region": {
            "type": "string",
            "description": "For intra-Telnyx buckets migration, specify the source bucket region in this field."
          },
          "provider_auth": {
            "type": "object",
            "properties": {
              "access_key": {
                "type": "string",
                "description": "AWS Access Key. For Telnyx-to-Telnyx migrations, use your Telnyx API key here."
              },
              "secret_access_key": {
                "type": "string",
                "description": "AWS Secret Access Key. For Telnyx-to-Telnyx migrations, use your Telnyx API key here as well."
              }
            }
          },
          "bucket_name": {
            "type": "string",
            "description": "Bucket name to migrate the data from."
          }
        }
      },
      "MnoMetadata": {
        "title": "MnoMetadata",
        "type": "object",
        "properties": {
          "10999": {
            "$ref": "#/components/schemas/MnoMetadataItem"
          }
        }
      },
      "MnoMetadataItem": {
        "title": "MnoMetadataItem",
        "required": [
          "qualify",
          "mno",
          "noEmbeddedLink",
          "reqSubscriberHelp",
          "reqSubscriberOptout",
          "mnoReview",
          "noEmbeddedPhone",
          "mnoSupport",
          "reqSubscriberOptin",
          "minMsgSamples"
        ],
        "type": "object",
        "properties": {
          "qualify": {
            "type": "boolean"
          },
          "mno": {
            "type": "string"
          },
          "noEmbeddedLink": {
            "type": "boolean"
          },
          "reqSubscriberHelp": {
            "type": "boolean"
          },
          "reqSubscriberOptout": {
            "type": "boolean"
          },
          "mnoReview": {
            "type": "boolean"
          },
          "noEmbeddedPhone": {
            "type": "boolean"
          },
          "mnoSupport": {
            "type": "boolean"
          },
          "reqSubscriberOptin": {
            "type": "boolean"
          },
          "minMsgSamples": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "MobileNetworkOperator": {
        "title": "MobileNetworkOperator",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "mobile_network_operator"
          },
          "name": {
            "type": "string",
            "description": "The network operator name.",
            "example": "AT&T Mobility (USACG)"
          },
          "tadig": {
            "type": "string",
            "description": "TADIG stands for Transferred Account Data Interchange Group. The TADIG code is a unique identifier for network operators in GSM mobile networks.",
            "example": "USACG"
          },
          "country_code": {
            "type": "string",
            "description": "The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
            "example": "US"
          },
          "mcc": {
            "type": "string",
            "description": "MCC stands for Mobile Country Code. It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "example": "310"
          },
          "mnc": {
            "type": "string",
            "description": "MNC stands for Mobile Network Code. It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "example": "410"
          },
          "network_preferences_enabled": {
            "type": "boolean",
            "description": "Indicate whether the mobile network operator can be set as preferred in the Network Preferences API.",
            "readOnly": true,
            "example": true
          }
        }
      },
      "MobileNetworkOperatorPreferencesResponse": {
        "title": "MobileNetworkOperatorPreferencesResponse",
        "type": "object",
        "properties": {
          "mobile_network_operator_id": {
            "type": "string",
            "description": "The mobile network operator resource identification UUID.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "mobile_network_operator_name": {
            "type": "string",
            "description": "The mobile network operator resource name.",
            "example": "AT&T Mobility (USACG)"
          },
          "priority": {
            "type": "integer",
            "description": "It determines what is the priority of a specific network operator that should be assumed by a SIM card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.",
            "example": 0
          }
        },
        "description": ""
      },
      "MobileNetworkOperatorsPreferencesResponse": {
        "title": "MobileNetworkOperatorsPreferencesResponse",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MobileNetworkOperatorPreferencesResponse"
        },
        "description": "A list of mobile network operators and the priority that should be applied when the SIM is connecting to the network."
      },
      "ModelMetadata": {
        "title": "ModelMetadata",
        "required": [
          "id",
          "created",
          "owned_by"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "object": {
            "title": "Object",
            "type": "string",
            "default": "model"
          },
          "created": {
            "title": "Created",
            "type": "integer"
          },
          "owned_by": {
            "title": "Owned By",
            "type": "string"
          }
        }
      },
      "ModelsResponse": {
        "title": "ModelsResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "object": {
            "title": "Object",
            "type": "string",
            "default": "list"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelMetadata"
            }
          }
        }
      },
      "PostNumbersFeatures_200": {
        "title": "PostNumbersFeatures_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "phone_number",
                "features"
              ],
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "phone"
                },
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Network": {
        "title": "Network",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "title": "Network",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "network"
              },
              "name": {
                "type": "string",
                "description": "A user specified name for the network.",
                "example": "test network"
              }
            }
          }
        ]
      },
      "NetworkCoverage": {
        "title": "NetworkCoverage",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "network_coverage"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "available_services": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AvailableService"
                }
              ]
            },
            "description": "List of interface types supported in this region."
          }
        }
      },
      "NetworkCreate": {
        "title": "NetworkCreate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Network"
          },
          {
            "title": "NetworkCreate",
            "required": [
              "name"
            ],
            "type": "object"
          }
        ]
      },
      "NetworkInterface": {
        "title": "NetworkInterface",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "$ref": "#/components/schemas/Interface"
          },
          {
            "$ref": "#/components/schemas/RegionOut"
          },
          {
            "title": "NetworkInterface",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "network_interface"
              },
              "type": {
                "type": "string",
                "description": "Identifies the type of the interface.",
                "readOnly": true,
                "example": "wireguard_interface"
              }
            }
          }
        ]
      },
      "NewBillingGroup": {
        "title": "NewBillingGroup",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the billing group"
          }
        },
        "example": {
          "name": "string"
        }
      },
      "NewLedgerBillingGroupReport": {
        "title": "NewLedgerBillingGroupReport",
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "description": "Year of the ledger billing group report",
            "example": 2019
          },
          "month": {
            "type": "integer",
            "description": "Month of the ledger billing group report",
            "example": 10
          }
        },
        "example": {
          "year": 2019,
          "month": 10
        }
      },
      "NewParticipantResource": {
        "title": "New participant resource",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "description": "The identifier of this participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "coaching": {
            "type": "boolean",
            "description": "Whether the participant is coaching another call.",
            "example": false
          },
          "coaching_call_sid": {
            "type": "string",
            "description": "The identifier of the coached participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference ends when the participant leaves.",
            "example": false
          },
          "hold": {
            "type": "boolean",
            "description": "Whether the participant is on hold.",
            "example": false
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": false
          },
          "status": {
            "enum": [
              "connecting",
              "connected",
              "completed"
            ],
            "type": "string",
            "description": "The status of the participant's call in the conference.",
            "example": "in-progress"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this participant.",
            "example": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ.json"
          }
        },
        "example": {
          "account_sid": "4e71926f-8f13-450e-b91c-23c2ef786aa6",
          "call_sid": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ",
          "coaching": false,
          "coaching_call_sid": null,
          "conference_sid": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1",
          "end_conference_on_exit": false,
          "hold": false,
          "muted": false,
          "status": "completed",
          "uri": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ.json"
        }
      },
      "NoiseSuppressionDirection": {
        "title": "Noise Suppression Direction",
        "enum": [
          "inbound",
          "outbound",
          "both"
        ],
        "type": "string",
        "description": "The direction of the audio stream to be noise suppressed.",
        "default": "inbound",
        "example": "outbound"
      },
      "NoiseSuppressionStart": {
        "title": "Noise Suppression Start Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "direction": {
            "$ref": "#/components/schemas/NoiseSuppressionDirection"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "direction": "both"
        }
      },
      "NoiseSuppressionStop": {
        "title": "Noise Suppression Stop Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "NotFoundError": {
        "title": "NotFoundError",
        "required": [
          "detail"
        ],
        "type": "object",
        "properties": {
          "code": {
            "title": "Telnyx error code",
            "type": "string"
          },
          "detail": {
            "title": "Error details",
            "type": "string"
          },
          "title": {
            "title": "Error title",
            "type": "string"
          }
        }
      },
      "NotificationChannel": {
        "title": "NotificationChannel",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "notification_profile_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Profile.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "channel_type_id": {
            "enum": [
              "sms",
              "voice",
              "email",
              "webhook"
            ],
            "type": "string",
            "description": "A Channel Type ID"
          },
          "channel_destination": {
            "type": "string",
            "description": "The destination associated with the channel type.",
            "example": "+13125550000"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          }
        },
        "description": "A Notification Channel"
      },
      "NotificationEvent": {
        "title": "NotificationEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "d5c395cd-9864-4609-b5e2-3f9fd4ce201a"
          },
          "name": {
            "type": "string",
            "description": "A human readable name.",
            "example": "Emergency Number Dialed"
          },
          "notification_category": {
            "type": "string",
            "example": "Calls"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          }
        },
        "description": "An object representing the available notifications."
      },
      "NotificationEventCondition": {
        "title": "NotificationEventCondition",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "70c7c5cb-dce2-4124-accb-870d39dbe852"
          },
          "name": {
            "type": "string",
            "example": "from phone number"
          },
          "description": {
            "type": "string",
            "example": "When emergency number dialed from phone number X"
          },
          "notification_event_id": {
            "type": "string",
            "example": "d5c395cd-9864-4609-b5e2-3f9fd4ce201a"
          },
          "associated_record_type": {
            "enum": [
              "account",
              "phone_number"
            ],
            "type": "string",
            "example": "phone_number"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "phone_number"
                },
                "optional": {
                  "type": "boolean",
                  "example": false
                },
                "data_type": {
                  "type": "string",
                  "example": "string"
                }
              }
            }
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "allow_multiple_channels": {
            "type": "boolean",
            "description": "Dictates whether a notification channel id needs to be provided when creating a notficiation setting.",
            "example": false
          },
          "asynchronous": {
            "type": "boolean",
            "description": "Dictates whether a notification setting will take effect immediately.",
            "example": true
          },
          "supported_channels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Dictates the supported notification channel types that can be emitted."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2019-10-15T10:07:15.5270000+00:00"
          }
        }
      },
      "NotificationProfile": {
        "title": "NotificationProfile",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "name": {
            "type": "string",
            "description": "A human readable name."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          }
        },
        "description": "A Collection of Notification Channels"
      },
      "NotificationSetting": {
        "title": "NotificationSetting",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID.",
            "readOnly": true,
            "example": "8eb5b5f9-5893-423c-9f15-b487713d44d4"
          },
          "notification_event_condition_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Event Condition.",
            "example": "70c7c5cb-dce2-4124-accb-870d39dbe852"
          },
          "notification_profile_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Profile.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "associated_record_type": {
            "type": "string",
            "readOnly": true,
            "example": "phone_number"
          },
          "associated_record_type_value": {
            "type": "string",
            "readOnly": true,
            "example": "+13125550000"
          },
          "status": {
            "enum": [
              "enabled",
              "enable-received",
              "enable-pending",
              "enable-submtited",
              "delete-received",
              "delete-pending",
              "delete-submitted",
              "deleted"
            ],
            "type": "string",
            "description": "Most preferences apply immediately; however, other may needs to propagate.",
            "readOnly": true,
            "example": "enable-received"
          },
          "notification_channel_id": {
            "type": "string",
            "description": "A UUID reference to the associated Notification Channel.",
            "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
          },
          "parameters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "phone_number"
                },
                "value": {
                  "type": "string",
                  "example": "+13125550000"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-15T10:07:15.5270000+00:00"
          }
        }
      },
      "NumberBlockOrder": {
        "title": "NumberBlockOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_block_order"
          },
          "starting_number": {
            "type": "string",
            "description": "Starting phone number block",
            "format": "e164_phone_number",
            "example": "+19705555000"
          },
          "range": {
            "type": "integer",
            "description": "The phone number range included in the block.",
            "example": 10
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "readOnly": true,
            "example": 1
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated to all numbers in the phone number block.",
            "example": "346789098765567"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated to all numbers in the phone number block.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true,
            "example": "success"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "readOnly": true,
            "example": true
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "starting_number": "+19705555000",
          "range": 10,
          "record_type": "number_block_order",
          "connection_id": "346789098765567",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600",
          "phone_numbers_count": 10,
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "requirements_met": true
        }
      },
      "NumberHealthMetrics": {
        "title": "NumberHealthMetrics",
        "required": [
          "message_count",
          "inbound_outbound_ratio",
          "success_ratio",
          "spam_ratio"
        ],
        "type": "object",
        "properties": {
          "message_count": {
            "type": "integer",
            "description": "The number of messages analyzed for the health metrics."
          },
          "inbound_outbound_ratio": {
            "type": "number",
            "description": "The ratio of messages received to the number of messages sent.",
            "format": "float"
          },
          "success_ratio": {
            "type": "number",
            "description": "The ratio of messages sucessfully delivered to the number of messages attempted.",
            "format": "float"
          },
          "spam_ratio": {
            "type": "number",
            "description": "The ratio of messages blocked for spam to the number of messages attempted.",
            "format": "float"
          }
        },
        "description": "High level health metrics about the number and it's messaging sending patterns.\n",
        "example": {
          "message_count": 10,
          "inbound_outbound_ratio": 1,
          "success_ratio": 2,
          "spam_ratio": 10
        }
      },
      "NumberLookupRecord": {
        "title": "NumberLookup",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of record",
            "example": "number_lookup"
          },
          "country_code": {
            "type": "string",
            "description": "Region code that matches the specific country calling code",
            "example": "US"
          },
          "national_format": {
            "type": "string",
            "description": "Hyphen-separated national number, preceded by the national destination code (NDC), with a 0 prefix, if an NDC is found",
            "example": "(0312) 945-7420"
          },
          "phone_number": {
            "type": "string",
            "description": "E164-formatted phone number",
            "example": "+13129457420"
          },
          "fraud": {
            "type": "string",
            "description": "Unused",
            "example": null
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "caller_name": {
            "$ref": "#/components/schemas/CallerName"
          },
          "portability": {
            "$ref": "#/components/schemas/Portability"
          }
        }
      },
      "NumberOrder": {
        "title": "Number Order With Phone Numbers",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_order"
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "readOnly": true,
            "example": 1
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with this phone number.",
            "example": "346789098765567"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobPhoneNumber"
            }
          },
          "sub_number_orders_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "readOnly": true,
            "example": true
          }
        }
      },
      "NumberOrderBlockEvent": {
        "title": "Number Order Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NumberBlockOrder"
          }
        }
      },
      "NumberOrderPhoneNumber": {
        "title": "NumberOrderPhoneNumber",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_order_phone_number"
          },
          "phone_number": {
            "type": "string",
            "format": "e164_phone_number",
            "example": "+19705555098"
          },
          "order_request_id": {
            "type": "string",
            "format": "uuid",
            "example": "dc8e4d67-33a0-4cbb-af74-7b58f05bd495"
          },
          "sub_number_order_id": {
            "type": "string",
            "format": "uuid",
            "example": "dc8e4d67-33a0-4cbb-af74-7b58f05bd496"
          },
          "country_code": {
            "type": "string",
            "example": "US"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost",
              "landline"
            ],
            "type": "string",
            "example": "local"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubNumberOrderRegulatoryRequirementWithValue"
            }
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for a phone number, false otherwise.",
            "readOnly": true,
            "example": true
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the phone number in the order.",
            "readOnly": true
          },
          "bundle_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": null
          },
          "locality": {
            "type": "string",
            "example": "San Francisco"
          },
          "deadline": {
            "type": "string",
            "format": "datetime",
            "example": "024-05-31T11:14:00+00:00"
          },
          "requirements_status": {
            "enum": [
              "pending",
              "approved",
              "cancelled",
              "deleted",
              "requirement-info-exception",
              "requirement-info-pending",
              "requirement-info-under-review"
            ],
            "type": "string",
            "description": "Status of requirements (if applicable)",
            "readOnly": true
          },
          "is_block_number": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "NumberOrderPhoneNumberRequirementGroupResponse": {
        "title": "NumberOrderPhoneNumberRequirementGroupResponse",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "pending"
          },
          "order_request_id": {
            "type": "string",
            "format": "uuid",
            "example": "a11d58fe-88a4-494a-b752-8dea411993c6"
          },
          "country_code": {
            "type": "string",
            "example": "AT"
          },
          "is_block_number": {
            "type": "boolean",
            "example": false
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "requirement_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "field_value": {
                  "type": "string",
                  "example": "1234567890"
                },
                "field_type": {
                  "type": "string",
                  "example": "textual"
                },
                "status": {
                  "type": "string",
                  "example": "pending-approval"
                }
              }
            }
          },
          "locality": {
            "type": "string",
            "example": "AUSTRIA"
          },
          "phone_number_type": {
            "type": "string",
            "example": "toll_free"
          },
          "bundle_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sub_number_order_id": {
            "type": "string",
            "format": "uuid",
            "example": "f826ed66-b27c-4340-9dc0-57dc3459f1bd"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          },
          "requirements_status": {
            "type": "string",
            "example": "requirement-info-under-review"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "613d517a-0432-4bae-a785-c11033bd0985"
          },
          "phone_number": {
            "type": "string",
            "example": "+43800300238"
          },
          "requirements_met": {
            "type": "boolean",
            "example": false
          },
          "record_type": {
            "type": "string",
            "example": "number_order_phone_number"
          }
        }
      },
      "NumberOrderWithPhoneNumbers": {
        "title": "NumberOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_order"
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "readOnly": true,
            "example": 1
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with this phone number.",
            "example": "346789098765567"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number.",
            "example": "abc85f64-5717-4562-b3fc-2c9600"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NumberOrderPhoneNumber"
            }
          },
          "sub_number_orders_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "readOnly": true,
            "example": true
          }
        }
      },
      "NumberPoolSettings": {
        "title": "NumberPoolSettings",
        "required": [
          "toll_free_weight",
          "long_code_weight",
          "skip_unhealthy"
        ],
        "type": "object",
        "properties": {
          "toll_free_weight": {
            "type": "number",
            "description": "Defines the probability weight for a Toll Free number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100. Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n",
            "example": 10
          },
          "long_code_weight": {
            "type": "number",
            "description": "Defines the probability weight for a Long Code number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100.  Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n",
            "example": 1
          },
          "skip_unhealthy": {
            "type": "boolean",
            "description": "If set to true all unhealthy numbers will be automatically excluded from the pool.\nHealth metrics per number are calculated on a regular basis, taking into account the deliverability\nrate and the amount of messages marked as spam by upstream carriers.\nNumbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy.\n",
            "example": true
          },
          "sticky_sender": {
            "type": "boolean",
            "description": "If set to true, Number Pool will try to choose the same sending number for all messages to a particular\nrecipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new\nnumber will be chosen.\n",
            "default": false
          },
          "geomatch": {
            "type": "boolean",
            "description": "If set to true, Number Pool will try to choose a sending number with the same area code as the destination\nnumber. If there are no such numbers available, a nunber with a different area code will be chosen. Currently\nonly NANP numbers are supported.\n",
            "default": false
          }
        },
        "description": "Number Pool allows you to send messages from a pool of numbers of different types, assigning\nweights to each type. The pool consists of all the long code and toll free numbers\nassigned to the messaging profile.\n\nTo disable this feature, set the object field to `null`.\n",
        "nullable": true,
        "example": {
          "toll_free_weight": 10,
          "long_code_weight": 1,
          "skip_unhealthy": true,
          "sticky_sender": false,
          "geomatch": false
        }
      },
      "NumberReservation": {
        "title": "NumberReservation",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "number_reservation"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservedPhoneNumber"
            }
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the entire reservation.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the numbers reservation was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number reservation was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "number_reservation",
          "phone_numbers": [
            {
              "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
              "record_type": "reserved_phone_number",
              "phone_number": "+19705555098",
              "status": "pending",
              "created_at": "2018-01-01",
              "updated_at": "2018-01-01",
              "expired_at": "2018-01-01",
              "errors": ""
            }
          ],
          "status": "pending",
          "customer_reference": "MY REF 001",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "OptOutItem": {
        "title": "OptOutItem",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).",
            "format": "address"
          },
          "to": {
            "type": "string",
            "description": "Receiving address (+E.164 formatted phone number or short code).",
            "format": "address",
            "example": "+E.164"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.",
            "nullable": true
          },
          "keyword": {
            "type": "string",
            "description": "The keyword that triggered the opt-out.",
            "nullable": true,
            "example": "STOP"
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp when the opt-out was created",
            "format": "date-time",
            "example": "2025-04-28T12:00:38.6312520+00:00"
          }
        }
      },
      "OptOutListResponse": {
        "title": "OptOutListResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptOutItem"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "OrderExternalVetting": {
        "title": "OrderExternalVetting",
        "required": [
          "evpId",
          "vettingClass"
        ],
        "type": "object",
        "properties": {
          "evpId": {
            "title": "Evpid",
            "maxLength": 10,
            "type": "string",
            "description": "External vetting provider ID for the brand."
          },
          "vettingClass": {
            "title": "Vettingclass",
            "type": "string",
            "description": "Identifies the vetting classification."
          }
        }
      },
      "PostNumbersFeatures": {
        "title": "PostNumbersFeatures",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "phone"
            }
          }
        }
      },
      "OutboundCallRecording": {
        "title": "OutboundCallRecording",
        "type": "object",
        "properties": {
          "call_recording_type": {
            "enum": [
              "all",
              "none",
              "by_caller_phone_number"
            ],
            "type": "string",
            "description": "Specifies which calls are recorded."
          },
          "call_recording_caller_phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "When call_recording_type is 'by_caller_phone_number', only outbound calls using one of these numbers will be recorded. Numbers must be specified in E164 format."
          },
          "call_recording_channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "When using 'dual' channels, the final audio file will be a stereo recording with the first leg on channel A, and the rest on channel B.",
            "default": "single",
            "example": "dual"
          },
          "call_recording_format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "The audio file format for calls being recorded.",
            "default": "wav",
            "example": "mp3"
          }
        },
        "example": {
          "call_recording_type": "by_caller_phone_number",
          "call_recording_caller_phone_numbers": [
            "+19705555098"
          ],
          "call_recording_channels": "dual",
          "call_recording_format": "mp3"
        }
      },
      "OutboundFqdn": {
        "title": "Connection Outbound Settings",
        "type": "object",
        "properties": {
          "ani_override": {
            "title": "ANI override type",
            "type": "string",
            "description": "Set a phone number as the ani_override value to override caller id number on outbound calls.",
            "format": "E.164"
          },
          "ani_override_type": {
            "title": "ANI override type",
            "enum": [
              "always",
              "normal",
              "emergency"
            ],
            "type": "string",
            "description": "Specifies when we should apply your ani_override setting. Only applies when ani_override is not blank.",
            "default": "always",
            "example": "normal"
          },
          "call_parking_enabled": {
            "type": "boolean",
            "description": "Forces all SIP calls originated on this connection to be \\\"parked\\\" instead of \\\"bridged\\\" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next.",
            "default": false,
            "nullable": true
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection."
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "instant_ringback_enabled": {
            "type": "boolean",
            "description": "When set, ringback will not wait for indication before sending ringback tone to calling party.",
            "default": false
          },
          "ip_authentication_method": {
            "enum": [
              "credential-authentication",
              "ip-authentication"
            ],
            "type": "string",
            "default": "ip-authentication",
            "example": "credential-authentication"
          },
          "ip_authentication_token": {
            "type": "string"
          },
          "localization": {
            "type": "string",
            "description": "A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.\",",
            "default": "US",
            "example": "US"
          },
          "outbound_voice_profile_id": {
            "title": "Outbound Voice Profile ID",
            "type": "string",
            "description": "Identifies the associated outbound voice profile.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "t38_reinvite_source": {
            "enum": [
              "telnyx",
              "customer",
              "disabled",
              "passthru",
              "caller-passthru",
              "callee-passthru"
            ],
            "type": "string",
            "description": "This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite. By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.",
            "default": "customer"
          },
          "tech_prefix": {
            "type": "string",
            "description": "Numerical chars only, exactly 4 characters."
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "timeout_1xx_secs": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if connection is not made.",
            "default": 3
          },
          "timeout_2xx_secs": {
            "maximum": 600,
            "minimum": 1,
            "type": "integer",
            "description": "Time(sec) before aborting if call is unanswered (min: 1, max: 600).",
            "default": 90
          }
        }
      },
      "OutboundIp": {
        "title": "Outbound Ip",
        "type": "object",
        "properties": {
          "call_parking_enabled": {
            "type": "boolean",
            "description": "Forces all SIP calls originated on this connection to be \"parked\" instead of \"bridged\" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next.",
            "default": false,
            "nullable": true
          },
          "ani_override": {
            "type": "string",
            "description": "Set a phone number as the ani_override value to override caller id number on outbound calls."
          },
          "ani_override_type": {
            "enum": [
              "always",
              "normal",
              "emergency"
            ],
            "type": "string",
            "description": "Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.",
            "default": "always"
          },
          "channel_limit": {
            "type": "integer",
            "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
            "default": null
          },
          "instant_ringback_enabled": {
            "type": "boolean",
            "description": "When set, ringback will not wait for indication before sending ringback tone to calling party.",
            "default": true
          },
          "generate_ringback_tone": {
            "type": "boolean",
            "description": "Generate ringback tone through 183 session progress message with early media.",
            "default": false
          },
          "localization": {
            "type": "string",
            "description": "A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.",
            "default": null
          },
          "t38_reinvite_source": {
            "enum": [
              "telnyx",
              "customer",
              "disabled",
              "passthru",
              "caller-passthru",
              "callee-passthru"
            ],
            "type": "string",
            "description": "This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.",
            "default": "customer"
          },
          "tech_prefix": {
            "type": "string",
            "description": "Numerical chars only, exactly 4 characters."
          },
          "ip_authentication_method": {
            "enum": [
              "tech-prefixp-charge-info",
              "token"
            ],
            "type": "string",
            "default": "tech-prefixp-charge-info",
            "example": "tech-prefixp-charge-info"
          },
          "ip_authentication_token": {
            "type": "string",
            "default": null
          },
          "outbound_voice_profile_id": {
            "title": "Outbound Voice Profile ID",
            "type": "string",
            "description": "Identifies the associated outbound voice profile.",
            "format": "int64",
            "example": "1293384261075731499"
          }
        },
        "example": {
          "call_parking_enabled": true,
          "ani_override": "string",
          "ani_override_type": "always",
          "channel_limit": 10,
          "instant_ringback_enabled": true,
          "generate_ringback_tone": true,
          "localization": "string",
          "t38_reinvite_source": "customer",
          "tech_prefix": "string",
          "ip_authentication_method": "token",
          "ip_authentication_token": "string",
          "outbound_voice_profile_id": "1293384261075731499"
        }
      },
      "OutboundMessage": {
        "title": "OutboundMessage",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid"
          },
          "event_type": {
            "enum": [
              "message.sent",
              "message.finalized"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "message.sent"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time"
          },
          "payload": {
            "$ref": "#/components/schemas/OutboundMessagePayload"
          }
        },
        "example": {
          "record_type": "event",
          "id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "event_type": "message.sent",
          "occurred_at": "date-time",
          "payload": {
            "record_type": "message",
            "direction": "outbound",
            "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
            "type": "MMS",
            "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
            "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
            "from": {
              "phone_number": "+18445550001",
              "carrier": "TELNYX LLC",
              "line_type": "VoIP"
            },
            "to": [
              {
                "phone_number": "+18665550001",
                "status": "queued",
                "carrier": "T-MOBILE USA, INC.",
                "line_type": "Wireless"
              }
            ],
            "cc": [ ],
            "text": "Hello, World!",
            "subject": "From Telnyx!",
            "media": [
              {
                "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
                "content_type": null,
                "sha256": null,
                "size": null
              }
            ],
            "webhook_url": "https://www.example.com/hooks",
            "webhook_failover_url": "https://backup.example.com/hooks",
            "encoding": "GSM-7",
            "parts": 1,
            "tags": [
              "Greetings"
            ],
            "cost": {
              "amount": 0.0051,
              "currency": "USD"
            },
            "cost_breakdown": {
              "carrier_fee": {
                "amount": 0.00305,
                "currency": "USD"
              },
              "rate": {
                "amount": 0.00205,
                "currency": "USD"
              }
            },
            "tcr_campaign_id": "TCPA3X7",
            "tcr_campaign_billable": true,
            "tcr_campaign_registered": "REGISTERED",
            "received_at": "2019-01-23T18:10:02.5740000+00:00",
            "sent_at": null,
            "completed_at": null,
            "valid_until": null,
            "errors": [ ]
          }
        }
      },
      "OutboundMessageEvent": {
        "title": "OutboundMessageEvent",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutboundMessage"
          },
          "meta": {
            "type": "object",
            "properties": {
              "attempt": {
                "type": "integer",
                "description": "Number of attempts to deliver the webhook event.",
                "example": 1
              },
              "delivered_to": {
                "type": "string",
                "description": "The webhook URL the event was delivered to.",
                "format": "url",
                "example": "https://www.example.com/hooks"
              }
            }
          }
        }
      },
      "OutboundMessagePayload": {
        "title": "OutboundMessagePayload",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "message"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "message"
          },
          "direction": {
            "enum": [
              "outbound"
            ],
            "type": "string",
            "description": "The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.",
            "example": "outbound"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "SMS",
              "MMS"
            ],
            "type": "string",
            "description": "The type of message."
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          },
          "organization_id": {
            "type": "string",
            "description": "The id of the organization the messaging profile belongs to.",
            "format": "uuid"
          },
          "from": {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).",
                "format": "address"
              },
              "carrier": {
                "type": "string",
                "description": "The carrier of the receiver."
              },
              "line_type": {
                "enum": [
                  "Wireline",
                  "Wireless",
                  "VoWiFi",
                  "VoIP",
                  "Pre-Paid Wireless"
                ],
                "type": "string",
                "description": "The line-type of the receiver."
              }
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "description": "Receiving address (+E.164 formatted phone number or short code).",
                  "format": "address"
                },
                "status": {
                  "enum": [
                    "queued",
                    "sending",
                    "sent",
                    "expired",
                    "sending_failed",
                    "delivery_unconfirmed",
                    "delivered",
                    "delivery_failed"
                  ],
                  "type": "string",
                  "description": "The delivery status of the message."
                },
                "carrier": {
                  "type": "string",
                  "description": "The carrier of the receiver."
                },
                "line_type": {
                  "enum": [
                    "Wireline",
                    "Wireless",
                    "VoWiFi",
                    "VoIP",
                    "Pre-Paid Wireless"
                  ],
                  "type": "string",
                  "description": "The line-type of the receiver."
                }
              }
            }
          },
          "text": {
            "type": "string",
            "description": "Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**"
          },
          "subject": {
            "type": "string",
            "description": "Subject of multimedia message",
            "nullable": true
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The url of the media requested to be sent.",
                  "format": "url"
                },
                "content_type": {
                  "type": "string",
                  "description": "The MIME type of the requested media.",
                  "format": "mime-type",
                  "nullable": true
                },
                "sha256": {
                  "type": "string",
                  "description": "The SHA256 hash of the requested media.",
                  "nullable": true
                },
                "size": {
                  "type": "integer",
                  "description": "The size of the requested media.",
                  "nullable": true
                }
              }
            }
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true
          },
          "encoding": {
            "type": "string",
            "description": "Encoding scheme used for the message body."
          },
          "parts": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "Number of parts into which the message's body must be split."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the resource."
          },
          "cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "The amount deducted from your account.",
                "format": "decimal"
              },
              "currency": {
                "type": "string",
                "description": "The ISO 4217 currency identifier.",
                "format": "iso4217"
              }
            },
            "nullable": true
          },
          "cost_breakdown": {
            "type": "object",
            "properties": {
              "carrier_fee": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The carrier fee amount.",
                    "format": "decimal"
                  },
                  "currency": {
                    "type": "string",
                    "description": "The ISO 4217 currency identifier.",
                    "format": "iso4217"
                  }
                }
              },
              "rate": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The rate amount applied.",
                    "format": "decimal"
                  },
                  "currency": {
                    "type": "string",
                    "description": "The ISO 4217 currency identifier.",
                    "format": "iso4217"
                  }
                }
              }
            },
            "description": "Detailed breakdown of the message cost components.",
            "nullable": true
          },
          "tcr_campaign_id": {
            "type": "string",
            "description": "The Campaign Registry (TCR) campaign ID associated with the message.",
            "nullable": true
          },
          "tcr_campaign_billable": {
            "type": "boolean",
            "description": "Indicates whether the TCR campaign is billable."
          },
          "tcr_campaign_registered": {
            "type": "string",
            "description": "The registration status of the TCR campaign.",
            "nullable": true,
            "example": "REGISTERED"
          },
          "received_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the message request was received.",
            "format": "date-time"
          },
          "sent_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the message was sent.",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the message was finalized.",
            "format": "date-time"
          },
          "valid_until": {
            "type": "string",
            "description": "Message must be out of the queue by this time or else it will be discarded and marked as 'sending_failed'. Once the message moves out of the queue, this field will be nulled",
            "format": "date-time",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "description": "These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses."
          }
        },
        "example": {
          "record_type": "message",
          "direction": "outbound",
          "id": "40385f64-5717-4562-b3fc-2c963f66afa6",
          "type": "MMS",
          "messaging_profile_id": "4000eba1-a0c0-4563-9925-b25e842a7cb6",
          "organization_id": "b448f9cc-a842-4784-98e9-03c1a5872950",
          "from": {
            "phone_number": "+18445550001",
            "carrier": "TELNYX LLC",
            "line_type": "VoIP"
          },
          "to": [
            {
              "phone_number": "+18665550001",
              "status": "queued",
              "carrier": "T-MOBILE USA, INC.",
              "line_type": "Wireless"
            }
          ],
          "cc": [ ],
          "text": "Hello, World!",
          "subject": "From Telnyx!",
          "media": [
            {
              "url": "https://pbs.twimg.com/profile_images/1142168442042118144/AW3F4fFD_400x400.png",
              "content_type": null,
              "sha256": null,
              "size": null
            }
          ],
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "encoding": "GSM-7",
          "parts": 1,
          "tags": [
            "Greetings"
          ],
          "cost": {
            "amount": "0.0051",
            "currency": "USD"
          },
          "cost_breakdown": {
            "carrier_fee": {
              "amount": "0.00305",
              "currency": "USD"
            },
            "rate": {
              "amount": "0.00205",
              "currency": "USD"
            }
          },
          "tcr_campaign_id": "TCPA3X7",
          "tcr_campaign_billable": true,
          "tcr_campaign_registered": "REGISTERED",
          "received_at": "2019-01-23T18:10:02.5740000+00:00",
          "sent_at": null,
          "completed_at": null,
          "valid_until": null,
          "errors": [ ]
        }
      },
      "OutboundVoiceProfile": {
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "outbound_voice_profile"
          },
          "name": {
            "minLength": 3,
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office"
          },
          "connections_count": {
            "type": "integer",
            "description": "Amount of connections associated with this outbound voice profile.",
            "example": 12
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "nullable": true,
            "example": 10
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "default": true,
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "default": false,
            "example": true
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "format": "uuid",
            "default": null,
            "nullable": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "outbound_voice_profile",
          "name": "office",
          "connections_count": 12,
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "call_recording": {
            "call_recording_type": "by_caller_phone_number",
            "call_recording_caller_phone_numbers": [
              "+19705555098"
            ],
            "call_recording_channels": "dual",
            "call_recording_format": "mp3"
          },
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "updateNumberOrderPhoneNumberRequirementGroup": {
        "title": "updateNumberOrderPhoneNumberRequirementGroup",
        "required": [
          "requirement_group_id"
        ],
        "type": "object",
        "properties": {
          "requirement_group_id": {
            "type": "string",
            "description": "The ID of the requirement group to associate",
            "format": "uuid"
          }
        }
      },
      "PWGAssignedResourcesSummary": {
        "title": "PWGAssignedResourcesSummary",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "The type of the resource assigned to the Private Wireless Gateway.",
            "readOnly": true,
            "example": "sim_card_group"
          },
          "count": {
            "type": "integer",
            "description": "The current count of a resource type assigned to the Private Wireless Gateway.",
            "readOnly": true,
            "example": 1
          }
        },
        "description": "The summary of the resource that have been assigned to the Private Wireless Gateway."
      },
      "PaginatedBillingBundlesResponse": {
        "title": "PaginatedBillingBundlesResponse",
        "required": [
          "meta",
          "data"
        ],
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingBundleSummary"
            }
          }
        }
      },
      "PaginatedScheduledEventList": {
        "title": "PaginatedScheduledEventList",
        "required": [
          "meta",
          "data"
        ],
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": { }
          }
        }
      },
      "PaginatedUserBundlesResponse": {
        "title": "PaginatedUserBundlesResponse",
        "required": [
          "meta",
          "data"
        ],
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationResponse"
          },
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBundle"
            }
          }
        }
      },
      "Paginated_VerificationRequestStatus_": {
        "title": "Paginated[VerificationRequestStatus]",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationRequestStatus"
            },
            "description": "The records yielded by this request"
          },
          "total_records": {
            "title": "Total Records",
            "type": "integer",
            "description": "The total amount of records for these query parameters",
            "default": 0
          }
        },
        "description": "A paginated response"
      },
      "PaginationData": {
        "title": "PaginationData",
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages.",
            "example": "5"
          },
          "total_results": {
            "type": "integer",
            "description": "Total number of results.",
            "example": "100"
          },
          "page_number": {
            "type": "integer",
            "description": "Selected page number.",
            "example": "1"
          },
          "page_size": {
            "type": "integer",
            "description": "Records per single page",
            "example": "20"
          }
        }
      },
      "PaginationMeta": {
        "title": "PaginationMeta",
        "type": "object",
        "properties": {
          "total_pages": {
            "type": "integer",
            "example": 3
          },
          "total_results": {
            "type": "integer",
            "example": 55
          },
          "page_number": {
            "type": "integer",
            "example": 2
          },
          "page_size": {
            "type": "integer",
            "example": 25
          }
        }
      },
      "PaginationMetaSimple": {
        "title": "PaginationMetaSimple",
        "type": "object",
        "properties": {
          "page_number": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "total_results": {
            "type": "integer"
          }
        }
      },
      "PaginationResponse": {
        "title": "PaginationResponse",
        "required": [
          "total_results",
          "total_pages",
          "page_number",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "total_results": {
            "title": "Total Results",
            "type": "integer",
            "description": "Total number of results returned.",
            "example": 55
          },
          "total_pages": {
            "title": "Total Pages",
            "type": "integer",
            "description": "Total number of pages from the results.",
            "example": 3
          },
          "page_number": {
            "title": "Page Number",
            "type": "integer",
            "description": "The current page number.",
            "example": 2
          },
          "page_size": {
            "title": "Page Size",
            "type": "integer",
            "description": "The number of results per page.",
            "example": 25
          }
        }
      },
      "Participant": {
        "title": "Participant",
        "required": [
          "record_type",
          "id",
          "call_leg_id",
          "call_control_id",
          "conference",
          "whisper_call_control_ids",
          "created_at",
          "updated_at",
          "end_conference_on_exit",
          "soft_end_conference_on_exit",
          "status",
          "muted",
          "on_hold"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "participant"
            ],
            "type": "string",
            "example": "participant"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_leg_id": {
            "type": "string",
            "description": "Uniquely identifies the call leg associated with the participant",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "call_control_id": {
            "type": "string",
            "description": "Call Control ID associated with the partiipant of the conference",
            "example": "v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ"
          },
          "conference": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the conference",
                "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              },
              "name": {
                "type": "string",
                "description": "Name of the conference",
                "example": "All hands meeting"
              }
            },
            "description": "Info about the conference that the participant is in"
          },
          "whisper_call_control_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of unique call_control_ids the participant can whisper to.."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the participant was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.",
            "example": true
          },
          "soft_end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference will end after the participant leaves the conference.",
            "example": true
          },
          "status": {
            "enum": [
              "joining",
              "joined",
              "left"
            ],
            "type": "string",
            "description": "The status of the participant with respect to the lifecycle within the conference",
            "example": "joining"
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": true
          },
          "on_hold": {
            "type": "boolean",
            "description": "Whether the participant is put on_hold.",
            "example": true
          }
        },
        "example": {
          "record_type": "participant",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "end_conference_on_exit": true,
          "soft_end_conference_on_exit": true,
          "status": "joining",
          "muted": false,
          "on_hold": true,
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "whisper_call_control_ids": [
            "v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ",
            "v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw"
          ],
          "id": "dfadada7-af74-47bc-83a4-554275f55f5c",
          "call_leg_id": "3a15df2d-c801-4729-adf5-b56dd42e2abb",
          "conference": {
            "id": "41b9acd4-f4da-4ff5-a85c-e07e90b53f46",
            "name": "1"
          }
        }
      },
      "ParticipantResource": {
        "title": "Participant resource",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "api_version": {
            "type": "string",
            "description": "The version of the API that was used to make the request.",
            "example": "v2/texml"
          },
          "call_sid": {
            "type": "string",
            "description": "The identifier of this participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "call_sid_legacy": {
            "type": "string",
            "description": "The identifier of this participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "coaching": {
            "type": "boolean",
            "description": "Whether the participant is coaching another call.",
            "example": false
          },
          "coaching_call_sid": {
            "type": "string",
            "description": "The identifier of the coached participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "coaching_call_sid_legacy": {
            "type": "string",
            "description": "The identifier of the coached participant's call.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "date_created": {
            "type": "string",
            "description": "The timestamp of when the resource was created.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "date_updated": {
            "type": "string",
            "description": "The timestamp of when the resource was last updated.",
            "example": "Thu, 15 Jun 2023 09:56:45 +0000"
          },
          "end_conference_on_exit": {
            "type": "boolean",
            "description": "Whether the conference ends when the participant leaves.",
            "example": false
          },
          "hold": {
            "type": "boolean",
            "description": "Whether the participant is on hold.",
            "example": false
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the participant is muted.",
            "example": false
          },
          "status": {
            "enum": [
              "connecting",
              "connected",
              "completed"
            ],
            "type": "string",
            "description": "The status of the participant's call in the conference.",
            "example": "in-progress"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this participant.",
            "example": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ.json"
          }
        },
        "example": {
          "account_sid": "4e71926f-8f13-450e-b91c-23c2ef786aa6",
          "api_version": "v2/texml",
          "call_sid": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ",
          "call_sid_legacy": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ",
          "coaching": false,
          "coaching_call_sid": null,
          "coaching_call_sid_legacy": null,
          "conference_sid": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1",
          "date_created": "Fri, 27 Oct 2023 07:41:58 +0000",
          "date_updated": "Fri, 27 Oct 2023 07:41:58 +0000",
          "end_conference_on_exit": false,
          "hold": false,
          "muted": false,
          "status": "completed",
          "uri": "/v2/texml/Accounts/4e71926f-8f13-450e-b91c-23c2ef786aa6/Conferences/cd5a70f4-759b-4d5e-9c06-88c00f16f3c1/Participants/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ.json"
        }
      },
      "ParticipantResourceIndex": {
        "title": "Multiple participant resources",
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantResource"
            }
          },
          "end": {
            "type": "integer",
            "description": "The number of the last element on the page, zero-indexed.",
            "example": 19
          },
          "first_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?page=0&pagesize=20",
            "example": "accepted"
          },
          "next_page_uri": {
            "type": "string",
            "description": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ",
            "example": "accepted"
          },
          "page": {
            "type": "integer",
            "description": "Current page number, zero-indexed.",
            "example": 0
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items on the page",
            "example": 20
          },
          "start": {
            "type": "integer",
            "description": "The number of the first element on the page, zero-indexed.",
            "example": 0
          },
          "uri": {
            "type": "string",
            "description": "The URI of the current page.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?Page=0&PageSize=1"
          }
        },
        "example": {
          "participants": [ ],
          "end": 0,
          "first_page_uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?page=0&pagesize=20",
          "next_page_uri": null,
          "page": 0,
          "page_size": 20,
          "start": 0,
          "uri": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?page=0&pagesize=20"
        }
      },
      "PatchRoomRequest": {
        "title": "PatchRoomRequest",
        "type": "object",
        "properties": {
          "unique_name": {
            "type": "string",
            "description": "The unique (within the Telnyx account scope) name of the room.",
            "example": "My room"
          },
          "max_participants": {
            "maximum": 50,
            "minimum": 2,
            "type": "integer",
            "description": "The maximum amount of participants allowed in a room. If new participants try to join after that limit is reached, their request will be rejected.",
            "default": 10,
            "example": 10
          },
          "enable_recording": {
            "type": "boolean",
            "description": "Enable or disable recording for that room.",
            "default": false,
            "example": true
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this room will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this room will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          }
        }
      },
      "PauseConferenceRecordingRequest": {
        "title": "Pause Recording Request",
        "type": "object",
        "properties": {
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "type": "string",
            "description": "Use this field to pause specific recording.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "PauseRecordingRequest": {
        "title": "Pause Recording Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "6e00ab49-9487-4364-8ad6-23965965afb2"
          }
        }
      },
      "PhoneNumberBlocksJob": {
        "title": "PhoneNumberBlocksJob",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "phone_number_block_job"
          },
          "status": {
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed"
            ],
            "type": "string",
            "description": "Indicates the completion status of the background operation.",
            "default": "pending",
            "readOnly": true,
            "example": "pending"
          },
          "type": {
            "enum": [
              "delete_phone_number_block"
            ],
            "type": "string",
            "description": "Identifies the type of the background job.",
            "readOnly": true,
            "example": "delete_phone_number_block"
          },
          "etc": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the estimated time of completion of the background job.",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "successful_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberBlocksJobSuccessfulOperation"
            },
            "readOnly": true
          },
          "failed_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberBlocksJobFailedOperation"
            },
            "readOnly": true
          }
        },
        "example": {
          "id": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "record_type": "phone_numbers_job",
          "status": "pending",
          "type": "delete_phone_number_block",
          "etc": "2020-10-30T18:10:00.0000000+00:00",
          "created_at": "2020-10-23T18:10:00.000Z",
          "updated_at": "2020-10-23T18:10:01.000Z",
          "successful_operations": [ ],
          "failed_operations": [ ]
        }
      },
      "PhoneNumberBlocksJobDeletePhoneNumberBlockRequest": {
        "title": "PhoneNumberBlocksJobDeletePhoneNumberBlockRequest",
        "required": [
          "phone_number_block_id"
        ],
        "type": "object",
        "properties": {
          "phone_number_block_id": {
            "type": "string"
          }
        },
        "example": {
          "phone_number_block_id": "f3946371-7199-4261-9c3d-81a0d7935146"
        }
      },
      "PhoneNumberBlocksJobFailedOperation": {
        "title": "PhoneNumberBlocksJobFailedOperation",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PhoneNumberBlocksJobSuccessfulOperation": {
        "title": "PhoneNumberBlocksJobSuccessfulOperation",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          }
        }
      },
      "PhoneNumberBundleStatusChangeRequest": {
        "title": "PhoneNumberBundleStatusChangeRequest",
        "required": [
          "bundle_id"
        ],
        "type": "object",
        "properties": {
          "bundle_id": {
            "type": "string",
            "description": "The new bundle_id setting for the number. If you are assigning the number to a bundle, this is the unique ID of the bundle you wish to use. If you are removing the number from a bundle, this must be null. You cannot assign a number from one bundle to another directly. You must first remove it from a bundle, and then assign it to a new bundle."
          }
        },
        "example": {
          "bundle_id": "5194d8fc-87e6-4188-baa9-1c434bbe861b"
        }
      },
      "PhoneNumberCampaign": {
        "title": "PhoneNumberCampaign",
        "required": [
          "phoneNumber",
          "campaignId",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "example": "+18005550199"
          },
          "brandId": {
            "title": "BrandId",
            "type": "string",
            "description": "Brand ID. Empty if the number is associated to a shared campaign.",
            "example": "7ba705b7-22af-493f-addc-ac04b7ca071c"
          },
          "tcrBrandId": {
            "title": "TcrBrandId",
            "type": "string",
            "description": "TCR's alphanumeric ID for the brand.",
            "example": "BBRAND1"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "For shared campaigns, this is the TCR campaign ID, otherwise it is the campaign ID "
          },
          "tcrCampaignId": {
            "title": "TcrCampaignid",
            "type": "string",
            "description": "TCR's alphanumeric ID for the campaign.",
            "example": "CCAMPA1"
          },
          "telnyxCampaignId": {
            "title": "Telnyxcampaignid",
            "type": "string",
            "description": "Campaign ID. Empty if the number is associated to a shared campaign.",
            "example": "3008dd9f-66d7-40e0-bf23-bf2d8d1a96ba"
          },
          "assignmentStatus": {
            "title": "AssignmentStatus",
            "enum": [
              "FAILED_ASSIGNMENT",
              "PENDING_ASSIGNMENT",
              "ASSIGNED",
              "PENDING_UNASSIGNMENT",
              "FAILED_UNASSIGNMENT"
            ],
            "description": "The assignment status of the number.",
            "example": "ASSIGNED"
          },
          "failureReasons": {
            "description": "Extra info about a failure to assign/unassign a number. Relevant only if the assignmentStatus is either FAILED_ASSIGNMENT or FAILED_UNASSIGNMENT"
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "example": "2021-03-08T17:57:48.801186"
          },
          "updatedAt": {
            "title": "Updatedat",
            "type": "string",
            "example": "2021-03-08T17:57:48.801186"
          }
        }
      },
      "PhoneNumberCampaignCreate": {
        "title": "PhoneNumberCampaignCreate",
        "required": [
          "phoneNumber",
          "campaignId"
        ],
        "type": "object",
        "properties": {
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "description": "The phone number you want to link to a specified campaign.",
            "example": "+18005550199"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "The ID of the campaign you want to link to the specified phone number.",
            "example": "4b300178-131c-d902-d54e-72d90ba1620j"
          }
        }
      },
      "PhoneNumberCampaignPaginated": {
        "title": "PhoneNumberCampaignPaginated",
        "required": [
          "records",
          "page",
          "totalRecords"
        ],
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberCampaign"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "totalRecords": {
            "title": "Totalrecords",
            "type": "integer"
          }
        }
      },
      "PhoneNumberDeletedDetailed": {
        "title": "PhoneNumberDeletedDetailed",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "phone_number"
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164-formatted phone number associated with this record.",
            "readOnly": true
          },
          "status": {
            "enum": [
              "purchase-pending",
              "purchase-failed",
              "port-pending",
              "port-failed",
              "active",
              "deleted",
              "emergency-only",
              "ported-out",
              "port-out-pending"
            ],
            "type": "string",
            "description": "The phone number's current status.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of user-assigned tags to help manage the phone number."
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "connection_name": {
            "type": "string",
            "description": "The user-assigned name of the connection to be associated with this phone number.",
            "readOnly": true
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "messaging_profile_name": {
            "type": "string",
            "description": "The name of the messaging profile associated with the phone number.",
            "example": "regional-customers"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether emergency services are enabled for this number.",
            "readOnly": true
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the emergency address associated with the phone number.",
            "format": "int64",
            "readOnly": true
          },
          "call_forwarding_enabled": {
            "type": "boolean",
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "default": true,
            "readOnly": true
          },
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Indicates whether a CNAM listing is enabled for this number.",
            "readOnly": true
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Indicates whether caller ID is enabled for this number.",
            "readOnly": true
          },
          "call_recording_enabled": {
            "type": "boolean",
            "description": "Indicates whether call recording is enabled for this number.",
            "readOnly": true
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Indicates whether T38 Fax Gateway for inbound calls to this number.",
            "readOnly": true
          },
          "purchased_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating the time the request was made to purchase the number.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the time it took to activate after the purchase.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost",
              "landline"
            ],
            "type": "string",
            "description": "The phone number's type.",
            "readOnly": true
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "phone_number",
          "phone_number": "+19705555098",
          "status": "deleted",
          "tags": [
            "tag_1",
            "tag_2"
          ],
          "external_pin": "1234",
          "connection_id": "1293384261075731499",
          "connection_name": "connection-name",
          "customer_reference": "customer-reference",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "messaging_profile_name": "regional-customers",
          "billing_group_id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "call_forwarding_enabled": true,
          "cnam_listing_enabled": true,
          "caller_id_name_enabled": true,
          "call_recording_enabled": true,
          "t38_fax_gateway_enabled": true,
          "phone_number_type": "local",
          "purchased_at": "2019-10-23T18:10:00.000Z",
          "created_at": "2019-10-23T18:10:00.000Z",
          "updated_at": "2019-10-24T18:10:00.000Z",
          "hd_voice_enabled": true
        }
      },
      "PhoneNumberDetailed": {
        "title": "PhoneNumberDetailed",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "phone_number"
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164-formatted phone number associated with this record.",
            "readOnly": true
          },
          "country_iso_alpha2": {
            "type": "string",
            "description": "The ISO 3166-1 alpha-2 country code of the phone number.",
            "readOnly": true,
            "example": "US"
          },
          "status": {
            "enum": [
              "purchase-pending",
              "purchase-failed",
              "port-pending",
              "port-failed",
              "active",
              "deleted",
              "emergency-only",
              "ported-out",
              "port-out-pending",
              "requirement-info-pending",
              "requirement-info-under-review",
              "requirement-info-exception",
              "provision-pending"
            ],
            "type": "string",
            "description": "The phone number's current status.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of user-assigned tags to help manage the phone number."
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "connection_name": {
            "type": "string",
            "description": "The user-assigned name of the connection to be associated with this phone number.",
            "readOnly": true
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Identifies the messaging profile associated with the phone number."
          },
          "messaging_profile_name": {
            "type": "string",
            "description": "The name of the messaging profile associated with the phone number.",
            "example": "regional-customers"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether emergency services are enabled for this number.",
            "readOnly": true
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the emergency address associated with the phone number.",
            "format": "int64",
            "readOnly": true
          },
          "emergency_status": {
            "enum": [
              "active",
              "deprovisioning",
              "disabled",
              "provisioning",
              "provisioning-failed"
            ],
            "type": "string",
            "description": "Indicates the status of the provisioning of emergency services for the phone number. This field contains information about activity that may be ongoing for a number where it either is being provisioned or deprovisioned but is not yet enabled/disabled."
          },
          "call_forwarding_enabled": {
            "type": "boolean",
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "default": true,
            "readOnly": true
          },
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Indicates whether a CNAM listing is enabled for this number.",
            "readOnly": true
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Indicates whether caller ID is enabled for this number.",
            "readOnly": true
          },
          "call_recording_enabled": {
            "type": "boolean",
            "description": "Indicates whether call recording is enabled for this number.",
            "readOnly": true
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Indicates whether T38 Fax Gateway for inbound calls to this number.",
            "readOnly": true
          },
          "purchased_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was purchased.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost",
              "landline",
              "tollfree",
              "shortcode",
              "longcode"
            ],
            "type": "string",
            "description": "The phone number's type.\nNote: For numbers purchased prior to July 2023 or when fetching a number's details immediately after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be returned instead.",
            "readOnly": true
          },
          "inbound_call_screening": {
            "enum": [
              "disabled",
              "reject_calls",
              "flag_calls"
            ],
            "type": "string",
            "description": "The inbound_call_screening setting is a phone number configuration option variable that allows users to configure their settings to block or flag fraudulent calls. It can be set to disabled, reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated with it.",
            "default": "disabled"
          },
          "source_type": {
            "enum": [
              "number_order",
              "port_request"
            ],
            "type": "string",
            "description": "Indicates if the phone number was purchased or ported in. For some numbers this information may not be available.",
            "nullable": true,
            "readOnly": true
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "phone_number",
          "phone_number": "+19705555098",
          "country_iso_alpha2": "US",
          "status": "active",
          "tags": [
            "tag_1",
            "tag_2"
          ],
          "external_pin": "1234",
          "connection_id": "1293384261075731499",
          "connection_name": "connection-name",
          "customer_reference": "customer-reference",
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000",
          "messaging_profile_name": "regional-customers",
          "billing_group_id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "emergency_status": "active",
          "call_forwarding_enabled": true,
          "cnam_listing_enabled": true,
          "caller_id_name_enabled": true,
          "call_recording_enabled": true,
          "t38_fax_gateway_enabled": true,
          "phone_number_type": "local",
          "inbound_call_screening": "disabled",
          "purchased_at": "2019-10-23T18:10:00.000Z",
          "created_at": "2019-10-23T18:10:00.000Z",
          "updated_at": "2019-10-24T18:10:00.0000000+00:00",
          "hd_voice_enabled": true,
          "source_type": "number_order"
        }
      },
      "PhoneNumberEnableEmergencyRequest": {
        "title": "PhoneNumberEnableEmergencyRequest",
        "required": [
          "emergency_enabled",
          "emergency_address_id"
        ],
        "type": "object",
        "properties": {
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether to enable emergency services on this number."
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the address to be used with emergency services.",
            "format": "int64"
          }
        },
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "53829456729313"
        }
      },
      "PhoneNumberStatusResponsePaginated": {
        "title": "PhoneNumberStatusResponsePaginated",
        "required": [
          "records",
          "meta"
        ],
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileAssignmentPhoneNumbers"
            }
          }
        }
      },
      "PhoneNumberWithMessagingSettings": {
        "title": "PhoneNumberWithMessagingSettings",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "messaging_phone_number",
              "messaging_settings"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "messaging_settings"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "phone_number": {
            "type": "string",
            "description": "+E.164 formatted phone number.",
            "format": "e164",
            "readOnly": true
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "country_code": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "readOnly": true,
            "example": "US"
          },
          "type": {
            "enum": [
              "long-code",
              "toll-free",
              "short-code",
              "longcode",
              "tollfree",
              "shortcode"
            ],
            "type": "string",
            "description": "The type of the phone number",
            "readOnly": true
          },
          "health": {
            "$ref": "#/components/schemas/NumberHealthMetrics"
          },
          "eligible_messaging_products": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The messaging products that this number can be registered to use",
            "readOnly": true
          },
          "traffic_type": {
            "type": "string",
            "description": "The messaging traffic or use case for which the number is currently configured.",
            "readOnly": true,
            "example": "P2P"
          },
          "messaging_product": {
            "type": "string",
            "description": "The messaging product that the number is registered to use",
            "example": "P2P"
          },
          "features": {
            "type": "object",
            "properties": {
              "sms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              },
              "mms": {
                "$ref": "#/components/schemas/MessagingFeatureSet"
              }
            },
            "readOnly": true
          }
        },
        "example": {
          "record_type": "messaging_settings",
          "id": "1293384261075731499",
          "phone_number": "+18005550001",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.5740000+00:00",
          "updated_at": "2019-01-23T18:10:02.5740000+00:00",
          "country_code": "US",
          "type": "toll-free",
          "health": {
            "message_count": 122,
            "inbound_outbound_ratio": 0.43,
            "success_ratio": 0.94,
            "spam_ratio": 0.06
          },
          "eligible_messaging_products": [
            "A2P"
          ],
          "traffic_type": "A2P",
          "messaging_product": "A2P",
          "features": {
            "sms": {
              "domestic_two_way": true,
              "international_inbound": true,
              "international_outbound": true
            },
            "mms": null
          }
        }
      },
      "PhoneNumberWithVoiceSettings": {
        "title": "PhoneNumberWithVoiceSettings",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true,
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "voice_settings"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number in +E164 format.",
            "readOnly": true,
            "example": "+13035551234"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with this phone number.",
            "example": "1d0e6cb8-8668-462e-94c6-49ae0f0ed48b"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "tech_prefix_enabled": {
            "type": "boolean",
            "description": "Controls whether a tech prefix is enabled for this phone number.",
            "default": false,
            "example": false
          },
          "translated_number": {
            "type": "string",
            "description": "This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed.",
            "example": "+13035559999"
          },
          "call_forwarding": {
            "$ref": "#/components/schemas/CallForwarding"
          },
          "cnam_listing": {
            "$ref": "#/components/schemas/CnamListing"
          },
          "emergency": {
            "$ref": "#/components/schemas/EmergencySettings"
          },
          "usage_payment_method": {
            "enum": [
              "pay-per-minute",
              "channel"
            ],
            "type": "string",
            "description": "Controls whether a number is billed per minute or uses your concurrent channels.",
            "default": "pay-per-minute",
            "example": "pay-per-minute"
          },
          "media_features": {
            "$ref": "#/components/schemas/MediaFeatures"
          },
          "call_recording": {
            "$ref": "#/components/schemas/CallRecording"
          },
          "inbound_call_screening": {
            "enum": [
              "disabled",
              "reject_calls",
              "flag_calls"
            ],
            "type": "string",
            "description": "The inbound_call_screening setting is a phone number configuration option variable that allows users to configure their settings to block or flag fraudulent calls. It can be set to disabled, reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated with it.",
            "default": "disabled"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "voice_settings",
          "connection_id": "1d0e6cb8-8668-462e-94c6-49ae0f0ed48b",
          "customer_reference": "customer-reference",
          "tech_prefix_enabled": false,
          "translated_number": "+13035559999",
          "call_forwarding": {
            "call_forwarding_enabled": true,
            "forwards_to": "+13035559123",
            "forwarding_type": "always"
          },
          "cnam_listing": {
            "cnam_listing_enabled": true,
            "cnam_listing_details": "example"
          },
          "emergency": {
            "emergency_enabled": true,
            "emergency_address_id": "1315261609962112019",
            "emergency_status": "active"
          },
          "usage_payment_method": "pay-per-minute",
          "media_features": {
            "rtp_auto_adjust_enabled": true,
            "accept_any_rtp_packets_enabled": true,
            "t38_fax_gateway_enabled": true
          },
          "call_recording": {
            "inbound_call_recording_enabled": true,
            "inbound_call_recording_format": "wav",
            "inbound_call_recording_channels": "single"
          },
          "inbound_call_screening": "disabled"
        }
      },
      "PhoneNumbersJob": {
        "title": "PhoneNumbersJob",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "phone_numbers_job"
          },
          "status": {
            "enum": [
              "pending",
              "in_progress",
              "completed",
              "failed",
              "expired"
            ],
            "type": "string",
            "description": "Indicates the completion status of the background update.",
            "default": "pending",
            "readOnly": true,
            "example": "pending"
          },
          "type": {
            "enum": [
              "update_emergency_settings",
              "delete_phone_numbers",
              "update_phone_numbers"
            ],
            "type": "string",
            "description": "Identifies the type of the background job.",
            "readOnly": true,
            "example": "update_emergency_settings"
          },
          "etc": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the estimated time of completion of the background job.",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "readOnly": true
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobPhoneNumber"
            }
          },
          "successful_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobSuccessfulOperation"
            },
            "readOnly": true
          },
          "pending_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobPendingOperation"
            },
            "readOnly": true
          },
          "failed_operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumbersJobFailedOperation"
            },
            "readOnly": true
          }
        },
        "example": {
          "id": "42587e44-3a3e-46de-9255-0c9a7a1d1ec7",
          "record_type": "phone_numbers_job",
          "status": "pending",
          "type": "update_emergency_settings",
          "etc": "2020-10-30T18:10:00.0000000+00:00",
          "created_at": "2020-10-23T18:10:00.000Z",
          "updated_at": "2020-10-23T18:10:01.000Z",
          "phone_numbers": [
            {
              "id": "2637816387126861836"
            },
            {
              "phone_number": "+19715555098"
            },
            {
              "phone_number": "+19705555099"
            },
            {
              "id": "3388768018273"
            }
          ],
          "successful_operations": [
            {
              "id": "2637816387126861836",
              "phone_number": "+19705555098"
            },
            {
              "id": "33081887126861836",
              "phone_number": "+19715555098"
            }
          ],
          "pending_operations": [
            {
              "id": "2637816387126861837",
              "phone_number": "+19705555099"
            }
          ],
          "failed_operations": [
            {
              "id": "3388768018273",
              "phone_number": "+19705551234",
              "errors": [
                {
                  "code": "10015",
                  "title": "Bad Request",
                  "detail": "The field is invalid.",
                  "source": "/emergency_address_id"
                }
              ]
            }
          ]
        }
      },
      "PhoneNumbersJobDeletePhoneNumbersRequest": {
        "title": "PhoneNumbersJobDeletePhoneNumbersRequest",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Array of phone number ids and/or phone numbers in E164 format to update"
            }
          }
        },
        "example": {
          "phone_numbers": [
            "+19705555098",
            "+19715555098",
            "32873127836"
          ]
        }
      },
      "PhoneNumbersJobFailedOperation": {
        "title": "PhoneNumbersJobFailedOperation",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PhoneNumbersJobPendingOperation": {
        "title": "PhoneNumbersJobPendingOperation",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          }
        }
      },
      "PhoneNumbersJobPhoneNumber": {
        "title": "PhoneNumbersJobPhoneNumber",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164",
            "example": "+19705555000"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          }
        }
      },
      "PhoneNumbersJobSuccessfulOperation": {
        "title": "PhoneNumbersJobSuccessfulOperation",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number in e164 format.",
            "format": "e164"
          },
          "id": {
            "type": "string",
            "description": "The phone number's ID",
            "format": "int64"
          }
        }
      },
      "PhoneNumbersJobUpdateEmergencySettingsRequest": {
        "title": "PhoneNumbersJobUpdateEmergencySettingsRequest",
        "required": [
          "emergency_enabled",
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Array of phone number ids and/or phone numbers in E164 format to update"
            }
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether to enable or disable emergency services on the numbers."
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the address to be used with emergency services. Required if emergency_enabled is true, must be null or omitted if emergency_enabled is false.",
            "format": "int64",
            "nullable": true
          }
        },
        "example": {
          "emergency_enabled": true,
          "emergency_address_id": "53829456729313",
          "phone_numbers": [
            "+19705555098",
            "+19715555098",
            "32873127836"
          ]
        }
      },
      "PhoneNumbersJobUpdatePhoneNumbersRequest": {
        "title": "PhoneNumbersJobUpdatePhoneNumbersRequest",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of phone number ids and/or phone numbers in E164 format to update. This parameter is required if no filter parameters are provided. If you want to update specific numbers rather than all numbers matching a filter, you must use this parameter. Each item must be either a valid phone number ID or a phone number in E164 format (e.g., '+13127367254')."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of user-assigned tags to help organize phone numbers."
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "hd_voice_enabled": {
            "type": "boolean",
            "description": "Indicates whether to enable or disable HD Voice on each phone number. HD Voice is a paid feature and may not be available for all phone numbers, more details about it can be found in the Telnyx support documentation."
          },
          "voice": {
            "$ref": "#/components/schemas/UpdatePhoneNumberVoiceSettingsRequest"
          }
        },
        "example": {
          "phone_numbers": [
            "1583466971586889004",
            "+13127367254"
          ],
          "tags": [
            "tag"
          ],
          "external_pin": "123456",
          "customer_reference": "customer-reference",
          "connection_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "billing_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "voice": {
            "call_forwarding": {
              "call_forwarding_enabled": true,
              "forwards_to": "+13035559123",
              "forwarding_type": "always"
            }
          }
        }
      },
      "PlayAudioUrlRequest": {
        "title": "Play Audio URL Request",
        "type": "object",
        "properties": {
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "loop": {
            "$ref": "#/components/schemas/Loopcount"
          },
          "overlay": {
            "type": "boolean",
            "description": "When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.",
            "default": false,
            "example": true
          },
          "stop": {
            "type": "string",
            "description": "When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "example": "current"
          },
          "target_legs": {
            "type": "string",
            "description": "Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.",
            "default": "self",
            "example": "self"
          },
          "cache_audio": {
            "type": "boolean",
            "description": "Caches the audio file. Useful when playing the same audio file multiple times during the call.",
            "default": true,
            "example": true
          },
          "audio_type": {
            "enum": [
              "mp3",
              "wav"
            ],
            "type": "string",
            "description": "Specifies the type of audio provided in `audio_url` or `playback_content`.",
            "default": "mp3",
            "example": "wav"
          },
          "playback_content": {
            "type": "string",
            "description": "Allows a user to provide base64 encoded mp3 or wav. Note: when using this parameter, `media_url` and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty",
            "example": "SUQzAwAAAAADf1..."
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "loop": "infinity",
          "overlay": true,
          "stop": "current",
          "target_legs": "self",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ListNotificationSettings_200": {
        "title": "ListNotificationSettings_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationSetting"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "PlaybackStopRequest": {
        "title": "Playback Stop Request",
        "type": "object",
        "properties": {
          "overlay": {
            "type": "boolean",
            "description": "When enabled, it stops the audio being played in the overlay queue.",
            "default": false,
            "example": true
          },
          "stop": {
            "type": "string",
            "description": "Use `current` to stop the current audio being played. Use `all` to stop the current audio file being played and clear all audio files from the queue.",
            "default": "all",
            "example": "current"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "overlay": false,
          "stop": "all",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "PortOutSupportingDocument": {
        "title": "PortOutSupportingDocument",
        "required": [
          "id",
          "record_type",
          "type",
          "portout_id",
          "document_id",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "5a16902a-2ee9-4882-a247-420fc6627b62"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "supporting_document"
          },
          "type": {
            "enum": [
              "loa",
              "invoice"
            ],
            "type": "string",
            "description": "Identifies the type of the document",
            "readOnly": true,
            "example": "loa"
          },
          "portout_id": {
            "type": "string",
            "description": "Identifies the associated port request",
            "format": "uuid",
            "readOnly": true,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "document_id": {
            "type": "string",
            "description": "Identifies the associated document",
            "format": "uuid",
            "example": "f1c5e079-9d82-4f50-95bc-ae2f6b8d84d7"
          },
          "created_at": {
            "type": "string",
            "description": "Supporting document creation timestamp in ISO 8601 format",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Supporting document last changed timestamp in ISO 8601 format",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "5a16902a-2ee9-4882-a247-420fc6627b62",
          "record_type": "supporting_document",
          "type": "loa",
          "portout_id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "document_id": "f1c5e079-9d82-4f50-95bc-ae2f6b8d84d7",
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "Portability": {
        "title": "Portability",
        "type": "object",
        "properties": {
          "lrn": {
            "type": "string",
            "description": "Local Routing Number, if assigned to the requested phone number",
            "example": "2245701999"
          },
          "ported_status": {
            "enum": [
              "Y",
              "N"
            ],
            "type": "string",
            "description": "Indicates whether or not the requested phone number has been ported",
            "example": "Y"
          },
          "ported_date": {
            "type": "string",
            "description": "ISO-formatted date when the requested phone number has been ported",
            "example": "2017-10-20"
          },
          "ocn": {
            "type": "string",
            "description": "Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database",
            "example": "073H"
          },
          "line_type": {
            "type": "string",
            "description": "Type of number",
            "example": "voip"
          },
          "spid": {
            "type": "string",
            "description": "SPID (Service Provider ID)",
            "example": "073H"
          },
          "spid_carrier_name": {
            "type": "string",
            "description": "Service provider name",
            "example": "Telnyx/4"
          },
          "spid_carrier_type": {
            "type": "string",
            "description": "Service provider type",
            "example": "3"
          },
          "altspid": {
            "type": "string",
            "description": "Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another carrier",
            "example": "073H"
          },
          "altspid_carrier_name": {
            "type": "string",
            "description": "Alternative service provider name",
            "example": "Telnyx/4"
          },
          "altspid_carrier_type": {
            "type": "string",
            "description": "Alternative service provider type",
            "example": "3"
          },
          "city": {
            "type": "string",
            "description": "City name extracted from the locality in the Local Exchange Routing Guide (LERG) database",
            "example": "WAUKEGAN"
          },
          "state": {
            "type": "string",
            "example": "Illinois"
          }
        }
      },
      "PortabilityCheckDetails": {
        "title": "PortabilityCheckDetails",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portability_check_result"
          },
          "fast_portable": {
            "type": "boolean",
            "description": "Indicates whether this phone number is FastPort eligible",
            "readOnly": true,
            "example": true
          },
          "not_portable_reason": {
            "type": "string",
            "description": "If this phone number is not portable, explains why. Empty string if the number is portable.",
            "readOnly": true,
            "example": "No coverage"
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164 formatted phone number this result is about",
            "readOnly": true,
            "example": "+13125550123"
          },
          "portable": {
            "type": "boolean",
            "description": "Indicates whether this phone number is portable",
            "readOnly": true,
            "example": true
          }
        }
      },
      "PortabilityStatus": {
        "title": "PortabilityStatus",
        "enum": [
          "pending",
          "confirmed",
          "provisional"
        ],
        "type": "string",
        "description": "Specifies whether Telnyx is able to confirm portability this number in the United States & Canada. International phone numbers are provisional by default.",
        "example": "confirmed"
      },
      "PortingAdditionalDocument": {
        "title": "PortingAdditionalDocument",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this additional document",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "document_type": {
            "enum": [
              "loa",
              "invoice",
              "csr",
              "other"
            ],
            "type": "string",
            "description": "Identifies the type of additional document",
            "example": "loa"
          },
          "document_id": {
            "type": "string",
            "description": "Identifies the associated document",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "filename": {
            "type": "string",
            "description": "The filename of the related document.",
            "example": "file.txt"
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the related document.",
            "example": "text/plain"
          },
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the associated porting order",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_additional_document"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingEvent": {
        "title": "PortingEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the event.",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "event_type": {
            "enum": [
              "porting_order.deleted",
              "porting_order.loa_updated",
              "porting_order.messaging_changed",
              "porting_order.status_changed",
              "porting_order.sharing_token_expired",
              "porting_order.new_comment",
              "porting_order.split"
            ],
            "type": "string",
            "description": "Identifies the event type",
            "example": "porting_order.deleted"
          },
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the porting order associated with the event.",
            "format": "uuid",
            "example": "9471c873-e3eb-4ca1-957d-f9a451334d52"
          },
          "available_notification_methods": {
            "type": "array",
            "items": {
              "enum": [
                "email",
                "webhook",
                "webhook_v1"
              ],
              "type": "string"
            },
            "description": "Indicates the notification methods used."
          },
          "payload_status": {
            "enum": [
              "created",
              "completed"
            ],
            "type": "string",
            "description": "The status of the payload generation.",
            "example": "created"
          },
          "payload": { },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_event"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingLOAConfiguration": {
        "title": "PortingLOAConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the LOA configuration.",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "company_name": {
            "type": "string",
            "description": "The name of the company",
            "example": "Telnyx"
          },
          "organization_id": {
            "type": "string",
            "description": "The organization that owns the LOA configuration",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "name": {
            "type": "string",
            "description": "The name of the LOA configuration",
            "example": "My LOA Configuration"
          },
          "logo": {
            "type": "object",
            "properties": {
              "document_id": {
                "type": "string",
                "description": "Identifies the document that contains the logo.",
                "format": "uuid",
                "example": "f1486bae-f067-460c-ad43-73a92848f902"
              },
              "content_type": {
                "enum": [
                  "image/png"
                ],
                "type": "string",
                "description": "The content type of the logo.",
                "example": "image/png"
              }
            },
            "description": "The logo to be used in the LOA."
          },
          "address": {
            "type": "object",
            "properties": {
              "street_address": {
                "type": "string",
                "description": "The street address of the company",
                "example": "600 Congress Avenue"
              },
              "extended_address": {
                "type": "string",
                "description": "The extended address of the company",
                "example": "14th Floor"
              },
              "city": {
                "type": "string",
                "description": "The locality of the company",
                "example": "Austin"
              },
              "state": {
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "description": "The administrative area of the company",
                "example": "TX"
              },
              "zip_code": {
                "pattern": "^[0-9]{5}(?:-[0-9]{4})?$",
                "type": "string",
                "description": "The postal code of the company",
                "example": "78701"
              },
              "country_code": {
                "pattern": "^[A-Z]{2}$",
                "type": "string",
                "description": "The country code of the company",
                "example": "US"
              }
            },
            "description": "The address of the company."
          },
          "contact": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "The email address of the contact",
                "format": "email",
                "example": "testing@telnyx.com"
              },
              "phone_number": {
                "pattern": "^\\+\\d{11,15}$",
                "type": "string",
                "description": "The phone number of the contact",
                "example": "+12003270001"
              }
            },
            "description": "The contact information of the company."
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_loa_configuration"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingOrder": {
        "title": "PortingOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this porting order",
            "format": "uuid",
            "readOnly": true,
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer-specified reference number for customer bookkeeping purposes",
            "example": "Acct 123abc"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "status": {
            "$ref": "#/components/schemas/PortingOrderStatus"
          },
          "support_key": {
            "type": "string",
            "description": "A key to reference this porting order when contacting Telnyx customer support. This information is not available in draft porting orders.",
            "readOnly": true,
            "example": "sr_123abc"
          },
          "parent_support_key": {
            "type": "string",
            "description": "A key to reference for the porting order group when contacting Telnyx customer support. This information is not available for porting orders in `draft` state",
            "readOnly": true,
            "example": "pr_123abc"
          },
          "porting_phone_numbers_count": {
            "type": "integer",
            "description": "Count of phone numbers associated with this porting order",
            "readOnly": true,
            "example": 1
          },
          "old_service_provider_ocn": {
            "type": "string",
            "description": "Identifies the old service provider",
            "readOnly": true,
            "example": "Unreal Communications"
          },
          "documents": {
            "$ref": "#/components/schemas/PortingOrderDocuments"
          },
          "misc": {
            "$ref": "#/components/schemas/PortingOrderMisc"
          },
          "end_user": {
            "$ref": "#/components/schemas/PortingOrderEndUser"
          },
          "activation_settings": {
            "$ref": "#/components/schemas/PortingOrderActivationSettings"
          },
          "phone_number_configuration": {
            "$ref": "#/components/schemas/PortingOrderPhoneNumberConfiguration"
          },
          "phone_number_type": {
            "enum": [
              "landline",
              "local",
              "mobile",
              "national",
              "shared_cost",
              "toll_free"
            ],
            "type": "string",
            "description": "The type of the phone number",
            "example": "local"
          },
          "description": {
            "type": "string",
            "description": "A description of the porting order",
            "readOnly": true,
            "example": "FP Telnyx"
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortingOrderRequirement"
            },
            "description": "List of documentation requirements for porting numbers. Can be set directly or via the `requirement_group_id` parameter."
          },
          "requirements_met": {
            "type": "boolean",
            "description": "Is true when the required documentation is met",
            "example": false
          },
          "user_feedback": {
            "$ref": "#/components/schemas/PortingOrderUserFeedback"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user (or organization) who requested the porting order",
            "format": "uuid",
            "example": "40d68ba2-0847-4df2-be9c-b0e0cb673e75"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/porting_webhooks"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_order"
          },
          "messaging": {
            "$ref": "#/components/schemas/PortingOrderMessaging"
          }
        }
      },
      "PortingOrderActivationSettings": {
        "title": "PortingOrderActivationSettings",
        "type": "object",
        "properties": {
          "foc_datetime_requested": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time requested for the FOC date",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "foc_datetime_actual": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time of the FOC date",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "fast_port_eligible": {
            "type": "boolean",
            "description": "Indicates whether this porting order is eligible for FastPort",
            "readOnly": true,
            "example": true
          },
          "activation_status": {
            "$ref": "#/components/schemas/PortingOrderActivationStatus"
          }
        }
      },
      "PortingOrderActivationStatus": {
        "title": "PortingOrderActivationStatus",
        "enum": [
          "New",
          "Pending",
          "Conflict",
          "Cancel Pending",
          "Failed",
          "Concurred",
          "Activate RDY",
          "Disconnect Pending",
          "Concurrence Sent",
          "Old",
          "Sending",
          "Active",
          "Cancelled"
        ],
        "type": "string",
        "description": "Activation status",
        "example": "Active"
      },
      "PortingOrderDocuments": {
        "title": "PortingOrderDocuments",
        "type": "object",
        "properties": {
          "loa": {
            "type": "string",
            "description": "Returned ID of the submitted LOA via the Documents endpoint",
            "format": "uuid",
            "example": "64ffb720-04c7-455b-92d6-20fcca92e935"
          },
          "invoice": {
            "type": "string",
            "description": "Returned ID of the submitted Invoice via the Documents endpoint",
            "format": "uuid",
            "example": "ce74b771-d23d-4960-81ec-8741b3862146"
          }
        },
        "description": "Can be specified directly or via the `requirement_group_id` parameter."
      },
      "PortingOrderEndUser": {
        "title": "PortingOrderEndUser",
        "type": "object",
        "properties": {
          "admin": {
            "$ref": "#/components/schemas/PortingOrderEndUserAdmin"
          },
          "location": {
            "$ref": "#/components/schemas/PortingOrderEndUserLocation"
          }
        }
      },
      "PortingOrderEndUserAdmin": {
        "title": "PortingOrderEndUserAdmin",
        "type": "object",
        "properties": {
          "entity_name": {
            "type": "string",
            "description": "Person Name or Company name requesting the port",
            "example": "Porter McPortersen"
          },
          "auth_person_name": {
            "type": "string",
            "description": "Name of person authorizing the porting order",
            "example": "Porter McPortersen II"
          },
          "billing_phone_number": {
            "type": "string",
            "description": "Billing phone number associated with these phone numbers",
            "example": "13035551234"
          },
          "account_number": {
            "type": "string",
            "description": "The authorized person's account number with the current service provider",
            "example": "123abc"
          },
          "tax_identifier": {
            "type": "string",
            "description": "European tax identification number. Applicable only in the European Union",
            "example": "1234abcd"
          },
          "pin_passcode": {
            "type": "string",
            "description": "PIN/passcode possibly required by the old service provider for extra verification",
            "example": "1234"
          },
          "business_identifier": {
            "type": "string",
            "description": "European business identification number. Applicable only in the European Union",
            "example": "abc123"
          }
        }
      },
      "PortingOrderEndUserLocation": {
        "title": "PortingOrderEndUserLocation",
        "type": "object",
        "properties": {
          "street_address": {
            "type": "string",
            "description": "First line of billing address",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Second line of billing address",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "City or municipality of billing address",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "State, province, or similar of billing address",
            "example": "TX"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal Code of billing address",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "ISO3166-1 alpha-2 country code of billing address",
            "example": "US"
          }
        }
      },
      "PortingOrderMessaging": {
        "title": "PortingOrderMessaging",
        "type": "object",
        "properties": {
          "messaging_capable": {
            "type": "boolean",
            "description": "Indicates whether the porting order can also port messaging capabilities.",
            "example": true
          },
          "enable_messaging": {
            "type": "boolean",
            "description": "Indicates whether Telnyx will port messaging capabilities from the losing carrier. If false, any messaging capabilities will stay with their current provider.",
            "example": true
          },
          "messaging_port_status": {
            "enum": [
              "not_applicable",
              "pending",
              "activating",
              "exception",
              "canceled",
              "partial_port_complete",
              "ported"
            ],
            "type": "string",
            "description": "The current status of the messaging porting.",
            "example": "pending"
          },
          "messaging_port_completed": {
            "type": "boolean",
            "description": "Indicates whether the messaging porting has been completed.",
            "example": false
          }
        },
        "description": "Information about messaging porting process."
      },
      "PortingOrderMisc": {
        "title": "PortingOrderMisc",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PortingOrderType"
          },
          "remaining_numbers_action": {
            "enum": [
              "keep",
              "disconnect"
            ],
            "type": "string",
            "description": "Remaining numbers can be either kept with their current service provider or disconnected. 'new_billing_telephone_number' is required when 'remaining_numbers_action' is 'keep'.",
            "example": "disconnect"
          },
          "new_billing_phone_number": {
            "type": "string",
            "description": "New billing phone number for the remaining numbers. Used in case the current billing phone number is being ported to Telnyx. This will be set on your account with your current service provider and should be one of the numbers remaining on that account."
          }
        }
      },
      "PortingOrderPhoneNumberConfiguration": {
        "title": "PortingOrderPhoneNumberConfiguration",
        "type": "object",
        "properties": {
          "billing_group_id": {
            "type": "string",
            "description": "identifies the billing group to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "connection_id": {
            "type": "string",
            "description": "identifies the connection to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "identifies the messaging profile to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f901"
          },
          "emergency_address_id": {
            "type": "string",
            "description": "identifies the emergency address to set on the numbers when ported",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Tag to set on the numbers when ported"
            }
          }
        }
      },
      "PortingOrderRequirement": {
        "title": "PortingOrderRequirement",
        "type": "object",
        "properties": {
          "field_type": {
            "enum": [
              "document"
            ],
            "type": "string",
            "description": "Type of value expected on field_value field",
            "example": "document"
          },
          "field_value": {
            "type": "string",
            "description": "identifies the document that satisfies this requirement",
            "example": "9787fb5f-cbe5-4de4-b765-3303774ee9fe"
          },
          "requirement_type_id": {
            "type": "string",
            "description": "Identifies the requirement type that meets this requirement",
            "example": "59b0762a-b274-4f76-ac32-4d5cf0272e66"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "porting_requirement"
          }
        }
      },
      "PortingOrderRequirementDetail": {
        "title": "PortingOrderRequirementDetail",
        "type": "object",
        "properties": {
          "field_type": {
            "enum": [
              "document",
              "textual"
            ],
            "type": "string",
            "description": "Type of value expected on field_value field",
            "example": "document"
          },
          "field_value": {
            "type": "string",
            "description": "Identifies the document that satisfies this requirement",
            "example": "9787fb5f-cbe5-4de4-b765-3303774ee9fe"
          },
          "requirement_type": {
            "type": "object",
            "properties": {
              "acceptance_criteria": {
                "type": "object",
                "description": "The acceptance criteria for the requirement type",
                "example": {
                  "acceptable_values": [ ]
                }
              },
              "description": {
                "type": "string",
                "description": "A description of the requirement type",
                "example": "A copy of the latest phone bill from the current provider"
              },
              "example": {
                "type": "string",
                "description": "An example of the requirement type",
                "example": "Most recent phone bill"
              },
              "id": {
                "type": "string",
                "description": "Identifies the requirement type",
                "example": "53970723-fbff-4f46-a975-f62be6c1a585"
              },
              "name": {
                "type": "string",
                "description": "The name of the requirement type",
                "example": "Latest Invoice"
              },
              "type": {
                "type": "string",
                "description": "The type of the requirement type",
                "example": "document"
              }
            },
            "description": "Identifies the requirement type that meets this requirement"
          },
          "requirement_status": {
            "type": "string",
            "description": "Status of the requirement",
            "example": "approved"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "porting_requirement"
          }
        }
      },
      "PortingOrderSharingToken": {
        "title": "PortingOrderSharingToken",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this sharing token",
            "format": "uuid",
            "example": "0a4b78a0-d416-4761-94f7-46c72ec56547"
          },
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the porting order resource being shared",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "expires_in_seconds": {
            "minimum": 1,
            "type": "integer",
            "description": "The number of seconds until the sharing token expires",
            "example": 3600
          },
          "permissions": {
            "type": "array",
            "items": {
              "enum": [
                "porting_order.document.read",
                "porting_order.document.update"
              ],
              "type": "string"
            },
            "description": "The permissions granted to the sharing token"
          },
          "token": {
            "type": "string",
            "description": "A signed JWT token that can be used to access the shared resource",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODk4OTQ2NzcsImlzdCI6MTY4OTg5MTA3NywicGVybWlzc2lvbnMiOlsicG9ydGluZ19vcmRlci5kb2N1bWVudC5yZWFkIl0sInBvcnRpbmdfb3JkZXJfaWQiOiJmZDRiODZjOC00OTdkLTRjNmQtOTYwOS1hNzg5ZTRlMTRjZmUifQ.CT0HRF6OLj7VPZ8p5Y_0S8rOL8SEUznwJJkR-YReKwc"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the sharing token expires.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_order_sharing_token"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingOrderStatus": {
        "title": "PortingOrderStatus",
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortingOrdersExceptionType"
            },
            "description": "A list of 0 or more details about this porting order's status"
          },
          "value": {
            "$ref": "#/components/schemas/PortingOrderStatus_value"
          }
        },
        "description": "Porting order status"
      },
      "PortingOrderType": {
        "title": "PortingOrderType",
        "enum": [
          "full",
          "partial"
        ],
        "type": "string",
        "description": "A port can be either 'full' or 'partial'. When type is 'full' the other attributes should be omitted.",
        "example": "full"
      },
      "PortingOrderUserFeedback": {
        "title": "PortingOrderUserFeedback",
        "type": "object",
        "properties": {
          "user_rating": {
            "type": "integer",
            "description": "Once an order is ported, cancellation is requested or the request is cancelled, the user may rate their experience",
            "example": 5
          },
          "user_comment": {
            "type": "string",
            "description": "A comment related to the customer rating.",
            "example": "I loved my experience porting numbers with Telnyx"
          }
        }
      },
      "PortingOrdersActivationJob": {
        "title": "PortingOrdersActivationJob",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this activation job",
            "format": "uuid",
            "readOnly": true,
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "status": {
            "enum": [
              "created",
              "in-process",
              "completed",
              "failed"
            ],
            "type": "string",
            "description": "Specifies the status of this activation job"
          },
          "activation_type": {
            "enum": [
              "scheduled",
              "on-demand"
            ],
            "type": "string",
            "description": "Specifies the type of this activation job"
          },
          "activate_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the activation job should be executed. This time should be between some activation window.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "activation_windows": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_at": {
                  "type": "string",
                  "description": "ISO 8601 formatted date indicating when the activation window starts",
                  "format": "date-time",
                  "example": "2021-03-19T10:07:15.5270000+00:00"
                },
                "end_at": {
                  "type": "string",
                  "description": "ISO 8601 formatted date indicating when the activation window ends",
                  "format": "date-time",
                  "example": "2021-03-19T10:07:15.5270000+00:00"
                }
              }
            },
            "description": "List of allowed activation windows for this activation job"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_activation_job"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingOrdersAllowedFocWindow": {
        "title": "PortingOrdersAllowedFocWindow",
        "type": "object",
        "properties": {
          "started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating the start of the range of foc window.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating the end of the range of foc window",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_order"
          }
        }
      },
      "PortingOrdersComment": {
        "title": "PortingOrdersComment",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "body": {
            "type": "string",
            "description": "Body of comment",
            "example": "Great experience so far"
          },
          "porting_order_id": {
            "type": "string",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "user_type": {
            "enum": [
              "admin",
              "user",
              "system"
            ],
            "type": "string",
            "description": "Indicates whether this comment was created by a Telnyx Admin, user, or system",
            "example": "user"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user who created this comment",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "user_email": {
            "type": "string",
            "description": "The email address of the user who created this comment",
            "format": "email",
            "example": "user@example.com"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "porting_comment"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingOrdersExceptionType": {
        "title": "PortingOrdersExceptionType",
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "ACCOUNT_NUMBER_MISMATCH",
              "AUTH_PERSON_MISMATCH",
              "BTN_ATN_MISMATCH",
              "ENTITY_NAME_MISMATCH",
              "FOC_EXPIRED",
              "FOC_REJECTED",
              "LOCATION_MISMATCH",
              "LSR_PENDING",
              "MAIN_BTN_PORTING",
              "OSP_IRRESPONSIVE",
              "OTHER",
              "PASSCODE_PIN_INVALID",
              "PHONE_NUMBER_HAS_SPECIAL_FEATURE",
              "PHONE_NUMBER_MISMATCH",
              "PHONE_NUMBER_NOT_PORTABLE",
              "PORT_TYPE_INCORRECT",
              "PORTING_ORDER_SPLIT_REQUIRED",
              "POSTAL_CODE_MISMATCH",
              "RATE_CENTER_NOT_PORTABLE",
              "SV_CONFLICT",
              "SV_UNKNOWN_FAILURE"
            ],
            "type": "string",
            "description": "Identifier of an exception type",
            "example": "ENTITY_NAME_MISMATCH"
          },
          "description": {
            "type": "string",
            "description": "Description of an exception type",
            "example": "Entity name does not match that on the CSR"
          }
        }
      },
      "PortingPhoneNumber": {
        "title": "PortingPhoneNumber",
        "type": "object",
        "properties": {
          "porting_order_status": {
            "enum": [
              "draft",
              "in-process",
              "submitted",
              "exception",
              "foc-date-confirmed",
              "cancel-pending",
              "ported",
              "cancelled"
            ],
            "type": "string",
            "description": "The current status of the porting order",
            "example": "in-process"
          },
          "phone_number_type": {
            "enum": [
              "landline",
              "local",
              "mobile",
              "national",
              "shared_cost",
              "toll_free"
            ],
            "type": "string",
            "description": "The type of the phone number",
            "example": "local"
          },
          "phone_number": {
            "type": "string",
            "description": "E164 formatted phone number",
            "example": "13035550987"
          },
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the associated port request",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "support_key": {
            "type": "string",
            "description": "A key to reference this porting order when contacting Telnyx customer support",
            "example": "sr_a12345"
          },
          "activation_status": {
            "$ref": "#/components/schemas/PortingOrderActivationStatus"
          },
          "portability_status": {
            "$ref": "#/components/schemas/PortabilityStatus"
          },
          "requirements_status": {
            "enum": [
              "requirement-info-pending",
              "requirement-info-under-review",
              "requirement-info-exception",
              "approved"
            ],
            "type": "string",
            "description": "The current status of the requirements in a INTL porting order",
            "example": "approved"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_phone_number"
          }
        }
      },
      "PortingPhoneNumberBlock": {
        "title": "PortingPhoneNumberBlock",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this porting phone number block.",
            "format": "uuid",
            "readOnly": true,
            "example": "f24151b6-3389-41d3-8747-7dd8c681e5e2"
          },
          "country_code": {
            "type": "string",
            "description": "Specifies the country code for this porting phone number block. It is a two-letter ISO 3166-1 alpha-2 country code.",
            "example": "DE"
          },
          "phone_number_type": {
            "enum": [
              "landline",
              "local",
              "mobile",
              "national",
              "shared_cost",
              "toll_free"
            ],
            "type": "string",
            "description": "Specifies the phone number type for this porting phone number block.",
            "example": "local"
          },
          "phone_number_range": {
            "type": "object",
            "properties": {
              "start_at": {
                "pattern": "^\\+\\d{7,15}$",
                "type": "string",
                "description": "Specifies the start of the phone number range for this porting phone number block.",
                "example": "+4930244999901"
              },
              "end_at": {
                "pattern": "^\\+\\d{7,15}$",
                "type": "string",
                "description": "Specifies the end of the phone number range for this porting phone number block.",
                "example": "+4930244999910"
              }
            },
            "description": "Specifies the phone number range for this porting phone number block."
          },
          "activation_ranges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_at": {
                  "pattern": "^\\+\\d{7,15}$",
                  "type": "string",
                  "description": "Specifies the start of the activation range. Must be greater or equal the start of the phone number range.",
                  "example": "+4930244999901"
                },
                "end_at": {
                  "pattern": "^\\+\\d{7,15}$",
                  "type": "string",
                  "description": "Specifies the end of the activation range. It must be no more than the end of the phone number range.",
                  "example": "+4930244999910"
                }
              }
            },
            "description": "Specifies the activation ranges for this porting phone number block. The activation range must be within the phone number range and should not overlap with other activation ranges."
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_phone_number_block"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was last updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingPhoneNumberConfiguration": {
        "title": "PortingPhoneNumberConfiguration",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this phone number configuration",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "user_bundle_id": {
            "type": "string",
            "description": "Identifies the associated user bundle",
            "format": "uuid",
            "example": "daa4308e-742f-4867-97f2-3073db13319a"
          },
          "porting_phone_number_id": {
            "type": "string",
            "description": "Identifies the associated porting phone number",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_phone_number_configuration"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingPhoneNumberExtension": {
        "title": "PortingPhoneNumberExtension",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this porting phone number extension.",
            "format": "uuid",
            "readOnly": true,
            "example": "f24151b6-3389-41d3-8747-7dd8c681e5e2"
          },
          "porting_phone_number_id": {
            "type": "string",
            "description": "Identifies the porting phone number associated with this porting phone number extension.",
            "format": "uuid",
            "example": "f24151b6-3389-41d3-8747-7dd8c681e5e2"
          },
          "extension_range": {
            "type": "object",
            "properties": {
              "start_at": {
                "type": "integer",
                "description": "Specifies the start of the extension range for this porting phone number extension.",
                "example": 1
              },
              "end_at": {
                "type": "integer",
                "description": "Specifies the end of the extension range for this porting phone number extension.",
                "example": 10
              }
            },
            "description": "Specifies the extension range for this porting phone number extension."
          },
          "activation_ranges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_at": {
                  "type": "integer",
                  "description": "Specifies the start of the activation range. Must be greater or equal the start of the extension range.",
                  "example": 1
                },
                "end_at": {
                  "type": "integer",
                  "description": "Specifies the end of the activation range. It must be no more than the end of the extension range.",
                  "example": 10
                }
              }
            },
            "description": "Specifies the activation ranges for this porting phone number extension. The activation range must be within the extension range and should not overlap with other activation ranges."
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_phone_number_extension"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was last updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingReport": {
        "title": "PortingReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the report.",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "report_type": {
            "enum": [
              "export_porting_orders_csv"
            ],
            "type": "string",
            "description": "Identifies the type of report",
            "example": "export_porting_orders_csv"
          },
          "status": {
            "enum": [
              "pending",
              "completed"
            ],
            "type": "string",
            "description": "The current status of the report generation.",
            "example": "completed"
          },
          "params": { },
          "document_id": {
            "type": "string",
            "description": "Identifies the document that was uploaded when report was generated. This field is only populated when the report is under completed status.",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_report"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortingVerificationCode": {
        "title": "PortingVerificationCode",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies this porting verification code",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "phone_number": {
            "type": "string",
            "description": "E164 formatted phone number",
            "example": "+13035550987"
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates whether the verification code has been verified",
            "example": true
          },
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the associated porting order",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "porting_verification_code"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortoutComment": {
        "title": "PortoutComment",
        "required": [
          "id",
          "body",
          "user_id",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout"
          },
          "body": {
            "type": "string",
            "description": "Comment body",
            "example": "This is a comment"
          },
          "portout_id": {
            "type": "string",
            "description": "Identifies the associated port request",
            "default": null,
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user who created the comment. Will be null if created by Telnyx Admin",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "created_at": {
            "type": "string",
            "description": "Comment creation timestamp in ISO 8601 format",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "record_type": "portout",
          "body": "This is a comment",
          "portout_id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "user_id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "created_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "PortoutDetails": {
        "title": "PortoutDetails",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "E164 formatted phone number"
            },
            "description": "Phone numbers associated with this portout"
          },
          "authorized_name": {
            "type": "string",
            "description": "Name of person authorizing the porting order",
            "example": "McPortersen"
          },
          "carrier_name": {
            "type": "string",
            "description": "Carrier the number will be ported out to",
            "example": "test"
          },
          "current_carrier": {
            "type": "string",
            "description": "The current carrier",
            "example": "telnyx"
          },
          "end_user_name": {
            "type": "string",
            "description": "Person name or company name requesting the port",
            "example": "McPortersen"
          },
          "city": {
            "type": "string",
            "description": "City or municipality of billing address",
            "example": "Chicago"
          },
          "state": {
            "type": "string",
            "description": "State, province, or similar of billing address",
            "example": "IL"
          },
          "zip": {
            "type": "string",
            "description": "Postal Code of billing address",
            "example": "00000"
          },
          "lsr": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "A link to the Local Service Request",
              "format": "uri"
            },
            "description": "The Local Service Request"
          },
          "pon": {
            "type": "string",
            "description": "Port order number assigned by the carrier the number will be ported out to",
            "example": "00000000"
          },
          "reason": {
            "type": "string",
            "description": "The reason why the order is being rejected by the user. If the order is authorized, this field can be left null",
            "example": null
          },
          "rejection_code": {
            "type": "integer",
            "description": "The rejection code for one of the valid rejections to reject a port out order",
            "example": 1002
          },
          "service_address": {
            "type": "string",
            "description": "First line of billing address (street address)",
            "example": "000 Example Street"
          },
          "foc_date": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time of the FOC date",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "requested_foc_date": {
            "type": "string",
            "description": "ISO 8601 formatted Date/Time of the user requested FOC date",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "spid": {
            "type": "string",
            "description": "New service provider spid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "support_key": {
            "type": "string",
            "description": "A key to reference this port out request when contacting Telnyx customer support",
            "example": "PO_764725"
          },
          "status": {
            "enum": [
              "pending",
              "authorized",
              "ported",
              "rejected",
              "rejected-pending",
              "canceled"
            ],
            "type": "string",
            "description": "Status of portout request",
            "example": "rejected"
          },
          "already_ported": {
            "type": "boolean",
            "description": "Is true when the number is already ported",
            "example": false
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user (or organization) who requested the port out",
            "format": "uuid",
            "example": "7865816a-ee85-4e50-b19e-52983dcc6d4a"
          },
          "vendor": {
            "type": "string",
            "description": "Telnyx partner providing network coverage",
            "format": "uuid",
            "example": "0e66ed3b-37e6-4fed-93d6-a30ce2493661"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the portout was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "inserted_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the portout was created",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the portout was last updated",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "PortoutEvent": {
        "title": "PortoutEvent",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the event.",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "event_type": {
            "enum": [
              "portout.status_changed",
              "portout.foc_date_changed",
              "portout.new_comment"
            ],
            "type": "string",
            "description": "Identifies the event type",
            "example": "portout.status_changed"
          },
          "portout_id": {
            "type": "string",
            "description": "Identifies the port-out order associated with the event.",
            "format": "uuid",
            "example": "9471c873-e3eb-4ca1-957d-f9a451334d52"
          },
          "available_notification_methods": {
            "type": "array",
            "items": {
              "enum": [
                "email",
                "webhook"
              ],
              "type": "string"
            },
            "description": "Indicates the notification methods used."
          },
          "payload_status": {
            "enum": [
              "created",
              "completed"
            ],
            "type": "string",
            "description": "The status of the payload generation.",
            "example": "created"
          },
          "payload": { },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout_event"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PortoutRejection": {
        "title": "PortoutRejection",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "example": 1002
          },
          "description": {
            "type": "string",
            "example": "Invalid PIN"
          },
          "reason_required": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "PortoutReport": {
        "title": "PortoutReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the report.",
            "format": "uuid",
            "example": "eef3340b-8903-4466-b445-89b697315a3a"
          },
          "report_type": {
            "enum": [
              "export_portouts_csv"
            ],
            "type": "string",
            "description": "Identifies the type of report",
            "example": "export_portouts_csv"
          },
          "status": {
            "enum": [
              "pending",
              "completed"
            ],
            "type": "string",
            "description": "The current status of the report generation.",
            "example": "completed"
          },
          "params": { },
          "document_id": {
            "type": "string",
            "description": "Identifies the document that was uploaded when report was generated. This field is only populated when the report is under completed status.",
            "format": "uuid",
            "example": "f1486bae-f067-460c-ad43-73a92848f902"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "portout_report"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        }
      },
      "PresignedObjectUrl": {
        "title": "PresignedObjectUrl",
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "The token for the object"
              },
              "presigned_url": {
                "type": "string",
                "description": "The presigned URL for the object"
              },
              "expires_at": {
                "type": "string",
                "description": "The expiration time of the token",
                "format": "date-time"
              }
            }
          }
        }
      },
      "PresignedObjectUrlParams": {
        "title": "PresignedObjectUrlParams",
        "type": "object",
        "properties": {
          "ttl": {
            "maximum": 604800,
            "minimum": 1,
            "type": "integer",
            "description": "The time to live of the token in seconds"
          }
        }
      },
      "PrivacySettings": {
        "title": "PrivacySettings",
        "type": "object",
        "properties": {
          "data_retention": {
            "type": "boolean",
            "description": "If true, conversation history and insights will be stored. If false, they will not be stored. This in‑tool toggle governs solely the retention of conversation history and insights via the AI assistant. It has no effect on any separate recording, transcription, or storage configuration that you have set at the account, number, or application level. All such external settings remain in force regardless of your selection here."
          }
        }
      },
      "PrivateWirelessGateway": {
        "title": "PrivateWirelessGateway",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "network_id": {
            "type": "string",
            "description": "The identification of the related network resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "private_wireless_gateway"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "name": {
            "type": "string",
            "description": "The private wireless gateway name.",
            "example": "My private wireless gateway"
          },
          "region_code": {
            "type": "string",
            "description": "The name of the region where the Private Wireless Gateway is deployed.",
            "default": null,
            "example": "dc2"
          },
          "status": {
            "$ref": "#/components/schemas/PrivateWirelessGatewayStatus"
          },
          "ip_range": {
            "type": "string",
            "description": "IP block used to assign IPs to the SIM cards in the Private Wireless Gateway.",
            "default": null,
            "readOnly": true,
            "example": "100.64.1.0/24"
          },
          "assigned_resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PWGAssignedResourcesSummary"
            },
            "description": "A list of the resources that have been assigned to the Private Wireless Gateway."
          }
        }
      },
      "PrivateWirelessGatewayStatus": {
        "title": "PrivateWirelessGatewayStatus",
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PrivateWirelessGatewayStatus_value"
          },
          "error_description": {
            "type": "string",
            "description": "This attribute provides a human-readable explanation of why a failure happened.",
            "default": null,
            "readOnly": true,
            "example": null
          },
          "error_code": {
            "type": "string",
            "description": "This attribute is an [error code](https://developers.telnyx.com/api/errors) related to the failure reason.",
            "default": null,
            "readOnly": true,
            "example": null
          }
        },
        "description": "The current status or failure details of the Private Wireless Gateway."
      },
      "ProfileAssignmentPhoneNumbers": {
        "title": "ProfileAssignmentPhoneNumbers",
        "required": [
          "taskId",
          "phoneNumber",
          "status"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "title": "Taskid",
            "type": "string",
            "description": "The ID of the task associated with the phone number.",
            "example": "667a80f8-b0a9-49d0-b9ab-a7a1bcc45086"
          },
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string",
            "description": "The phone number that the status is being checked for.",
            "example": "+12024567890"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "The status of the associated phone number assignment.",
            "example": "pending"
          }
        }
      },
      "PublicInternetGateway": {
        "title": "PublicInternetGateway",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "$ref": "#/components/schemas/Interface"
          },
          {
            "title": "PublicInternetGateway",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "public_internet_gateway"
              },
              "public_ip": {
                "type": "string",
                "description": "The publically accessible ip for this interface.",
                "readOnly": true,
                "example": "127.0.0.1"
              }
            }
          }
        ]
      },
      "PublicInternetGatewayCreate": {
        "title": "PublicInternetGatewayCreate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicInternetGateway"
          },
          {
            "$ref": "#/components/schemas/RegionIn"
          },
          {
            "title": "PublicInternetGatewayCreate",
            "required": [
              "network_id",
              "region"
            ],
            "type": "object"
          }
        ]
      },
      "PublicInternetGatewayRead": {
        "title": "PublicInternetGatewayRead",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicInternetGateway"
          },
          {
            "$ref": "#/components/schemas/RegionOut"
          }
        ]
      },
      "PublicTextClusteringRequest": {
        "title": "PublicTextClusteringRequest",
        "required": [
          "bucket"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "The embedded storage bucket to compute the clusters from. The bucket must already be [embedded](https://developers.telnyx.com/api/inference/inference-embedding/post-embedding)."
          },
          "prefix": {
            "type": "string",
            "description": "Prefix to filter whcih files in the buckets are included."
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of files to filter which are included."
          },
          "min_cluster_size": {
            "type": "integer",
            "description": "Smallest number of related text chunks to qualify as a cluster. Top-level clusters should be thought of as identifying broad themes in your data.",
            "default": 25
          },
          "min_subcluster_size": {
            "type": "integer",
            "description": "Smallest number of related text chunks to qualify as a sub-cluster. Sub-clusters should be thought of as identifying more specific topics within a broader theme.",
            "default": 5
          }
        }
      },
      "PushCredential": {
        "title": "Successful response with details about a push credential",
        "required": [
          "id",
          "certificate",
          "private_key",
          "project_account_json_file",
          "alias",
          "type",
          "record_type",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of a push credential",
            "example": "0ccc7b54-4df3-4bcb-a65a-3da1ecc997d7"
          },
          "certificate": {
            "type": "string",
            "description": "Apple certificate for sending push notifications. For iOS only",
            "example": "-----BEGIN CERTIFICATE----- MIIGVDCCBTKCAQEAsNlRJVZn9ZvXcECQm65czs... -----END CERTIFICATE-----"
          },
          "private_key": {
            "type": "string",
            "description": "Apple private key for a given certificate for sending push notifications. For iOS only",
            "example": "-----BEGIN RSA PRIVATE KEY----- MIIEpQIBAAKCAQEAsNlRJVZn9ZvXcECQm65czs... -----END RSA PRIVATE KEY-----"
          },
          "project_account_json_file": {
            "type": "object",
            "description": "Google server key for sending push notifications. For Android only",
            "example": {
              "private_key": "BBBB0J56jd8kda:APA91vjb11BCjvxx3Jxja...",
              "client_email": "account@customer.org"
            }
          },
          "alias": {
            "type": "string",
            "description": "Alias to uniquely identify a credential",
            "example": "LucyCredential"
          },
          "type": {
            "type": "string",
            "description": "Type of mobile push credential. Either <code>ios</code> or <code>android</code>",
            "example": "ios"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "push_credential"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room was created",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          }
        }
      },
      "PushCredentialResponse": {
        "title": "PushCredentialResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PushCredential"
          }
        },
        "description": "Success response with details about a push credential"
      },
      "Quality": {
        "title": "Quality",
        "enum": [
          "normal",
          "high",
          "very_high",
          "ultra_light",
          "ultra_dark"
        ],
        "type": "string",
        "description": "The quality of the fax. The `ultra` settings provides the highest quality available, but also present longer fax processing times. `ultra_light` is best suited for images, wihle `ultra_dark` is best suited for text.",
        "default": "high",
        "example": "high"
      },
      "Queue": {
        "title": "Queue",
        "required": [
          "record_type",
          "id",
          "name",
          "current_size",
          "max_size",
          "average_wait_time_secs",
          "created_at",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "queue"
            ],
            "type": "string",
            "example": "queue"
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the queue",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the queue",
            "example": "support"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was created",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the queue was last updated",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "current_size": {
            "type": "integer",
            "description": "The number of calls currently in the queue",
            "example": 20
          },
          "max_size": {
            "type": "integer",
            "description": "The maximum number of calls allowed in the queue",
            "example": 50
          },
          "average_wait_time_secs": {
            "type": "integer",
            "description": "The average time that the calls currently in the queue have spent waiting, given in seconds.",
            "example": 175
          }
        },
        "example": {
          "record_type": "queue",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "support",
          "created_at": "2019-01-23T18:10:02.574Z",
          "updated_at": "2019-01-23T18:10:02.574Z",
          "current_size": 20,
          "max_size": 50,
          "average_wait_time_secs": 175
        }
      },
      "QueueCall": {
        "title": "QueueCall",
        "required": [
          "call_control_id",
          "call_leg_id",
          "call_session_id",
          "is_alive",
          "record_type",
          "connection_id",
          "from",
          "to",
          "enqueued_at",
          "wait_time_secs",
          "queue_position",
          "queue_id"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "queue_call"
            ],
            "type": "string",
            "example": "queue_call"
          },
          "call_session_id": {
            "type": "string",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call",
            "example": "428c31b6-7af4-4bcb-b68e-5013ef9657c1"
          },
          "call_leg_id": {
            "type": "string",
            "description": "ID that is unique to the call and can be used to correlate webhook events",
            "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
          },
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call.",
            "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
          },
          "connection_id": {
            "type": "string",
            "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
            "example": "7267xxxxxxxxxxxxxx"
          },
          "from": {
            "type": "string",
            "description": "Number or SIP URI placing the call.",
            "example": "+35319605860"
          },
          "to": {
            "type": "string",
            "description": "Destination number or SIP URI of the call.",
            "example": "+13129457420"
          },
          "enqueued_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the call was put in the queue",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "wait_time_secs": {
            "type": "integer",
            "description": "The time the call has been waiting in the queue, given in seconds",
            "example": 272
          },
          "queue_position": {
            "type": "integer",
            "description": "Current position of the call in the queue",
            "example": 3
          },
          "queue_id": {
            "type": "string",
            "description": "Unique identifier of the queue the call is in.",
            "example": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
          }
        },
        "example": {
          "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
          "call_leg_id": "2dc6fc34-f9e0-11ea-b68e-02420a0f7768",
          "call_session_id": "2dc1b3c8-f9e0-11ea-bc5a-02420a0f7768",
          "record_type": "queue_call",
          "connection_id": "7267xxxxxxxxxxxxxx",
          "from": "+18005550101",
          "to": "+18005550102",
          "enqueued_at": "2019-01-23T18:10:02.574Z",
          "wait_time_secs": 145,
          "queue_position": 3,
          "queue_id": "ae1626cc-6f42-11ea-becd-02420a0f8b69"
        }
      },
      "RCSAction": {
        "title": "RCSAction",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text that is shown in the suggested action. Maximum 25 characters.",
            "example": "Hello world"
          },
          "postback_data": {
            "type": "string",
            "description": "Payload (base64 encoded) that will be sent to the agent in the user event that results when the user taps the suggested action. Maximum 2048 characters."
          },
          "fallback_url": {
            "type": "string",
            "description": "Fallback URL to use if a client doesn't support a suggested action. Fallback URLs open in new browser windows. Maximum 2048 characters.",
            "format": "url"
          },
          "dial_action": {
            "$ref": "#/components/schemas/RCSDialAction"
          },
          "view_location_action": {
            "$ref": "#/components/schemas/RCSViewLocationAction"
          },
          "create_calendar_event_action": {
            "$ref": "#/components/schemas/RCSCreateCalendarEventAction"
          },
          "open_url_action": {
            "$ref": "#/components/schemas/RCSOpenUrlAction"
          },
          "share_location_action": {
            "$ref": "#/components/schemas/RCSShareLocationAction"
          },
          "compose_action": {
            "$ref": "#/components/schemas/RCSComposeAction"
          }
        },
        "description": "When tapped, initiates the corresponding native action on the device."
      },
      "RCSAgent": {
        "title": "RCSAgent",
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "RCS Agent ID",
            "example": "TestAgent"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with the RCS Agent",
            "example": "2ecf295b-36c6-4d43-ad05-71eb1e560518"
          },
          "profile_id": {
            "type": "string",
            "description": "Messaging profile ID associated with the RCS Agent",
            "format": "uuid",
            "nullable": true,
            "example": "4001932a-b8a3-42fc-9389-021be6388909"
          },
          "webhook_url": {
            "type": "string",
            "description": "URL to receive RCS events",
            "format": "url",
            "nullable": true,
            "example": "http://example.com"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "Failover URL to receive RCS events",
            "format": "url",
            "nullable": true,
            "example": "http://example.com"
          },
          "agent_name": {
            "type": "string",
            "description": "Human readable agent name",
            "example": "Test Agent"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the agent is enabled",
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the resource was created",
            "format": "date-time",
            "example": "2024-01-01T12:00:00.0000000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the resource was updated",
            "format": "date-time",
            "example": "2024-01-01T12:00:00.0000000+00:00"
          }
        }
      },
      "RCSAgentMessage": {
        "title": "RCSAgentMessage",
        "type": "object",
        "properties": {
          "content_message": {
            "$ref": "#/components/schemas/RCSContentMessage"
          },
          "event": {
            "$ref": "#/components/schemas/RCSEvent"
          },
          "expire_time": {
            "type": "string",
            "description": "Timestamp in UTC of when this message is considered expired",
            "format": "date-time",
            "example": "2024-10-02T15:01:23.0000000+00:00"
          },
          "ttl": {
            "type": "string",
            "description": "Duration in seconds ending with 's'",
            "example": "10.5s"
          }
        }
      },
      "RCSAgentResponse": {
        "title": "RCSAgentResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RCSAgent"
          }
        }
      },
      "RCSAgentUpdate": {
        "title": "RCSAgentUpdate",
        "type": "object",
        "properties": {
          "profile_id": {
            "type": "string",
            "description": "Messaging profile ID associated with the RCS Agent",
            "format": "uuid",
            "nullable": true,
            "example": "4001932a-b8a3-42fc-9389-021be6388909"
          },
          "webhook_url": {
            "type": "string",
            "description": "URL to receive RCS events",
            "format": "url",
            "nullable": true,
            "example": "http://example.com"
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "Failover URL to receive RCS events",
            "format": "url",
            "nullable": true,
            "example": "http://example.com"
          },
          "agent_name": {
            "type": "string",
            "description": "Human readable agent name",
            "example": "Test Agent"
          }
        }
      },
      "RCSAgentsResponse": {
        "title": "RCSAgentsResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCSAgent"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "RCSCardContent": {
        "title": "RCSCardContent",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the card (at most 200 characters)",
            "example": "Elephant"
          },
          "description": {
            "type": "string",
            "description": "Description of the card (at most 2000 characters)"
          },
          "media": {
            "$ref": "#/components/schemas/RCSMedia"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCSSuggestion"
            },
            "description": "List of suggestions to include in the card. Maximum 10 suggestions."
          }
        }
      },
      "RCSCarouselCard": {
        "title": "RCSCarouselCard",
        "required": [
          "card_width",
          "card_contents"
        ],
        "type": "object",
        "properties": {
          "card_width": {
            "enum": [
              "CARD_WIDTH_UNSPECIFIED",
              "SMALL",
              "MEDIUM"
            ],
            "type": "string",
            "description": "The width of the cards in the carousel.",
            "example": "SMALL"
          },
          "card_contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCSCardContent"
            },
            "description": "The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards."
          }
        },
        "description": "Carousel of cards."
      },
      "RCSComposeAction": {
        "title": "RCSComposeAction",
        "type": "object",
        "properties": {
          "compose_text_message": {
            "$ref": "#/components/schemas/RCSComposeTextMessage"
          },
          "compose_recording_message": {
            "$ref": "#/components/schemas/RCSComposeRecordingMessage"
          }
        },
        "description": "Compose and send a message to a destination predefined by chatbot."
      },
      "RCSComposeRecordingMessage": {
        "title": "RCSComposeRecordingMessage",
        "required": [
          "phone_number",
          "type"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "phone number in +E.164 format",
            "example": "+13125551234"
          },
          "type": {
            "enum": [
              "COMPOSE_RECORDING_ACTION_TYPE_UNSPECIFIED",
              "ACTION_TYPE_AUDIO",
              "ACTION_TYPE_VIDEO"
            ],
            "type": "string",
            "description": "The type of the recording action."
          }
        },
        "description": "Initiate the recording and sending of an audio or video message."
      },
      "RCSComposeTextMessage": {
        "title": "RCSComposeTextMessage",
        "required": [
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "phone number in +E.164 format",
            "example": "+13125551234"
          },
          "text": {
            "type": "string",
            "description": "Draft to go into the send message text field."
          }
        },
        "description": "Compose and send a text message."
      },
      "RCSContentInfo": {
        "title": "RCSContentInfo",
        "required": [
          "file_url"
        ],
        "type": "object",
        "properties": {
          "file_url": {
            "type": "string",
            "description": "Publicly reachable URL of the file.",
            "format": "url",
            "example": "https://example.com/elephant.jpg"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "Publicly reachable URL of the thumbnail. Maximum size of 100 kB.",
            "format": "url"
          },
          "force_refresh": {
            "type": "boolean",
            "description": "If set the URL content will not be cached."
          }
        }
      },
      "RCSContentMessage": {
        "title": "RCSContentMessage",
        "type": "object",
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RCSSuggestion"
            },
            "description": "List of suggested actions and replies"
          },
          "text": {
            "type": "string",
            "description": "Text (maximum 3072 characters)",
            "example": "Hello world!"
          },
          "rich_card": {
            "$ref": "#/components/schemas/RCSRichCard"
          },
          "content_info": {
            "$ref": "#/components/schemas/RCSContentInfo"
          }
        }
      },
      "RCSCreateCalendarEventAction": {
        "title": "RCSCreateCalendarEventAction",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-02T15:01:23.0000000+00:00"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "example": "2024-10-02T15:02:31.0000000+00:00"
          },
          "title": {
            "type": "string",
            "description": "Event title. Maximum 100 characters."
          },
          "description": {
            "type": "string",
            "description": "Event description. Maximum 500 characters."
          }
        },
        "description": "Opens the user's default calendar app and starts the new calendar event flow with the agent-specified event data pre-filled."
      },
      "RCSDialAction": {
        "title": "RCSDialAction",
        "required": [
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "Phone number in +E.164 format",
            "example": "+13125551234"
          }
        },
        "description": "Opens the user's default dialer app with the agent-specified phone number filled in."
      },
      "RCSEvent": {
        "title": "RCSEvent",
        "type": "object",
        "properties": {
          "event_type": {
            "enum": [
              "TYPE_UNSPECIFIED",
              "IS_TYPING",
              "READ"
            ],
            "type": "string",
            "example": "IS_TYPING"
          }
        },
        "description": "RCS Event to send to the recipient"
      },
      "RCSFrom": {
        "title": "RCSFrom",
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "agent ID",
            "example": "Agent007"
          },
          "carrier": {
            "type": "string",
            "example": "Telnyx"
          },
          "agent_name": {
            "type": "string",
            "example": "Test Agent"
          }
        }
      },
      "RCSLatLng": {
        "title": "RCSLatLng",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "example": 41.8
          },
          "longitude": {
            "type": "number",
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "example": -87.6
          }
        }
      },
      "RCSMedia": {
        "title": "RCSMedia",
        "type": "object",
        "properties": {
          "height": {
            "enum": [
              "HEIGHT_UNSPECIFIED",
              "SHORT",
              "MEDIUM",
              "TALL"
            ],
            "type": "string",
            "description": "The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored.",
            "example": "MEDIUM"
          },
          "content_info": {
            "$ref": "#/components/schemas/RCSContentInfo"
          }
        },
        "description": "A media file within a rich card."
      },
      "RCSMessage": {
        "title": "RCSMessage",
        "required": [
          "agent_id",
          "to",
          "messaging_profile_id",
          "agent_message"
        ],
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "RCS Agent ID",
            "example": "Agent007"
          },
          "to": {
            "type": "string",
            "description": "Phone number in +E.164 format",
            "example": "+13125551234"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "A valid messaging profile ID"
          },
          "type": {
            "enum": [
              "RCS"
            ],
            "type": "string",
            "description": "Message type - must be set to \"RCS\"",
            "example": "RCS"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this message will be sent.",
            "format": "url"
          },
          "agent_message": {
            "$ref": "#/components/schemas/RCSAgentMessage"
          },
          "sms_fallback": {
            "$ref": "#/components/schemas/SMSFallback"
          },
          "mms_fallback": {
            "$ref": "#/components/schemas/MMSFallback"
          }
        }
      },
      "RCSOpenUrlAction": {
        "title": "RCSOpenUrlAction",
        "required": [
          "url",
          "application",
          "webview_view_mode"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "example": "http://example.com"
          },
          "application": {
            "enum": [
              "OPEN_URL_APPLICATION_UNSPECIFIED",
              "BROWSER",
              "WEBVIEW"
            ],
            "type": "string",
            "description": "URL open application, browser or webview.",
            "example": "BROWSER"
          },
          "webview_view_mode": {
            "enum": [
              "WEBVIEW_VIEW_MODE_UNSPECIFIED",
              "FULL",
              "HALF",
              "TALL"
            ],
            "type": "string",
            "example": "HALF"
          },
          "description": {
            "type": "string",
            "description": "Accessbility description for webview."
          }
        },
        "description": "Opens the user's default web browser app to the specified URL."
      },
      "RCSReply": {
        "title": "RCSReply",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text that is shown in the suggested reply (maximum 25 characters)"
          },
          "postback_data": {
            "type": "string",
            "description": "Payload (base64 encoded) that will be sent to the agent in the user event that results when the user taps the suggested action. Maximum 2048 characters."
          }
        }
      },
      "RCSResponse": {
        "title": "RCSResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "example": "message"
              },
              "direction": {
                "type": "string",
                "example": "outbound"
              },
              "id": {
                "type": "string",
                "description": "message ID",
                "example": "4031938e-60e4-4235-a8dd-0b1c55a23e7a"
              },
              "type": {
                "type": "string",
                "example": "RCS"
              },
              "organization_id": {
                "type": "string",
                "example": "9f61d8e1-7687-4d6d-9cae-9ff682985983"
              },
              "messaging_profile_id": {
                "type": "string",
                "example": "4001781e-626f-4a41-a914-b1b682150f94"
              },
              "from": {
                "$ref": "#/components/schemas/RCSFrom"
              },
              "to": {
                "$ref": "#/components/schemas/RCSTo"
              },
              "body": {
                "$ref": "#/components/schemas/RCSAgentMessage"
              },
              "encoding": {
                "type": "string",
                "example": "utf-8"
              },
              "received_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "RCSRichCard": {
        "title": "RCSRichCard",
        "type": "object",
        "properties": {
          "carousel_card": {
            "$ref": "#/components/schemas/RCSCarouselCard"
          },
          "standalone_card": {
            "$ref": "#/components/schemas/RCSStandaloneCard"
          }
        }
      },
      "RCSShareLocationAction": {
        "title": "RCSShareLocationAction",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Opens the RCS app's location chooser so the user can pick a location to send back to the agent."
      },
      "RCSStandaloneCard": {
        "title": "RCSStandaloneCard",
        "required": [
          "card_orientation",
          "thumbnail_image_alignment",
          "card_content"
        ],
        "type": "object",
        "properties": {
          "card_orientation": {
            "enum": [
              "CARD_ORIENTATION_UNSPECIFIED",
              "HORIZONTAL",
              "VERTICAL"
            ],
            "type": "string",
            "description": "Orientation of the card.",
            "example": "HORIZONTAL"
          },
          "thumbnail_image_alignment": {
            "enum": [
              "THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED",
              "LEFT",
              "RIGHT"
            ],
            "type": "string",
            "description": "Image preview alignment for standalone cards with horizontal layout.",
            "example": "LEFT"
          },
          "card_content": {
            "$ref": "#/components/schemas/RCSCardContent"
          }
        },
        "description": "Standalone card"
      },
      "RCSSuggestion": {
        "title": "RCSSuggestion",
        "type": "object",
        "properties": {
          "reply": {
            "$ref": "#/components/schemas/RCSReply"
          },
          "action": {
            "$ref": "#/components/schemas/RCSAction"
          }
        }
      },
      "RCSTo": {
        "title": "RCSTo",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RCSToItem"
        }
      },
      "RCSToItem": {
        "title": "RCSToItem",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "example": "+13125551234"
          },
          "status": {
            "type": "string",
            "example": "queued"
          },
          "carrier": {
            "type": "string",
            "example": "Verizon Wireless"
          },
          "line_type": {
            "type": "string",
            "example": "Wireless"
          }
        }
      },
      "RCSViewLocationAction": {
        "title": "RCSViewLocationAction",
        "type": "object",
        "properties": {
          "lat_long": {
            "$ref": "#/components/schemas/RCSLatLng"
          },
          "label": {
            "type": "string",
            "description": "The label of the pin dropped"
          },
          "query": {
            "type": "string",
            "description": "query string (Android only)"
          }
        },
        "description": "Opens the user's default map app and selects the agent-specified location."
      },
      "Record": {
        "title": "Record",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sample_record_type"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "RecordType": {
        "title": "RecordType",
        "enum": [
          "custom_storage_credentials"
        ],
        "type": "string",
        "description": "Identifies record type."
      },
      "RecordingResponse": {
        "title": "RecordingResponse",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecordingResponseData"
          }
        }
      },
      "RecordingResponseData": {
        "title": "RecordingResponseData",
        "type": "object",
        "properties": {
          "call_control_id": {
            "type": "string",
            "description": "Unique identifier and token for controlling the call.",
            "example": "v3:e-31OnvjEM7Y4wvxr3TKNk8M3QyLcGZPiUIzCGtwQtOtEjY-B0urkw"
          },
          "call_leg_id": {
            "type": "string",
            "description": "ID unique to the call leg (used to correlate webhook events).",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69"
          },
          "call_session_id": {
            "type": "string",
            "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69"
          },
          "channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "When `dual`, the final audio file has the first leg on channel A, and the rest on channel B.",
            "example": "dual"
          },
          "conference_id": {
            "type": "string",
            "description": "Uniquely identifies the conference.",
            "example": "84a97d76-e40f-11ed-9074-02420a0daa69"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "download_urls": {
            "type": "object",
            "properties": {
              "mp3": {
                "type": "string",
                "description": "Link to download the recording in mp3 format."
              },
              "wav": {
                "type": "string",
                "description": "Link to download the recording in wav format."
              }
            },
            "description": "Links to download the recording files."
          },
          "duration_millis": {
            "type": "integer",
            "description": "The duration of the recording in milliseconds.",
            "format": "int32",
            "example": 60000
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "record_type": {
            "enum": [
              "recording"
            ],
            "type": "string",
            "example": "recording"
          },
          "recording_started_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording started.",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "recording_ended_at": {
            "type": "string",
            "description": "ISO 8601 formatted date of when the recording ended.",
            "example": "2019-01-23T18:10:02.574Z"
          },
          "source": {
            "enum": [
              "conference",
              "call"
            ],
            "type": "string",
            "description": "The kind of event that led to this recording being created.",
            "example": "conference"
          },
          "status": {
            "enum": [
              "completed"
            ],
            "type": "string",
            "description": "The status of the recording. Only `completed` recordings are currently supported.",
            "example": "completed"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "RecordingSource": {
        "title": "RecordingSource",
        "enum": [
          "StartCallRecordingAPI",
          "StartConferenceRecordingAPI",
          "OutboundAPI",
          "DialVerb",
          "Conference",
          "RecordVerb",
          "Trunking"
        ],
        "type": "string",
        "description": "Defines how the recording was created."
      },
      "FindNotificationsProfiles_200": {
        "title": "FindNotificationsProfiles_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationProfile"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "RecordingTrack": {
        "title": "RecordingTrack",
        "enum": [
          "inbound",
          "outbound",
          "both"
        ],
        "type": "string",
        "description": "The audio track to record for the call. The default is `both`.",
        "example": "inbound"
      },
      "RecordingTranscription": {
        "title": "RecordingTranscriptionsResponseData",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "duration_millis": {
            "type": "integer",
            "description": "The duration of the recording transcription in milliseconds.",
            "format": "int32",
            "example": 60000
          },
          "id": {
            "type": "string",
            "description": "Uniquely identifies the recording transcription.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "recording_id": {
            "type": "string",
            "description": "Uniquely identifies the recording associated with this transcription.",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "record_type": {
            "enum": [
              "recording_transcription"
            ],
            "type": "string",
            "example": "recording_transcription"
          },
          "status": {
            "enum": [
              "in-progress",
              "completed"
            ],
            "type": "string",
            "description": "The status of the recording transcription. Only `completed` has transcription text available.",
            "example": "completed"
          },
          "transcription_text": {
            "type": "string",
            "description": "The recording's transcribed text.",
            "example": "Good morning, how may I help you?"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "RecursiveCluster": {
        "title": "RecursiveCluster",
        "required": [
          "cluster_id",
          "cluster_summary",
          "total_number_of_nodes"
        ],
        "type": "object",
        "properties": {
          "cluster_id": {
            "type": "string"
          },
          "cluster_header": {
            "type": "string"
          },
          "cluster_summary": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterNode"
            }
          },
          "total_number_of_nodes": {
            "type": "integer"
          },
          "subclusters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecursiveCluster"
            }
          }
        }
      },
      "ReferRequest": {
        "title": "Refer request",
        "required": [
          "sip_address"
        ],
        "type": "object",
        "properties": {
          "sip_address": {
            "type": "string",
            "description": "The SIP URI to which the call will be referred to.",
            "example": "sip:username@sip.non-telnyx-address.com"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            },
            "description": "Custom headers to be added to the SIP INVITE."
          },
          "sip_auth_username": {
            "type": "string",
            "description": "SIP Authentication username used for SIP challenges."
          },
          "sip_auth_password": {
            "type": "string",
            "description": "SIP Authentication password used for SIP challenges."
          },
          "sip_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            },
            "description": "SIP headers to be added to the request. Currently only User-to-User header is supported."
          }
        },
        "example": {
          "sip_address": "sip:username@sip.non-telnyx-address.com"
        }
      },
      "RefreshRoomClientTokenRequest": {
        "title": "RefreshRoomClientTokenRequest",
        "required": [
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "token_ttl_secs": {
            "maximum": 3600,
            "minimum": 10,
            "type": "integer",
            "description": "The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
            "default": 600,
            "example": 600
          },
          "refresh_token": {
            "type": "string",
            "format": "jwt",
            "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
          }
        }
      },
      "Region": {
        "title": "Region",
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code of the region.",
            "example": "dc2"
          },
          "name": {
            "type": "string",
            "description": "The name of the region.",
            "example": "Washington DC, US"
          },
          "inserted_at": {
            "type": "string",
            "description": "Timestamp when the region was inserted.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the region was last updated.",
            "format": "date-time"
          }
        }
      },
      "RegionIn": {
        "title": "RegionIn",
        "type": "object",
        "properties": {
          "region_code": {
            "type": "string",
            "description": "The region the interface should be deployed to.",
            "example": "ashburn-va"
          }
        }
      },
      "RegionInformation": {
        "title": "RegionInformation",
        "type": "object",
        "properties": {
          "region_type": {
            "enum": [
              "country_code",
              "rate_center",
              "state",
              "location"
            ],
            "type": "string",
            "example": "country_code"
          },
          "region_name": {
            "type": "string",
            "example": "US"
          }
        },
        "example": {
          "region_type": "country_code",
          "region_name": "US"
        }
      },
      "RegionOut": {
        "title": "RegionOut",
        "type": "object",
        "properties": {
          "region_code": {
            "type": "string",
            "description": "The region interface is deployed to.",
            "example": "ashburn-va"
          },
          "region": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Region code of the interface.",
                "example": "ashburn-va"
              },
              "name": {
                "type": "string",
                "description": "Region name of the interface.",
                "example": "Ashburn"
              },
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "region"
              }
            }
          }
        }
      },
      "RegulatoryRequirement": {
        "title": "RegulatoryRequirement",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string"
          },
          "requirement_id": {
            "type": "string",
            "format": "uuid"
          },
          "field_type": {
            "type": "string"
          }
        }
      },
      "RegulatoryRequirements": {
        "title": "RegulatoryRequirements",
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "readOnly": true,
            "example": "DE"
          },
          "phone_number_type": {
            "type": "string",
            "readOnly": true,
            "example": "local"
          },
          "action": {
            "type": "string",
            "readOnly": true,
            "example": "ordering"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "readOnly": true,
                  "example": "Address matching the DID area code (street, building number, postal code, city and country)"
                },
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "readOnly": true,
                  "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
                },
                "example": {
                  "type": "string",
                  "readOnly": true,
                  "example": "600 Congress Avenue, 14th Floor, Austin, TX 78701"
                },
                "name": {
                  "type": "string",
                  "example": "Address matching the DID area code"
                },
                "field_type": {
                  "type": "string",
                  "example": "address_id"
                },
                "acceptance_criteria": {
                  "type": "object",
                  "properties": {
                    "locality_limit": {
                      "type": "string",
                      "example": "Identical locality as the numbers desired"
                    },
                    "time_limit": {
                      "type": "string",
                      "example": "Less than 5 months old"
                    },
                    "regex": {
                      "type": "string",
                      "example": "regex field value must match"
                    },
                    "case_sensitive": {
                      "type": "string",
                      "example": "Whether field value is case sensitive"
                    },
                    "acceptable_characters": {
                      "type": "string",
                      "example": "Characters that can be included in field value"
                    },
                    "acceptable_values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "max_length": {
                      "type": "string",
                      "example": "10"
                    },
                    "min_length": {
                      "type": "string",
                      "example": "5"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RegulatoryRequirementsPhoneNumbers": {
        "title": "RegulatoryRequirementsPhoneNumbers",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "readOnly": true,
            "example": "+41215471644"
          },
          "phone_number_type": {
            "type": "string",
            "readOnly": true,
            "example": "local"
          },
          "region_information": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "region_name": {
                  "type": "string",
                  "example": "CH"
                },
                "region_type": {
                  "type": "string",
                  "example": "country_code"
                }
              }
            }
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "phone_number_regulatory_requirements"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "readOnly": true,
                  "example": "Address matching the DID area code (street, building number, postal code, city and country)"
                },
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "readOnly": true,
                  "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
                },
                "example": {
                  "type": "string",
                  "readOnly": true,
                  "example": "600 Congress Avenue, 14th Floor, Austin, TX 78701"
                },
                "label": {
                  "type": "string",
                  "example": "Address matching the DID area code"
                },
                "field_type": {
                  "type": "string",
                  "example": "address_id"
                },
                "acceptance_criteria": {
                  "type": "object",
                  "properties": {
                    "locality_limit": {
                      "type": "string",
                      "example": "Identical locality as the numbers desired"
                    },
                    "field_value": {
                      "type": "string",
                      "example": "45f45a04-b4be-4592-95b1-9306b9db2b21"
                    },
                    "field_type": {
                      "type": "string",
                      "example": "address"
                    }
                  }
                },
                "record_type": {
                  "type": "string",
                  "readOnly": true,
                  "example": "regulatory_requirement"
                }
              }
            }
          }
        }
      },
      "RejectRequest": {
        "title": "Reject Request",
        "required": [
          "cause"
        ],
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "cause": {
            "enum": [
              "CALL_REJECTED",
              "USER_BUSY"
            ],
            "type": "string",
            "description": "Cause for call rejection.",
            "example": "USER_BUSY"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "cause": "USER_BUSY"
        }
      },
      "Release": {
        "title": "Phone Number Release",
        "type": "object",
        "properties": {
          "ticket_id": {
            "title": "UUID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "example": "ea175aba-f47c-4702-9400-efaa42688048"
          },
          "status": {
            "enum": [
              "pending_upload",
              "pending",
              "in_progress",
              "complete",
              "failed",
              "expired",
              "unknown"
            ],
            "type": "string",
            "description": "Represents the status of the release on Microsoft Teams.",
            "default": "pending_upload",
            "example": "pending"
          },
          "error_message": {
            "type": "string",
            "description": "A message set if there is an error with the upload process."
          },
          "telephone_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TnReleaseEntry"
            }
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "ReplacedLinkClick": {
        "title": "ReplacedLinkClick",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "link_clicked"
          },
          "url": {
            "type": "string",
            "description": "The original link that was sent in the message.",
            "example": "link_clicked"
          },
          "to": {
            "type": "string",
            "description": "Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).",
            "format": "address"
          },
          "message_id": {
            "type": "string",
            "description": "The message ID associated with the clicked link.",
            "format": "uuid"
          },
          "time_clicked": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the message request was received.",
            "format": "date-time"
          }
        },
        "example": {
          "record_type": "link_clicked",
          "url": "https://telnyx.com",
          "to": "18445550001",
          "message_id": "7ee4241c-f127-47e5-9c34-3aac291f8058",
          "time_clicked": "2019-04-01T14:45:45.4500000+00:00"
        }
      },
      "ReplacedLinkClickEvent": {
        "title": "ReplacedLinkClickEvent",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReplacedLinkClick"
          }
        }
      },
      "RequirementGroup": {
        "title": "RequirementGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "phone_number_type": {
            "type": "string"
          },
          "status": {
            "enum": [
              "approved",
              "unapproved",
              "pending-approval",
              "declined"
            ],
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "customer_reference": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "record_type": {
            "type": "string",
            "example": "requirement_group"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequirement"
            }
          }
        }
      },
      "ReservedPhoneNumber": {
        "title": "ReservedPhoneNumber",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "reserved_phone_number"
          },
          "phone_number": {
            "type": "string",
            "format": "e164_phone_number",
            "example": "+19705555098"
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the phone number's reservation.",
            "readOnly": true,
            "example": "success"
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the individual number reservation was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the the individual number reservation was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "expired_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the individual number reservation is going to expire",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          }
        },
        "example": {
          "id": "12ade33a-21c0-473b-b055-b3c836e1c292",
          "record_type": "reserved_phone_number",
          "phone_number": "+19705555098",
          "status": "pending",
          "created_at": "2018-01-01T00:00:00.000000Z",
          "updated_at": "2018-01-01T00:00:00.000000Z",
          "expired_at": "2018-01-01T00:00:00.000000Z"
        }
      },
      "ResourceNotFoundError": {
        "title": "Resource not found",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "detail": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "errors": [
            {
              "detail": "Resource not found"
            }
          ]
        }
      },
      "ResumeConferenceRecordingRequest": {
        "title": "Pause Recording Request",
        "type": "object",
        "properties": {
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "type": "string",
            "description": "Use this field to resume specific recording.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        }
      },
      "ResumeRecordingRequest": {
        "title": "Resume Recording Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "6e00ab49-9487-4364-8ad6-23965965afb2"
          }
        }
      },
      "Retrieval": {
        "title": "Retrieval",
        "required": [
          "type",
          "retrieval"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "retrieval"
            ],
            "type": "string"
          },
          "retrieval": {
            "$ref": "#/components/schemas/BucketIds"
          }
        }
      },
      "RetrievalTool": {
        "title": "RetrievalTool",
        "required": [
          "type",
          "retrieval"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "retrieval"
            ],
            "type": "string"
          },
          "retrieval": {
            "$ref": "#/components/schemas/BucketIds"
          }
        }
      },
      "RetrieveVerificationResponse": {
        "title": "RetrieveVerificationResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Verification"
          }
        }
      },
      "Room": {
        "title": "Room",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the room.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "max_participants": {
            "type": "integer",
            "description": "Maximum participants allowed in the room.",
            "example": 50
          },
          "unique_name": {
            "type": "string",
            "description": "The unique (within the Telnyx account scope) name of the room.",
            "example": "My room"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room was created.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "active_session_id": {
            "type": "string",
            "description": "The identifier of the active room session if any.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomSession"
            }
          },
          "enable_recording": {
            "type": "boolean",
            "description": "Enable or disable recording for that room.",
            "default": false,
            "example": true
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this room will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this room will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "room"
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "max_participants": 50,
          "unique_name": "My Room",
          "created_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "active_session_id": "7b61621f-62e0-4aad-ab11-9fd19e272e74",
          "enable_recording": true,
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "webhook_event_url": "https://www.example.com",
          "sessions": [
            {
              "id": "7b61621f-62e0-4aad-ab11-9fd19e272e74",
              "room_id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
              "active": true,
              "created_at": "2021-04-16T09:46:20.9548630+00:00",
              "updated_at": "2021-04-16T10:24:55.9622000+00:00",
              "participants": [ ],
              "record_type": "room_session"
            }
          ],
          "record_type": "room"
        }
      },
      "RoomComposition": {
        "title": "RoomComposition",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the room composition.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "room_id": {
            "type": "string",
            "description": "Identify the room associated with the room composition.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "session_id": {
            "type": "string",
            "description": "Identify the room session associated with the room composition.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "user_id": {
            "type": "string",
            "description": "Identify the user associated with the room composition.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "status": {
            "enum": [
              "completed",
              "enqueued",
              "processing"
            ],
            "type": "string",
            "description": "Shows the room composition status.",
            "example": "completed"
          },
          "size_mb": {
            "type": "number",
            "description": "Shows the room composition size in MB.",
            "format": "float",
            "example": 10.5
          },
          "download_url": {
            "type": "string",
            "description": "Url to download the composition.",
            "example": "https://www.example.com"
          },
          "duration_secs": {
            "type": "integer",
            "description": "Shows the room composition duration in seconds.",
            "example": 67
          },
          "format": {
            "enum": [
              "mp4"
            ],
            "type": "string",
            "description": "Shows format of the room composition.",
            "example": "mp4"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room composition was created.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room composition was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "ended_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room composition has ended.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "started_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room composition has stated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "completed_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room composition has completed.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "video_layout": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/VideoRegion"
            },
            "description": "Describes the video layout of the room composition in terms of regions. Limited to 2 regions."
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this room composition will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this room composition will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "room_composition"
          }
        },
        "example": {
          "completed_at": "2022-02-25T05:39:56.377426Z",
          "download_url": null,
          "duration_secs": 84,
          "ended_at": "2022-02-24T23:22:24.577677Z",
          "format": "mp4",
          "id": "7103dc53-ee59-4b54-a58b-c77d99ceb037",
          "record_type": "composition",
          "resolution": "1280x720",
          "room_id": "f981dbb3-228a-44e9-ac54-e87f0e2658b0",
          "session_id": "8f728d7b-00e2-4c59-8c27-f564b828df87",
          "size_mb": 6,
          "started_at": "2022-02-24T23:21:00.077209Z",
          "status": "enqueued",
          "user_id": "12a04ec9-0f91-4a91-9f3a-a19d9931182e",
          "video_layout": {
            "first": {
              "height": 720,
              "video_sources": [
                "*"
              ],
              "width": 1280,
              "x_pos": 0,
              "y_pos": 0,
              "z_pos": 0
            }
          },
          "webhook_event_url": "https://webhook.site/544663ce-b692-4f9c-80ed-e5ad97cd5c02"
        }
      },
      "RoomParticipant": {
        "title": "RoomParticipant",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the room participant.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "session_id": {
            "type": "string",
            "description": "Identify the room session that participant is part of.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "context": {
            "type": "string",
            "description": "Context provided to the given participant through the client SDK",
            "example": "Alice"
          },
          "joined_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the participant joined the session.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the participant was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "left_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the participant left the session.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "room_participant"
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "session_id": "7b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "context": "Alice",
          "joined_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "left_at": "2021-04-16T10:24:55.962200Z",
          "record_type": "room_participant"
        }
      },
      "RoomRecording": {
        "title": "RoomRecording",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the room recording.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "room_id": {
            "type": "string",
            "description": "Identify the room associated with the room recording.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "session_id": {
            "type": "string",
            "description": "Identify the room session associated with the room recording.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "participant_id": {
            "type": "string",
            "description": "Identify the room participant associated with the room recording.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "status": {
            "enum": [
              "completed",
              "processing"
            ],
            "type": "string",
            "description": "Shows the room recording status.",
            "example": "completed"
          },
          "type": {
            "enum": [
              "audio",
              "video"
            ],
            "type": "string",
            "description": "Shows the room recording type.",
            "example": "audio"
          },
          "size_mb": {
            "type": "number",
            "description": "Shows the room recording size in MB.",
            "format": "float",
            "example": 10.5
          },
          "download_url": {
            "type": "string",
            "description": "Url to download the recording.",
            "example": "https://www.example.com"
          },
          "codec": {
            "type": "string",
            "description": "Shows the codec used for the room recording.",
            "example": "opus"
          },
          "duration_secs": {
            "type": "integer",
            "description": "Shows the room recording duration in seconds.",
            "example": 67
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room recording was created.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room recording was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "ended_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room recording has ended.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "started_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room recording has stated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "completed_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room recording has completed.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "room_recording"
          }
        },
        "example": {
          "id": "6b61621f-62e0-4aad-ab11-9fd19e272e73",
          "room_id": "7b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "session_id": "8b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "participant_id": "9b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "status": "completed",
          "download_url": "https://www.example.com",
          "type": "audio",
          "duration_secs": 3660,
          "size_mb": 5.6,
          "codec": "opus",
          "created_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "started_at": "2021-04-16T09:24:55.962200Z",
          "ended_at": "2021-04-16T10:24:55.962200Z",
          "completed_at": "2021-04-16T10:25:55.962200Z",
          "record_type": "room_session"
        }
      },
      "RoomSession": {
        "title": "RoomSession",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the room session.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "room_id": {
            "type": "string",
            "description": "Identify the room hosting that room session.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777b0"
          },
          "active": {
            "type": "boolean",
            "description": "Shows if the room session is active or not.",
            "example": false
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room session was created.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room session was updated.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "ended_at": {
            "type": "string",
            "description": "ISO 8601 timestamp when the room session has ended.",
            "format": "datetime",
            "example": "2021-03-26T17:51:59.588408Z"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoomParticipant"
            }
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "room_session"
          }
        },
        "example": {
          "id": "7b61621f-62e0-4aad-ab11-9fd19e272e73",
          "room_id": "7b61621f-5fe4-4aad-ab11-9fd19e272e73",
          "active": false,
          "created_at": "2021-04-16T09:46:20.954863Z",
          "updated_at": "2021-04-16T10:24:55.962200Z",
          "ended_at": "2021-04-16T10:24:55.962200Z",
          "participants": [ ],
          "record_type": "room_session"
        }
      },
      "S3ConfigurationData": {
        "title": "AWS S3 Storage Configuration Data",
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Name of the bucket to be used to store recording files.",
            "example": "example-bucket"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "AWS credentials access key id.",
            "example": "AKIAIOSFODNN7EXAMPLE"
          },
          "aws_secret_access_key": {
            "type": "string",
            "description": "AWS secret access key.",
            "example": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          }
        }
      },
      "SIMCard": {
        "title": "SIMCard",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card"
          },
          "status": {
            "$ref": "#/components/schemas/SIMCardStatus"
          },
          "type": {
            "enum": [
              "physical",
              "esim"
            ],
            "type": "string",
            "description": "The type of SIM card",
            "readOnly": true,
            "example": "physical"
          },
          "iccid": {
            "type": "string",
            "description": "The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
            "readOnly": true,
            "example": "89310410106543789301"
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "msisdn": {
            "type": "string",
            "description": "Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
            "readOnly": true,
            "example": "+13109976224"
          },
          "sim_card_group_id": {
            "type": "string",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Searchable tags associated with the SIM card"
          },
          "authorized_imeis": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "description": "List of IMEIs authorized to use a given SIM card."
          },
          "current_imei": {
            "type": "string",
            "description": "IMEI of the device where a given SIM card is currently being used.",
            "format": "int64",
            "readOnly": true,
            "example": "457032284023794"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "enum": [
                  "MB",
                  "GB"
                ],
                "type": "string",
                "example": "MB"
              }
            },
            "description": "The SIM card individual data limit configuration."
          },
          "current_billing_period_consumed_data": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2049.0"
              },
              "unit": {
                "type": "string",
                "default": "MB",
                "example": "MB"
              }
            },
            "description": "The SIM card consumption so far in the current billing cycle.",
            "readOnly": true
          },
          "actions_in_progress": {
            "type": "boolean",
            "description": "Indicate whether the SIM card has any pending (in-progress) actions.",
            "default": false,
            "readOnly": true,
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "ipv4": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "192.168.0.0"
          },
          "ipv6": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "2001:cdba:0000:0000:0000:0000:3257:9652"
          },
          "current_device_location": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "string",
                "format": "float",
                "example": "41.143"
              },
              "longitude": {
                "type": "string",
                "format": "float",
                "example": "-8.605"
              },
              "accuracy": {
                "type": "integer",
                "example": 1250
              },
              "accuracy_unit": {
                "type": "string",
                "default": "m",
                "example": "m"
              }
            },
            "description": "Current physical location data of a given SIM card. Accuracy is given in meters.",
            "readOnly": true
          },
          "current_mnc": {
            "type": "string",
            "description": "Mobile Network Code of the current network to which the SIM card is connected. It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "260"
          },
          "current_mcc": {
            "type": "string",
            "description": "Mobile Country Code of the current network to which the SIM card is connected. It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "410"
          },
          "live_data_session": {
            "enum": [
              "connected",
              "disconnected",
              "unknown"
            ],
            "type": "string",
            "description": "Indicates whether the device is actively connected to a network and able to run data.",
            "readOnly": true,
            "example": "connected"
          }
        }
      },
      "SIMCardAction": {
        "title": "SIMCardAction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card_action"
          },
          "sim_card_id": {
            "type": "string",
            "description": "The related SIM card identifier.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "action_type": {
            "enum": [
              "enable",
              "enable_standby_sim_card",
              "disable",
              "set_standby"
            ],
            "type": "string",
            "description": "The operation type. It can be one of the following: <br/>\n<ul>\n <li><code>enable</code> - move the SIM card to the <code>enabled</code> status</li>\n <li><code>enable_standby_sim_card</code> - move a SIM card previously on the <code>standby</code> status to the <code>enabled</code> status after it consumes data.</li>\n <li><code>disable</code> - move the SIM card to the <code>disabled</code> status</li>\n <li><code>set_standby</code> - move the SIM card to the <code>standby</code> status</li>\n </ul>",
            "readOnly": true,
            "example": "enable"
          },
          "status": {
            "type": "object",
            "properties": {
              "value": {
                "enum": [
                  "in-progress",
                  "completed",
                  "failed",
                  "interrupted"
                ],
                "type": "string",
                "description": "The current status of the SIM card action.",
                "readOnly": true,
                "example": "completed"
              },
              "reason": {
                "type": "string",
                "description": "It describes why the SIM card action is in the current status. This will be <code>null</code> for self-explanatory statuses, such as <code>in-progress</code> and <code>completed</code> but will include further information on statuses like <code>interrupted</code> and <code>failed</code>.",
                "readOnly": true,
                "example": "The data limit was exceeded."
              }
            }
          },
          "settings": {
            "type": "object",
            "description": "A JSON object representation of the action params.",
            "nullable": true,
            "readOnly": true
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2020-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2020-02-03T22:25:27.521Z"
          }
        },
        "description": "This object represents a SIM card action. It allows tracking the current status of an operation that impacts the SIM card."
      },
      "SIMCardActionsSummary": {
        "title": "SIMCardActionsSummary",
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "in-progress",
              "completed",
              "failed",
              "interrupted"
            ],
            "type": "string",
            "example": "in-progress"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "SIMCardActivationCode": {
        "title": "SIMCardActivationCode",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card_activation_code"
          },
          "activation_code": {
            "type": "string",
            "description": "Contents of the eSIM activation QR code.",
            "readOnly": true,
            "example": "LPA:1$...."
          }
        }
      },
      "SIMCardDeviceDetails": {
        "title": "SIMCardDeviceDetails",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "device_details"
          },
          "imei": {
            "type": "string",
            "description": "IMEI of the device where the SIM card is being used in.",
            "format": "int64",
            "readOnly": true,
            "example": "457032284023794"
          },
          "model_name": {
            "type": "string",
            "description": "Brand of the device where the SIM card is being used in.",
            "readOnly": true,
            "example": "iPad Pro 11 2020 Cellular"
          },
          "brand_name": {
            "type": "string",
            "description": "Brand of the device where the SIM card is being used in.",
            "readOnly": true,
            "example": "Apple"
          },
          "device_type": {
            "type": "string",
            "description": "Type of the device where the SIM card is being used in.",
            "readOnly": true,
            "example": "Tablet"
          },
          "operating_system": {
            "type": "string",
            "description": "Operating system of the device where the SIM card is being used in.",
            "readOnly": true,
            "example": "iOS 12"
          }
        }
      },
      "SIMCardGroup": {
        "title": "SIMCardGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_group"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates whether the SIM card group is the users default group.<br/>The default group is created for the user and can not be removed.",
            "readOnly": true,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "A user friendly name for the SIM card group.",
            "example": "My Test Group"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use."
          },
          "consumed_data": {
            "$ref": "#/components/schemas/ConsumedData"
          },
          "private_wireless_gateway_id": {
            "type": "string",
            "description": "The identification of the related Private Wireless Gateway resource.",
            "format": "uuid",
            "default": null,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardGroupAction": {
        "title": "SIMCardGroupAction",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card_group_action"
          },
          "sim_card_group_id": {
            "type": "string",
            "description": "The SIM card group identification.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "enum": [
              "set_private_wireless_gateway",
              "remove_private_wireless_gateway"
            ],
            "type": "string",
            "description": "Represents the type of the operation requested.",
            "example": "set_private_wireless_gateway"
          },
          "status": {
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "type": "string",
            "example": "in-progress"
          },
          "settings": {
            "type": "object",
            "properties": {
              "private_wireless_gateway_id": {
                "type": "string",
                "description": "The identification of the related Private Wireless Gateway resource.",
                "format": "uuid",
                "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
              }
            },
            "description": "A JSON object representation of the action params."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "description": "This object represents a SIM card group action request. It allows tracking the current status of an operation that impacts the SIM card group and SIM card in it."
      },
      "SIMCardGroupCreate": {
        "title": "SIMCardGroupCreate",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A user friendly name for the SIM card group.",
            "example": "My Test Group"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use."
          }
        }
      },
      "SIMCardGroupPatch": {
        "title": "SIMCardGroupPatch",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A user friendly name for the SIM card group.",
            "example": "My Test Group"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use."
          }
        }
      },
      "SIMCardOrder": {
        "title": "SIMCardOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_order"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The amount of SIM cards requested in the SIM card order.",
            "example": 21
          },
          "cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "description": "Filter by ISO 4217 currency string.",
                "format": "currency",
                "example": "USD"
              }
            },
            "description": "An object representing the total cost of the order.",
            "example": {
              "amount": "2.52",
              "currency": "USD"
            }
          },
          "order_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Uniquely identifies the address for the order.",
                "format": "int64",
                "example": "1293384261075731499"
              },
              "first_name": {
                "type": "string",
                "description": "The first name of the shipping recipient.",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "The last name of the shipping recipient.",
                "example": "Smith"
              },
              "business_name": {
                "type": "string",
                "description": "The name of the business where the address is located.",
                "example": "Telnyx LLC"
              },
              "street_address": {
                "type": "string",
                "description": "The name of the street where the address is located.",
                "example": "600 Congress Avenue"
              },
              "extended_address": {
                "type": "string",
                "description": "Supplemental field for address information.",
                "example": "14th Floor"
              },
              "locality": {
                "type": "string",
                "description": "The name of the city where the address is located.",
                "example": "Austin"
              },
              "administrative_area": {
                "type": "string",
                "description": "State or province where the address is located.",
                "example": "TX"
              },
              "country_code": {
                "type": "string",
                "description": "The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
                "example": "US"
              },
              "postal_code": {
                "type": "string",
                "description": "Postal code for the address.",
                "example": "78701"
              }
            },
            "description": "An object representing the address information from when the order was submitted.",
            "readOnly": true,
            "example": {
              "id": "1293384261075731499",
              "street_address": "600 Congress Avenue",
              "extended_address": "14th Floor",
              "locality": "Austin",
              "administrative_area": "TX",
              "country_code": "US",
              "postal_code": "78701"
            }
          },
          "tracking_url": {
            "type": "string",
            "description": "The URL used to get tracking information about the order.",
            "format": "url",
            "example": "http://www.example.com/"
          },
          "status": {
            "enum": [
              "pending",
              "processing",
              "ready_to_ship",
              "shipped",
              "delivered",
              "canceled"
            ],
            "type": "string",
            "description": "The current status of the SIM Card order.<ul> <li><code>pending</code> - the order is waiting to be processed.</li> <li><code>processing</code> - the order is currently being processed.</li> <li><code>ready_to_ship</code> - the order is ready to be shipped to the specified <b>address</b>.</li> <li><code>shipped</code> - the order was shipped and is on its way to be delivered to the specified <b>address</b>.</li> <li><code>delivered</code> - the order was delivered to the specified <b>address</b>.</li> <li><code>canceled</code> - the order was canceled.</li> </ul>",
            "example": "pending"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was last updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardOrderPreview": {
        "title": "SIMCardOrderPreview",
        "type": "object",
        "properties": {
          "total_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency string.",
                "format": "currency",
                "example": "USD"
              }
            }
          },
          "shipping_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency string.",
                "format": "currency",
                "example": "USD"
              }
            }
          },
          "sim_cards_cost": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "A string representing the cost amount.",
                "example": "2.32"
              },
              "currency": {
                "type": "string",
                "description": "ISO 4217 currency string.",
                "format": "currency",
                "example": "USD"
              }
            }
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_order_preview"
          },
          "quantity": {
            "type": "integer",
            "description": "The amount of SIM cards requested in the SIM card order.",
            "example": 21
          }
        }
      },
      "SIMCardPublicIP": {
        "title": "SIMCardPublicIP",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card_public_ip"
          },
          "region_code": {
            "type": "string",
            "readOnly": true,
            "example": "dc2"
          },
          "sim_card_id": {
            "type": "string",
            "format": "uuid",
            "example": "6b14e151-8493-4fa1-8664-1cc4e6d14158"
          },
          "type": {
            "enum": [
              "ipv4"
            ],
            "type": "string",
            "default": "ipv4",
            "readOnly": true,
            "example": "ipv4"
          },
          "ip": {
            "type": "string",
            "description": "The provisioned IP address. This attribute will only be available when underlying resource status is in a \"provisioned\" status.",
            "default": null,
            "readOnly": true,
            "example": "192.168.0.0"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SIMCardRegistration": {
        "title": "SIMCardRegistration",
        "required": [
          "registration_codes"
        ],
        "type": "object",
        "properties": {
          "sim_card_group_id": {
            "type": "string",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Searchable tags associated with the SIM card"
          },
          "registration_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "enum": [
              "enabled",
              "disabled",
              "standby"
            ],
            "type": "string",
            "description": "Status on which the SIM card will be set after being successful registered.",
            "default": "enabled",
            "example": "standby"
          }
        }
      },
      "SIMCardRegistrationCodeValidation": {
        "title": "SIMCardRegistrationCodeValidation",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "example": "sim_card_registration_code_validation"
          },
          "registration_code": {
            "type": "string",
            "description": "The 10-digit SIM card registration code",
            "example": "0123456789"
          },
          "valid": {
            "type": "boolean",
            "description": "The attribute that denotes whether the code is valid or not",
            "example": false
          },
          "invalid_detail": {
            "type": "string",
            "description": "The validation message",
            "nullable": true,
            "example": "This code has already been used."
          }
        }
      },
      "SIMCardRegistrationCodeValidations": {
        "title": "SIMCardRegistrationCodeValidations",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SIMCardRegistrationCodeValidation"
            }
          }
        }
      },
      "SIMCardStatus": {
        "title": "SIMCardStatus",
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SIMCardStatus_value"
          },
          "reason": {
            "type": "string",
            "description": "It describes why the SIM card is in the current status.",
            "readOnly": true,
            "example": "The SIM card is active, ready to connect to networks and consume data."
          }
        }
      },
      "SIPReferTool": {
        "title": "SIPReferTool",
        "required": [
          "type",
          "refer"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "refer"
            ],
            "type": "string"
          },
          "refer": {
            "$ref": "#/components/schemas/SIPReferToolParams"
          }
        }
      },
      "SIPReferToolParams": {
        "title": "SIPReferToolParams",
        "required": [
          "targets"
        ],
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "sip_address"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the target.",
                  "example": "Support"
                },
                "sip_address": {
                  "type": "string",
                  "description": "The SIP URI to which the call will be referred.",
                  "example": "sip:username@sip.non-telnyx-address.com"
                },
                "sip_auth_username": {
                  "type": "string",
                  "description": "SIP Authentication username used for SIP challenges."
                },
                "sip_auth_password": {
                  "type": "string",
                  "description": "SIP Authentication password used for SIP challenges."
                }
              }
            },
            "description": "The different possible targets of the SIP refer. The assistant will be able to choose one of the targets to refer the call to."
          },
          "sip_headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "enum": [
                    "User-to-User",
                    "Diversion"
                  ],
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the header. Note that we support mustache templating for the value. For example you can use `{{#integration_secret}}test-secret{{/integration_secret}}` to pass the value of the integration secret."
                }
              }
            },
            "description": "SIP headers to be added to the SIP REFER. Currently only User-to-User and Diversion headers are supported."
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the header. Note that we support mustache templating for the value. For example you can use `{{#integration_secret}}test-secret{{/integration_secret}}` to pass the value of the integration secret."
                }
              }
            },
            "description": "Custom headers to be added to the SIP REFER."
          }
        }
      },
      "SMSFallback": {
        "title": "SMSFallback",
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Phone number in +E.164 format",
            "example": "+13125551234"
          },
          "text": {
            "type": "string",
            "description": "Text (maximum 3072 characters)",
            "example": "Hello world!"
          }
        }
      },
      "SSLCertificate": {
        "title": "SSLCertificate",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the SSL certificate"
          },
          "issued_to": {
            "type": "object",
            "properties": {
              "common_name": {
                "type": "string",
                "description": "The common name of the entity the certificate was issued to"
              },
              "organization": {
                "type": "string",
                "description": "The organization the certificate was issued to"
              },
              "organization_unit": {
                "type": "string",
                "description": "The organizational unit the certificate was issued to"
              }
            }
          },
          "issued_by": {
            "type": "object",
            "properties": {
              "common_name": {
                "type": "string",
                "description": "The common name of the entity the certificate was issued by"
              },
              "organization": {
                "type": "string",
                "description": "The organization the certificate was issued by"
              },
              "organization_unit": {
                "type": "string",
                "description": "The organizational unit the certificate was issued by"
              }
            }
          },
          "valid_from": {
            "type": "string",
            "description": "The time the certificate is valid from",
            "format": "date-time"
          },
          "valid_to": {
            "type": "string",
            "description": "The time the certificate is valid to",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "description": "Time when SSL certificate was uploaded",
            "format": "date-time"
          }
        }
      },
      "ScheduledEventResponse": {
        "title": "ScheduledEventResponse",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "description": "Union type for different scheduled event response types",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ScheduledPhoneCallEventResponse": "#/components/schemas/ScheduledPhoneCallEventResponse",
            "ScheduledSmsEventResponse": "#/components/schemas/ScheduledSmsEventResponse"
          }
        }
      },
      "ScheduledPhoneCallEventResponse": {
        "title": "ScheduledPhoneCallEventResponse",
        "required": [
          "telnyx_conversation_channel",
          "telnyx_end_user_target",
          "telnyx_agent_target",
          "scheduled_at_fixed_datetime",
          "assistant_id"
        ],
        "type": "object",
        "properties": {
          "telnyx_conversation_channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "telnyx_end_user_target": {
            "title": "Telnyx End User Target",
            "type": "string"
          },
          "telnyx_agent_target": {
            "title": "Telnyx Agent Target",
            "type": "string"
          },
          "scheduled_at_fixed_datetime": {
            "title": "Scheduled At Fixed Datetime",
            "type": "string",
            "format": "date-time"
          },
          "assistant_id": {
            "title": "Assistant Id",
            "type": "string"
          },
          "retry_count": {
            "title": "Retry Count",
            "type": "integer",
            "default": 0
          },
          "retry_attempts": {
            "title": "Retry Attempts",
            "type": "integer"
          },
          "scheduled_event_id": {
            "title": "Scheduled Event Id",
            "type": "string"
          },
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventStatus"
              }
            ],
            "default": "pending"
          },
          "conversation_metadata": {
            "title": "Conversation Metadata",
            "type": "object",
            "additionalProperties": { }
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScheduledSmsEventResponse": {
        "title": "ScheduledSmsEventResponse",
        "required": [
          "telnyx_conversation_channel",
          "telnyx_end_user_target",
          "telnyx_agent_target",
          "scheduled_at_fixed_datetime",
          "assistant_id",
          "text"
        ],
        "type": "object",
        "properties": {
          "telnyx_conversation_channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "telnyx_end_user_target": {
            "title": "Telnyx End User Target",
            "type": "string"
          },
          "telnyx_agent_target": {
            "title": "Telnyx Agent Target",
            "type": "string"
          },
          "scheduled_at_fixed_datetime": {
            "title": "Scheduled At Fixed Datetime",
            "type": "string",
            "format": "date-time"
          },
          "assistant_id": {
            "title": "Assistant Id",
            "type": "string"
          },
          "retry_count": {
            "title": "Retry Count",
            "type": "integer",
            "default": 0
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "scheduled_event_id": {
            "title": "Scheduled Event Id",
            "type": "string"
          },
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventStatus"
              }
            ],
            "default": "pending"
          },
          "conversation_metadata": {
            "title": "Conversation Metadata",
            "type": "object",
            "additionalProperties": { }
          },
          "errors": {
            "title": "Errors",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SearchedSIMCardGroup": {
        "title": "SIMCardGroup",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "sim_card_group"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates whether the SIM card group is the users default group.<br/>The default group is created for the user and can not be removed.",
            "readOnly": true,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "A user friendly name for the SIM card group.",
            "example": "My Test Group"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Upper limit on the amount of data the SIM cards, within the group, can use."
          },
          "consumed_data": {
            "$ref": "#/components/schemas/ConsumedData"
          },
          "sim_card_count": {
            "type": "integer",
            "description": "The number of SIM cards associated with the group.",
            "default": 0,
            "example": 10
          },
          "private_wireless_gateway_id": {
            "type": "string",
            "description": "The identification of the related Private Wireless Gateway resource.",
            "format": "uuid",
            "default": null,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SendDTMFRequest": {
        "title": "Send DTMF Request",
        "required": [
          "digits"
        ],
        "type": "object",
        "properties": {
          "digits": {
            "type": "string",
            "description": "DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W (1s).",
            "example": "1www2WABCDw9"
          },
          "duration_millis": {
            "type": "integer",
            "description": "Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100 to 500ms",
            "format": "int32",
            "default": 250,
            "example": 500
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "digits": "1www2WABCDw9",
          "duration_millis": 500,
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "SendFaxMultipartRequest": {
        "title": "Send fax multipart request",
        "required": [
          "connection_id",
          "contents",
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "The ID of the connection used to send the fax.",
            "example": "234423"
          },
          "contents": {
            "type": "string",
            "description": "The file you want to upload. The maximum allowed size is 20 MB. contents and media_name/media_url can't be submitted together.",
            "format": "binary"
          },
          "to": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
            "example": "+13127367276"
          },
          "from": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "example": "+13125790015"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "t38_enabled": {
            "type": "boolean",
            "description": "The flag to disable the T.38 protocol.",
            "default": true
          },
          "monochrome": {
            "type": "boolean",
            "description": "The flag to enable monochrome, true black and white fax results.",
            "default": false
          },
          "store_media": {
            "type": "boolean",
            "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
            "default": false
          },
          "store_preview": {
            "type": "boolean",
            "description": "Should fax preview be stored on temporary URL.",
            "default": false
          }
        }
      },
      "SendFaxRequest": {
        "title": "Send fax request",
        "required": [
          "connection_id",
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "The connection ID to send the fax with.",
            "example": "234423"
          },
          "media_url": {
            "type": "string",
            "description": "The URL (or list of URLs) to the PDF used for the fax's media. media_url and media_name/contents can't be submitted together.",
            "example": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
          },
          "media_name": {
            "type": "string",
            "description": "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "to": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent to or SIP URI",
            "example": "+13127367276"
          },
          "from": {
            "type": "string",
            "description": "The phone number, in E.164 format, the fax will be sent from.",
            "example": "+13125790015"
          },
          "from_display_name": {
            "type": "string",
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "example": "Company Name"
          },
          "quality": {
            "$ref": "#/components/schemas/Quality"
          },
          "t38_enabled": {
            "type": "boolean",
            "description": "The flag to disable the T.38 protocol.",
            "default": true
          },
          "monochrome": {
            "type": "boolean",
            "description": "The flag to enable monochrome, true black and white fax results.",
            "default": false
          },
          "store_media": {
            "type": "boolean",
            "description": "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
            "default": false
          },
          "store_preview": {
            "type": "boolean",
            "description": "Should fax preview be stored on temporary URL.",
            "default": false
          },
          "preview_format": {
            "enum": [
              "pdf",
              "tiff"
            ],
            "type": "string",
            "description": "The format for the preview file in case the `store_preview` is `true`.",
            "default": "tiff"
          },
          "webhook_url": {
            "type": "string",
            "description": "Use this field to override the URL to which Telnyx will send subsequent webhooks for this fax.",
            "example": "https://www.example.com/server-b/"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        }
      },
      "FindNotificationsEvents_200": {
        "title": "FindNotificationsEvents_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationEvent"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "SendSIPInfoRequest": {
        "title": "Send SIP Info Request",
        "required": [
          "content_type",
          "body"
        ],
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Content type of the INFO body. Must be MIME type compliant. There is a 1,400 bytes limit",
            "example": "application/json"
          },
          "body": {
            "type": "string",
            "description": "Content of the SIP INFO",
            "example": "{\"key\": \"value\", \"numValue\": 100}"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "content_type": "application/json",
          "body": "{\"key\": \"value\", \"numValue\": 100}",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "ServicePlan": {
        "title": "ServicePlan",
        "enum": [
          "global"
        ],
        "type": "string",
        "description": "Indicates the coverage of the termination regions.",
        "default": "global",
        "example": "global"
      },
      "SettingsDataErrorMessage": {
        "title": "SettingsDataErrorMessage",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "SharedCampaign": {
        "title": "SharedCampaign",
        "required": [
          "brandId",
          "campaignId",
          "usecase"
        ],
        "type": "object",
        "properties": {
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Alphanumeric identifier of the brand associated with this campaign."
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC."
          },
          "createDate": {
            "title": "Createdate",
            "type": "string",
            "description": "Unix timestamp when campaign was created."
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. "
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          }
        },
        "description": "Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**."
      },
      "SharedCampaignRecordSet": {
        "title": "SharedCampaignRecordSet",
        "type": "object",
        "properties": {
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedCampaign"
            }
          },
          "totalRecords": {
            "title": "Totalrecords",
            "type": "integer"
          }
        }
      },
      "ShortCode": {
        "title": "ShortCode",
        "required": [
          "messaging_profile_id"
        ],
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "short_code"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "short_code"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "readOnly": true
          },
          "short_code": {
            "type": "string",
            "description": "Short digit sequence used to address messages.",
            "readOnly": true
          },
          "country_code": {
            "pattern": "^[A-Z]{2}$",
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code.",
            "readOnly": true,
            "example": "US"
          },
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile.",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true
          }
        },
        "example": {
          "record_type": "short_code",
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "short_code": "12345",
          "country_code": "US",
          "messaging_profile_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "created_at": "2019-01-23T18:10:02.5740000+00:00",
          "updated_at": "2019-01-23T18:10:02.5740000+00:00"
        }
      },
      "SimCardDataUsageNotification": {
        "title": "SimCardDataUsageNotification",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "79228acc-3f08-4e70-ac68-cb5aae8b537a"
          },
          "sim_card_id": {
            "type": "string",
            "description": "The identification UUID of the related SIM card resource.",
            "format": "uuid",
            "example": "b34c1683-cd85-4493-b9a5-315eb4bc5e19"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card_data_usage_notification"
          },
          "threshold": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "enum": [
                  "MB",
                  "GB"
                ],
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Data usage threshold that will trigger the notification."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "description": "The SIM card individual data usage notification information.",
        "example": {
          "id": "79228acc-3f08-4e70-ac68-cb5aae8b537a",
          "sim_card_id": "b34c1683-cd85-4493-b9a5-315eb4bc5e19",
          "threshold": {
            "amount": "2048.0",
            "unit": "MB"
          },
          "created_at": "2018-02-02T22:25:27.521Z",
          "updated_at": "2018-02-02T22:25:27.521Z"
        }
      },
      "SimCardOrderCreate": {
        "title": "SimCardOrderCreate",
        "required": [
          "address_id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "address_id": {
            "type": "string",
            "description": "Uniquely identifies the address for the order.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The amount of SIM cards to order.",
            "example": 23
          }
        }
      },
      "SimCardUsageDetailRecord": {
        "title": "SimCardUsageDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this SIM Card Usage",
            "format": "uuid",
            "example": "3ca7bd3d-7d82-4e07-9df4-009123068320"
          },
          "created_at": {
            "type": "string",
            "description": "Event creation time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "closed_at": {
            "type": "string",
            "description": "Event close time",
            "format": "date-time",
            "example": "2020-07-01T00:00:00.0000000+00:00"
          },
          "ip_address": {
            "type": "string",
            "description": "Ip address that generated the event",
            "example": "100.64.1.2"
          },
          "downlink_data": {
            "type": "number",
            "description": "Number of megabytes downloaded",
            "example": "0.1240"
          },
          "imsi": {
            "type": "string",
            "description": "International Mobile Subscriber Identity",
            "example": "311210393720093"
          },
          "mcc": {
            "type": "string",
            "description": "Mobile country code",
            "example": "204"
          },
          "mnc": {
            "type": "string",
            "description": "Mobile network code",
            "example": "69"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing cost",
            "example": "USD"
          },
          "data_unit": {
            "type": "string",
            "description": "Unit of wireless link consumption",
            "example": "MB"
          },
          "data_rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing cost",
            "format": "monetary_value",
            "example": "0.06000"
          },
          "sim_group_name": {
            "type": "string",
            "description": "Sim group name for sim card",
            "example": "SIMBillingInfo test - otheraccount"
          },
          "sim_card_id": {
            "type": "string",
            "description": "Unique identifier for SIM card",
            "example": "7aa66686-b39f-456d-8edc-5b6cffb1432a"
          },
          "sim_group_id": {
            "type": "string",
            "description": "Unique identifier for SIM group",
            "example": "6c07e2e9-cbc0-49ba-ac0d-c59b59646bb1"
          },
          "sim_card_tags": {
            "type": "string",
            "description": "User-provided tags",
            "example": "mytag"
          },
          "phone_number": {
            "type": "string",
            "description": "Telephone number associated to SIM card",
            "example": "+15188490209"
          },
          "uplink_data": {
            "type": "number",
            "description": "Number of megabytes uploaded",
            "example": "0.7653"
          },
          "data_cost": {
            "type": "number",
            "description": "Data cost",
            "example": "0.0292830"
          },
          "record_type": {
            "type": "string",
            "default": "sim_card_usage",
            "example": "sim_card_usage"
          }
        }
      },
      "SimpleSIMCard": {
        "title": "SIMCard",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sim_card"
          },
          "status": {
            "$ref": "#/components/schemas/SIMCardStatus"
          },
          "type": {
            "enum": [
              "physical",
              "esim"
            ],
            "type": "string",
            "description": "The type of SIM card",
            "readOnly": true,
            "example": "physical"
          },
          "iccid": {
            "type": "string",
            "description": "The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
            "readOnly": true,
            "example": "89310410106543789301"
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "msisdn": {
            "type": "string",
            "description": "Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
            "readOnly": true,
            "example": "+13109976224"
          },
          "sim_card_group_id": {
            "type": "string",
            "description": "The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Searchable tags associated with the SIM card"
          },
          "data_limit": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.0"
              },
              "unit": {
                "enum": [
                  "MB",
                  "GB"
                ],
                "type": "string",
                "example": "MB"
              }
            },
            "description": "The SIM card individual data limit configuration.",
            "readOnly": true
          },
          "current_billing_period_consumed_data": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2049.0"
              },
              "unit": {
                "type": "string",
                "default": "MB",
                "example": "MB"
              }
            },
            "description": "The SIM card consumption so far in the current billing cycle.",
            "readOnly": true
          },
          "actions_in_progress": {
            "type": "boolean",
            "description": "Indicate whether the SIM card has any pending (in-progress) actions.",
            "default": false,
            "readOnly": true,
            "example": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "SimplifiedOTAUpdate": {
        "title": "OTAUpdate",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "ota_update"
          },
          "sim_card_id": {
            "type": "string",
            "description": "The identification UUID of the related SIM card resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "type": {
            "enum": [
              "sim_card_network_preferences"
            ],
            "type": "string",
            "description": "Represents the type of the operation requested. This will relate directly to the source of the request.",
            "example": "sim_card_network_preferences"
          },
          "status": {
            "enum": [
              "in-progress",
              "completed",
              "failed"
            ],
            "type": "string",
            "example": "in-progress"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "description": "This object represents an Over the Air (OTA) update request. It allows tracking the current status of a operation that apply settings in a particular SIM card. <br/><br/>"
      },
      "SingleManagedAccountGlobalOutboundChannels": {
        "title": "Global Outbound Channels Details for a Managed Account",
        "type": "object",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "Integer value that indicates the number of allocatable global outbound channels that are allocated to the managed account. If the value is 0 then the account will have no usable channels and will not be able to perform outbound calling.",
            "example": 30
          },
          "email": {
            "type": "string",
            "description": "The email of the managed account.",
            "example": "customer@example.org"
          },
          "id": {
            "type": "string",
            "description": "The user ID of the managed account.",
            "example": "096abcde-1122-3344-ab77-ff0123456789"
          },
          "manager_account_id": {
            "type": "string",
            "description": "The user ID of the manager of the account.",
            "example": "beeabcde-1122-3344-ab77-ff0123456789"
          },
          "record_type": {
            "type": "string",
            "description": "The name of the type of data in the response.",
            "example": "managed_account_global_outbound_settings"
          }
        },
        "example": {
          "channel_limit": 30,
          "email": "allocate_demo@customer.com",
          "id": "096abcde-1122-3344-ab77-ff0123456789",
          "manager_account_id": "beeabcde-1122-3344-ab77-ff0123456789",
          "record_type": "managed_account_global_outbound_settings"
        }
      },
      "SipHeader": {
        "title": "SIP Header",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "enum": [
              "User-to-User"
            ],
            "type": "string",
            "description": "The name of the header to add.",
            "example": "User-to-User"
          },
          "value": {
            "type": "string",
            "description": "The value of the header.",
            "example": "value"
          }
        },
        "example": {
          "name": "User-to-User",
          "value": "value"
        }
      },
      "SiprecConnector": {
        "title": "SIPREC connector configuration",
        "required": [
          "host",
          "port",
          "name"
        ],
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Hostname/IPv4 address of the SIPREC SRS.",
            "example": "siprec.telnyx.com"
          },
          "port": {
            "type": "integer",
            "description": "Port for the SIPREC SRS.",
            "example": 5060
          },
          "name": {
            "type": "string",
            "description": "Name for the SIPREC connector resource.",
            "example": "my-siprec-connector"
          },
          "app_subdomain": {
            "type": "string",
            "description": "Subdomain to route the call when using Telnyx SRS (optional for non-Telnyx SRS).",
            "example": "my-app-domain"
          }
        },
        "example": {
          "host": "siprec.telnyx.com",
          "port": 5060,
          "name": "my-siprec-connector",
          "app_subdomain": "my-app"
        }
      },
      "SiprecConnectorResponse": {
        "title": "SIPREC Connector Response",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "SIPREC Connector",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "example": "siprec_connector"
              },
              "name": {
                "type": "string",
                "description": "Name for the SIPREC connector resource.",
                "example": "siprec-connector"
              },
              "host": {
                "type": "string",
                "description": "Hostname/IPv4 address of the SIPREC SRS.",
                "example": "siprec.telnyx.com"
              },
              "port": {
                "type": "integer",
                "description": "Port for the SIPREC SRS.",
                "example": 5060
              },
              "app_subdomain": {
                "type": "string",
                "description": "Subdomain to route calls when using Telnyx SRS (optional).",
                "example": "my-app-domain"
              },
              "created_at": {
                "type": "string",
                "description": "ISO 8601 formatted date/time of creation.",
                "example": "2024-01-23T18:10:02.574Z"
              },
              "updated_at": {
                "type": "string",
                "description": "ISO 8601 formatted date/time of last update.",
                "example": "2024-01-23T18:10:02.574Z"
              }
            }
          }
        }
      },
      "SlimPhoneNumberDetailed": {
        "title": "SlimPhoneNumberDetailed",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "phone_number_slim"
          },
          "phone_number": {
            "type": "string",
            "description": "The +E.164-formatted phone number associated with this record.",
            "readOnly": true
          },
          "country_iso_alpha2": {
            "type": "string",
            "description": "The ISO 3166-1 alpha-2 country code of the phone number.",
            "readOnly": true,
            "example": "US"
          },
          "status": {
            "enum": [
              "purchase-pending",
              "purchase-failed",
              "port-pending",
              "port-failed",
              "active",
              "deleted",
              "emergency-only",
              "ported-out",
              "port-out-pending",
              "requirement-info-pending",
              "requirement-info-under-review",
              "requirement-info-exception",
              "provision-pending"
            ],
            "type": "string",
            "description": "The phone number's current status.",
            "readOnly": true
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          },
          "emergency_enabled": {
            "type": "boolean",
            "description": "Indicates whether emergency services are enabled for this number.",
            "readOnly": true
          },
          "emergency_address_id": {
            "type": "string",
            "description": "Identifies the emergency address associated with the phone number.",
            "format": "int64",
            "readOnly": true
          },
          "emergency_status": {
            "enum": [
              "active",
              "deprovisioning",
              "disabled",
              "provisioning",
              "provisioning-failed"
            ],
            "type": "string",
            "description": "Indicates the status of the provisioning of emergency services for the phone number. This field contains information about activity that may be ongoing for a number where it either is being provisioned or deprovisioned but is not yet enabled/disabled."
          },
          "call_forwarding_enabled": {
            "type": "boolean",
            "description": "Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.",
            "default": true,
            "readOnly": true
          },
          "cnam_listing_enabled": {
            "type": "boolean",
            "description": "Indicates whether a CNAM listing is enabled for this number.",
            "readOnly": true
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Indicates whether caller ID is enabled for this number.",
            "readOnly": true
          },
          "call_recording_enabled": {
            "type": "boolean",
            "description": "Indicates whether call recording is enabled for this number.",
            "readOnly": true
          },
          "t38_fax_gateway_enabled": {
            "type": "boolean",
            "description": "Indicates whether T38 Fax Gateway for inbound calls to this number.",
            "readOnly": true
          },
          "purchased_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was purchased.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "readOnly": true
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost",
              "landline",
              "tollfree",
              "shortcode",
              "longcode"
            ],
            "type": "string",
            "description": "The phone number's type.\nNote: For numbers purchased prior to July 2023 or when fetching a number's details immediately after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be returned instead.",
            "readOnly": true
          },
          "inbound_call_screening": {
            "enum": [
              "disabled",
              "reject_calls",
              "flag_calls"
            ],
            "type": "string",
            "description": "The inbound_call_screening setting is a phone number configuration option variable that allows users to configure their settings to block or flag fraudulent calls. It can be set to disabled, reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated with it.",
            "default": "disabled"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "phone_number",
          "phone_number": "+19705555098",
          "country_iso_alpha2": "US",
          "status": "active",
          "external_pin": "1234",
          "connection_id": "1293384261075731499",
          "customer_reference": "customer-reference",
          "billing_group_id": "86f58db9-0fe3-4adc-9d1f-46e66e6e9323",
          "emergency_enabled": true,
          "emergency_address_id": "1315261609962112019",
          "emergency_status": "active",
          "call_forwarding_enabled": true,
          "cnam_listing_enabled": true,
          "caller_id_name_enabled": true,
          "call_recording_enabled": true,
          "t38_fax_gateway_enabled": true,
          "phone_number_type": "local",
          "inbound_call_screening": "disabled",
          "purchased_at": "2019-10-23T18:10:00.000Z",
          "created_at": "2019-10-23T18:10:00.000Z",
          "updated_at": "2019-10-24T18:10:00.0000000+00:00",
          "hd_voice_enabled": true
        }
      },
      "SoundModifications": {
        "title": "Sound modifications",
        "type": "object",
        "properties": {
          "pitch": {
            "type": "number",
            "description": "Set the pitch directly, value should be > 0, default 1 (lower = lower tone)",
            "format": "double",
            "example": 0.8
          },
          "semitone": {
            "type": "number",
            "description": "Adjust the pitch in semitones, values should be between -14 and 14, default 0",
            "format": "double",
            "example": -10
          },
          "octaves": {
            "type": "number",
            "description": "Adjust the pitch in octaves, values should be between -1 and 1, default 0",
            "format": "double",
            "example": -0.5
          },
          "track": {
            "type": "string",
            "description": "The track to which the sound modifications will be applied. Accepted values are `inbound` or `outbound`",
            "default": "outbound",
            "example": "inbound"
          }
        },
        "description": "Use this field to modify sound effects, for example adjust the pitch.",
        "example": {
          "pitch": "0.8",
          "semitone": -2,
          "octaves": 0.1,
          "track": "both"
        }
      },
      "SourceResponse": {
        "title": "SourceResponse",
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "description": "A JSON Pointer [RFC6901] to the associated entity in the request document",
            "example": "/title"
          },
          "parameter": {
            "type": "string",
            "description": "a string indicating which URI query parameter caused the error",
            "example": "metrics"
          }
        }
      },
      "SpeakRequest": {
        "title": "Speak Request",
        "required": [
          "payload",
          "voice"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "type": "string",
            "description": "The text or SSML to be converted into speech. There is a 3,000 character limit.",
            "example": "Say this on the call"
          },
          "payload_type": {
            "enum": [
              "text",
              "ssml"
            ],
            "type": "string",
            "description": "The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).",
            "default": "text",
            "example": "ssml"
          },
          "service_level": {
            "enum": [
              "basic",
              "premium"
            ],
            "type": "string",
            "description": "This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.",
            "default": "premium",
            "example": "premium"
          },
          "stop": {
            "type": "string",
            "description": "When specified, it stops the current audio being played. Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.",
            "example": "current"
          },
          "voice": {
            "type": "string",
            "description": "Specifies the voice used in speech synthesis.\n\n- Define voices using the format `<Provider>.<Model>.<VoiceId>`. Specifying only the provider will give default values for voice_id and model_id.\n\n **Supported Providers:**\n- **AWS:** Use `AWS.Polly.<VoiceId>` (e.g., `AWS.Polly.Joanna`). For neural voices, which provide more realistic, human-like speech, append `-Neural` to the `VoiceId` (e.g., `AWS.Polly.Joanna-Neural`). Check the [available voices](https://docs.aws.amazon.com/polly/latest/dg/available-voices.html) for compatibility.\n- **Azure:** Use `Azure.<VoiceId>. (e.g. Azure.en-CA-ClaraNeural, Azure.en-CA-LiamNeural, Azure.en-US-BrianMultilingualNeural, Azure.en-US-Ava:DragonHDLatestNeural. For a complete list of voices, go to [Azure Voice Gallery](https://speech.microsoft.com/portal/voicegallery).)\n- **ElevenLabs:** Use `ElevenLabs.<ModelId>.<VoiceId>` (e.g., `ElevenLabs.eleven_multilingual_v2.21m00Tcm4TlvDq8ikWAM`). The `ModelId` part is optional. To use ElevenLabs, you must provide your ElevenLabs API key as an integration identifier secret in `\"voice_settings\": {\"api_key_ref\": \"<secret_identifier>\"}`. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. Check [available voices](https://elevenlabs.io/docs/api-reference/get-voices).\n - **Telnyx:** Use `Telnyx.<model_id>.<voice_id>`\n\nFor service_level basic, you may define the gender of the speaker (male or female).",
            "example": "Telnyx.KokoroTTS.af"
          },
          "voice_settings": {
            "description": "The settings associated with the voice selected"
          },
          "language": {
            "enum": [
              "arb",
              "cmn-CN",
              "cy-GB",
              "da-DK",
              "de-DE",
              "en-AU",
              "en-GB",
              "en-GB-WLS",
              "en-IN",
              "en-US",
              "es-ES",
              "es-MX",
              "es-US",
              "fr-CA",
              "fr-FR",
              "hi-IN",
              "is-IS",
              "it-IT",
              "ja-JP",
              "ko-KR",
              "nb-NO",
              "nl-NL",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sv-SE",
              "tr-TR"
            ],
            "type": "string",
            "description": "The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.",
            "example": "en-US"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "payload": "Say this on the call",
          "payload_type": "text",
          "service_level": "basic",
          "stop": "current",
          "voice": "female",
          "language": "arb",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartConferenceRecordingRequest": {
        "title": "Start Conference Recording Request",
        "required": [
          "format"
        ],
        "type": "object",
        "properties": {
          "format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "The audio file format used when storing the conference recording. Can be either `mp3` or `wav`.",
            "example": "mp3"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `conference_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "type": "boolean",
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "example": true
          },
          "trim": {
            "enum": [
              "trim-silence"
            ],
            "type": "string",
            "description": "When set to `trim-silence`, silence will be removed from the beginning and end of the recording.",
            "example": "trim-silence"
          },
          "custom_file_name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.",
            "example": "my_recording_file_name"
          }
        },
        "example": {
          "format": "wav",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true
        }
      },
      "StartForkingRequest": {
        "title": "Start Forking Request",
        "type": "object",
        "properties": {
          "rx": {
            "type": "string",
            "description": "The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be forwarded.",
            "example": "udp:192.0.2.1:9000"
          },
          "stream_type": {
            "enum": [
              "decrypted"
            ],
            "type": "string",
            "description": "Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.",
            "default": "decrypted",
            "example": "decrypted"
          },
          "tx": {
            "type": "string",
            "description": "The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be forwarded.",
            "example": "udp:192.0.2.1:9001"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "rx": "udp:192.0.2.1:9000",
          "tx": "udp:192.0.2.1:9001",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartRecordingRequest": {
        "title": "Start Recording Request",
        "required": [
          "format",
          "channels"
        ],
        "type": "object",
        "properties": {
          "format": {
            "enum": [
              "wav",
              "mp3"
            ],
            "type": "string",
            "description": "The audio file format used when storing the call recording. Can be either `mp3` or `wav`.",
            "example": "mp3"
          },
          "channels": {
            "enum": [
              "single",
              "dual"
            ],
            "type": "string",
            "description": "When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
            "example": "single"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "play_beep": {
            "type": "boolean",
            "description": "If enabled, a beep sound will be played at the start of a recording.",
            "example": true
          },
          "max_length": {
            "type": "integer",
            "description": "Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value is 14400. The default value is 0 (infinite)",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that call transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)",
            "format": "int32",
            "default": 0,
            "example": 100
          },
          "recording_track": {
            "enum": [
              "both",
              "inbound",
              "outbound"
            ],
            "type": "string",
            "description": "The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be recorded as mono (single channel).",
            "default": "both",
            "example": "outbound"
          },
          "trim": {
            "enum": [
              "trim-silence"
            ],
            "type": "string",
            "description": "When set to `trim-silence`, silence will be removed from the beginning and end of the recording.",
            "example": "trim-silence"
          },
          "custom_file_name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still add a Unix timestamp suffix.",
            "example": "my_recording_file_name"
          },
          "transcription": {
            "type": "boolean",
            "description": "Enable post recording transcription. The default value is false.",
            "default": false,
            "example": true
          },
          "transcription_engine": {
            "type": "string",
            "description": "Engine to use for speech recognition. `A` - `Google`",
            "default": "A",
            "example": "A"
          },
          "transcription_language": {
            "$ref": "#/components/schemas/GoogleTranscriptionLanguageLong"
          },
          "transcription_profanity_filter": {
            "type": "boolean",
            "description": "Enables profanity_filter. Applies to `google` engine only.",
            "default": false,
            "example": true
          },
          "transcription_speaker_diarization": {
            "type": "boolean",
            "description": "Enables speaker diarization. Applies to `google` engine only.",
            "default": false,
            "example": true
          },
          "transcription_min_speaker_count": {
            "type": "integer",
            "description": "Defines minimum number of speakers in the conversation. Applies to `google` engine only.",
            "format": "int32",
            "default": 2,
            "example": 4
          },
          "transcription_max_speaker_count": {
            "type": "integer",
            "description": "Defines maximum number of speakers in the conversation. Applies to `google` engine only.",
            "format": "int32",
            "default": 6,
            "example": 4
          }
        },
        "example": {
          "format": "wav",
          "channels": "single",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "play_beep": true,
          "max_length": 0,
          "timeout_secs": 0,
          "transcription": true,
          "transcription_engine": "B",
          "transcription_language": "en-US"
        }
      },
      "StartSiprecRequest": {
        "title": "Start Siprec Request",
        "type": "object",
        "properties": {
          "connector_name": {
            "type": "string",
            "description": "Name of configured SIPREC connector to be used.",
            "example": "my-siprec-connector"
          },
          "sip_transport": {
            "enum": [
              "udp",
              "tcp",
              "tls"
            ],
            "type": "string",
            "description": "Specifies SIP transport protocol.",
            "default": "udp",
            "example": "tcp"
          },
          "siprec_track": {
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "type": "string",
            "description": "Specifies which track should be sent on siprec session.",
            "default": "both_tracks",
            "example": "outbound_track"
          },
          "include_metadata_custom_headers": {
            "type": "boolean",
            "description": "When set, custom parameters will be added as metadata (recording.session.ExtensionParameters). Otherwise, they’ll be added to sip headers.",
            "example": true
          },
          "secure": {
            "type": "boolean",
            "description": "Controls whether to encrypt media sent to your SRS using SRTP and TLS. When set you need to configure SRS port in your connector to 5061.",
            "example": true
          },
          "session_timeout_secs": {
            "type": "integer",
            "description": "Sets `Session-Expires` header to the INVITE. A reinvite is sent every half the value set. Usefull for session keep alive. Minimum value is 90, set to 0 to disable.",
            "default": 1800,
            "example": 900
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          }
        },
        "example": {
          "connector_name": "my-siprec-connector",
          "siprec_track": "both_tracks",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StartStreamingRequest": {
        "title": "Start Streaming Request",
        "type": "object",
        "properties": {
          "stream_url": {
            "type": "string",
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "example": "wss://www.example.com/websocket"
          },
          "stream_track": {
            "enum": [
              "inbound_track",
              "outbound_track",
              "both_tracks"
            ],
            "type": "string",
            "description": "Specifies which track should be streamed.",
            "default": "inbound_track",
            "example": "both_tracks"
          },
          "stream_codec": {
            "$ref": "#/components/schemas/StreamCodec"
          },
          "stream_bidirectional_mode": {
            "$ref": "#/components/schemas/StreamBidirectionalMode"
          },
          "stream_bidirectional_codec": {
            "$ref": "#/components/schemas/StreamBidirectionalCodec"
          },
          "stream_bidirectional_target_legs": {
            "$ref": "#/components/schemas/StreamBidirectionalTargetLegs"
          },
          "enable_dialogflow": {
            "type": "boolean",
            "description": "Enables Dialogflow for the current call. The default value is false.",
            "default": false,
            "example": true
          },
          "dialogflow_config": {
            "$ref": "#/components/schemas/DialogflowConfig"
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "enable_dialogflow": false,
          "dialogflow_config": {
            "analyze_sentiment": false,
            "partial_automated_agent_reply": false
          }
        }
      },
      "StockExchange": {
        "title": "StockExchange",
        "enum": [
          "NONE",
          "NASDAQ",
          "NYSE",
          "AMEX",
          "AMX",
          "ASX",
          "B3",
          "BME",
          "BSE",
          "FRA",
          "ICEX",
          "JPX",
          "JSE",
          "KRX",
          "LON",
          "NSE",
          "OMX",
          "SEHK",
          "SSE",
          "STO",
          "SWX",
          "SZSE",
          "TSX",
          "TWSE",
          "VSE"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "(Required for public company) stock exchange.",
        "example": "NASDAQ"
      },
      "StopForkingRequest": {
        "title": "Stop Forking Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "stream_type": {
            "enum": [
              "raw",
              "decrypted"
            ],
            "type": "string",
            "description": "Optionally specify a `stream_type`. This should match the `stream_type` that was used in `fork_start` command to properly stop the fork.",
            "default": "raw",
            "example": "decrypted"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopGatherRequest": {
        "title": "Stop Gather Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopRecordingRequest": {
        "title": "Stop Recording Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "recording_id": {
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "6e00ab49-9487-4364-8ad6-23965965afb2"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "recording_id": "6e00ab49-9487-4364-8ad6-23965965afb2"
        }
      },
      "StopSiprecRequest": {
        "title": "Stop Siprec Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "StopStreamingRequest": {
        "title": "Stop Streaming Request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "stream_id": {
            "type": "string",
            "description": "Identifies the stream. If the `stream_id` is not provided the command stops all streams associated with a given `call_control_id`.",
            "format": "uuid",
            "example": "1edb94f9-7ef0-4150-b502-e0ebadfd9491"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "stream_id": "1edb94f9-7ef0-4150-b502-e0ebadfd9491"
        }
      },
      "FindNotificationsEventsConditions_200": {
        "title": "FindNotificationsEventsConditions_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationEventCondition"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "ListNotificationChannels_200": {
        "title": "ListNotificationChannels_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannel"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "StreamBidirectionalCodec": {
        "title": "Bidirectional Stream Codec",
        "enum": [
          "PCMU",
          "PCMA",
          "G722",
          "OPUS",
          "AMR-WB"
        ],
        "type": "string",
        "description": "Indicates codec for bidirectional streaming RTP payloads. Used only with stream_bidirectional_mode=rtp. Case sensitive.",
        "default": "PCMU",
        "example": "G722"
      },
      "StreamBidirectionalMode": {
        "title": "Bidirectional Stream Mode",
        "enum": [
          "mp3",
          "rtp"
        ],
        "type": "string",
        "description": "Configures method of bidirectional streaming (mp3, rtp).",
        "default": "mp3",
        "example": "rtp"
      },
      "StreamBidirectionalSamplingRate": {
        "title": "Bidirectional Stream Sampling Rate",
        "type": "integer",
        "description": "Audio sampling rate.",
        "default": 8000,
        "example": 16000
      },
      "StreamBidirectionalTargetLegs": {
        "title": "Bidirectional Stream Target Legs",
        "enum": [
          "both",
          "self",
          "opposite"
        ],
        "type": "string",
        "description": "Specifies which call legs should receive the bidirectional stream audio.",
        "default": "opposite",
        "example": "both"
      },
      "StreamCodec": {
        "title": "StreamCodec",
        "enum": [
          "PCMA",
          "PCMU",
          "default"
        ],
        "type": "string",
        "description": "Specifies the codec to be used for the streamed audio. When set to 'default' or when transcoding is not possible, the codec from the call will be used. Currently, transcoding is only supported between PCMU and PCMA codecs.",
        "default": "default",
        "example": "PCMA"
      },
      "CreatePushCredential": {
        "title": "CreatePushCredential",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "CreateIosPushCredentialRequest": "#/components/schemas/CreateIosPushCredentialRequest",
            "CreateAndroidPushCredentialRequest": "#/components/schemas/CreateAndroidPushCredentialRequest"
          }
        }
      },
      "StreamStatus": {
        "title": "StreamStatus",
        "enum": [
          "stopped"
        ],
        "type": "string",
        "description": "The status of the Stream you wish to update.",
        "default": "stopped",
        "example": "stopped"
      },
      "StreamTrack": {
        "title": "StreamTrack",
        "enum": [
          "inbound_track",
          "outbound_track",
          "both_tracks"
        ],
        "type": "string",
        "description": "Tracks to be included in the stream",
        "default": "inbound_track",
        "example": "both_tracks"
      },
      "SubNumberOrder": {
        "title": "SubNumberOrder",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "order_request_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "12ade33a-21c0-473b-b055-b3c836e1c293"
          },
          "country_code": {
            "type": "string",
            "readOnly": true,
            "example": "US"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost",
              "landline"
            ],
            "type": "string",
            "example": "local"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "example": "d70873cd-7c98-401a-81b6-b1ae08246995"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubNumberOrderRegulatoryRequirement"
            }
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "sub_number_order"
          },
          "phone_numbers_count": {
            "type": "integer",
            "description": "The count of phone numbers in the number order.",
            "readOnly": true,
            "example": 1
          },
          "created_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string denoting when the number order was created.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "An ISO 8901 datetime string for when the number order was updated.",
            "format": "datetime",
            "readOnly": true,
            "example": "2018-01-01T00:00:00.000000Z"
          },
          "requirements_met": {
            "type": "boolean",
            "description": "True if all requirements are met for every phone number, false otherwise.",
            "readOnly": true,
            "example": true
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failure"
            ],
            "type": "string",
            "description": "The status of the order.",
            "readOnly": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "is_block_sub_number_order": {
            "type": "boolean",
            "description": "True if the sub number order is a block sub number order",
            "readOnly": true,
            "example": false
          }
        }
      },
      "SubNumberOrderPhoneNumber": {
        "title": "SubNumberOrderPhoneNumber",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "phone_number": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "phone_number_type": {
            "type": "string"
          },
          "requirements_met": {
            "type": "boolean"
          },
          "requirements_status": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "record_type": {
            "type": "string"
          },
          "bundle_id": {
            "type": "string",
            "format": "uuid"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "requirement_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "field_type": {
                  "type": "string"
                },
                "field_value": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SubNumberOrderRegulatoryRequirement": {
        "title": "SubNumberOrderRegulatoryRequirement",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "phone_number_regulatory_requirement"
          },
          "requirement_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "format": "uuid",
            "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
          },
          "field_type": {
            "enum": [
              "textual",
              "datetime",
              "address",
              "document"
            ],
            "type": "string",
            "readOnly": true,
            "example": "address"
          }
        }
      },
      "SubNumberOrderRegulatoryRequirementWithValue": {
        "title": "SubNumberOrderRegulatoryRequirementWithValue",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "phone_number_regulatory_requirement"
          },
          "requirement_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "format": "uuid",
            "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
          },
          "field_type": {
            "enum": [
              "textual",
              "datetime",
              "address",
              "document"
            ],
            "type": "string",
            "readOnly": true,
            "example": "address"
          },
          "field_value": {
            "type": "string",
            "description": "The value of the requirement, this could be an id to a resource or a string value.",
            "example": "45f45a04-b4be-4592-95b1-9306b9db2b21"
          }
        }
      },
      "SubNumberOrderRequirementGroupResponse": {
        "title": "SubNumberOrderRequirementGroupResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "order_request_id": {
                "type": "string",
                "format": "uuid"
              },
              "country_code": {
                "type": "string"
              },
              "phone_number_type": {
                "type": "string"
              },
              "phone_numbers_count": {
                "type": "integer"
              },
              "requirements_met": {
                "type": "boolean"
              },
              "is_block_sub_number_order": {
                "type": "boolean"
              },
              "status": {
                "type": "string"
              },
              "customer_reference": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "record_type": {
                "type": "string"
              },
              "regulatory_requirements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegulatoryRequirement"
                }
              },
              "phone_numbers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubNumberOrderPhoneNumber"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "country_code": "AT",
            "created_at": "2018-01-01T00:00:00.0000000+00:00",
            "updated_at": "2018-01-01T00:00:00.0000000+00:00",
            "regulatory_requirements": [
              {
                "record_type": "phone_number_regulatory_requirement",
                "requirement_id": "2708e569-696a-4fc7-9305-5fdb3eb9c7dd",
                "field_type": "textual"
              }
            ],
            "phone_numbers_count": 1,
            "phone_numbers": [
              {
                "country_code": "AT",
                "regulatory_requirements": [
                  {
                    "field_value": "4804570924",
                    "requirement_id": "2708e569-696a-4fc7-9305-5fdb3eb9c7dd",
                    "field_type": "textual",
                    "status": "pending-approval"
                  }
                ],
                "bundle_id": null,
                "requirements_status": "requirement-info-under-review",
                "phone_number_type": "toll_free",
                "requirements_met": false,
                "record_type": "number_order_phone_number",
                "status": "pending",
                "id": "613d517a-0432-4bae-a785-c11033bd0985",
                "phone_number": "+43800300238"
              }
            ],
            "is_block_sub_number_order": false,
            "phone_number_type": "toll_free",
            "requirements_met": false,
            "id": "f826ed66-b27c-4340-9dc0-57dc3459f1bd",
            "order_request_id": "a11d58fe-88a4-494a-b752-8dea411993c6",
            "status": "pending",
            "customer_reference": "missing",
            "record_type": "sub_number_order"
          }
        }
      },
      "SubNumberOrdersReport": {
        "title": "SubNumberOrdersReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "cada7e84-122b-4b47-bc66-58c7c3becd40"
          },
          "order_type": {
            "type": "string",
            "description": "The type of order report.",
            "readOnly": true,
            "example": "sub_number_order"
          },
          "filters": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "success"
              },
              "country_code": {
                "type": "string",
                "example": "US"
              },
              "created_at_gt": {
                "type": "string",
                "format": "date-time",
                "example": "2023-04-05T10:22:08.2305490+00:00"
              },
              "created_at_lt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-06-05T10:22:08.2305490+00:00"
              },
              "order_request_id": {
                "type": "string",
                "format": "uuid",
                "example": "991b8ff5-4daf-4826-9a22-e3991b444a9c"
              },
              "customer_reference": {
                "type": "string",
                "example": "STRING"
              }
            },
            "description": "The filters that were applied to generate this report"
          },
          "status": {
            "enum": [
              "pending",
              "success",
              "failed",
              "expired"
            ],
            "type": "string",
            "description": "Indicates the completion level of the sub number orders report. The report must have a status of 'success' before it can be downloaded.",
            "default": "pending",
            "example": "pending"
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user who created the report.",
            "format": "uuid",
            "readOnly": true,
            "example": "0d7ef697-df19-413a-b724-56b0539f5397"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-11T13:21:40.9673390+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2025-06-11T13:21:45.7532600+00:00"
          }
        },
        "example": {
          "order_type": "sub_number_order",
          "filters": {
            "status": "success",
            "country_code": "US",
            "created_at_gt": "2023-04-05T10:22:08.2305490+00:00",
            "created_at_lt": "2025-06-05T10:22:08.2305490+00:00",
            "order_request_id": "991b8ff5-4daf-4826-9a22-e3991b444a9c",
            "customer_reference": "STRING"
          },
          "status": "pending",
          "created_at": "2025-06-11T13:21:40.9673390+00:00",
          "user_id": "0d7ef697-df19-413a-b724-56b0539f5397",
          "updated_at": "2025-06-11T13:21:45.7532600+00:00",
          "id": "cada7e84-122b-4b47-bc66-58c7c3becd40"
        }
      },
      "SummaryRequest": {
        "title": "SummaryRequest",
        "required": [
          "bucket",
          "filename"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "The name of the bucket that contains the file to be summarized."
          },
          "filename": {
            "type": "string",
            "description": "The name of the file to be summarized."
          },
          "system_prompt": {
            "type": "string",
            "description": "A system prompt to guide the summary generation."
          }
        }
      },
      "SummaryResponse": {
        "title": "SummaryResponse",
        "required": [
          "summary"
        ],
        "type": "object",
        "properties": {
          "summary": {
            "title": "Summary",
            "type": "string"
          }
        }
      },
      "SummaryResponseData": {
        "title": "SummaryResponseData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SummaryResponse"
          }
        }
      },
      "SupportedEmbeddingLoaders": {
        "title": "SupportedEmbeddingLoaders",
        "enum": [
          "default",
          "intercom"
        ],
        "type": "string",
        "description": "Supported types of custom document loaders for embeddings."
      },
      "SupportedEmbeddingModels": {
        "title": "SupportedEmbeddingModels",
        "enum": [
          "thenlper/gte-large",
          "intfloat/multilingual-e5-large"
        ],
        "type": "string",
        "description": "Supported models to vectorize and embed documents."
      },
      "GetMessage_200": {
        "title": "GetMessage_200",
        "type": "object",
        "properties": {
          "data": { }
        }
      },
      "TFPhoneNumber": {
        "title": "PhoneNumber",
        "required": [
          "phoneNumber"
        ],
        "type": "object",
        "properties": {
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string"
          }
        },
        "description": "A phone number"
      },
      "TFVerificationRequest": {
        "title": "VerificationRequest",
        "required": [
          "businessName",
          "corporateWebsite",
          "businessAddr1",
          "businessCity",
          "businessState",
          "businessZip",
          "businessContactFirstName",
          "businessContactLastName",
          "businessContactEmail",
          "businessContactPhone",
          "messageVolume",
          "phoneNumbers",
          "useCase",
          "useCaseSummary",
          "productionMessageContent",
          "optInWorkflow",
          "optInWorkflowImageURLs",
          "additionalInformation",
          "isvReseller"
        ],
        "type": "object",
        "properties": {
          "businessName": {
            "title": "Businessname",
            "maxLength": 500,
            "type": "string",
            "description": "Name of the business; there are no specific formatting requirements",
            "example": "Telnyx LLC"
          },
          "corporateWebsite": {
            "title": "Corporatewebsite",
            "maxLength": 500,
            "type": "string",
            "description": "A URL, including the scheme, pointing to the corporate website",
            "example": "http://example.com"
          },
          "businessAddr1": {
            "title": "Businessaddr1",
            "maxLength": 500,
            "type": "string",
            "description": "Line 1 of the business address",
            "example": "600 Congress Avenue"
          },
          "businessAddr2": {
            "title": "Businessaddr2",
            "maxLength": 500,
            "type": "string",
            "description": "Line 2 of the business address",
            "example": "14th Floor"
          },
          "businessCity": {
            "title": "Businesscity",
            "maxLength": 500,
            "type": "string",
            "description": "The city of the business address; the first letter should be capitalized",
            "example": "Austin"
          },
          "businessState": {
            "title": "Businessstate",
            "maxLength": 500,
            "type": "string",
            "description": "The full name of the state (not the 2 letter code) of the business address; the first letter should be capitalized",
            "example": "Texas"
          },
          "businessZip": {
            "title": "Businesszip",
            "maxLength": 500,
            "type": "string",
            "description": "The ZIP code of the business address",
            "example": "78701"
          },
          "businessContactFirstName": {
            "title": "Businesscontactfirstname",
            "maxLength": 500,
            "type": "string",
            "description": "First name of the business contact; there are no specific requirements on formatting",
            "example": "John"
          },
          "businessContactLastName": {
            "title": "Businesscontactlastname",
            "maxLength": 500,
            "type": "string",
            "description": "Last name of the business contact; there are no specific requirements on formatting",
            "example": "Doe"
          },
          "businessContactEmail": {
            "title": "Businesscontactemail",
            "maxLength": 500,
            "type": "string",
            "description": "The email address of the business contact",
            "example": "email@example.com"
          },
          "businessContactPhone": {
            "title": "Businesscontactphone",
            "maxLength": 500,
            "type": "string",
            "description": "The phone number of the business contact in E.164 format",
            "example": "+18005550100"
          },
          "messageVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Volume"
              }
            ],
            "description": "Estimated monthly volume of messages from the given phone numbers",
            "example": "100,000"
          },
          "phoneNumbers": {
            "title": "Phonenumbers",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TFPhoneNumber"
            },
            "description": "The phone numbers to request the verification of"
          },
          "useCase": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UseCaseCategories"
              }
            ],
            "description": "Machine-readable use-case for the phone numbers",
            "example": "2FA"
          },
          "useCaseSummary": {
            "title": "Usecasesummary",
            "maxLength": 500,
            "type": "string",
            "description": "Human-readable summary of the desired use-case",
            "example": "This is a use case where Telnyx sends out 2FA codes to portal users to verify their identity in order to sign into the portal"
          },
          "productionMessageContent": {
            "title": "Productionmessagecontent",
            "maxLength": 1000,
            "type": "string",
            "description": "An example of a message that will be sent from the given phone numbers",
            "example": "Your Telnyx OTP is XXXX"
          },
          "optInWorkflow": {
            "title": "Optinworkflow",
            "maxLength": 500,
            "type": "string",
            "description": "Human-readable description of how end users will opt into receiving messages from the given phone numbers",
            "example": "User signs into the Telnyx portal, enters a number and is prompted to select whether they want to use 2FA verification for security purposes. If they've opted in a confirmation message is sent out to the handset"
          },
          "optInWorkflowImageURLs": {
            "title": "Optinworkflowimageurls",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Url"
            },
            "description": "Images showing the opt-in workflow"
          },
          "additionalInformation": {
            "title": "Additionalinformation",
            "maxLength": 500,
            "type": "string",
            "description": "Any additional information"
          },
          "isvReseller": {
            "title": "Isvreseller",
            "maxLength": 500,
            "type": "string",
            "description": "ISV name"
          },
          "webhookUrl": {
            "title": "Webhookurl",
            "maxLength": 500,
            "type": "string",
            "description": "URL that should receive webhooks relating to this verification request",
            "example": "http://example-webhook.com"
          }
        },
        "description": "The body of a tollfree verification request"
      },
      "TFVerificationStatus": {
        "title": "VerificationStatus",
        "enum": [
          "Verified",
          "Rejected",
          "Waiting For Vendor",
          "Waiting For Customer",
          "Waiting For Telnyx",
          "In Progress"
        ],
        "type": "string",
        "description": "Tollfree verification status"
      },
      "TaskStatus": {
        "title": "TaskStatus",
        "enum": [
          "pending",
          "starting",
          "running",
          "completed",
          "failed"
        ],
        "type": "string"
      },
      "TaskStatusResponse": {
        "title": "TaskStatusResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "task_id": {
                "title": "Task ID",
                "type": "string",
                "format": "uuid"
              },
              "task_name": {
                "title": "Task Name",
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/BackgroundTaskStatus"
              },
              "created_at": {
                "title": "Created At",
                "type": "string"
              },
              "finished_at": {
                "title": "Finished At",
                "type": "string"
              }
            }
          }
        }
      },
      "TelephonyCredential": {
        "title": "On-demand Credential",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "string",
            "example": "c215ade3-0d39-418e-94be-c5f780760199"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "credential"
          },
          "name": {
            "type": "string"
          },
          "resource_id": {
            "type": "string",
            "description": "Identifies the resource this credential is associated with.",
            "example": "connection:1234567890"
          },
          "expired": {
            "type": "boolean",
            "description": "Defaults to false"
          },
          "sip_username": {
            "type": "string",
            "description": "The randomly generated SIP username for the credential.",
            "example": "gencrednCvHU5IYpSBPPsXI2iQsDX"
          },
          "sip_password": {
            "type": "string",
            "description": "The randomly generated SIP password for the credential.",
            "example": "a92dbcfb60184a8cb330b0acb2f7617b"
          },
          "created_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the resource will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "id": "c215ade3-0d39-418e-94be-c5f780760199",
          "record_type": "credential",
          "name": "2020-06-18 21:32:38.917732Z",
          "expired": "false",
          "user_id": "user-id",
          "resource_id": "connection:804252963366242252",
          "sip_password": "a92dbcfb60184a8cb330b0acb2f7617b",
          "sip_username": "gencrednCvHU5IYpSBPPsXI2iQsDX",
          "created_at": "2020-06-18T21:32:38",
          "expires_at": "2042-06-18T21:32:38",
          "updated_at": "2020-06-18T21:32:38.000Z"
        }
      },
      "TelephonyCredentialCreateRequest": {
        "title": "TelephonyCredentialCreateRequest",
        "required": [
          "connection_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "description": "Tags a credential. A single tag can hold at maximum 1000 credentials.",
            "example": "some_tag"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the Credential Connection this credential is associated with.",
            "example": "1234567890"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the credential will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "name": "My-new-credential",
          "connection_id": "1234567890"
        }
      },
      "TelephonyCredentialUpdateRequest": {
        "title": "TelephonyCredentialUpdateRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "description": "Tags a credential. A single tag can hold at maximum 1000 credentials.",
            "example": "some_tag"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the Credential Connection this credential is associated with.",
            "example": "987654321"
          },
          "expires_at": {
            "type": "string",
            "description": "ISO-8601 formatted date indicating when the credential will expire.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "name": "My-new-updated-credential",
          "connection_id": "987654321"
        }
      },
      "TelephonySettings": {
        "title": "TelephonySettings",
        "type": "object",
        "properties": {
          "default_texml_app_id": {
            "type": "string",
            "description": "Default Texml App used for voice calls with your assistant. This will be created automatically on assistant creation."
          }
        }
      },
      "TelnyxBrand": {
        "title": "TelnyxBrand",
        "required": [
          "entityType",
          "displayName",
          "country",
          "email",
          "brandRelationship",
          "vertical"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityType"
              }
            ],
            "description": "Entity type behind the brand. This is the form of business establishment."
          },
          "cspId": {
            "title": "Cspid",
            "type": "string",
            "description": "Unique identifier assigned to the csp by the registry."
          },
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand.",
            "example": "4b20017f-8da9-a992-a6c0-683072fb7729"
          },
          "tcrBrandId": {
            "title": "TcrBrandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "example": "BBRAND1"
          },
          "displayName": {
            "title": "Displayname",
            "maxLength": 100,
            "type": "string",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "companyName": {
            "title": "Companyname",
            "maxLength": 100,
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "ABC Inc."
          },
          "firstName": {
            "title": "Firstname",
            "maxLength": 100,
            "type": "string",
            "description": "First name of business contact.",
            "example": "John"
          },
          "lastName": {
            "title": "Lastname",
            "maxLength": 100,
            "type": "string",
            "description": "Last name of business contact.",
            "example": "Smith"
          },
          "ein": {
            "title": "Ein",
            "maxLength": 20,
            "type": "string",
            "description": "(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.",
            "example": "111111111"
          },
          "phone": {
            "title": "Phone",
            "maxLength": 20,
            "type": "string",
            "description": "Valid phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "street": {
            "title": "Street",
            "maxLength": 100,
            "type": "string",
            "description": "Street number and name.",
            "example": "123"
          },
          "city": {
            "title": "City",
            "maxLength": 100,
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "title": "State",
            "maxLength": 20,
            "type": "string",
            "description": "State. Must be 2 letters code for United States.",
            "example": "NY"
          },
          "postalCode": {
            "title": "Postalcode",
            "maxLength": 10,
            "type": "string",
            "description": "Postal codes. Use 5 digit zipcode for United States",
            "example": "10001"
          },
          "country": {
            "title": "Country",
            "maxLength": 2,
            "type": "string",
            "description": "ISO2 2 characters country code. Example: US - United States",
            "example": "US"
          },
          "email": {
            "title": "Email",
            "maxLength": 100,
            "type": "string",
            "description": "Valid email address of brand support contact."
          },
          "stockSymbol": {
            "title": "Stocksymbol",
            "maxLength": 10,
            "type": "string",
            "description": "(Required for public company) stock symbol.",
            "example": "ABC"
          },
          "stockExchange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StockExchange"
              }
            ],
            "description": "(Required for public company) stock exchange.",
            "example": "NASDAQ"
          },
          "ipAddress": {
            "title": "Ipaddress",
            "maxLength": 50,
            "type": "string",
            "description": "IP address of the browser requesting to create brand identity."
          },
          "website": {
            "title": "Website",
            "maxLength": 100,
            "type": "string",
            "description": "Brand website URL.",
            "example": "http://www.abcmobile.com"
          },
          "brandRelationship": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrandRelationship"
              }
            ],
            "description": "Brand relationship to the CSP"
          },
          "vertical": {
            "title": "Vertical",
            "maxLength": 50,
            "type": "string",
            "description": "Vertical or industry segment of the brand."
          },
          "altBusinessId": {
            "title": "Altbusinessid",
            "maxLength": 50,
            "type": "string",
            "description": "Alternate business identifier such as DUNS, LEI, or GIIN"
          },
          "altBusinessIdType": {
            "$ref": "#/components/schemas/AltBusinessIdType"
          },
          "universalEin": {
            "title": "Universalein",
            "type": "string",
            "description": "Universal EIN of Brand, Read Only."
          },
          "referenceId": {
            "title": "Referenceid",
            "type": "string",
            "description": "Unique identifier Telnyx assigned to the brand - the brandId"
          },
          "identityStatus": {
            "$ref": "#/components/schemas/BrandIdentityStatus"
          },
          "optionalAttributes": {
            "$ref": "#/components/schemas/BrandOptionalAttributes"
          },
          "mock": {
            "title": "Mock",
            "type": "boolean",
            "description": "Mock brand for testing purposes",
            "default": false
          },
          "mobilePhone": {
            "title": "Mobilephone",
            "maxLength": 20,
            "type": "string",
            "description": "Valid mobile phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "isReseller": {
            "title": "Isreseller",
            "type": "boolean",
            "description": "Indicates whether this brand is known to be a reseller",
            "default": false
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which brand status updates are sent.",
            "example": "https://webhook.com/67ea78a8-9f32-4d04-b62d-f9502e8e5f93"
          },
          "businessContactEmail": {
            "title": "BusinessContactEmail",
            "type": "string",
            "description": "Business contact email.\n\nRequired if `entityType` is `PUBLIC_PROFIT`.",
            "example": "name@example.com"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Failover webhook to which brand status updates are sent."
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time that the brand was created at.",
            "example": "2021-03-08T17:57:48.801186"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time that the brand was last updated at.",
            "example": "2021-03-08T17:57:48.801186"
          },
          "status": {
            "title": "status",
            "enum": [
              "OK",
              "REGISTRATION_PENDING",
              "REGISTRATION_FAILED"
            ],
            "description": "Status of the brand"
          },
          "failureReasons": {
            "title": "failureReasons",
            "description": "Failure reasons for brand"
          }
        },
        "description": "Telnyx-specific extensions to The Campaign Registry's `Brand` type"
      },
      "TelnyxBrandWithCampaignsCount": {
        "title": "TelnyxBrandWithCampaignsCount",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TelnyxBrand"
          },
          {
            "title": "TelnyxBrandWithCampaignsCount",
            "type": "object",
            "properties": {
              "assignedCampaignsCount": {
                "title": "AssignedCampaignsCount",
                "type": "number",
                "description": "Number of campaigns associated with the brand",
                "example": 3
              }
            }
          }
        ]
      },
      "TelnyxCampaignWithAssignedCount_CSP": {
        "title": "TelnyxCampaignWithAssignedCount_CSP",
        "type": "object",
        "properties": {
          "ageGated": {
            "title": "Agegated",
            "type": "boolean",
            "description": "Age gated content in campaign."
          },
          "autoRenewal": {
            "title": "Autorenewal",
            "type": "boolean",
            "description": "Campaign subscription auto-renewal status."
          },
          "billedDate": {
            "title": "Billeddate",
            "type": "string",
            "description": "Campaign recent billed date."
          },
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand.",
            "example": "d2ca9d69-641b-4131-83fa-5d0744f4c8a9"
          },
          "brandDisplayName": {
            "title": "Branddisplayname",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "Unique identifier for a campaign.",
            "example": "823d6b1a-6ed6-41a3-9c50-c8ff41b682ba"
          },
          "tcrBrandId": {
            "title": "TcrBrandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "example": "BBRAND1"
          },
          "tcrCampaignId": {
            "title": "TcrCampaignid",
            "type": "string",
            "description": "Unique identifier assigned to the campaign by the registry.",
            "example": "CCAMP1"
          },
          "createDate": {
            "title": "Createdate",
            "type": "string",
            "description": "Unix timestamp when campaign was created."
          },
          "cspId": {
            "title": "Cspid",
            "type": "string",
            "description": "Alphanumeric identifier of the CSP associated with this campaign."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "directLending": {
            "title": "Directlending",
            "type": "boolean"
          },
          "embeddedLink": {
            "title": "Embeddedlink",
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?"
          },
          "embeddedPhone": {
            "title": "Embeddedphone",
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?"
          },
          "helpKeywords": {
            "title": "Helpkeywords",
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "helpMessage": {
            "title": "Helpmessage",
            "type": "string",
            "description": "Help message of the campaign."
          },
          "messageFlow": {
            "title": "Messageflow",
            "type": "string",
            "description": "Message flow description."
          },
          "mock": {
            "title": "Mock",
            "type": "boolean",
            "description": "Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP."
          },
          "nextRenewalOrExpirationDate": {
            "title": "Nextrenewalorexpirationdate",
            "type": "string",
            "description": "When the campaign would be due for its next renew/bill date."
          },
          "numberPool": {
            "title": "Numberpool",
            "type": "boolean",
            "description": "Does campaign utilize pool of phone numbers?"
          },
          "optinKeywords": {
            "title": "Optinkeywords",
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "title": "Optinmessage",
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutKeywords": {
            "title": "Optoutkeywords",
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "optoutMessage": {
            "title": "Optoutmessage",
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "referenceId": {
            "title": "Referenceid",
            "type": "string",
            "description": "Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations."
          },
          "resellerId": {
            "title": "Resellerid",
            "type": "string",
            "description": "Alphanumeric identifier of the reseller that you want to associate with this campaign."
          },
          "sample1": {
            "title": "Sample1",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "title": "Sample2",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "title": "Sample3",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "title": "Sample4",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "title": "Sample5",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. "
          },
          "subUsecases": {
            "title": "Subusecases",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases"
          },
          "subscriberHelp": {
            "title": "Subscriberhelp",
            "type": "boolean",
            "description": "Does campaign responds to help keyword(s)?"
          },
          "subscriberOptin": {
            "title": "Subscriberoptin",
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?"
          },
          "subscriberOptout": {
            "title": "Subscriberoptout",
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?"
          },
          "termsAndConditions": {
            "title": "Termsandconditions",
            "type": "boolean",
            "description": "Is terms & conditions accepted?"
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "vertical": {
            "title": "Vertical",
            "type": "string",
            "description": "Business/industry segment of this campaign (Deprecated). Must be of defined valid types. Use `/registry/enum/vertical` operation to retrieve verticals available for given brand, vertical combination.\n\nThis field is deprecated.",
            "deprecated": true
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent.",
            "example": "https://example.com/webhook"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Failover webhook to which campaign status updates are sent.",
            "example": "https://example.com/failover-webhook"
          },
          "isTMobileRegistered": {
            "title": "IsTMobileRegistered",
            "type": "boolean",
            "description": "Indicates whether the campaign is registered with T-Mobile."
          },
          "isTMobileSuspended": {
            "title": "isTMobileSuspended",
            "type": "boolean",
            "description": "Indicates whether the campaign is suspended with T-Mobile."
          },
          "isTMobileNumberPoolingEnabled": {
            "title": "isTMobileNumberPoolingEnabled",
            "type": "boolean",
            "description": "Indicates whether the campaign has a T-Mobile number pool ID associated with it."
          },
          "failureReasons": {
            "title": "failureReasons",
            "description": "Failure reasons if campaign submission failed"
          },
          "submissionStatus": {
            "title": "submissionStatus",
            "enum": [
              "CREATED",
              "FAILED",
              "PENDING"
            ],
            "description": "Campaign submission status"
          },
          "campaignStatus": {
            "title": "campaignStatus",
            "enum": [
              "TCR_PENDING",
              "TCR_SUSPENDED",
              "TCR_EXPIRED",
              "TCR_ACCEPTED",
              "TCR_FAILED",
              "TELNYX_ACCEPTED",
              "TELNYX_FAILED",
              "MNO_PENDING",
              "MNO_ACCEPTED",
              "MNO_REJECTED",
              "MNO_PROVISIONED",
              "MNO_PROVISIONING_FAILED"
            ],
            "description": "Campaign status",
            "example": "TCR_ACCEPTED"
          },
          "privacyPolicyLink": {
            "title": "PrivacyPolicyLink",
            "type": "string",
            "description": "Link to the campaign's privacy policy."
          },
          "termsAndConditionsLink": {
            "title": "TermsAndConditionsLink",
            "type": "string",
            "description": "Link to the campaign's terms and conditions."
          },
          "embeddedLinkSample": {
            "title": "EmbeddedLinkSample",
            "type": "string",
            "description": "Sample of an embedded link that will be sent to subscribers."
          },
          "assignedPhoneNumbersCount": {
            "title": "AssignedPhoneNumbersCount",
            "type": "number",
            "description": "Number of phone numbers associated with the campaign",
            "example": 3
          }
        }
      },
      "TelnyxCampaign_CSP": {
        "title": "TelnyxCampaign_CSP",
        "required": [
          "brandId",
          "campaignId",
          "cspId",
          "description",
          "mock",
          "subUsecases",
          "termsAndConditions",
          "usecase"
        ],
        "type": "object",
        "properties": {
          "ageGated": {
            "title": "Agegated",
            "type": "boolean",
            "description": "Age gated content in campaign."
          },
          "autoRenewal": {
            "title": "Autorenewal",
            "type": "boolean",
            "description": "Campaign subscription auto-renewal status."
          },
          "billedDate": {
            "title": "Billeddate",
            "type": "string",
            "description": "Campaign recent billed date."
          },
          "brandId": {
            "title": "Brandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand.",
            "example": "d2ca9d69-641b-4131-83fa-5d0744f4c8a9"
          },
          "brandDisplayName": {
            "title": "Branddisplayname",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "campaignId": {
            "title": "Campaignid",
            "type": "string",
            "description": "Unique identifier for a campaign.",
            "example": "823d6b1a-6ed6-41a3-9c50-c8ff41b682ba"
          },
          "tcrBrandId": {
            "title": "TcrBrandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "example": "BBRAND1"
          },
          "tcrCampaignId": {
            "title": "TcrCampaignid",
            "type": "string",
            "description": "Unique identifier assigned to the campaign by the registry.",
            "example": "CCAMP1"
          },
          "createDate": {
            "title": "Createdate",
            "type": "string",
            "description": "Unix timestamp when campaign was created."
          },
          "cspId": {
            "title": "Cspid",
            "type": "string",
            "description": "Alphanumeric identifier of the CSP associated with this campaign."
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "directLending": {
            "title": "Directlending",
            "type": "boolean"
          },
          "embeddedLink": {
            "title": "Embeddedlink",
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?"
          },
          "embeddedPhone": {
            "title": "Embeddedphone",
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?"
          },
          "helpKeywords": {
            "title": "Helpkeywords",
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "helpMessage": {
            "title": "Helpmessage",
            "type": "string",
            "description": "Help message of the campaign."
          },
          "messageFlow": {
            "title": "Messageflow",
            "type": "string",
            "description": "Message flow description."
          },
          "mock": {
            "title": "Mock",
            "type": "boolean",
            "description": "Campaign created from mock brand. Mocked campaign cannot be shared with an upstream CNP."
          },
          "nextRenewalOrExpirationDate": {
            "title": "Nextrenewalorexpirationdate",
            "type": "string",
            "description": "When the campaign would be due for its next renew/bill date."
          },
          "numberPool": {
            "title": "Numberpool",
            "type": "boolean",
            "description": "Does campaign utilize pool of phone numbers?"
          },
          "optinKeywords": {
            "title": "Optinkeywords",
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "title": "Optinmessage",
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutKeywords": {
            "title": "Optoutkeywords",
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "optoutMessage": {
            "title": "Optoutmessage",
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "referenceId": {
            "title": "Referenceid",
            "type": "string",
            "description": "Caller supplied campaign reference ID. If supplied, the value must be unique across all submitted campaigns. Can be used to prevent duplicate campaign registrations."
          },
          "resellerId": {
            "title": "Resellerid",
            "type": "string",
            "description": "Alphanumeric identifier of the reseller that you want to associate with this campaign."
          },
          "sample1": {
            "title": "Sample1",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "title": "Sample2",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "title": "Sample3",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "title": "Sample4",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "title": "Sample5",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. "
          },
          "subUsecases": {
            "title": "Subusecases",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases"
          },
          "subscriberHelp": {
            "title": "Subscriberhelp",
            "type": "boolean",
            "description": "Does campaign responds to help keyword(s)?"
          },
          "subscriberOptin": {
            "title": "Subscriberoptin",
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?"
          },
          "subscriberOptout": {
            "title": "Subscriberoptout",
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?"
          },
          "termsAndConditions": {
            "title": "Termsandconditions",
            "type": "boolean",
            "description": "Is terms & conditions accepted?"
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "vertical": {
            "title": "Vertical",
            "type": "string",
            "description": "Business/industry segment of this campaign (Deprecated). Must be of defined valid types. Use `/registry/enum/vertical` operation to retrieve verticals available for given brand, vertical combination.\n\nThis field is deprecated.",
            "deprecated": true
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent.",
            "example": "https://example.com/webhook"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Failover webhook to which campaign status updates are sent.",
            "example": "https://example.com/failover-webhook"
          },
          "isTMobileRegistered": {
            "title": "IsTMobileRegistered",
            "type": "boolean",
            "description": "Indicates whether the campaign is registered with T-Mobile."
          },
          "isTMobileSuspended": {
            "title": "isTMobileSuspended",
            "type": "boolean",
            "description": "Indicates whether the campaign is suspended with T-Mobile."
          },
          "isTMobileNumberPoolingEnabled": {
            "title": "isTMobileNumberPoolingEnabled",
            "type": "boolean",
            "description": "Indicates whether the campaign has a T-Mobile number pool ID associated with it."
          },
          "failureReasons": {
            "title": "failureReasons",
            "description": "Failure reasons if campaign submission failed"
          },
          "submissionStatus": {
            "title": "submissionStatus",
            "enum": [
              "CREATED",
              "FAILED",
              "PENDING"
            ],
            "description": "Campaign submission status"
          },
          "campaignStatus": {
            "title": "campaignStatus",
            "enum": [
              "TCR_PENDING",
              "TCR_SUSPENDED",
              "TCR_EXPIRED",
              "TCR_ACCEPTED",
              "TCR_FAILED",
              "TELNYX_ACCEPTED",
              "TELNYX_FAILED",
              "MNO_PENDING",
              "MNO_ACCEPTED",
              "MNO_REJECTED",
              "MNO_PROVISIONED",
              "MNO_PROVISIONING_FAILED"
            ],
            "description": "Campaign status",
            "example": "TCR_ACCEPTED"
          },
          "privacyPolicyLink": {
            "title": "PrivacyPolicyLink",
            "type": "string",
            "description": "Link to the campaign's privacy policy."
          },
          "termsAndConditionsLink": {
            "title": "TermsAndConditionsLink",
            "type": "string",
            "description": "Link to the campaign's terms and conditions."
          },
          "embeddedLinkSample": {
            "title": "EmbeddedLinkSample",
            "type": "string",
            "description": "Sample of an embedded link that will be sent to subscribers."
          }
        },
        "description": "Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service. Most attributes of campaignare immutable, including **usecase**, **vertical**, **brandId** and **cspId**."
      },
      "TelnyxDownstreamCampaign": {
        "title": "TelnyxDownstreamCampaign",
        "required": [
          "tcrBrandId",
          "tcrCampaignId"
        ],
        "type": "object",
        "properties": {
          "ageGated": {
            "title": "AgeGated",
            "type": "boolean",
            "description": "Age gated content in campaign."
          },
          "assignedPhoneNumbersCount": {
            "title": "AssignedPhoneNumbersCount",
            "type": "number",
            "description": "Number of phone numbers associated with the campaign",
            "example": 3
          },
          "brandDisplayName": {
            "title": "Branddisplayname",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "campaignStatus": {
            "title": "campaignStatus",
            "enum": [
              "TCR_PENDING",
              "TCR_SUSPENDED",
              "TCR_EXPIRED",
              "TCR_ACCEPTED",
              "TCR_FAILED",
              "TELNYX_ACCEPTED",
              "TELNYX_FAILED",
              "MNO_PENDING",
              "MNO_ACCEPTED",
              "MNO_REJECTED",
              "MNO_PROVISIONED",
              "MNO_PROVISIONING_FAILED"
            ],
            "description": "Campaign status",
            "example": "TCR_ACCEPTED"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Summary description of this campaign."
          },
          "directLending": {
            "title": "Directlending",
            "type": "boolean",
            "description": "Direct lending or loan arrangement."
          },
          "embeddedLink": {
            "title": "Embeddedlink",
            "type": "boolean",
            "description": "Does message generated by the campaign include URL link in SMS?"
          },
          "embeddedLinkSample": {
            "title": "EmbeddedLinkSample",
            "type": "string",
            "description": "Sample of an embedded link that will be sent to subscribers."
          },
          "embeddedPhone": {
            "title": "Embeddedphone",
            "type": "boolean",
            "description": "Does message generated by the campaign include phone number in SMS?"
          },
          "failureReasons": {
            "title": "failureReasons",
            "description": "Failure reasons if campaign submission failed"
          },
          "helpKeywords": {
            "title": "Helpkeywords",
            "type": "string",
            "description": "Subscriber help keywords. Multiple keywords are comma separated without space."
          },
          "helpMessage": {
            "title": "Helpmessage",
            "type": "string",
            "description": "Help message of the campaign."
          },
          "isNumberPoolingEnabled": {
            "title": "isNumberPoolingEnabled",
            "type": "boolean",
            "description": "Indicates whether the campaign has a T-Mobile number pool ID associated with it."
          },
          "messageFlow": {
            "title": "Messageflow",
            "type": "string",
            "description": "Message flow description."
          },
          "numberPool": {
            "title": "Numberpool",
            "type": "boolean",
            "description": "Does campaign utilize pool of phone numbers?"
          },
          "optinKeywords": {
            "title": "Optinkeywords",
            "type": "string",
            "description": "Subscriber opt-in keywords. Multiple keywords are comma separated without space."
          },
          "optinMessage": {
            "title": "Optinmessage",
            "type": "string",
            "description": "Subscriber opt-in message."
          },
          "optoutKeywords": {
            "title": "Optoutkeywords",
            "type": "string",
            "description": "Subscriber opt-out keywords. Multiple keywords are comma separated without space."
          },
          "optoutMessage": {
            "title": "Optoutmessage",
            "type": "string",
            "description": "Subscriber opt-out message."
          },
          "privacyPolicyLink": {
            "title": "PrivacyPolicyLink",
            "type": "string",
            "description": "Link to the campaign's privacy policy."
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand."
          },
          "sample1": {
            "title": "Sample1",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "title": "Sample2",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "title": "Sample3",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "title": "Sample4",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "title": "Sample5",
            "type": "string",
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "subUsecases": {
            "title": "Subusecases",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Campaign sub-usecases. Must be of defined valid sub-usecase types. Use `/registry/enum/usecase` operation to retrieve list of valid sub-usecases"
          },
          "subscriberOptin": {
            "title": "Subscriberoptin",
            "type": "boolean",
            "description": "Does campaign require subscriber to opt-in before SMS is sent to subscriber?"
          },
          "subscriberOptout": {
            "title": "Subscriberoptout",
            "type": "boolean",
            "description": "Does campaign support subscriber opt-out keyword(s)?"
          },
          "tcrBrandId": {
            "title": "TcrBrandid",
            "type": "string",
            "description": "Unique identifier assigned to the brand by the registry.",
            "example": "BBRAND1"
          },
          "tcrCampaignId": {
            "title": "TcrCampaignid",
            "type": "string",
            "description": "Unique identifier assigned to the campaign by the registry.",
            "example": "CCAMP1"
          },
          "termsAndConditions": {
            "title": "Termsandconditions",
            "type": "boolean",
            "description": "Is terms & conditions accepted?"
          },
          "termsAndConditionsLink": {
            "title": "TermsAndConditionsLink",
            "type": "string",
            "description": "Link to the campaign's terms and conditions."
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent.",
            "example": "https://example.com/webhook"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Failover webhook to which campaign status updates are sent.",
            "example": "https://example.com/failover-webhook"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time that the brand was created at.",
            "example": "2021-03-08T17:57:48.801186"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time that the brand was last updated at.",
            "example": "2021-03-08T17:57:48.801186"
          }
        },
        "description": "Campaign is generated by the 10DLC registry once the corresponding campaign request is approved. Each campaign is assigned a unique identifier - **campaignId**. Once a campaign is activated, limited information is published to the NetNumber OSR service for consumption by members of the ecosystem. When a campaign is suspended(reversible) or expired(non-reversible), campaign data is deleted from the OSR service."
      },
      "TelnyxDownstreamCampaignRecordSet": {
        "title": "TelnyxDownstreamCampaignRecordSet",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TelnyxDownstreamCampaign"
            }
          },
          "page": {
            "title": "Page",
            "type": "integer"
          },
          "totalRecords": {
            "title": "Totalrecords",
            "type": "integer"
          }
        }
      },
      "TelnyxTranscriptionLanguage": {
        "title": "Telnyx transcription engine list of languages",
        "enum": [
          "en",
          "zh",
          "de",
          "es",
          "ru",
          "ko",
          "fr",
          "ja",
          "pt",
          "tr",
          "pl",
          "ca",
          "nl",
          "ar",
          "sv",
          "it",
          "id",
          "hi",
          "fi",
          "vi",
          "he",
          "uk",
          "el",
          "ms",
          "cs",
          "ro",
          "da",
          "hu",
          "ta",
          "no",
          "th",
          "ur",
          "hr",
          "bg",
          "lt",
          "la",
          "mi",
          "ml",
          "cy",
          "sk",
          "te",
          "fa",
          "lv",
          "bn",
          "sr",
          "az",
          "sl",
          "kn",
          "et",
          "mk",
          "br",
          "eu",
          "is",
          "hy",
          "ne",
          "mn",
          "bs",
          "kk",
          "sq",
          "sw",
          "gl",
          "mr",
          "pa",
          "si",
          "km",
          "sn",
          "yo",
          "so",
          "af",
          "oc",
          "ka",
          "be",
          "tg",
          "sd",
          "gu",
          "am",
          "yi",
          "lo",
          "uz",
          "fo",
          "ht",
          "ps",
          "tk",
          "nn",
          "mt",
          "sa",
          "lb",
          "my",
          "bo",
          "tl",
          "mg",
          "as",
          "tt",
          "haw",
          "ln",
          "ha",
          "ba",
          "jw",
          "su",
          "auto_detect"
        ],
        "type": "string",
        "description": "Language to use for speech recognition",
        "default": "en",
        "example": "en"
      },
      "TelnyxVoiceSettings": {
        "title": "Telnyx Voice Settings",
        "type": "object",
        "properties": {
          "voice_speed": {
            "maximum": 2.0,
            "minimum": 0.1,
            "type": "number",
            "description": "The voice speed to be used for the voice. The voice speed must be between 0.1 and 2.0. Default value is 1.0.",
            "format": "float",
            "default": 1,
            "example": 1
          }
        }
      },
      "TestWebhookToolRequest": {
        "title": "TestWebhookToolRequest",
        "type": "object",
        "properties": {
          "arguments": {
            "title": "Arguments",
            "type": "object",
            "description": "Key-value arguments to use for the webhook test"
          },
          "dynamic_variables": {
            "title": "Dynamic Variables",
            "type": "object",
            "description": "Key-value dynamic variables to use for the webhook test"
          }
        },
        "description": "Request model for testing a webhook tool"
      },
      "TestWebhookToolResponse": {
        "title": "TestWebhookToolResponse",
        "required": [
          "success",
          "status_code",
          "content_type",
          "response",
          "request"
        ],
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "type": "boolean"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "content_type": {
            "title": "Content Type",
            "type": "string"
          },
          "response": {
            "title": "Response",
            "type": "string"
          },
          "request": {
            "title": "Request",
            "type": "object"
          }
        },
        "description": "Response model for webhook tool test results"
      },
      "TestWebhookToolResponseData": {
        "title": "TestWebhookToolResponseData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TestWebhookToolResponse"
          }
        },
        "description": "Response model for webhook tool test results"
      },
      "TexmlApplication": {
        "title": "Texml Application",
        "type": "object",
        "properties": {
          "id": {
            "title": "Int ID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "int64",
            "example": "1293384261075731499"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "texml_application"
          },
          "friendly_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "title": "First Command Timeout",
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "title": "First Command Timeout Secs",
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "url",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "format": "url",
            "default": null,
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "format": "url",
            "default": null,
            "example": "https://example.com"
          },
          "status_callback_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "default": "post",
            "example": "get"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Texml Application."
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "shaken_stir_enabled": {
                "type": "boolean",
                "description": "When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.",
                "default": false,
                "example": false
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2020-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2020-02-03T22:25:27.521Z"
          }
        },
        "example": {
          "id": "1293384261075731499",
          "record_type": "texml_application",
          "active": false,
          "friendly_name": "call-router",
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "tags": [
            "tag1",
            "tag2"
          ],
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "created_at": "2020-02-02T22:25:27.521Z",
          "updated_at": "2020-02-03T22:25:27.521Z"
        }
      },
      "TexmlBidirectionalStreamCodec": {
        "title": "Stream Bidirectional Codec",
        "enum": [
          "PCMU",
          "PCMA",
          "G722"
        ],
        "type": "string",
        "description": "Indicates codec for bidirectional streaming RTP payloads. Used only with stream_bidirectional_mode=rtp. Case sensitive.",
        "default": "PCMU",
        "example": "G722"
      },
      "TexmlBidirectionalStreamMode": {
        "title": "Stream Bidirectional Mode",
        "enum": [
          "mp3",
          "rtp"
        ],
        "type": "string",
        "description": "Configures method of bidirectional streaming (mp3, rtp).",
        "default": "mp3",
        "example": "rtp"
      },
      "TexmlCreateCallRecordingRequestBody": {
        "title": "Texml Create Call Recording Request Body",
        "type": "object",
        "properties": {
          "PlayBeep": {
            "type": "boolean",
            "description": "Whether to play a beep when recording is started.",
            "default": true,
            "example": false
          },
          "RecordingStatusCallbackEvent": {
            "type": "string",
            "description": "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.",
            "example": "in-progress completed absent"
          },
          "RecordingStatusCallback": {
            "type": "string",
            "description": "Url where status callbacks will be sent.",
            "format": "uri",
            "example": "http://webhook.com/callback"
          },
          "RecordingStatusCallbackMethod": {
            "$ref": "#/components/schemas/TexmlStatusCallbackMethod"
          },
          "RecordingChannels": {
            "$ref": "#/components/schemas/TexmlRecordingChannels"
          },
          "RecordingTrack": {
            "$ref": "#/components/schemas/RecordingTrack"
          },
          "SendRecordingUrl": {
            "type": "boolean",
            "description": "Whether to send RecordingUrl in webhooks.",
            "default": true,
            "example": false
          }
        }
      },
      "TexmlCreateCallRecordingResponseBody": {
        "title": "Texml Create Call Recording Response Body",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "conference_sid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1"
          },
          "channels": {
            "$ref": "#/components/schemas/TwimlRecordingChannels"
          },
          "date_created": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "date_updated": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "start_time": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "price": {
            "type": "string",
            "description": "The price of this recording, the currency is specified in the price_unit field. ",
            "nullable": true,
            "example": "0.10"
          },
          "price_unit": {
            "type": "string",
            "description": "The unit in which the price is given.",
            "nullable": true,
            "example": "USD"
          },
          "duration": {
            "type": "string",
            "description": "The duration of this recording, given in seconds.",
            "nullable": true,
            "example": "12"
          },
          "sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "source": {
            "$ref": "#/components/schemas/RecordingSource"
          },
          "error_code": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "track": {
            "$ref": "#/components/schemas/RecordingTrack"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this recording resource.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls/v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA/Recordings/b08f0fa1-a32c-4218-b3b5-9cf78941ccac.json"
          }
        }
      },
      "TexmlCreateCallStreamingRequestBody": {
        "title": "Texml Create Call Streaming Request Body",
        "type": "object",
        "properties": {
          "StatusCallback": {
            "type": "string",
            "description": "Url where status callbacks will be sent.",
            "format": "uri",
            "example": "http://webhook.com/callback"
          },
          "StatusCallbackMethod": {
            "$ref": "#/components/schemas/TexmlStatusCallbackMethod"
          },
          "Track": {
            "$ref": "#/components/schemas/StreamTrack"
          },
          "Name": {
            "type": "string",
            "description": "The user specified name of Stream.",
            "example": "My stream"
          },
          "BidirectionalMode": {
            "$ref": "#/components/schemas/TexmlBidirectionalStreamMode"
          },
          "BidirectionalCodec": {
            "$ref": "#/components/schemas/TexmlBidirectionalStreamCodec"
          },
          "Url": {
            "title": "Stream destination URL",
            "type": "string",
            "description": "The destination WebSocket address where the stream is going to be delivered.",
            "example": "wss://www.example.com/websocket"
          }
        }
      },
      "TexmlCreateCallStreamingResponseBody": {
        "title": "Texml Create Call Streaming Response Body",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "name": {
            "type": "string",
            "description": "The user specified name of Stream.",
            "example": "My stream"
          },
          "status": {
            "enum": [
              "in-progress"
            ],
            "type": "string",
            "description": "The status of the streaming.",
            "example": "in-progress"
          },
          "date_updated": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this streaming resource.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls/v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA/Streams/b08f0fa1-a32c-4218-b3b5-9cf78941ccac.json"
          }
        }
      },
      "TexmlCreateSiprecSessionRequestBody": {
        "title": "Create Siprec Session Request",
        "type": "object",
        "properties": {
          "ConnectorName": {
            "type": "string",
            "description": "The name of the connector to use for the SIPREC session.",
            "example": "my_connector"
          },
          "Name": {
            "type": "string",
            "description": "Name of the SIPREC session. May be used to stop the SIPREC session from TeXML instruction.",
            "example": "my_siprec_session"
          },
          "Track": {
            "enum": [
              "both_tracks",
              "inbound_track",
              "outbound_track"
            ],
            "type": "string",
            "description": "The track to be used for siprec session. Can be `both_tracks`, `inbound_track` or `outbound_track`. Defaults to `both_tracks`.",
            "example": "both_tracks"
          },
          "IncludeMetadataCustomHeaders": {
            "type": "boolean",
            "description": "When set, custom parameters will be added as metadata (recording.session.ExtensionParameters). Otherwise, they’ll be added to sip headers.",
            "example": true
          },
          "Secure": {
            "type": "boolean",
            "description": "Controls whether to encrypt media sent to your SRS using SRTP and TLS. When set you need to configure SRS port in your connector to 5061.",
            "example": true
          },
          "SessionTimeoutSecs": {
            "type": "integer",
            "description": "Sets `Session-Expires` header to the INVITE. A reinvite is sent every half the value set. Usefull for session keep alive. Minimum value is 90, set to 0 to disable.",
            "default": 1800,
            "example": 900
          },
          "SipTransport": {
            "enum": [
              "udp",
              "tcp",
              "tls"
            ],
            "type": "string",
            "description": "Specifies SIP transport protocol.",
            "default": "udp",
            "example": "tcp"
          },
          "StatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send status callback events to for the siprec session.",
            "example": "https://www.example.com/callback"
          },
          "StatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `StatusCallback`.",
            "example": "GET"
          }
        }
      },
      "TexmlCreateSiprecSessionResponseBody": {
        "title": "Create Siprec Session Response",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "description": "The id of the call the resource belongs to.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "sid": {
            "type": "string",
            "description": "The SID of the siprec session.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18123"
          },
          "date_created": {
            "type": "string",
            "description": "The date and time the siprec session was created.",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "date_updated": {
            "type": "string",
            "description": "The date and time the siprec session was last updated.",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "start_time": {
            "type": "string",
            "description": "The date and time the siprec session was started.",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "status": {
            "enum": [
              "in-progress",
              "stopped"
            ],
            "type": "string",
            "description": "The status of the siprec session.",
            "example": "in-progress"
          },
          "track": {
            "enum": [
              "both_tracks",
              "inbound_track",
              "outbound_track"
            ],
            "type": "string",
            "description": "The track used for the siprec session.",
            "example": "both_tracks"
          },
          "uri": {
            "type": "string",
            "description": "The URI of the siprec session.",
            "example": "https://api.telnyx.com/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18123/Calls/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-ai/Siprec/61bf923e-5e4d-4595-a110-56190ea18123"
          },
          "error_code": {
            "type": "string",
            "description": "The error code of the siprec session.",
            "example": null
          }
        }
      },
      "EnableManagedAccount": {
        "title": "EnableManagedAccount",
        "type": "object",
        "properties": {
          "reenable_all_connections": {
            "type": "boolean",
            "description": "When true, all connections owned by this managed account will automatically be re-enabled. Note: Any connections that do not pass validations will not be re-enabled.",
            "default": false,
            "example": true
          }
        }
      },
      "TexmlGetCallRecordingResponseBody": {
        "title": "Texml Get Call Recording Response Body",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "conference_sid": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "cd5a70f4-759b-4d5e-9c06-88c00f16f3c1"
          },
          "channels": {
            "$ref": "#/components/schemas/TwimlRecordingChannels"
          },
          "date_created": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "date_updated": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "start_time": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "duration": {
            "type": "string",
            "description": "The duration of this recording, given in seconds.",
            "nullable": true,
            "example": "12"
          },
          "sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "source": {
            "$ref": "#/components/schemas/RecordingSource"
          },
          "status": {
            "$ref": "#/components/schemas/TexmlRecordingStatus"
          },
          "error_code": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "subresources_uris": {
            "$ref": "#/components/schemas/TexmlRecordingSubresourcesUris"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this recording resource.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings/b08f0fa1-a32c-4218-b3b5-9cf78941ccac.json"
          },
          "media_url": {
            "type": "string",
            "format": "uri",
            "example": "http://recordings.com/mp3/filename.mp3"
          }
        }
      },
      "TexmlGetCallRecordingsResponseBody": {
        "title": "Multiple recording resources",
        "type": "object",
        "properties": {
          "recordings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TexmlGetCallRecordingResponseBody"
            }
          },
          "end": {
            "type": "integer",
            "description": "The number of the last element on the page, zero-indexed.",
            "example": 19
          },
          "first_page_uri": {
            "type": "string",
            "description": "Relative uri to the first page of the query results",
            "format": "uri",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings.json?Page=0&PageSize=1"
          },
          "previous_page_uri": {
            "type": "string",
            "description": "Relative uri to the previous page of the query results",
            "format": "uri",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings.json?Page=0&PageSize=1"
          },
          "next_page_uri": {
            "type": "string",
            "description": "Relative uri to the next page of the query results",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=1&PageSize=1"
          },
          "page": {
            "type": "integer",
            "description": "Current page number, zero-indexed.",
            "example": 0
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items on the page",
            "example": 20
          },
          "start": {
            "type": "integer",
            "description": "The number of the first element on the page, zero-indexed.",
            "example": 0
          },
          "uri": {
            "type": "string",
            "description": "The URI of the current page.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings.json?Page=0&PageSize=1"
          }
        }
      },
      "UpdateOutboundChannels_default": {
        "title": "UpdateOutboundChannels_default",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "code",
                "title"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "format": "int"
                },
                "title": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "source": {
                  "type": "object",
                  "properties": {
                    "pointer": {
                      "type": "string",
                      "description": "JSON pointer (RFC6901) to the offending entity.",
                      "format": "json-pointer"
                    },
                    "parameter": {
                      "type": "string",
                      "description": "Indicates which query parameter caused the error."
                    }
                  }
                },
                "meta": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "TexmlRecordingChannels": {
        "title": "TexmlRecordingChannels",
        "enum": [
          "single",
          "dual"
        ],
        "type": "string",
        "description": "When `dual`, final audio file has the first leg on channel A, and the rest on channel B. `single` mixes both tracks into a single channel.",
        "default": "dual",
        "example": "single"
      },
      "UpdateOutboundChannels_200": {
        "title": "UpdateOutboundChannels_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "integer",
                "description": "The number of channels set for the account",
                "example": 7
              },
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the response",
                "example": "inbound_channels"
              }
            }
          }
        }
      },
      "UpdateOutboundChannels": {
        "title": "UpdateOutboundChannels",
        "required": [
          "channels"
        ],
        "type": "object",
        "properties": {
          "channels": {
            "type": "integer",
            "description": "The new number of concurrent channels for the account",
            "example": 7
          }
        }
      },
      "ListInboundChannels_200": {
        "title": "ListInboundChannels_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "integer",
                "description": "The current number of concurrent channels set for the account",
                "example": 7
              },
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the response",
                "example": "inbound_channels"
              }
            }
          }
        }
      },
      "TexmlRecordingStatus": {
        "title": "TexmlRecordingStatus",
        "enum": [
          "in-progress",
          "completed",
          "paused",
          "stopped"
        ],
        "type": "string",
        "example": "paused"
      },
      "TexmlRecordingSubresourcesUris": {
        "title": "Texml recording subresources uris",
        "type": "object",
        "properties": {
          "transcriptions": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Recordings/b08f0fa1-a32c-4218-b3b5-9cf78941ccac/Transcriptions.json"
          }
        },
        "description": "Subresources details for a recording if available."
      },
      "TexmlRecordingTranscription": {
        "title": "Texml Get Call Recording Transcription Response Body",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "api_version": {
            "type": "string",
            "description": "The version of the API that was used to make the request.",
            "example": "2010-04-01"
          },
          "date_created": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "date_updated": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "duration": {
            "type": "string",
            "description": "The duration of this recording, given in seconds.",
            "nullable": true,
            "example": "12"
          },
          "sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "recording_sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "status": {
            "enum": [
              "in-progress",
              "completed"
            ],
            "type": "string",
            "description": "The status of the recording transcriptions. The transcription text will be available only when the status is completed.",
            "example": "completed"
          },
          "transcription_text": {
            "type": "string",
            "description": "The recording's transcribed text",
            "example": "Good morning, how may I help you?"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for the recording transcription resource.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Transcriptions/b08f0fa1-a32c-4218-b3b5-9cf78941ccac.json"
          }
        }
      },
      "RefreshExternalConnectionUploads_200": {
        "title": "Create Upload request Response",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Describes wether or not the operation was successful"
          }
        }
      },
      "CreateExternalConnectionUpload_202": {
        "title": "Create Upload request Response",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Describes wether or not the operation was successful"
          },
          "ticket_id": {
            "type": "string",
            "description": "Ticket id of the upload request",
            "format": "uuid"
          }
        }
      },
      "TexmlStatusCallbackMethod": {
        "title": "TexmlStatusCallbackMethod",
        "enum": [
          "GET",
          "POST"
        ],
        "type": "string",
        "description": "HTTP method used to send status callbacks.",
        "default": "POST",
        "example": "GET"
      },
      "updateLocation": {
        "title": "updateLocation",
        "required": [
          "static_emergency_address_id"
        ],
        "type": "object",
        "properties": {
          "static_emergency_address_id": {
            "type": "string",
            "description": "A new static emergency address ID to update the location with",
            "format": "uuid"
          }
        }
      },
      "TexmlUpdateCallRecordingRequestBody": {
        "title": "Texml Create Call Recording Request Body",
        "type": "object",
        "properties": {
          "Status": {
            "enum": [
              "in-progress",
              "paused",
              "stopped"
            ],
            "type": "string",
            "example": "paused"
          }
        }
      },
      "TexmlUpdateCallStreamingRequestBody": {
        "title": "Texml Update Call Streaming Request Body",
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/StreamStatus"
          }
        }
      },
      "TexmlUpdateCallStreamingResponseBody": {
        "title": "Texml Update Call Streaming Response Body",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "example": "v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA"
          },
          "sid": {
            "type": "string",
            "description": "Identifier of a resource.",
            "example": "e9cea0be-7dbd-4b98-98b1-c0089d9d43b0"
          },
          "status": {
            "enum": [
              "stopped"
            ],
            "type": "string",
            "description": "The status of the streaming.",
            "example": "stopped"
          },
          "date_updated": {
            "type": "string",
            "format": "datetime-rfc2822",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "uri": {
            "type": "string",
            "description": "The relative URI for this streaming resource.",
            "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls/v3:KBnLO0ZK3DhKM5s7bE9VluaSmKsOchKht_fUYvxcp8ysbmzCCtpkmA/Streams/b08f0fa1-a32c-4218-b3b5-9cf78941ccac.json"
          }
        }
      },
      "TexmlUpdateSiprecSessionRequestBody": {
        "title": "Update Siprec Session Request",
        "type": "object",
        "properties": {
          "Status": {
            "enum": [
              "stopped"
            ],
            "type": "string",
            "description": "The new status of the resource. Specifying `stopped` will end the siprec session.",
            "example": "stopped"
          }
        }
      },
      "TexmlUpdateSiprecSessionResponseBody": {
        "title": "Update Siprec Session Response",
        "type": "object",
        "properties": {
          "account_sid": {
            "type": "string",
            "description": "The id of the account the resource belongs to.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18a1b"
          },
          "call_sid": {
            "type": "string",
            "description": "The id of the call the resource belongs to.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          },
          "sid": {
            "type": "string",
            "description": "The SID of the siprec session.",
            "example": "61bf923e-5e4d-4595-a110-56190ea18123"
          },
          "date_updated": {
            "type": "string",
            "description": "The date and time the siprec session was last updated.",
            "example": "Fri, 11 Aug 2023 19:12:11 +0000"
          },
          "status": {
            "enum": [
              "in-progress",
              "stopped"
            ],
            "type": "string",
            "description": "The status of the siprec session.",
            "example": "in-progress"
          },
          "uri": {
            "type": "string",
            "description": "The URI of the siprec session.",
            "example": "https://api.telnyx.com/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18123/Calls/v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-ai/Siprec/61bf923e-5e4d-4595-a110-56190ea18123"
          },
          "error_code": {
            "type": "string",
            "description": "The error code of the siprec session.",
            "example": null
          }
        }
      },
      "TextClusteringResponse": {
        "title": "TextClusteringResponse",
        "required": [
          "task_id"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string"
          }
        }
      },
      "TextClusteringResponseData": {
        "title": "TextClusteringResponseData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TextClusteringResponse"
          }
        }
      },
      "TnReleaseEntry": {
        "title": "TnReleaseEntry",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "Phone number in E164 format."
          },
          "number_id": {
            "type": "string",
            "description": "Phone number ID from the Telnyx API."
          }
        }
      },
      "TnUploadEntry": {
        "title": "TnUploadEntry",
        "type": "object",
        "properties": {
          "number_id": {
            "title": "UUID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number in E164 format."
          },
          "status": {
            "enum": [
              "pending_upload",
              "pending",
              "in_progress",
              "success",
              "error"
            ],
            "type": "string",
            "description": "Represents the status of the phone number entry upload on Microsoft Teams.",
            "default": "pending_upload",
            "example": "error"
          },
          "error_code": {
            "enum": [
              "internal_error",
              "unable_to_retrieve_default_location",
              "unknown_country_code",
              "unable_to_retrieve_location",
              "unable_to_retrieve_partner_info",
              "unable_to_match_geography_entry"
            ],
            "type": "string",
            "description": "A code returned by Microsoft Teams if there is an error with the phone number entry upload.",
            "example": "internal_error"
          },
          "error_message": {
            "type": "string",
            "description": "A message returned by Microsoft Teams if there is an error with the upload process."
          },
          "civic_address_id": {
            "type": "string",
            "description": "Identifies the civic address assigned to the phone number entry.",
            "format": "uuid"
          },
          "location_id": {
            "type": "string",
            "description": "Identifies the location assigned to the phone number entry.",
            "format": "uuid"
          },
          "internal_status": {
            "enum": [
              "pending_assignment",
              "in_progress",
              "all_internal_jobs_completed",
              "release_requested",
              "release_completed",
              "error"
            ],
            "type": "string",
            "description": "Represents the status of the phone number entry upload on Telnyx.",
            "default": "pending_assignment",
            "example": "error"
          }
        }
      },
      "DeleteExternalConnectionLogMessage_200": {
        "title": "Dismiss request was successful",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Describes wether or not the operation was successful"
          }
        }
      },
      "GetEnumEndpoint_200": {
        "title": "GetEnumEndpoint_200",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EnumListResponse": "#/components/schemas/EnumListResponse",
            "EnumObjectResponse": "#/components/schemas/EnumObjectResponse",
            "EnumPaginatedResponse": "#/components/schemas/EnumPaginatedResponse"
          }
        }
      },
      "TrafficType": {
        "title": "TrafficType",
        "enum": [
          "conversational"
        ],
        "type": "string",
        "description": "Specifies the type of traffic allowed in this profile.",
        "default": "conversational",
        "example": "conversational"
      },
      "Transcription": {
        "title": "Transcription",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.transcription"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.transcription"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Unique identifier and token for controlling the call.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "transcription_data": {
                "type": "object",
                "properties": {
                  "confidence": {
                    "type": "number",
                    "description": "Speech recognition confidence level.",
                    "format": "double",
                    "example": 0.977219
                  },
                  "is_final": {
                    "type": "boolean",
                    "description": "When false, it means that this is an interim result.",
                    "example": true
                  },
                  "transcript": {
                    "type": "string",
                    "description": "Recognized text.",
                    "example": "hello this is a test speech"
                  },
                  "transcription_track": {
                    "enum": [
                      "inbound",
                      "outbound"
                    ],
                    "type": "string",
                    "description": "Indicates which leg of the call has been transcribed. This is only available when `transcription_engine` is set to `B`.",
                    "example": "inbound"
                  }
                }
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.transcription",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "call_control_id": "v2:7subYr8fLrXmaAXm8egeAMpoSJ72J3SGPUuome81-hQuaKRf9b7hKA",
            "call_leg_id": "5ca81340-5beb-11eb-ae45-02420a0f8b69",
            "call_session_id": "5ca81eee-5beb-11eb-ba6c-02420a0f8b69",
            "client_state": null,
            "connection_id": "1240401930086254526",
            "transcription_data": {
              "confidence": 0.977219,
              "is_final": true,
              "transcript": "hello this is a test speech"
            }
          }
        }
      },
      "TranscriptionConfig": {
        "title": "TranscriptionConfig",
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The speech to text model to be used by the voice assistant.\n\n- `distil-whisper/distil-large-v2` is lower latency but English-only.\n- `openai/whisper-large-v3-turbo` is multi-lingual with automatic language detection but slightly higher latency.\n- `google` is a multi-lingual option, please describe the language in the `language` field.",
            "default": "distil-whisper/distil-large-v2",
            "example": "distil-whisper/distil-large-v2"
          }
        },
        "description": "The settings associated with speech to text for the voice assistant. This is only relevant if the assistant uses a text-to-text language model. Any assistant using a model with native audio support (e.g. `fixie-ai/ultravox-v0_4`) will ignore this field."
      },
      "TranscriptionEngineAConfig": {
        "title": "Transcription engine A config",
        "type": "object",
        "properties": {
          "language": {
            "$ref": "#/components/schemas/GoogleTranscriptionLanguage"
          },
          "interim_results": {
            "type": "boolean",
            "description": "Whether to send also interim results. If set to false, only final results will be sent.",
            "default": false,
            "example": true
          },
          "enable_speaker_diarization": {
            "type": "boolean",
            "description": "Enables speaker diarization.",
            "default": false,
            "example": true
          },
          "min_speaker_count": {
            "type": "integer",
            "description": "Defines minimum number of speakers in the conversation.",
            "format": "int32",
            "default": 2,
            "example": 4
          },
          "max_speaker_count": {
            "type": "integer",
            "description": "Defines maximum number of speakers in the conversation.",
            "format": "int32",
            "default": 6,
            "example": 4
          },
          "profanity_filter": {
            "type": "boolean",
            "description": "Enables profanity_filter.",
            "default": false,
            "example": true
          },
          "use_enhanced": {
            "type": "boolean",
            "description": "Enables enhanced transcription, this works for models `phone_call` and `video`.",
            "default": false,
            "example": true
          },
          "model": {
            "enum": [
              "latest_long",
              "latest_short",
              "command_and_search",
              "phone_call",
              "video",
              "default",
              "medical_conversation",
              "medical_dictation"
            ],
            "type": "string",
            "description": "The model to use for transcription."
          },
          "hints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Hints to improve transcription accuracy."
          },
          "speech_context": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "phrases": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "boost": {
                  "maximum": 20.0,
                  "minimum": 0.0,
                  "type": "number",
                  "description": "Boost factor for the speech context.",
                  "default": 1,
                  "example": 1
                }
              }
            },
            "description": "Speech context to improve transcription accuracy."
          }
        }
      },
      "TranscriptionEngineBConfig": {
        "title": "Transcription engine B config",
        "type": "object",
        "properties": {
          "language": {
            "$ref": "#/components/schemas/TelnyxTranscriptionLanguage"
          },
          "transcription_model": {
            "enum": [
              "openai/whisper-tiny",
              "openai/whisper-large-v3-turbo"
            ],
            "type": "string",
            "description": "The model to use for transcription.",
            "default": "openai/whisper-tiny"
          }
        }
      },
      "TranscriptionEvent": {
        "title": "Transcription Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Transcription"
          }
        }
      },
      "TranscriptionSettings": {
        "title": "TranscriptionSettings",
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The speech to text model to be used by the voice assistant.\n\n- `distil-whisper/distil-large-v2` is lower latency but English-only.\n- `openai/whisper-large-v3-turbo` is multi-lingual with automatic language detection but slightly higher latency."
          },
          "language": {
            "type": "string",
            "description": "The language of the audio to be transcribed. This is only applicable for `openai/whisper-large-v3-turbo` model. If not set, of if set to `auto`, the model will automatically detect the language. For the full list of supported languages, see the [whisper tokenizer](https://github.com/openai/whisper/blob/main/whisper/tokenizer.py)."
          }
        }
      },
      "TranscriptionStartRequest": {
        "title": "Transcription start request",
        "type": "object",
        "properties": {
          "transcription_engine": {
            "enum": [
              "A",
              "B"
            ],
            "type": "string",
            "description": "Engine to use for speech recognition. `A` - `Google`, `B` - `Telnyx`.",
            "default": "A",
            "example": "A"
          },
          "transcription_engine_config": {
            "discriminator": {
              "propertyName": "transcription_engine",
              "mapping": {
                "A": "#/components/schemas/TranscriptionEngineAConfig",
                "B": "#/components/schemas/TranscriptionEngineBConfig"
              }
            }
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "transcription_tracks": {
            "type": "string",
            "description": "Indicates which leg of the call will be transcribed. Use `inbound` for the leg that requested the transcription, `outbound` for the other leg, and `both` for both legs of the call. Will default to `inbound`.",
            "default": "inbound",
            "example": "both"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "language": "en",
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TranscriptionStopRequest": {
        "title": "Transcription stop request",
        "type": "object",
        "properties": {
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          }
        },
        "example": {
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901"
        }
      },
      "TransferCallRequest": {
        "title": "Transfer Call Request",
        "required": [
          "to"
        ],
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The DID or SIP URI to dial out to.",
            "example": "+18005550100 or sip:username@sip.telnyx.com"
          },
          "from": {
            "type": "string",
            "description": "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `to` number of the original call if omitted.",
            "example": "+18005550101"
          },
          "from_display_name": {
            "type": "string",
            "description": "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.",
            "example": "Company Name"
          },
          "audio_url": {
            "type": "string",
            "description": "The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.",
            "example": "http://example.com/message.wav"
          },
          "early_media": {
            "type": "boolean",
            "description": "If set to false, early media will not be passed to the originating leg.",
            "default": true,
            "example": false
          },
          "media_name": {
            "type": "string",
            "description": "The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
            "example": "my_media_uploaded_to_media_storage_api"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 600 seconds.",
            "format": "int32",
            "default": 30,
            "example": 60
          },
          "time_limit_secs": {
            "maximum": 14400,
            "minimum": 30,
            "type": "integer",
            "description": "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.",
            "format": "int32",
            "default": 14400,
            "example": 600
          },
          "answering_machine_detection": {
            "enum": [
              "premium",
              "detect",
              "detect_beep",
              "detect_words",
              "greeting_end",
              "disabled"
            ],
            "type": "string",
            "description": "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
            "default": "disabled"
          },
          "answering_machine_detection_config": {
            "type": "object",
            "properties": {
              "total_analysis_time_millis": {
                "type": "integer",
                "description": "Maximum timeout threshold for overall detection.",
                "format": "int32",
                "default": 3500,
                "example": 5000
              },
              "after_greeting_silence_millis": {
                "type": "integer",
                "description": "Silence duration threshold after a greeting message or voice for it be considered human.",
                "format": "int32",
                "default": 800,
                "example": 1000
              },
              "between_words_silence_millis": {
                "type": "integer",
                "description": "Maximum threshold for silence between words.",
                "format": "int32",
                "default": 50,
                "example": 100
              },
              "greeting_duration_millis": {
                "type": "integer",
                "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine.",
                "format": "int32",
                "default": 3500,
                "example": 1500
              },
              "initial_silence_millis": {
                "type": "integer",
                "description": "If initial silence duration is greater than this value, consider it a machine.",
                "format": "int32",
                "default": 3500,
                "example": 1800
              },
              "maximum_number_of_words": {
                "type": "integer",
                "description": "If number of detected words is greater than this value, consder it a machine.",
                "format": "int32",
                "default": 5,
                "example": 3
              },
              "maximum_word_length_millis": {
                "type": "integer",
                "description": "If a single word lasts longer than this threshold, consider it a machine.",
                "format": "int32",
                "default": 3500,
                "example": 2000
              },
              "silence_threshold": {
                "type": "integer",
                "description": "Minimum noise threshold for any analysis.",
                "format": "int32",
                "default": 256,
                "example": 512
              },
              "greeting_total_analysis_time_millis": {
                "type": "integer",
                "description": "If machine already detected, maximum timeout threshold to determine the end of the machine greeting.",
                "format": "int32",
                "default": 5000,
                "example": 7500
              },
              "greeting_silence_duration_millis": {
                "type": "integer",
                "description": "If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.",
                "format": "int32",
                "default": 1500,
                "example": 2000
              }
            },
            "description": "Optional configuration parameters to modify 'answering_machine_detection' performance."
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomSipHeader"
            },
            "description": "Custom headers to be added to the SIP INVITE."
          },
          "client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "target_leg_client_state": {
            "type": "string",
            "description": "Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.",
            "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
          },
          "command_id": {
            "type": "string",
            "description": "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.",
            "example": "891510ac-f3e4-11e8-af5b-de00688a4901"
          },
          "media_encryption": {
            "enum": [
              "disabled",
              "SRTP",
              "DTLS"
            ],
            "type": "string",
            "description": "Defines whether media should be encrypted on the new call leg.",
            "default": "disabled"
          },
          "sip_auth_username": {
            "type": "string",
            "description": "SIP Authentication username used for SIP challenges.",
            "example": "username"
          },
          "sip_auth_password": {
            "type": "string",
            "description": "SIP Authentication password used for SIP challenges.",
            "example": "password"
          },
          "sip_headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipHeader"
            },
            "description": "SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported."
          },
          "sip_transport_protocol": {
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "type": "string",
            "description": "Defines SIP transport protocol to be used on the call.",
            "default": "UDP"
          },
          "sound_modifications": {
            "$ref": "#/components/schemas/SoundModifications"
          },
          "webhook_url": {
            "type": "string",
            "description": "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.",
            "example": "https://www.example.com/server-b/"
          },
          "webhook_url_method": {
            "enum": [
              "POST",
              "GET"
            ],
            "type": "string",
            "description": "HTTP request type used for `webhook_url`.",
            "default": "POST",
            "example": "GET"
          },
          "mute_dtmf": {
            "enum": [
              "none",
              "both",
              "self",
              "opposite"
            ],
            "type": "string",
            "description": "When enabled, DTMF tones are not passed to the call participant. The webhooks containing the DTMF information will be sent.",
            "default": "none",
            "example": "opposite"
          }
        },
        "example": {
          "to": "+18005550100 or sip:username@sip.telnyx.com",
          "from": "+18005550101",
          "from_display_name": "Company Name",
          "audio_url": "http://www.example.com/sounds/greeting.wav",
          "timeout_secs": 60,
          "timeout_limit_secs": 60,
          "webhook_url": "https://www.example.com/server-b/",
          "webhook_url_method": "POST",
          "answering_machine_detection": "detect",
          "answering_machine_detection_config": {
            "total_analysis_time_millis": 5000,
            "after_greeting_silence_millis": 1000,
            "between_words_silence_millis": 1000,
            "greeting_duration_millis": 1000,
            "initial_silence_millis": 1000,
            "maximum_number_of_words": 1000,
            "maximum_word_length_millis": 2000,
            "silence_threshold": 512,
            "greeting_total_analysis_time_millis": 50000,
            "greeting_silence_duration_millis": 2000
          },
          "custom_headers": [
            {
              "name": "head_1",
              "value": "val_1"
            },
            {
              "name": "head_2",
              "value": "val_2"
            }
          ],
          "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
          "command_id": "891510ac-f3e4-11e8-af5b-de00688a4901",
          "early_media": true,
          "media_encryption": "SRTP",
          "sip_auth_username": "username",
          "sip_auth_password": "password",
          "sip_headers": [
            {
              "name": "User-to-User",
              "value": "value"
            }
          ],
          "sip_transport_protocol": "TLS",
          "stream_url": "wss://www.example.com/websocket",
          "stream_track": "both_tracks"
        }
      },
      "TransferTool": {
        "title": "TransferTool",
        "required": [
          "type",
          "transfer"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "transfer"
            ],
            "type": "string"
          },
          "transfer": {
            "$ref": "#/components/schemas/TransferToolParams"
          }
        }
      },
      "TransferToolParams": {
        "title": "TransferToolParams",
        "required": [
          "targets",
          "from"
        ],
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the target.",
                  "example": "Support"
                },
                "to": {
                  "type": "string",
                  "description": "The destination number or SIP URI of the call.",
                  "example": "+13129457420"
                }
              }
            },
            "description": "The different possible targets of the transfer. The assistant will be able to choose one of the targets to transfer the call to."
          },
          "from": {
            "type": "string",
            "description": "Number or SIP URI placing the call.",
            "example": "+35319605860"
          },
          "custom_headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the header. Note that we support mustache templating for the value. For example you can use `{{#integration_secret}}test-secret{{/integration_secret}}` to pass the value of the integration secret."
                }
              }
            },
            "description": "Custom headers to be added to the SIP INVITE for the transfer command."
          }
        }
      },
      "TwimlRecordingChannels": {
        "title": "TwimlRecordingChannels",
        "type": "integer",
        "default": 2,
        "example": 1
      },
      "DownloadDocument_200": {
        "title": "DownloadDocument_200",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "UnauthorizedError": {
        "title": "UnauthorizedError",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10009"
              },
              "title": {
                "example": "Authentication failed"
              },
              "detail": {
                "example": "The required authentication headers were either invalid or not included in the request."
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10009"
                  }
                }
              }
            }
          }
        ]
      },
      "UnexpectedError": {
        "title": "UnexpectedError",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericError"
          },
          {
            "properties": {
              "code": {
                "example": "10007"
              },
              "title": {
                "example": "Unexpected error"
              },
              "detail": {
                "example": "An unexpected error occurred."
              },
              "meta": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://developers.telnyx.com/docs/overview/errors/10007"
                  }
                }
              }
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "title": "UnprocessableEntityError",
        "required": [
          "code",
          "title"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "format": "int"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "pointer": {
                "type": "string",
                "description": "JSON pointer (RFC6901) to the offending entity.",
                "format": "json-pointer"
              },
              "parameter": {
                "type": "string",
                "description": "Indicates which query parameter caused the error."
              }
            }
          },
          "meta": {
            "type": "object"
          }
        }
      },
      "UnusedUserBundlesResponse": {
        "title": "UnusedUserBundlesResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnusedUserBundlesSchema"
            }
          }
        }
      },
      "UnusedUserBundlesSchema": {
        "title": "UnusedUserBundlesSchema",
        "required": [
          "billing_bundle",
          "user_bundle_ids"
        ],
        "type": "object",
        "properties": {
          "billing_bundle": {
            "$ref": "#/components/schemas/BillingBundleSummary"
          },
          "user_bundle_ids": {
            "title": "User Bundle Ids",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user bundle IDs for given bundle."
          }
        }
      },
      "UpdateAssistantRequest": {
        "title": "UpdateAssistantRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "model": {
            "type": "string",
            "description": "ID of the model to use. You can use the [Get models API](https://developers.telnyx.com/api/inference/inference-embedding/get-models-public-models-get) to see all of your available models,"
          },
          "instructions": {
            "type": "string",
            "description": "System instructions for the assistant. These may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "tools": {
            "$ref": "#/components/schemas/AssistantTools"
          },
          "description": {
            "type": "string"
          },
          "greeting": {
            "type": "string",
            "description": "Text that the assistant will use to start the conversation. This may be templated with [dynamic variables](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables)"
          },
          "llm_api_key_ref": {
            "type": "string",
            "description": "This is only needed when using third-party inference providers. The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your LLM provider's API key. Warning: Free plans are unlikely to work with this integration."
          },
          "voice_settings": {
            "$ref": "#/components/schemas/VoiceSettings"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionSettings"
          },
          "telephony_settings": {
            "$ref": "#/components/schemas/TelephonySettings"
          },
          "messaging_settings": {
            "$ref": "#/components/schemas/MessagingSettings"
          },
          "enabled_features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnabledFeatures"
            }
          },
          "insight_settings": {
            "$ref": "#/components/schemas/InsightSettings"
          },
          "privacy_settings": {
            "$ref": "#/components/schemas/PrivacySettings"
          },
          "dynamic_variables_webhook_url": {
            "type": "string",
            "description": "If the dynamic_variables_webhook_url is set for the assistant, we will send a request at the start of the conversation. See our [guide](https://developers.telnyx.com/docs/inference/ai-assistants/dynamic-variables) for more information."
          },
          "dynamic_variables": {
            "type": "object",
            "description": "Map of dynamic variables and their default values"
          }
        }
      },
      "UpdateAuthenticationProviderRequest": {
        "title": "Update Authentication Provider Request",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name associated with the authentication provider.",
            "example": "Okta"
          },
          "short_name": {
            "type": "string",
            "description": "The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.",
            "example": "myorg"
          },
          "active": {
            "type": "boolean",
            "description": "The active status of the authentication provider",
            "default": true,
            "example": true
          },
          "settings": {
            "$ref": "#/components/schemas/settings"
          },
          "settings_url": {
            "type": "string",
            "description": "The URL for the identity provider metadata file to populate the settings automatically. If the settings attribute is provided, that will be used instead.",
            "format": "uri",
            "example": "https://myorg.myidp.com/saml/metadata"
          }
        },
        "example": {
          "name": "Okta",
          "short_name": "myorg",
          "active": true,
          "settings": {
            "idp_entity_id": "https://myorg.myidp.com/saml/metadata",
            "idp_sso_target_url": "https://myorg.myidp.com/trust/saml2/http-post/sso",
            "idp_cert_fingerprint": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7",
            "idp_cert_fingerprint_algorithm": "sha1"
          }
        }
      },
      "UpdateBillingGroup": {
        "title": "UpdateBillingGroup",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the billing group"
          }
        },
        "example": {
          "name": "string"
        }
      },
      "UpdateBrand": {
        "title": "UpdateBrand",
        "required": [
          "entityType",
          "displayName",
          "country",
          "email",
          "vertical"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntityType"
              }
            ],
            "description": "Entity type behind the brand. This is the form of business establishment."
          },
          "displayName": {
            "title": "Displayname",
            "maxLength": 100,
            "type": "string",
            "description": "Display or marketing name of the brand.",
            "example": "ABC Mobile"
          },
          "companyName": {
            "title": "Companyname",
            "maxLength": 100,
            "type": "string",
            "description": "(Required for Non-profit/private/public) Legal company name.",
            "example": "ABC Inc."
          },
          "firstName": {
            "title": "Firstname",
            "maxLength": 100,
            "type": "string",
            "description": "First name of business contact.",
            "example": "John"
          },
          "lastName": {
            "title": "Lastname",
            "maxLength": 100,
            "type": "string",
            "description": "Last name of business contact.",
            "example": "Smith"
          },
          "ein": {
            "title": "Ein",
            "maxLength": 20,
            "type": "string",
            "description": "(Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.",
            "example": "111111111"
          },
          "phone": {
            "title": "Phone",
            "maxLength": 20,
            "type": "string",
            "description": "Valid phone number in e.164 international format.",
            "example": "+12024567890"
          },
          "street": {
            "title": "Street",
            "maxLength": 100,
            "type": "string",
            "description": "Street number and name.",
            "example": "123"
          },
          "city": {
            "title": "City",
            "maxLength": 100,
            "type": "string",
            "description": "City name",
            "example": "New York"
          },
          "state": {
            "title": "State",
            "maxLength": 20,
            "type": "string",
            "description": "State. Must be 2 letters code for United States.",
            "example": "NY"
          },
          "postalCode": {
            "title": "Postalcode",
            "maxLength": 10,
            "type": "string",
            "description": "Postal codes. Use 5 digit zipcode for United States",
            "example": "10001"
          },
          "country": {
            "title": "Country",
            "maxLength": 2,
            "type": "string",
            "description": "ISO2 2 characters country code. Example: US - United States",
            "example": "US"
          },
          "email": {
            "title": "Email",
            "maxLength": 100,
            "type": "string",
            "description": "Valid email address of brand support contact."
          },
          "stockSymbol": {
            "title": "Stocksymbol",
            "maxLength": 10,
            "type": "string",
            "description": "(Required for public company) stock symbol.",
            "example": "ABC"
          },
          "stockExchange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StockExchange"
              }
            ],
            "description": "(Required for public company) stock exchange.",
            "example": "NASDAQ"
          },
          "ipAddress": {
            "title": "Ipaddress",
            "maxLength": 50,
            "type": "string",
            "description": "IP address of the browser requesting to create brand identity."
          },
          "website": {
            "title": "Website",
            "maxLength": 100,
            "type": "string",
            "description": "Brand website URL.",
            "example": "http://www.abcmobile.com"
          },
          "vertical": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Vertical"
              }
            ],
            "description": "Vertical or industry segment of the brand."
          },
          "altBusiness_id": {
            "title": "Altbusiness Id",
            "maxLength": 50,
            "type": "string",
            "description": "Alternate business identifier such as DUNS, LEI, or GIIN"
          },
          "altBusinessIdType": {
            "$ref": "#/components/schemas/AltBusinessIdType"
          },
          "isReseller": {
            "title": "Isreseller",
            "type": "boolean"
          },
          "identityStatus": {
            "$ref": "#/components/schemas/BrandIdentityStatus"
          },
          "businessContactEmail": {
            "title": "BusinessContactEmail",
            "type": "string",
            "description": "Business contact email.\n\nRequired if `entityType` will be changed to `PUBLIC_PROFIT`.",
            "example": "name@example.com"
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook URL for brand status updates.",
            "example": "https://webhook.com/67ea78a8-9f32-4d04-b62d-f9502e8e5f93"
          },
          "webhookFailoverURL": {
            "title": "WebhookFailoverURL",
            "type": "string",
            "description": "Webhook failover URL for brand status updates.",
            "example": "https://webhook.com/9010a453-4df8-4be6-a551-1070892888d6"
          }
        }
      },
      "UpdateCallControlApplicationRequest": {
        "title": "Update Call Control Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "type": "object",
        "properties": {
          "application_name": {
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "active": {
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true
          },
          "anchorsite_override": {
            "enum": [
              "Latency",
              "Chicago, IL",
              "Ashburn, VA",
              "San Jose, CA"
            ],
            "type": "string",
            "description": "<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
            "default": "\"Latency\"",
            "example": "\"Amsterdam, Netherlands\""
          },
          "dtmf_type": {
            "enum": [
              "RFC 2833",
              "Inband",
              "SIP INFO"
            ],
            "type": "string",
            "description": "Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.",
            "default": "RFC 2833",
            "example": "Inband"
          },
          "first_command_timeout": {
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags assigned to the Call Control Application."
          },
          "inbound": {
            "$ref": "#/components/schemas/CallControlApplicationInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CallControlApplicationOutbound"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "redact_dtmf_debug_logging": {
            "type": "boolean",
            "description": "When enabled, DTMF digits entered by users will be redacted in debug logs to protect PII data entered through IVR interactions.",
            "default": false,
            "example": true
          }
        },
        "example": {
          "application_name": "call-router",
          "webhook_event_url": "https://example.com",
          "active": false,
          "anchorsite_override": "\"Latency\"",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          },
          "webhook_api_version": "1",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "redact_dtmf_debug_logging": true
        }
      },
      "UpdateCallRequest": {
        "title": "Update Call Request",
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "The value to set the call status to. Setting the status to completed ends the call.",
            "example": "completed"
          },
          "Url": {
            "type": "string",
            "description": "The URL where TeXML will make a request to retrieve a new set of TeXML instructions to continue the call flow.",
            "example": "https://www.example.com/intruction-b.xml"
          },
          "Method": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `Url`.",
            "example": "GET"
          },
          "FallbackUrl": {
            "type": "string",
            "description": "A failover URL for which Telnyx will retrieve the TeXML call instructions if the Url is not responding.",
            "example": "https://www.example.com/intruction-c.xml"
          },
          "FallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `FallbackUrl`.",
            "example": "GET"
          },
          "StatusCallback": {
            "type": "string",
            "description": "URL destination for Telnyx to send status callback events to for the call.",
            "example": "https://www.example.com/callback"
          },
          "StatusCallbackMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "HTTP request type used for `StatusCallback`.",
            "example": "GET"
          },
          "Texml": {
            "type": "string",
            "description": "TeXML to replace the current one with.",
            "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Response><Say>Hello</Say></Response>"
          }
        },
        "example": {
          "Status": "completed"
        }
      },
      "UpdateCampaignRequest": {
        "title": "UpdateCampaignRequest",
        "type": "object",
        "properties": {
          "resellerId": {
            "title": "Resellerid",
            "maxLength": 8,
            "type": "string",
            "description": "Alphanumeric identifier of the reseller that you want to associate with this campaign."
          },
          "sample1": {
            "title": "Sample1",
            "maxLength": 255,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 1 or more message samples."
          },
          "sample2": {
            "title": "Sample2",
            "maxLength": 255,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 2 or more message samples."
          },
          "sample3": {
            "title": "Sample3",
            "maxLength": 255,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 3 or more message samples."
          },
          "sample4": {
            "title": "Sample4",
            "maxLength": 255,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 4 or more message samples."
          },
          "sample5": {
            "title": "Sample5",
            "maxLength": 255,
            "type": "string",
            "description": "Message sample. Some campaign tiers require 5 or more message samples."
          },
          "messageFlow": {
            "title": "Messageflow",
            "maxLength": 2048,
            "type": "string",
            "description": "Message flow description."
          },
          "helpMessage": {
            "title": "Helpmessage",
            "maxLength": 255,
            "type": "string",
            "description": "Help message of the campaign."
          },
          "autoRenewal": {
            "title": "Autorenewal",
            "type": "boolean",
            "description": "Help message of the campaign.",
            "default": true
          },
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent."
          },
          "webhookFailoverURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook failover to which campaign status updates are sent."
          }
        }
      },
      "UpdateCommandResult": {
        "title": "TeXml REST Update Command Result",
        "type": "object",
        "properties": {
          "sid": {
            "type": "string",
            "example": "c46e06d7-b78f-4b13-96b6-c576af9640ff"
          },
          "status": {
            "type": "string",
            "example": "accepted"
          }
        },
        "example": {
          "sid": "c46e06d7-b78f-4b13-96b6-c576af9640ff",
          "status": "accepted"
        }
      },
      "UpdateConferenceParticipantRequest": {
        "title": "Update Conference Participant Request",
        "type": "object",
        "properties": {
          "Muted": {
            "type": "boolean",
            "description": "Whether the participant should be muted.",
            "example": true
          },
          "Hold": {
            "type": "boolean",
            "description": "Whether the participant should be on hold.",
            "example": true
          },
          "HoldUrl": {
            "type": "string",
            "description": "The URL to be called using the `HoldMethod` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.",
            "example": "true"
          },
          "HoldMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "The HTTP method to use when calling the `HoldUrl`.",
            "example": "POST"
          },
          "AnnounceUrl": {
            "type": "string",
            "description": "The URL to call to announce something to the participant. The URL may return an MP3 fileo a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.",
            "example": "https://www.example.com/announce.xml"
          },
          "AnnounceMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.",
            "example": "GET"
          },
          "WaitUrl": {
            "type": "string",
            "description": "The URL to call for an audio file to play while the participant is waiting for the conference to start.",
            "example": "https://www.example.com/wait_music.mp3"
          },
          "BeepOnExit": {
            "type": "boolean",
            "description": "Whether to play a notification beep to the conference when the participant exits.",
            "example": false
          },
          "EndConferenceOnExit": {
            "type": "boolean",
            "description": "Whether to end the conference when the participant leaves.",
            "example": false
          },
          "Coaching": {
            "type": "boolean",
            "description": "Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.",
            "example": false
          },
          "CallSidToCoach": {
            "type": "string",
            "description": "The SID of the participant who is being coached. The participant being coached is the only participant who can hear the participant who is coaching.",
            "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ"
          }
        },
        "example": {
          "BeepOnExit": false
        }
      },
      "UpdateConferenceRequest": {
        "title": "Update Conference Request",
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "The new status of the resource. Specifying `completed` will end the conference and hang up all participants.",
            "example": "completed"
          },
          "AnnounceUrl": {
            "type": "string",
            "description": "The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.",
            "example": "https://www.example.com/announce.xml"
          },
          "AnnounceMethod": {
            "enum": [
              "GET",
              "POST"
            ],
            "type": "string",
            "description": "The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.",
            "example": "GET"
          }
        },
        "example": {
          "Status": "completed"
        }
      },
      "UpdateConversationRequest": {
        "title": "UpdateConversationRequest",
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata associated with the conversation."
          }
        }
      },
      "UpdateCredentialConnectionRequest": {
        "title": "Update Credential Connection Request",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "user_name": {
            "type": "string",
            "description": "The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).",
            "example": "myusername123"
          },
          "password": {
            "type": "string",
            "description": "The password to be used as part of the credentials. Must be 8 to 128 characters long.",
            "example": "my123secure456password789"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "title": "Connection Name",
            "type": "string",
            "description": "A user-assigned name to help manage the connection.",
            "example": "office-connection"
          },
          "sip_uri_calling_preference": {
            "enum": [
              "disabled",
              "unrestricted",
              "internal"
            ],
            "type": "string",
            "description": "This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal)."
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": false
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/CredentialInbound"
          },
          "outbound": {
            "$ref": "#/components/schemas/CredentialOutbound"
          }
        },
        "example": {
          "active": true,
          "password": "my123secure456password789",
          "user_name": "myusername123",
          "anchorsite_override": "Latency",
          "connection_name": "my name",
          "sip_uri_calling_preference": " disabled",
          "default_on_hold_comfort_noise_enabled": false,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_seconds": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": "G722",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "US",
            "t38_reinvite_source": "customer",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateExternalConnectionPhoneNumberRequest": {
        "title": "Update External Connection Phone Number Request",
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string",
            "description": "Identifies the location to assign the phone number to.",
            "format": "uuid"
          }
        }
      },
      "UpdateExternalConnectionRequest": {
        "title": "Update External Connection Request",
        "required": [
          "outbound/outbound_voice_profile_id"
        ],
        "type": "object",
        "properties": {
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "active": false,
          "outbound": {
            "outbound_voice_profile_id": "1911630617284445511"
          }
        }
      },
      "UpdateFaxApplicationRequest": {
        "title": "Update Fax Application Request",
        "required": [
          "application_name",
          "webhook_event_url"
        ],
        "type": "object",
        "properties": {
          "application_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "fax_email_recipient": {
            "title": "Fax Email Recipient",
            "type": "string",
            "description": "Specifies an email address where faxes sent to this application will be forwarded to (as pdf or tiff attachments)",
            "format": "email",
            "default": null,
            "nullable": true,
            "example": "user@example.com"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Fax Application."
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "application_name": "fax-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "inbound": {
            "channel_limit": 10,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateFqdnConnectionRequest": {
        "title": "Update FQDN Connection Request",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "title": "Connection Name",
            "type": "string",
            "description": "A user-assigned name to help manage the connection.",
            "example": "office-connection"
          },
          "transport_protocol": {
            "$ref": "#/components/schemas/FqdnConnectionTransportProtocol"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings.",
            "default": false
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "title": "Webhook Event URL",
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "title": "Webhook Event Failover URL",
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "$ref": "#/components/schemas/WebhookApiVersion"
          },
          "webhook_timeout_secs": {
            "title": "Webhook Timeout Secs",
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundFqdn"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundFqdn"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": true,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound": {
            "ani_number_format": "+E.164",
            "dnis_number_format": "+e164",
            "codecs": [
              "G722"
            ],
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "string",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 10,
            "shaken_stir_enabled": true
          }
        }
      },
      "UpdateFqdnRequest": {
        "title": "Update FQDN Request",
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the FQDN connection to which this IP should be attached."
          },
          "fqdn": {
            "type": "string",
            "description": "FQDN represented by this resource.",
            "example": "example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this FQDN.",
            "default": 5060,
            "nullable": true,
            "example": 5060
          },
          "dns_record_type": {
            "type": "string",
            "description": "The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
            "example": "a"
          }
        },
        "example": {
          "connection_id": "1516447646313612565",
          "fqdn": "example.com",
          "port": 8080,
          "dns_record_type": "a"
        }
      },
      "UpdateIpConnectionRequest": {
        "title": "Update Ip Connection Request",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Defaults to true"
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "connection_name": {
            "type": "string"
          },
          "transport_protocol": {
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ],
            "type": "string",
            "description": "One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.",
            "default": "UDP"
          },
          "default_on_hold_comfort_noise_enabled": {
            "type": "boolean",
            "description": "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.",
            "default": true
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "encode_contact_header_enabled": {
            "type": "boolean",
            "description": "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.",
            "default": false
          },
          "encrypted_media": {
            "$ref": "#/components/schemas/EncryptedMedia"
          },
          "onnet_t38_passthrough_enabled": {
            "type": "boolean",
            "description": "Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
            "default": false
          },
          "ios_push_credential_id": {
            "title": "Ios Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Ios",
            "default": null,
            "nullable": true,
            "example": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836"
          },
          "android_push_credential_id": {
            "title": "Android Push Credential Id",
            "type": "string",
            "description": "The uuid of the push credential for Android",
            "default": null,
            "nullable": true,
            "example": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e"
          },
          "webhook_event_url": {
            "type": "string",
            "description": "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
            "format": "url",
            "example": "https://example.com"
          },
          "webhook_event_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
            "format": "url",
            "nullable": true,
            "example": "https://failover.example.com"
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
            "default": "1",
            "example": "1"
          },
          "webhook_timeout_secs": {
            "maximum": 30,
            "minimum": 0,
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a webhook.",
            "default": null,
            "nullable": true,
            "example": 25
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the connection."
          },
          "rtcp_settings": {
            "$ref": "#/components/schemas/ConnectionRtcpSettings"
          },
          "inbound": {
            "$ref": "#/components/schemas/InboundIp"
          },
          "outbound": {
            "$ref": "#/components/schemas/OutboundIp"
          }
        },
        "example": {
          "active": true,
          "anchorsite_override": "Latency",
          "connection_name": "string",
          "transport_protocol": "UDP",
          "default_on_hold_comfort_noise_enabled": true,
          "dtmf_type": "RFC 2833",
          "encode_contact_header_enabled": true,
          "encrypted_media": "SRTP",
          "onnet_t38_passthrough_enabled": false,
          "ios_push_credential_id": "ec0c8e5d-439e-4620-a0c1-9d9c8d02a836",
          "android_push_credential_id": "06b09dfd-7154-4980-8b75-cebf7a9d4f8e",
          "webhook_event_url": "https://example.com",
          "webhook_event_failover_url": "https://failover.example.com",
          "webhook_api_version": "1",
          "webhook_timeout_secs": 25,
          "tags": [
            "tag1",
            "tag2"
          ],
          "rtcp_settings": {
            "port": "rtcp-mux",
            "capture_enabled": true,
            "report_frequency_secs": 10
          },
          "inbound:": {
            "ani_number_format": "+E.164",
            "dns_number_format": "+e164",
            "codecs": "G722",
            "default_primary_ip_id": "192.168.0.0",
            "default_tertiary_ip_id": "192.168.0.0",
            "default_secondary_ip_id": "192.168.0.0",
            "default_routing_method": "sequential",
            "channel_limit": 10,
            "generate_ringback_tone": true,
            "isup_headers_enabled": true,
            "prack_enabled": true,
            "sip_compact_headers_enabled": true,
            "sip_region": "US",
            "sip_subdomain": "test",
            "sip_subdomain_receive_settings": "only_my_connections",
            "timeout_1xx_secs": 10,
            "timeout_2xx_secs": 20,
            "shaken_stir_enabled": true
          },
          "outbound": {
            "call_parking_enabled": true,
            "ani_override": "string",
            "ani_override_type": "always",
            "channel_limit": 10,
            "instant_ringback_enabled": true,
            "generate_ringback_tone": true,
            "localization": "string",
            "t38_reinvite_source": "customer",
            "tech_prefix": "string",
            "ip_authentication_method": "token",
            "ip_authentication_token": "string",
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateIpRequest": {
        "title": "Update Ip Request",
        "required": [
          "ip_address"
        ],
        "type": "object",
        "properties": {
          "connection_id": {
            "type": "string",
            "description": "ID of the IP Connection to which this IP should be attached."
          },
          "ip_address": {
            "type": "string",
            "description": "IP adddress represented by this resource.",
            "example": "192.168.0.0"
          },
          "port": {
            "type": "integer",
            "description": "Port to use when connecting to this IP.",
            "default": 5060,
            "example": 5060
          }
        },
        "example": {
          "connection_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
          "ip_address": "192.168.0.0",
          "port": 5060
        }
      },
      "UpdateManagedAccountGlobalChannelLimitRequest": {
        "title": "Update Managed Account Global Outbound Channels Request",
        "type": "object",
        "properties": {
          "channel_limit": {
            "type": "integer",
            "description": "Integer value that indicates the number of allocatable global outbound channels that should be allocated to the managed account. Must be 0 or more. If the value is 0 then the account will have no usable channels and will not be able to perform outbound calling.",
            "example": 30
          }
        },
        "example": {
          "channel_limit": 30
        }
      },
      "UpdateManagedAccountRequest": {
        "title": "Update Managed Account Request",
        "type": "object",
        "properties": {
          "managed_account_allow_custom_pricing": {
            "type": "boolean",
            "description": "Boolean value that indicates if the managed account is able to have custom pricing set for it or not. If false, uses the pricing of the manager account. Defaults to false. This value may be changed, but there may be time lag between when the value is changed and pricing changes take effect.",
            "example": false
          }
        },
        "example": {
          "managed_account_allow_custom_pricing": true
        }
      },
      "UpdateMediaMultipartRequest": {
        "title": "Upload media multipart request",
        "type": "object",
        "properties": {
          "media": {
            "type": "string",
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "format": "binary"
          },
          "ttl_secs": {
            "type": "integer",
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "example": 86400
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400
        }
      },
      "UpdateMediaRequest": {
        "title": "Upload media request",
        "type": "object",
        "properties": {
          "media_url": {
            "type": "string",
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "type": "integer",
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "example": 86400
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400
        }
      },
      "UpdateMessagingProfileRequest": {
        "title": "UpdateMessagingProfileRequest",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "messaging_profile"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A user friendly name for the messaging profile."
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the messaging profile is enabled or not."
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL where webhooks related to this messaging profile will be sent.",
            "format": "url",
            "nullable": true
          },
          "webhook_failover_url": {
            "type": "string",
            "description": "The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.",
            "format": "url",
            "nullable": true
          },
          "webhook_api_version": {
            "enum": [
              "1",
              "2",
              "2010-04-01"
            ],
            "type": "string",
            "description": "Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format."
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code."
            },
            "description": "Destinations to which the messaging profile is allowed to send. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed.\n\nThis field is required if the messaging profile doesn't have it defined yet."
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "v1_secret": {
            "type": "string",
            "description": "Secret used to authenticate with v1 endpoints."
          },
          "number_pool_settings": {
            "$ref": "#/components/schemas/NumberPoolSettings"
          },
          "url_shortener_settings": {
            "$ref": "#/components/schemas/UrlShortenerSettings"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "nullable": true
          },
          "daily_spend_limit": {
            "pattern": "^[0-9]+(?:\\.[0-9]+)?$",
            "type": "string",
            "description": "The maximum amount of money (in USD) that can be spent by this profile before midnight UTC."
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Whether to enforce the value configured by `daily_spend_limit`."
          },
          "mms_fall_back_to_sms": {
            "type": "boolean",
            "description": "enables SMS fallback for MMS messages.",
            "default": false
          },
          "mms_transcoding": {
            "type": "boolean",
            "description": "enables automated resizing of MMS media.",
            "default": false
          }
        },
        "example": {
          "name": "Updated Profile for Messages",
          "webhook_url": "https://www.example.com/hooks",
          "webhook_failover_url": "https://backup.example.com/hooks",
          "enabled": true,
          "webhook_api_version": "2",
          "whitelisted_destinations": [
            "US"
          ],
          "number_pool_settings": {
            "toll_free_weight": 10,
            "long_code_weight": 2,
            "skip_unhealthy": false,
            "sticky_sender": true,
            "geomatch": false
          },
          "url_shortener_settings": {
            "domain": "example.ex",
            "prefix": "cmpny",
            "replace_blacklist_only": true,
            "send_webhooks": false
          },
          "v1_secret": "rP1VamejkU2v0qIUxntqLW2c"
        }
      },
      "UpdateNumberOrderPhoneNumberRequest": {
        "title": "UpdateNumberOrderPhoneNumberRequest",
        "type": "object",
        "properties": {
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateRegulatoryRequirement"
            }
          }
        }
      },
      "UpdateNumberOrderRequest": {
        "title": "UpdateNumberOrderRequest",
        "type": "object",
        "properties": {
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateRegulatoryRequirement"
            }
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          }
        }
      },
      "UpdateOutboundVoiceProfileRequest": {
        "title": "Outbound Voice Profile",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string",
            "description": "A user-supplied name to help with organization.",
            "example": "office"
          },
          "traffic_type": {
            "$ref": "#/components/schemas/TrafficType"
          },
          "service_plan": {
            "$ref": "#/components/schemas/ServicePlan"
          },
          "concurrent_call_limit": {
            "type": "integer",
            "description": "Must be no more than your global concurrent call limit. Null means no limit.",
            "nullable": true,
            "example": 10
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.",
            "default": true,
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usage_payment_method": {
            "$ref": "#/components/schemas/UsagePaymentMethod"
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.",
            "default": [
              "US",
              "CA"
            ]
          },
          "max_destination_rate": {
            "type": "number",
            "description": "Maximum rate (price per minute) for a Destination to be allowed when making outbound calls."
          },
          "daily_spend_limit": {
            "type": "string",
            "description": "The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.",
            "example": "100.00"
          },
          "daily_spend_limit_enabled": {
            "type": "boolean",
            "description": "Specifies whether to enforce the daily_spend_limit on this outbound voice profile.",
            "default": false,
            "example": true
          },
          "call_recording": {
            "$ref": "#/components/schemas/OutboundCallRecording"
          },
          "billing_group_id": {
            "type": "string",
            "description": "The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).",
            "format": "uuid",
            "default": null,
            "nullable": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        },
        "example": {
          "name": "office",
          "traffic_type": "conversational",
          "service_plan": "global",
          "concurrent_call_limit": 10,
          "enabled": true,
          "tags": [
            "office-profile"
          ],
          "usage_payment_method": "rate-deck",
          "whitelisted_destinations": [
            "US",
            "BR",
            "AU"
          ],
          "max_destination_rate": 10,
          "daily_spend_limit": "100.00",
          "daily_spend_limit_enabled": true,
          "billing_group_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "UpdatePartnerCampaignRequest": {
        "title": "UpdateCampaignRequest",
        "type": "object",
        "properties": {
          "webhookURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook to which campaign status updates are sent.",
            "example": "https://webhook.com/67ea78a8-9f32-4d04-b62d-f9502e8e5f93"
          },
          "webhookFailoverURL": {
            "title": "WebhookURL",
            "type": "string",
            "description": "Webhook failover to which campaign status updates are sent.",
            "example": "https://webhook.com/9010a453-4df8-4be6-a551-1070892888d6"
          }
        }
      },
      "UpdatePhoneNumberMessagingSettingsRequest": {
        "title": "UpdatePhoneNumberMessagingSettingsRequest",
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Configure the messaging profile this phone number is assigned to:\n\n* Omit this field or set its value to `null` to keep the current value.\n* Set this field to `\"\"` to unassign the number from its messaging profile\n* Set this field to a quoted UUID of a messaging profile to assign this number to that messaging profile"
          },
          "messaging_product": {
            "type": "string",
            "description": "Configure the messaging product for this number:\n\n* Omit this field or set its value to `null` to keep the current value.\n* Set this field to a quoted product ID to set this phone number to that product",
            "example": "P2P"
          }
        },
        "example": {
          "messaging_profile_id": "dd50eba1-a0c0-4563-9925-b25e842a7cb6",
          "messaging_product": "P2P"
        }
      },
      "UpdatePhoneNumberRequest": {
        "title": "UpdatePhoneNumberRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of user-assigned tags to help organize phone numbers."
          },
          "external_pin": {
            "type": "string",
            "description": "If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism."
          },
          "hd_voice_enabled": {
            "type": "boolean",
            "description": "Indicates whether HD voice is enabled for this number.",
            "example": true
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "connection_id": {
            "type": "string",
            "description": "Identifies the connection associated with the phone number."
          },
          "billing_group_id": {
            "type": "string",
            "description": "Identifies the billing group associated with the phone number."
          }
        },
        "example": {
          "id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "tags": [
            "tag"
          ],
          "address_id": "dc8f39ac-953d-4520-b93b-786ae87db0da",
          "external_pin": "1234",
          "customer_reference": "customer-reference",
          "connection_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "billing_group_id": "dc8e4d67-33a0-4cbb-af74-7b58f05bd494",
          "hd_voice_enabled": true
        }
      },
      "UpdatePhoneNumberVoiceSettingsRequest": {
        "title": "UpdatePhoneNumberVoiceSettingsRequest",
        "type": "object",
        "properties": {
          "tech_prefix_enabled": {
            "type": "boolean",
            "description": "Controls whether a tech prefix is enabled for this phone number.",
            "default": false
          },
          "translated_number": {
            "type": "string",
            "description": "This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed."
          },
          "caller_id_name_enabled": {
            "type": "boolean",
            "description": "Controls whether the caller ID name is enabled for this phone number.",
            "default": false
          },
          "call_forwarding": {
            "$ref": "#/components/schemas/CallForwarding"
          },
          "cnam_listing": {
            "$ref": "#/components/schemas/CnamListing"
          },
          "usage_payment_method": {
            "enum": [
              "pay-per-minute",
              "channel"
            ],
            "type": "string",
            "description": "Controls whether a number is billed per minute or uses your concurrent channels.",
            "default": "pay-per-minute"
          },
          "media_features": {
            "$ref": "#/components/schemas/MediaFeatures"
          },
          "call_recording": {
            "$ref": "#/components/schemas/CallRecording"
          },
          "inbound_call_screening": {
            "enum": [
              "disabled",
              "reject_calls",
              "flag_calls"
            ],
            "type": "string",
            "description": "The inbound_call_screening setting is a phone number configuration option variable that allows users to configure their settings to block or flag fraudulent calls. It can be set to disabled, reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated with it.",
            "default": "disabled"
          }
        },
        "example": {
          "tech_prefix_enabled": true,
          "translated_number": "+13035559999",
          "caller_id_name_enabled": true,
          "call_forwarding": {
            "call_forwarding_enabled": true,
            "forwards_to": "+13035559123",
            "forwarding_type": "always"
          },
          "cnam_listing": {
            "cnam_listing_enabled": true,
            "cnam_listing_details": "example"
          },
          "usage_payment_method": "pay-per-minute",
          "media_features": {
            "rtp_auto_adjust_enabled": true,
            "accept_any_rtp_packets_enabled": true,
            "t38_fax_gateway_enabled": true
          },
          "call_recording": {
            "inbound_call_recording_enabled": true,
            "inbound_call_recording_format": "wav",
            "inbound_call_recording_channels": "single"
          },
          "inbound_call_screening": "disabled"
        }
      },
      "UpdatePortingOrder": {
        "title": "UpdatePortingOrder",
        "type": "object",
        "properties": {
          "misc": {
            "$ref": "#/components/schemas/PortingOrderMisc"
          },
          "end_user": {
            "$ref": "#/components/schemas/PortingOrderEndUser"
          },
          "documents": {
            "$ref": "#/components/schemas/PortingOrderDocuments"
          },
          "activation_settings": {
            "type": "object",
            "properties": {
              "foc_datetime_requested": {
                "type": "string",
                "description": "ISO 8601 formatted Date/Time requested for the FOC date",
                "format": "date-time",
                "example": "2021-03-19T10:07:15.5270000+00:00"
              }
            }
          },
          "phone_number_configuration": {
            "$ref": "#/components/schemas/PortingOrderPhoneNumberConfiguration"
          },
          "requirement_group_id": {
            "type": "string",
            "description": "If present, we will read the current values from the specified Requirement Group into the Documents and Requirements for this Porting Order. Note that any future changes in the Requirement Group would have no impact on this Porting Order. We will return an error if a specified Requirement Group conflicts with documents or requirements in the same request.",
            "format": "uuid",
            "example": "DE748D99-06FA-4D90-9F9A-F4B62696BADA"
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdatePortingOrderRequirement"
            },
            "description": "List of requirements for porting numbers. "
          },
          "user_feedback": {
            "$ref": "#/components/schemas/PortingOrderUserFeedback"
          },
          "webhook_url": {
            "type": "string",
            "format": "uri"
          },
          "customer_reference": {
            "type": "string"
          },
          "messaging": {
            "type": "object",
            "properties": {
              "enable_messaging": {
                "type": "boolean",
                "description": "Indicates whether Telnyx will port messaging capabilities from the losing carrier. If false, any messaging capabilities will stay with their current provider.",
                "example": true
              }
            }
          }
        }
      },
      "UpdatePortingOrderRequirement": {
        "title": "UpdatePortingOrderRequirement",
        "required": [
          "field_value",
          "requirement_type_id"
        ],
        "type": "object",
        "properties": {
          "field_value": {
            "type": "string",
            "description": "identifies the document or provides the text value that satisfies this requirement",
            "example": "9787fb5f-cbe5-4de4-b765-3303774ee9fe"
          },
          "requirement_type_id": {
            "type": "string",
            "description": "Identifies the requirement type that the `field_value` fulfills",
            "example": "59b0762a-b274-4f76-ac32-4d5cf0272e66"
          }
        },
        "description": "Specifies a value for a requirement on the Porting Order."
      },
      "UpdateRegulatoryRequirement": {
        "title": "UpdateRegulatoryRequirement",
        "type": "object",
        "properties": {
          "requirement_id": {
            "type": "string",
            "description": "Unique id for a requirement.",
            "format": "uuid",
            "example": "8ffb3622-7c6b-4ccc-b65f-7a3dc0099576"
          },
          "field_value": {
            "type": "string",
            "description": "The value of the requirement. For address and document requirements, this should be the ID of the resource. For textual, this should be the value of the requirement.",
            "example": "45f45a04-b4be-4592-95b1-9306b9db2b21"
          }
        }
      },
      "UpdateShortCodeRequest": {
        "title": "UpdateShortCodeRequest",
        "required": [
          "messaging_profile_id"
        ],
        "type": "object",
        "properties": {
          "messaging_profile_id": {
            "type": "string",
            "description": "Unique identifier for a messaging profile."
          }
        },
        "example": {
          "messaging_profile_id": "abc85f64-5717-4562-b3fc-2c9600000000"
        }
      },
      "UpdateSubNumberOrderRequest": {
        "title": "UpdateSubNumberOrderRequest",
        "type": "object",
        "properties": {
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateRegulatoryRequirement"
            }
          }
        }
      },
      "UpdateTexmlApplicationRequest": {
        "title": "Update Texml Application Request",
        "required": [
          "friendly_name",
          "voice_url"
        ],
        "type": "object",
        "properties": {
          "friendly_name": {
            "title": "Application Name",
            "type": "string",
            "description": "A user-assigned name to help manage the application.",
            "example": "call-router"
          },
          "active": {
            "title": "Connection Active",
            "type": "boolean",
            "description": "Specifies whether the connection can be used.",
            "default": true,
            "example": false
          },
          "anchorsite_override": {
            "$ref": "#/components/schemas/AnchorsiteOverride"
          },
          "dtmf_type": {
            "$ref": "#/components/schemas/DtmfType"
          },
          "first_command_timeout": {
            "title": "First Command Timeout",
            "type": "boolean",
            "description": "Specifies whether calls to phone numbers associated with this connection should hangup after timing out.",
            "default": false,
            "example": true
          },
          "first_command_timeout_secs": {
            "title": "First Command Timeout Secs",
            "type": "integer",
            "description": "Specifies how many seconds to wait before timing out a dial command.",
            "default": 30,
            "example": 10
          },
          "voice_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks.",
            "format": "url",
            "example": "https://example.com"
          },
          "voice_fallback_url": {
            "type": "string",
            "description": "URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.",
            "format": "url",
            "default": null,
            "example": "https://fallback.example.com"
          },
          "voice_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
            "default": "post",
            "example": "get"
          },
          "status_callback": {
            "type": "string",
            "description": "URL for Telnyx to send requests to containing information about call progress events.",
            "format": "url",
            "default": null,
            "example": "https://example.com"
          },
          "status_callback_method": {
            "enum": [
              "get",
              "post"
            ],
            "type": "string",
            "description": "HTTP request method Telnyx should use when requesting the status_callback URL.",
            "default": "post",
            "example": "get"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the Texml Application."
          },
          "inbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of inbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "shaken_stir_enabled": {
                "type": "boolean",
                "description": "When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.",
                "default": false,
                "example": false
              },
              "sip_subdomain": {
                "type": "string",
                "description": "Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain \"example.sip.telnyx.com\" can be called from any SIP endpoint by using the SIP URI \"sip:@example.sip.telnyx.com\" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.",
                "default": null,
                "example": "example"
              },
              "sip_subdomain_receive_settings": {
                "enum": [
                  "only_my_connections",
                  "from_anyone"
                ],
                "type": "string",
                "description": "This option can be enabled to receive calls from: \"Anyone\" (any SIP endpoint in the public Internet) or \"Only my connections\" (any connection assigned to the same Telnyx user).",
                "default": "from_anyone",
                "example": "only_my_connections"
              }
            }
          },
          "outbound": {
            "type": "object",
            "properties": {
              "channel_limit": {
                "type": "integer",
                "description": "When set, this will limit the total number of outbound calls to phone numbers associated with this connection.",
                "default": null,
                "example": 10
              },
              "outbound_voice_profile_id": {
                "title": "Outbound Voice Profile ID",
                "type": "string",
                "description": "Identifies the associated outbound voice profile.",
                "format": "int64",
                "example": "1293384261075731499"
              }
            }
          }
        },
        "example": {
          "friendly_name": "call-router",
          "active": false,
          "anchorsite_override": "Amsterdam, Netherlands",
          "dtmf_type": "Inband",
          "first_command_timeout": true,
          "first_command_timeout_secs": 10,
          "voice_url": "https://example.com",
          "voice_fallback_url": "https://fallback.example.com",
          "voice_method": "get",
          "status_callback": "https://example.com",
          "status_callback_method": "get",
          "tags": [
            "tag1",
            "tag2"
          ],
          "inbound": {
            "channel_limit": 10,
            "shaken_stir_enabled": true,
            "sip_subdomain": "example",
            "sip_subdomain_receive_settings": "only_my_connections"
          },
          "outbound": {
            "channel_limit": 10,
            "outbound_voice_profile_id": "1293384261075731499"
          }
        }
      },
      "UpdateVerifyProfileCallRequest": {
        "title": "UpdateVerifyProfileCallRequest",
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "UpdateVerifyProfileFlashcallRequest": {
        "title": "UpdateVerifyProfileFlashcallRequest",
        "type": "object",
        "properties": {
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "UpdateVerifyProfileSMSRequest": {
        "title": "UpdateVerifyProfileSMSRequest",
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "default": "Telnyx",
            "nullable": true
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "CreateDocument_RequestBody_form_data": {
        "title": "CreateDocument_RequestBody_form_data",
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "The file you are uploading.",
            "format": "binary",
            "example": ""
          },
          "customer_reference": {
            "type": "string",
            "description": "Optional reference string for customer tracking.",
            "example": "MY REF 001"
          }
        }
      },
      "UplinkData": {
        "title": "UplinkData",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Uplink data",
            "example": 1
          },
          "unit": {
            "enum": [
              "B",
              "KB",
              "MB"
            ],
            "type": "string",
            "description": "Transmission unit",
            "default": "MB"
          }
        }
      },
      "Upload": {
        "title": "Upload",
        "type": "object",
        "properties": {
          "ticket_id": {
            "title": "UUID",
            "type": "string",
            "description": "Uniquely identifies the resource.",
            "format": "uuid",
            "example": "542c3bca-d247-42bc-8fe7-e01d16ecd761"
          },
          "tenant_id": {
            "type": "string",
            "format": "uuid",
            "example": "ea175aba-f47c-4702-9400-efaa42688048"
          },
          "location_id": {
            "type": "string",
            "format": "uuid",
            "example": "c37e5036-1e87-42e6-86a2-b3e8dd39a2ad"
          },
          "status": {
            "enum": [
              "pending_upload",
              "pending",
              "in_progress",
              "partial_success",
              "success",
              "error"
            ],
            "type": "string",
            "description": "Represents the status of the upload on Microsoft Teams.",
            "default": "pending_upload",
            "example": "error"
          },
          "available_usages": {
            "type": "array",
            "items": {
              "enum": [
                "calling_user_assignment",
                "first_party_app_assignment"
              ],
              "type": "string",
              "description": "Available usages for the numbers in the upload on Microsoft Teams."
            }
          },
          "error_code": {
            "type": "string",
            "description": "A code returned by Microsoft Teams if there is an error with the upload process."
          },
          "error_message": {
            "type": "string",
            "description": "A message set if there is an error with the upload process."
          },
          "tn_upload_entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TnUploadEntry"
            }
          }
        }
      },
      "UploadFileMessagingHostedNumberOrderRequest": {
        "title": "UploadFileMessagingHostedNumberOrderRequest",
        "type": "object",
        "properties": {
          "loa": {
            "type": "string",
            "description": "Must be a signed LOA for the numbers in the order in PDF format.",
            "format": "binary"
          },
          "bill": {
            "type": "string",
            "description": "Must be the last month's bill with proof of ownership of all of the numbers in the order in PDF format.",
            "format": "binary"
          }
        },
        "example": {
          "loa": "example loa",
          "bill": "bill example"
        }
      },
      "UploadMediaMultipartRequest": {
        "title": "Upload media multipart request",
        "required": [
          "media"
        ],
        "type": "object",
        "properties": {
          "media": {
            "type": "string",
            "description": "The file you want to upload. The maximum allowed size is 20 MB.",
            "format": "binary"
          },
          "ttl_secs": {
            "type": "integer",
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "example": 86400
          },
          "media_name": {
            "type": "string",
            "description": "The unique identifier of a file.",
            "example": "my_file"
          }
        },
        "example": {
          "media": "string($binary)",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "UploadMediaRequest": {
        "title": "Upload media request",
        "required": [
          "media_url"
        ],
        "type": "object",
        "properties": {
          "media_url": {
            "type": "string",
            "description": "The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.",
            "example": "http://www.example.com/audio.mp3"
          },
          "ttl_secs": {
            "type": "integer",
            "description": "The number of seconds after which the media resource will be deleted, defaults to 2 days. The maximum allowed vale is 630720000, which translates to 20 years.",
            "example": 86400
          },
          "media_name": {
            "type": "string",
            "description": "The unique identifier of a file.",
            "example": "my_file"
          }
        },
        "example": {
          "media_url": "http://www.example.com/audio.mp3",
          "ttl_secs": 86400,
          "media_name": "my-file"
        }
      },
      "Url": {
        "title": "Url",
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        }
      },
      "UrlShortenerSettings": {
        "title": "UrlShortenerSettings",
        "required": [
          "domain"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "One of the domains provided by the Telnyx URL shortener service.\n",
            "example": "acct.fyi"
          },
          "prefix": {
            "type": "string",
            "description": "Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.\n"
          },
          "replace_blacklist_only": {
            "type": "boolean",
            "description": "Use the link replacement tool only for links that are specifically blacklisted by Telnyx.\n",
            "example": true
          },
          "send_webhooks": {
            "type": "boolean",
            "description": "Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.\n",
            "example": false
          }
        },
        "description": "The URL shortener feature allows automatic replacement of URLs that were generated using\na public URL shortener service. Some examples include bit.do, bit.ly, goo.gl, ht.ly,\nis.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com. Such URLs are replaced with\nwith links generated by Telnyx. The use of custom links can improve branding and message\ndeliverability.\n\nTo disable this feature, set the object field to `null`.\n",
        "nullable": true,
        "example": {
          "domain": "example.ex",
          "prefix": "",
          "replace_blacklist_only": true,
          "send_webhooks": false
        }
      },
      "UsagePaymentMethod": {
        "title": "UsagePaymentMethod",
        "enum": [
          "rate-deck"
        ],
        "type": "string",
        "description": "Setting for how costs for outbound profile are calculated.",
        "default": "rate-deck",
        "example": "rate-deck"
      },
      "UsageReportsOptionsRecord": {
        "title": "UsageReportsOptionsRecord",
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "Telnyx Product",
            "example": "wireless"
          },
          "product_dimensions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Telnyx Product Dimensions",
            "example": "['mnc', 'mcc', 'sim_card_id', 'sim_group_name']"
          },
          "product_metrics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Telnyx Product Metrics",
            "example": "['uplink_data_bytes','downlink_data','downlink_data_bytes','uplink_data','data_cost']"
          },
          "record_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordType"
            },
            "description": "Subproducts if applicable",
            "example": "null"
          }
        },
        "description": "An object following one of the schemas published in https://developers.telnyx.com/docs/api/v2/detail-records"
      },
      "UsageReportsOptionsResponse": {
        "title": "UsageReportsOptionsResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageReportsOptionsRecord"
            },
            "description": "Collection of product description"
          }
        },
        "description": "An object following one of the schemas published in https://developers.telnyx.com/docs/api/v2/detail-records"
      },
      "UsageReportsResponse": {
        "title": "UsageReportsResponse",
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PaginationData"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "UseCaseCategories": {
        "title": "UseCaseCategories",
        "enum": [
          "2FA",
          "App Notifications",
          "Appointments",
          "Auctions",
          "Auto Repair Services",
          "Bank Transfers",
          "Billing",
          "Booking Confirmations",
          "Business Updates",
          "COVID-19 Alerts",
          "Career Training",
          "Chatbot",
          "Conversational / Alerts",
          "Courier Services & Deliveries",
          "Emergency Alerts",
          "Events & Planning",
          "Financial Services",
          "Fraud Alerts",
          "Fundraising",
          "General Marketing",
          "General School Updates",
          "HR / Staffing",
          "Healthcare Alerts",
          "Housing Community Updates",
          "Insurance Services",
          "Job Dispatch",
          "Legal Services",
          "Mixed",
          "Motivational Reminders",
          "Notary Notifications",
          "Order Notifications",
          "Political",
          "Public Works",
          "Real Estate Services",
          "Religious Services",
          "Repair and Diagnostics Alerts",
          "Rewards Program",
          "Surveys",
          "System Alerts",
          "Voting Reminders",
          "Waitlist Alerts",
          "Webinar Reminders",
          "Workshop Alerts"
        ],
        "type": "string",
        "description": "Tollfree usecase categories"
      },
      "UsecaseMetadata": {
        "title": "UsecaseMetadata",
        "type": "object",
        "properties": {
          "annualFee": {
            "title": "Annualfee",
            "type": "number",
            "description": "Campaign annual subscription fee"
          },
          "maxSubUsecases": {
            "title": "Maxsubusecases",
            "type": "integer",
            "description": "Maximum number of sub-usecases declaration required."
          },
          "minSubUsecases": {
            "title": "Minsubusecases",
            "type": "integer",
            "description": "Minimum number of sub-usecases declaration required."
          },
          "mnoMetadata": {
            "title": "Mnometadata",
            "type": "object",
            "description": "Map of usecase metadata for each MNO. Key is the network ID of the MNO (e.g. 10017), Value is the mno metadata for the usecase."
          },
          "monthlyFee": {
            "title": "Monthlyfee",
            "type": "number",
            "description": "Campaign monthly subscription fee"
          },
          "quarterlyFee": {
            "title": "Quarterlyfee",
            "type": "number",
            "description": "Campaign quarterly subscription fee"
          },
          "usecase": {
            "title": "Usecase",
            "type": "string",
            "description": "Campaign usecase"
          }
        }
      },
      "UserAddress": {
        "title": "UserAddress",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the user address.",
            "format": "uuid",
            "example": "c3527e69-dc5a-4b3e-8f44-99d209f83c1d"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "user_address"
          },
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "first_name": {
            "type": "string",
            "description": "The first name associated with the address. An address must have either a first last name or a business name.",
            "example": "Alfred"
          },
          "last_name": {
            "type": "string",
            "description": "The last name associated with the address. An address must have either a first last name or a business name.",
            "example": "Foster"
          },
          "business_name": {
            "type": "string",
            "description": "The business name associated with the address. An address must have either a first last name or a business name.",
            "example": "Toy-O'Kon"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number associated with the address.",
            "example": "+12125559000"
          },
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "neighborhood": {
            "type": "string",
            "description": "The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Ciudad de los deportes"
          },
          "borough": {
            "type": "string",
            "description": "The borough of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Guadalajara"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was created.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the resource was updated.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        }
      },
      "UserAddressCreate": {
        "title": "UserAddressCreate",
        "required": [
          "first_name",
          "last_name",
          "business_name",
          "street_address",
          "locality",
          "country_code"
        ],
        "type": "object",
        "properties": {
          "customer_reference": {
            "type": "string",
            "description": "A customer reference string for customer look ups.",
            "example": "MY REF 001"
          },
          "first_name": {
            "type": "string",
            "description": "The first name associated with the address. An address must have either a first last name or a business name.",
            "example": "Alfred"
          },
          "last_name": {
            "type": "string",
            "description": "The last name associated with the address. An address must have either a first last name or a business name.",
            "example": "Foster"
          },
          "business_name": {
            "type": "string",
            "description": "The business name associated with the address. An address must have either a first last name or a business name.",
            "example": "Toy-O'Kon"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number associated with the address.",
            "example": "+12125559000"
          },
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "neighborhood": {
            "type": "string",
            "description": "The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Ciudad de los deportes"
          },
          "borough": {
            "type": "string",
            "description": "The borough of the address. This field is not used for addresses in the US but is used for some international addresses.",
            "example": "Guadalajara"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          },
          "skip_address_verification": {
            "type": "string",
            "description": "An optional boolean value specifying if verification of the address should be skipped or not. UserAddresses are generally used for shipping addresses, and failure to validate your shipping address will likely result in a failure to deliver SIM cards or other items ordered from Telnyx. Do not use this parameter unless you are sure that the address is correct even though it cannot be validated. If this is set to any value other than true, verification of the address will be attempted, and the user address will not be allowed if verification fails. If verification fails but suggested values are available that might make the address correct, they will be present in the response as well. If this value is set to true, then the verification will not be attempted. Defaults to false (verification will be performed).",
            "default": "false"
          }
        }
      },
      "UserBalance": {
        "title": "UserBalance",
        "type": "object",
        "properties": {
          "pending": {
            "type": "string",
            "description": "The account’s pending amount.",
            "format": "decimal",
            "example": "10.00"
          },
          "record_type": {
            "enum": [
              "balance"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "balance"
          },
          "balance": {
            "type": "string",
            "description": "The account's current balance.",
            "format": "decimal",
            "example": "300.00"
          },
          "credit_limit": {
            "type": "string",
            "description": "The account's credit limit.",
            "format": "decimal",
            "example": "100.00"
          },
          "available_credit": {
            "type": "string",
            "description": "Available amount to spend (balance + credit limit)",
            "format": "decimal",
            "example": "400.00"
          },
          "currency": {
            "type": "string",
            "description": "The ISO 4217 currency identifier.",
            "format": "iso4217",
            "example": "USD"
          }
        },
        "example": {
          "record_type": "balance",
          "pending": "10.00",
          "balance": "300.00",
          "credit_limit": "100.00",
          "available_credit": "400.00",
          "currency": "USD"
        }
      },
      "UserBundle": {
        "title": "UserBundle",
        "required": [
          "id",
          "active",
          "user_id",
          "created_at",
          "billing_bundle",
          "resources"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User bundle's ID, this is used to identify the user bundle in the API.",
            "format": "uuid",
            "example": "ca1d2263-d1f1-43ac-ba53-248e7a4bb26a"
          },
          "active": {
            "type": "boolean",
            "description": "Status of the user bundle.",
            "example": true
          },
          "user_id": {
            "type": "string",
            "description": "The customer's ID that owns this user bundle.",
            "format": "uuid",
            "example": "16856d8c-cd59-4b08-9ac2-1ebb01d419e1"
          },
          "created_at": {
            "type": "string",
            "description": "Date the user bundle was created.",
            "format": "date",
            "example": "2025-01-20"
          },
          "updated_at": {
            "type": "string",
            "description": "Date the user bundle was last updated.",
            "format": "date",
            "nullable": true,
            "example": "2025-01-20"
          },
          "billing_bundle": {
            "$ref": "#/components/schemas/BillingBundleSummary"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBundleResourceSchema"
            }
          }
        }
      },
      "UserBundleCreateRequest": {
        "title": "UserBundleCreateRequest",
        "required": [
          "billing_bundle_id"
        ],
        "type": "object",
        "properties": {
          "billing_bundle_id": {
            "title": "Billing Bundle Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UserBundleCreateResponse": {
        "title": "UserBundleCreateResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserBundle"
          }
        }
      },
      "UserBundleResourceSchema": {
        "title": "UserBundleResourceSchema",
        "required": [
          "id",
          "resource",
          "resource_type",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Resource's ID.",
            "format": "uuid",
            "example": "ca1d2263-d1f1-43ac-ba53-248e7a4bb26a"
          },
          "resource": {
            "type": "string",
            "description": "The resource itself (usually a phone number).",
            "example": "+15617819942"
          },
          "resource_type": {
            "type": "string",
            "description": "The type of the resource (usually 'number').",
            "example": "number"
          },
          "created_at": {
            "type": "string",
            "description": "Date the resource was created.",
            "format": "date",
            "example": "2025-01-20"
          },
          "updated_at": {
            "type": "string",
            "description": "Date the resource was last updated.",
            "format": "date",
            "nullable": true,
            "example": "2025-01-20"
          }
        }
      },
      "UserBundleResourcesResponse": {
        "title": "UserBundleResourcesResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBundleResourceSchema"
            }
          }
        }
      },
      "UserBundleResponse": {
        "title": "UserBundleResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserBundle"
          }
        }
      },
      "UserBundleSummary": {
        "title": "UserBundleSummary",
        "required": [
          "id",
          "active",
          "user_id",
          "created_at",
          "billing_bundle",
          "resources"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "title": "Active",
            "type": "boolean"
          },
          "user_id": {
            "title": "User Id",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date"
          },
          "billing_bundle": {
            "$ref": "#/components/schemas/BillingBundleSummary"
          },
          "resources": {
            "title": "Resources",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBundleResourceSchema"
            }
          }
        }
      },
      "UserEmbeddedBuckets": {
        "title": "UserEmbeddedBuckets",
        "required": [
          "buckets"
        ],
        "type": "object",
        "properties": {
          "buckets": {
            "title": "Buckets",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserEmbeddedBucketsData": {
        "title": "UserEmbeddedBucketsData",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserEmbeddedBuckets"
          }
        }
      },
      "CreateDocument": {
        "title": "CreateDocument",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "UserRequirement": {
        "title": "UserRequirement",
        "type": "object",
        "properties": {
          "requirement_id": {
            "type": "string"
          },
          "field_value": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "status": {
            "enum": [
              "approved",
              "unapproved",
              "pending-approval",
              "declined"
            ],
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserTagList": {
        "title": "UserTagList",
        "type": "array",
        "items": {
          "type": "string",
          "example": "my-tag"
        },
        "description": "A list of your tags on the given resource type. NOTE: The casing of the tags returned will not necessarily match the casing of the tags when they were added to a resource. This is because the tags will have the casing of the first time they were used within the Telnyx system regardless of source."
      },
      "ValidateAddressField": {
        "title": "ValidateAddressField",
        "type": "object",
        "properties": {
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          }
        }
      },
      "ValidateAddressRequest": {
        "title": "ValidateAddressRequest",
        "required": [
          "country_code",
          "street_address",
          "postal_code"
        ],
        "type": "object",
        "properties": {
          "street_address": {
            "type": "string",
            "description": "The primary street address information about the address.",
            "example": "600 Congress Avenue"
          },
          "extended_address": {
            "type": "string",
            "description": "Additional street address information about the address such as, but not limited to, unit number or apartment number.",
            "example": "14th Floor"
          },
          "locality": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the city of the address.",
            "example": "Austin"
          },
          "administrative_area": {
            "type": "string",
            "description": "The locality of the address. For US addresses, this corresponds to the state of the address.",
            "example": "TX"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "78701"
          },
          "country_code": {
            "type": "string",
            "description": "The two-character (ISO 3166-1 alpha-2) country code of the address.",
            "example": "US"
          }
        }
      },
      "ValidateAddressResult": {
        "title": "Validate address action result",
        "required": [
          "result",
          "suggested"
        ],
        "type": "object",
        "properties": {
          "result": {
            "enum": [
              "valid",
              "invalid"
            ],
            "type": "string",
            "description": "Indicates whether an address is valid or invalid.",
            "example": "valid"
          },
          "suggested": {
            "$ref": "#/components/schemas/ValidateAddressField"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "address_validation"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ValidationCodes": {
        "title": "ValidationCodes",
        "required": [
          "phone_numbers",
          "order_id"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "required": [
                "phone_number",
                "status"
              ],
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "+E.164"
                },
                "status": {
                  "enum": [
                    "verified",
                    "rejected",
                    "already_verified"
                  ],
                  "type": "string"
                }
              }
            }
          },
          "order_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ValidationCodesRequest": {
        "title": "ValidationCodesRequest",
        "required": [
          "verification_codes"
        ],
        "type": "object",
        "properties": {
          "verification_codes": {
            "type": "array",
            "items": {
              "required": [
                "phone_number",
                "code"
              ],
              "type": "object",
              "properties": {
                "phone_number": {
                  "type": "string",
                  "format": "+E.164"
                },
                "code": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Verification": {
        "title": "Verification",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "type": {
            "$ref": "#/components/schemas/VerificationType"
          },
          "record_type": {
            "$ref": "#/components/schemas/VerificationRecordType"
          },
          "phone_number": {
            "type": "string",
            "description": "+E164 formatted phone number.",
            "example": "+13035551234"
          },
          "verify_profile_id": {
            "type": "string",
            "description": "The identifier of the associated Verify profile.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "custom_code": {
            "type": "string",
            "description": "Send a self-generated numeric code to the end-user",
            "default": null,
            "nullable": true,
            "example": "43612"
          },
          "timeout_secs": {
            "type": "integer",
            "description": "This is the number of seconds before the code of the request is expired. Once this request has expired, the code will no longer verify the user. Note: this will override the `default_verification_timeout_secs` on the Verify profile.",
            "example": 300
          },
          "status": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "created_at": {
            "type": "string",
            "example": "2020-09-14T17:03:32.965812"
          },
          "updated_at": {
            "type": "string",
            "example": "2020-09-14T17:03:32.965812"
          }
        }
      },
      "VerificationCodesRequest": {
        "title": "VerificationCodesRequest",
        "required": [
          "phone_numbers",
          "verification_method"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "+E.164"
            }
          },
          "verification_method": {
            "enum": [
              "sms",
              "call",
              "flashcall"
            ],
            "type": "string"
          }
        }
      },
      "VerificationProfileRecordType": {
        "title": "VerificationProfileRecordType",
        "enum": [
          "verification_profile"
        ],
        "type": "string",
        "description": "The possible verification profile record types.",
        "example": "verification_profile"
      },
      "VerificationRecordType": {
        "title": "VerificationRecordType",
        "enum": [
          "verification"
        ],
        "type": "string",
        "description": "The possible verification record types.",
        "example": "verification"
      },
      "VerificationRequestEgress": {
        "title": "VerificationRequestEgress",
        "required": [
          "businessName",
          "corporateWebsite",
          "businessAddr1",
          "businessCity",
          "businessState",
          "businessZip",
          "businessContactFirstName",
          "businessContactLastName",
          "businessContactEmail",
          "businessContactPhone",
          "messageVolume",
          "phoneNumbers",
          "useCase",
          "useCaseSummary",
          "productionMessageContent",
          "optInWorkflow",
          "optInWorkflowImageURLs",
          "additionalInformation",
          "isvReseller",
          "id",
          "verificationRequestId"
        ],
        "type": "object",
        "properties": {
          "businessName": {
            "title": "Businessname",
            "type": "string",
            "example": "Telnyx LLC"
          },
          "corporateWebsite": {
            "title": "Corporatewebsite",
            "type": "string",
            "example": "http://example.com"
          },
          "businessAddr1": {
            "title": "Businessaddr1",
            "type": "string",
            "example": "600 Congress Avenue"
          },
          "businessAddr2": {
            "title": "Businessaddr2",
            "type": "string",
            "example": "14th Floor"
          },
          "businessCity": {
            "title": "Businesscity",
            "type": "string",
            "example": "Austin"
          },
          "businessState": {
            "title": "Businessstate",
            "type": "string",
            "example": "Texas"
          },
          "businessZip": {
            "title": "Businesszip",
            "type": "string",
            "example": "78701"
          },
          "businessContactFirstName": {
            "title": "Businesscontactfirstname",
            "type": "string",
            "example": "John"
          },
          "businessContactLastName": {
            "title": "Businesscontactlastname",
            "type": "string",
            "example": "Doe"
          },
          "businessContactEmail": {
            "title": "Businesscontactemail",
            "type": "string",
            "example": "email@example.com"
          },
          "businessContactPhone": {
            "title": "Businesscontactphone",
            "type": "string",
            "example": "+18005550100"
          },
          "messageVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Volume"
              }
            ],
            "description": "One of the following exact values: 10; 100; 1,000; 10,000; 100,000; 250,000; 500,000; 750,000; 1,000,000; 5,000,000; 10,000,000+",
            "example": "100,000"
          },
          "phoneNumbers": {
            "title": "Phonenumbers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TFPhoneNumber"
            }
          },
          "useCase": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UseCaseCategories"
              }
            ],
            "example": "2FA"
          },
          "useCaseSummary": {
            "title": "Usecasesummary",
            "type": "string",
            "example": "This is a use case where Telnyx sends out 2FA codes to portal users to verify their identity in order to sign into the portal"
          },
          "productionMessageContent": {
            "title": "Productionmessagecontent",
            "type": "string",
            "example": "Your Telnyx OTP is XXXX"
          },
          "optInWorkflow": {
            "title": "Optinworkflow",
            "type": "string",
            "example": "User signs into the Telnyx portal, enters number and is prompted to select whether they want to use 2FA verification for security purposes. If they've opted in a confirmation message is sent out to the handset"
          },
          "optInWorkflowImageURLs": {
            "title": "Optinworkflowimageurls",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Url"
            }
          },
          "additionalInformation": {
            "title": "Additionalinformation",
            "type": "string",
            "example": "This is for security purposes, blah blah blah"
          },
          "isvReseller": {
            "title": "Isvreseller",
            "type": "string",
            "example": "Yes"
          },
          "webhookUrl": {
            "title": "Webhookurl",
            "type": "string",
            "example": "http://example-webhook.com"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "verificationRequestId": {
            "title": "Verificationrequestid",
            "type": "string"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TFVerificationStatus"
              }
            ],
            "default": "In Progress"
          }
        },
        "description": "A verification request as it comes out of the database"
      },
      "VerificationRequestStatus": {
        "title": "VerificationRequestStatus",
        "required": [
          "businessName",
          "corporateWebsite",
          "businessAddr1",
          "businessCity",
          "businessState",
          "businessZip",
          "businessContactFirstName",
          "businessContactLastName",
          "businessContactEmail",
          "businessContactPhone",
          "messageVolume",
          "phoneNumbers",
          "useCase",
          "useCaseSummary",
          "productionMessageContent",
          "optInWorkflow",
          "optInWorkflowImageURLs",
          "additionalInformation",
          "isvReseller",
          "id",
          "verificationStatus"
        ],
        "type": "object",
        "properties": {
          "businessName": {
            "title": "Businessname",
            "type": "string",
            "example": "Telnyx LLC"
          },
          "corporateWebsite": {
            "title": "Corporatewebsite",
            "type": "string",
            "example": "http://example.com"
          },
          "businessAddr1": {
            "title": "Businessaddr1",
            "type": "string",
            "example": "600 Congress Avenue"
          },
          "businessAddr2": {
            "title": "Businessaddr2",
            "type": "string",
            "example": "14th Floor"
          },
          "businessCity": {
            "title": "Businesscity",
            "type": "string",
            "example": "Austin"
          },
          "businessState": {
            "title": "Businessstate",
            "type": "string",
            "example": "Texas"
          },
          "businessZip": {
            "title": "Businesszip",
            "type": "string",
            "example": "78701"
          },
          "businessContactFirstName": {
            "title": "Businesscontactfirstname",
            "type": "string",
            "example": "John"
          },
          "businessContactLastName": {
            "title": "Businesscontactlastname",
            "type": "string",
            "example": "Doe"
          },
          "businessContactEmail": {
            "title": "Businesscontactemail",
            "type": "string",
            "example": "email@example.com"
          },
          "businessContactPhone": {
            "title": "Businesscontactphone",
            "type": "string",
            "example": "+18889809750"
          },
          "messageVolume": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Volume"
              }
            ],
            "description": "One of the following exact values: 10; 100; 1,000; 10,000; 100,000; 250,000; 500,000; 750,000; 1,000,000; 5,000,000; 10,000,000+",
            "example": "100,000"
          },
          "phoneNumbers": {
            "title": "Phonenumbers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TFPhoneNumber"
            }
          },
          "useCase": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UseCaseCategories"
              }
            ],
            "example": "2FA"
          },
          "useCaseSummary": {
            "title": "Usecasesummary",
            "type": "string",
            "example": "This is a use case where Telnyx sends out 2FA codes to portal users to verify their identity in order to sign into the portal"
          },
          "productionMessageContent": {
            "title": "Productionmessagecontent",
            "type": "string",
            "example": "Your Telnyx OTP is XXXX"
          },
          "optInWorkflow": {
            "title": "Optinworkflow",
            "type": "string",
            "example": "User signs into the Telnyx portal, enters number and is prompted to select whether they want to use 2FA verification for security purposes. If they've opted in a confirmation message is sent out to the handset"
          },
          "optInWorkflowImageURLs": {
            "title": "Optinworkflowimageurls",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Url"
            }
          },
          "additionalInformation": {
            "title": "Additionalinformation",
            "type": "string",
            "example": "This is for security purposes, blah blah blah"
          },
          "isvReseller": {
            "title": "Isvreseller",
            "type": "string",
            "example": "Yes"
          },
          "webhookUrl": {
            "title": "Webhookurl",
            "type": "string",
            "example": "http://example-webhook.com"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid",
            "example": "eaba9f52-164e-58e0-b002-4f668e18b7ed"
          },
          "verificationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TFVerificationStatus"
              }
            ],
            "example": "Pending Customer Feedback"
          },
          "reason": {
            "title": "Reason",
            "type": "string",
            "example": "Unfortunately, we have to cancel this request as we do not support non tollfree US numbers."
          },
          "createdAt": {
            "title": "Createdat",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-23T18:10:02.5740000+00:00"
          },
          "updatedAt": {
            "title": "Updatedat",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-23T18:10:02.5740000+00:00"
          }
        },
        "description": "A verification request and its status, suitable for returning to users"
      },
      "VerificationStatus": {
        "title": "VerificationStatus",
        "enum": [
          "pending",
          "accepted",
          "invalid",
          "expired",
          "error"
        ],
        "type": "string",
        "description": "The possible statuses of the verification request.",
        "example": "accepted"
      },
      "VerificationType": {
        "title": "VerificationType",
        "enum": [
          "sms",
          "call",
          "flashcall"
        ],
        "type": "string",
        "description": "The possible types of verification.",
        "example": "sms"
      },
      "VerifiedNumberRecordType": {
        "title": "VerifiedNumberRecordType",
        "enum": [
          "verified_number"
        ],
        "type": "string",
        "description": "The possible verified numbers record types.",
        "example": "verified_number"
      },
      "VerifiedNumberResponse": {
        "title": "VerifiedNumberResponse",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "example": "+15551234567"
          },
          "record_type": {
            "$ref": "#/components/schemas/VerifiedNumberRecordType"
          },
          "verified_at": {
            "type": "string",
            "example": "2020-09-14T17:03:32.965812"
          }
        }
      },
      "VerifiedNumberResponseDataWrapper": {
        "title": "VerifiedNumberResponseDataWrapper",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VerifiedNumberResponse"
          }
        }
      },
      "VerifyDetailRecord": {
        "title": "VerifyDetailRecord",
        "required": [
          "record_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the verification",
            "format": "uuid",
            "example": "0add777f-1549-46f7-84e9-ad7350f6aa97"
          },
          "verify_profile_id": {
            "type": "string",
            "format": "uuid",
            "example": "49000176-1ab2-8bc1-352e-4009f6c37f82"
          },
          "delivery_status": {
            "type": "string",
            "example": "pending"
          },
          "verification_status": {
            "type": "string",
            "example": "pending"
          },
          "destination_phone_number": {
            "type": "string",
            "description": "E.164 formatted phone number",
            "example": "+13124515883"
          },
          "verify_channel_type": {
            "enum": [
              "sms",
              "psd2",
              "call",
              "flashcall"
            ],
            "type": "string",
            "description": "Depending on the type of verification, the `verify_channel_id`\npoints to one of the following channel ids;\n---\nverify_channel_type | verify_channel_id\n------------------- | -----------------\nsms, psd2           | messaging_id\ncall, flashcall     | call_control_id\n---\n"
          },
          "verify_channel_id": {
            "type": "string",
            "format": "uuid",
            "example": "5b7a8365-91f3-420a-befc-498d1efd6c20"
          },
          "created_at": {
            "type": "string",
            "format": "datetime",
            "example": "2021-07-08T00:00:41.000000+00:00"
          },
          "updated_at": {
            "type": "string",
            "format": "datetime",
            "example": "2021-07-08T00:00:41.000000+00:00"
          },
          "rate": {
            "type": "string",
            "description": "Currency amount per billing unit used to calculate the Telnyx billing costs",
            "example": "0.002"
          },
          "rate_measured_in": {
            "type": "string",
            "description": "Billing unit used to calculate the Telnyx billing costs",
            "example": "number of occurrences"
          },
          "verify_usage_fee": {
            "type": "string",
            "description": "Currency amount for Verify Usage Fee",
            "example": "0.002"
          },
          "currency": {
            "type": "string",
            "description": "Telnyx account currency used to describe monetary values, including billing costs",
            "example": "USD"
          },
          "record_type": {
            "type": "string",
            "default": "verification_detail_record",
            "example": "verification_detail_record"
          }
        }
      },
      "VerifyProfileCallResponse": {
        "title": "VerifyProfileCallResponse",
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "VerifyProfileFlashcallResponse": {
        "title": "VerifyProfileFlashcallResponse",
        "type": "object",
        "properties": {
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "VerifyProfileMessageTemplateResponse": {
        "title": "VerifyProfileResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "text": {
            "type": "string",
            "example": "Your {{app_name}} verification code is: {{code}}."
          }
        }
      },
      "VerifyProfileResponse": {
        "title": "VerifyProfileResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          },
          "name": {
            "type": "string",
            "example": "Test Profile"
          },
          "webhook_url": {
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "webhook_failover_url": {
            "type": "string",
            "example": "http://example.com/webhook/failover"
          },
          "record_type": {
            "$ref": "#/components/schemas/VerificationProfileRecordType"
          },
          "created_at": {
            "type": "string",
            "example": "2020-09-14T17:03:32.965812"
          },
          "updated_at": {
            "type": "string",
            "example": "2020-09-14T17:03:32.965812"
          },
          "sms": {
            "$ref": "#/components/schemas/VerifyProfileSMSResponse"
          },
          "call": {
            "$ref": "#/components/schemas/VerifyProfileCallResponse"
          },
          "flashcall": {
            "$ref": "#/components/schemas/VerifyProfileFlashcallResponse"
          },
          "language": {
            "type": "string",
            "example": "en-US"
          }
        }
      },
      "VerifyProfileResponseDataWrapper": {
        "title": "VerifyProfileResponseDataWrapper",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VerifyProfileResponse"
          }
        }
      },
      "VerifyProfileSMSResponse": {
        "title": "VerifyProfileSMSResponse",
        "type": "object",
        "properties": {
          "messaging_template_id": {
            "type": "string",
            "description": "The message template identifier selected from /verify_profiles/templates",
            "format": "uuid",
            "example": "0abb5b4f-459f-445a-bfcd-488998b7572d"
          },
          "app_name": {
            "pattern": "^[A-Za-z0-9 -]{1,30}$",
            "type": "string",
            "description": "The name that identifies the application requesting 2fa in the verification message.",
            "example": "Example Secure App"
          },
          "alpha_sender": {
            "pattern": "^[A-Za-z0-9 ]{1,11}$",
            "type": "string",
            "description": "The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender ID.",
            "default": "Telnyx",
            "nullable": true
          },
          "code_length": {
            "type": "integer",
            "description": "The length of the verify code to generate.",
            "default": 5,
            "example": 6
          },
          "whitelisted_destinations": {
            "type": "array",
            "items": {
              "pattern": "^[A-Z]{2}$",
              "type": "string",
              "description": "ISO 3166-1 alpha-2 country code"
            },
            "description": "Enabled country destinations to send verification codes. The elements in the list must be valid ISO 3166-1 alpha-2 country codes. If set to `[\"*\"]`, all destinations will be allowed."
          },
          "default_verification_timeout_secs": {
            "type": "integer",
            "description": "For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.",
            "default": 300,
            "example": 300
          }
        }
      },
      "VerifyVerificationCodeRequestById": {
        "title": "VerifyVerificationCodeRequestById",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "This is the code the user submits for verification.",
            "example": "17686"
          },
          "status": {
            "enum": [
              "accepted",
              "rejected"
            ],
            "type": "string",
            "description": "Identifies if the verification code has been accepted or rejected. Only permitted if custom_code was used for the verification.",
            "example": "accepted"
          }
        }
      },
      "VerifyVerificationCodeRequestByPhoneNumber": {
        "title": "VerifyVerificationCodeRequestByPhoneNumber",
        "required": [
          "code",
          "verify_profile_id"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "This is the code the user submits for verification.",
            "example": "17686"
          },
          "verify_profile_id": {
            "type": "string",
            "description": "The identifier of the associated Verify profile.",
            "format": "uuid",
            "example": "12ade33a-21c0-473b-b055-b3c836e1c292"
          }
        }
      },
      "VerifyVerificationCodeResponse": {
        "title": "VerifyVerificationCodeResponse",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "phone_number",
              "response_code"
            ],
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "+E164 formatted phone number.",
                "example": "+13035551234"
              },
              "response_code": {
                "enum": [
                  "accepted",
                  "rejected"
                ],
                "type": "string",
                "description": "Identifies if the verification code has been accepted or rejected.",
                "example": "accepted"
              }
            }
          }
        }
      },
      "Vertical": {
        "title": "Vertical",
        "enum": [
          "REAL_ESTATE",
          "HEALTHCARE",
          "ENERGY",
          "ENTERTAINMENT",
          "RETAIL",
          "AGRICULTURE",
          "INSURANCE",
          "EDUCATION",
          "HOSPITALITY",
          "FINANCIAL",
          "GAMBLING",
          "CONSTRUCTION",
          "NGO",
          "MANUFACTURING",
          "GOVERNMENT",
          "TECHNOLOGY",
          "COMMUNICATION"
        ],
        "type": "string",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Vertical or industry segment of the brand or campaign.",
        "example": "TECHNOLOGY"
      },
      "VideoRegion": {
        "title": "VideoRegion",
        "type": "object",
        "properties": {
          "x_pos": {
            "type": "integer",
            "description": "X axis value (in pixels) of the region's upper left corner relative to the upper left corner of the whole room composition viewport.",
            "default": 0,
            "nullable": true,
            "example": 100
          },
          "y_pos": {
            "type": "integer",
            "description": "Y axis value (in pixels) of the region's upper left corner relative to the upper left corner of the whole room composition viewport.",
            "default": 0,
            "nullable": true,
            "example": 100
          },
          "z_pos": {
            "maximum": 99,
            "minimum": -99,
            "type": "integer",
            "description": "Regions with higher z_pos values are stacked on top of regions with lower z_pos values",
            "default": 0,
            "nullable": true,
            "example": 1
          },
          "height": {
            "minimum": 16,
            "type": "integer",
            "description": "Height of the video region",
            "nullable": true,
            "example": 360
          },
          "width": {
            "minimum": 16,
            "type": "integer",
            "description": "Width of the video region",
            "nullable": true,
            "example": 480
          },
          "max_columns": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum number of columns of the region's placement grid. By default, the region has as many columns as needed to layout all the specified video sources.",
            "nullable": true,
            "example": 3
          },
          "max_rows": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum number of rows of the region's placement grid. By default, the region has as many rows as needed to layout all the specified video sources.",
            "nullable": true,
            "example": 3
          },
          "video_sources": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "7b61621f-62e0-4aad-ab11-9fd19e272e73"
            },
            "description": "Array of video recording ids to be composed in the region. Can be \"*\" to specify all video recordings in the session"
          }
        }
      },
      "VirtualCrossConnect": {
        "title": "VirtualCrossConnect",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "$ref": "#/components/schemas/Interface"
          },
          {
            "title": "VirtualCrossConnect",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "virtual_cross_connect"
              },
              "cloud_provider": {
                "enum": [
                  "aws",
                  "azure",
                  "gce"
                ],
                "type": "string",
                "description": "The Virtual Private Cloud with which you would like to establish a cross connect.",
                "example": "aws"
              },
              "cloud_provider_region": {
                "type": "string",
                "description": "The region where your Virtual Private Cloud hosts are located.<br /><br />The available regions can be found using the /virtual_cross_connect_regions endpoint.",
                "example": "us-east-1"
              },
              "bgp_asn": {
                "type": "number",
                "description": "The Border Gateway Protocol (BGP) Autonomous System Number (ASN). If null, value will be assigned by Telnyx.",
                "example": 1234
              },
              "bandwidth_mbps": {
                "type": "number",
                "description": "The desired throughput in Megabits per Second (Mbps) for your Virtual Cross Connect.<br /><br />The available bandwidths can be found using the /virtual_cross_connect_regions endpoint.",
                "example": 50
              },
              "primary_enabled": {
                "type": "boolean",
                "description": "Indicates whether the primary circuit is enabled. Setting this to `false` will disable the circuit.",
                "readOnly": true,
                "example": true
              },
              "primary_cloud_account_id": {
                "type": "string",
                "description": "The identifier for your Virtual Private Cloud. The number will be different based upon your Cloud provider.",
                "example": "123456789012"
              },
              "primary_telnyx_ip": {
                "type": "string",
                "description": "The IP address assigned to the Telnyx side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.",
                "format": "ipv4",
                "example": "169.254.0.1"
              },
              "primary_cloud_ip": {
                "type": "string",
                "description": "The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.",
                "format": "ipv4",
                "example": "169.254.0.2"
              },
              "primary_bgp_key": {
                "type": "string",
                "description": "The authentication key for BGP peer configuration.",
                "example": "yFV4wEPtPVPfDUGLWiyQzwga"
              },
              "secondary_enabled": {
                "type": "boolean",
                "description": "Indicates whether the secondary circuit is enabled. Setting this to `false` will disable the circuit.",
                "readOnly": true,
                "example": true
              },
              "secondary_cloud_account_id": {
                "type": "string",
                "description": "The identifier for your Virtual Private Cloud. The number will be different based upon your Cloud provider.<br /><br />This attribute is only necessary for GCE."
              },
              "secondary_telnyx_ip": {
                "type": "string",
                "description": "The IP address assigned to the Telnyx side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.",
                "format": "ipv4",
                "example": "169.254.0.3"
              },
              "secondary_cloud_ip": {
                "type": "string",
                "description": "The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value should be null for GCE as Google will only inform you of your assigned IP once the connection has been accepted.",
                "format": "ipv4",
                "example": "169.254.0.4"
              },
              "secondary_bgp_key": {
                "type": "string",
                "description": "The authentication key for BGP peer configuration.",
                "example": "ge1lONeK9RcA83uuWaw9DvZy"
              }
            }
          }
        ]
      },
      "VirtualCrossConnectCombined": {
        "title": "VirtualCrossConnectCombined",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/VirtualCrossConnectCreate"
          },
          {
            "$ref": "#/components/schemas/VirtualCrossConnectPatch"
          },
          {
            "$ref": "#/components/schemas/RegionOut"
          }
        ]
      },
      "VirtualCrossConnectCoverage": {
        "title": "VirtualCrossConnectCoverage",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "readOnly": true,
            "example": "virtual_cross_connects_coverage"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "cloud_provider": {
            "enum": [
              "aws",
              "azure",
              "gce"
            ],
            "type": "string",
            "description": "The Virtual Private Cloud with which you would like to establish a cross connect.",
            "example": "aws"
          },
          "cloud_provider_region": {
            "type": "string",
            "description": "The region where your Virtual Private Cloud hosts are located. Should be identical to how the cloud provider names region, i.e. us-east-1 for AWS but Frankfurt for Azure",
            "example": "us-east-1"
          },
          "available_bandwidth": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "The available throughput in Megabits per Second (Mbps) for your Virtual Cross Connect."
          }
        }
      },
      "VirtualCrossConnectCreate": {
        "title": "VirtualCrossConnectCreate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/VirtualCrossConnect"
          },
          {
            "$ref": "#/components/schemas/RegionIn"
          },
          {
            "title": "VirtualCrossConnectCreate",
            "required": [
              "network_id",
              "region_code",
              "cloud_provider",
              "cloud_provider_region",
              "bgp_asn",
              "primary_cloud_account_id"
            ],
            "type": "object"
          }
        ]
      },
      "VirtualCrossConnectPatch": {
        "title": "VirtualCrossConnectPatch",
        "type": "object",
        "properties": {
          "primary_enabled": {
            "type": "boolean",
            "description": "Indicates whether the primary circuit is enabled. Setting this to `false` will disable the circuit.",
            "example": true
          },
          "primary_routing_announcement": {
            "type": "boolean",
            "description": "Whether the primary BGP route is being announced.",
            "example": false
          },
          "primary_cloud_ip": {
            "type": "string",
            "description": "The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.",
            "format": "ipv4",
            "example": "169.254.0.2"
          },
          "secondary_enabled": {
            "type": "boolean",
            "description": "Indicates whether the secondary circuit is enabled. Setting this to `false` will disable the circuit.",
            "example": true
          },
          "secondary_routing_announcement": {
            "type": "boolean",
            "description": "Whether the secondary BGP route is being announced.",
            "example": false
          },
          "secondary_cloud_ip": {
            "type": "string",
            "description": "The IP address assigned for your side of the Virtual Cross Connect.<br /><br />If none is provided, one will be generated for you.<br /><br />This value can not be patched once the VXC has bene provisioned.",
            "format": "ipv4",
            "example": "169.254.0.4"
          }
        }
      },
      "ListDocuments_200": {
        "title": "ListDocuments_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocServiceDocument"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VoiceSettings": {
        "title": "VoiceSettings",
        "required": [
          "voice"
        ],
        "type": "object",
        "properties": {
          "voice": {
            "type": "string",
            "description": "The voice to be used by the voice assistant. Check the full list of [available voices](https://developers.telnyx.com/api/call-control/list-text-to-speech-voices) via our voices API.\nTo use ElevenLabs, you must reference your ElevenLabs API key as an integration secret under the `api_key_ref` field. See [integration secrets documentation](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) for details. For Telnyx voices, use `Telnyx.<model_id>.<voice_id>` (e.g. Telnyx.KokoroTTS.af_heart)"
          },
          "voice_speed": {
            "type": "number",
            "description": "The speed of the voice in the range [0.25, 2.0]. 1.0 is deafult speed. Larger numbers make the voice faster, smaller numbers make it slower. This is only applicable for Telnyx Natural voices.",
            "default": 1
          },
          "api_key_ref": {
            "type": "string",
            "description": "The `identifier` for an integration secret [/v2/integration_secrets](https://developers.telnyx.com/api/secrets-manager/integration-secrets/create-integration-secret) that refers to your ElevenLabs API key. Warning: Free plans are unlikely to work with this integration."
          }
        }
      },
      "VoicemailPrefResponse": {
        "title": "VoicemailPrefResponse",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether voicemail is enabled.",
            "example": true
          },
          "pin": {
            "type": "string",
            "description": "The pin used for the voicemail.",
            "example": "1234"
          }
        },
        "example": {
          "enabled": "true",
          "pin": "1234"
        }
      },
      "VoicemailRequest": {
        "title": "VoicemailRequest",
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "description": "The pin used for voicemail",
            "example": "1234"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether voicemail is enabled.",
            "example": true
          }
        }
      },
      "Volume": {
        "title": "Volume",
        "enum": [
          "10",
          "100",
          "1,000",
          "10,000",
          "100,000",
          "250,000",
          "500,000",
          "750,000",
          "1,000,000",
          "5,000,000",
          "10,000,000+"
        ],
        "type": "string",
        "description": "Message Volume Enums"
      },
      "WdrReport": {
        "title": "WdrReport",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the resource.",
            "format": "uuid",
            "readOnly": true,
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "detail_records_report"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the resource was updated.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating the start time.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "end_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating the end time.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "status": {
            "enum": [
              "pending",
              "complete",
              "failed",
              "deleted"
            ],
            "type": "string",
            "description": "Indicates the status of the report, which is updated asynchronously.",
            "example": "pending"
          },
          "report_url": {
            "type": "string",
            "description": "The URL where the report content, when generated, will be published to.",
            "example": "http://example.com"
          }
        }
      },
      "WdrReportRequest": {
        "title": "WdrReportRequest",
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating the start time.",
            "example": "2018-02-02T22:25:27.521Z"
          },
          "end_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating the end time.",
            "example": "2018-02-02T22:25:27.521Z"
          }
        },
        "example": {
          "start_time": "2018-02-02T22:25:27.521Z",
          "end_time": "2018-02-02T22:25:27.521Z"
        }
      },
      "WebhookApiVersion": {
        "title": "Webhook API Version",
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "Determines which webhook format will be used, Telnyx API v1 or v2.",
        "default": "1",
        "example": "1"
      },
      "ListDocumentLinks_200": {
        "title": "ListDocumentLinks_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocServiceDocumentLink"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "VerifyPhoneNumberCoverage": {
        "title": "VerifyPhoneNumberCoverage",
        "required": [
          "phone_numbers"
        ],
        "type": "object",
        "properties": {
          "phone_numbers": {
            "type": "array",
            "items": {
              "pattern": "^\\+1\\d{10}$",
              "type": "string",
              "description": "A valid US phone number in E164 format.",
              "example": "+1234567890"
            },
            "description": "The phone numbers list to be verified."
          }
        }
      },
      "WebhookPortingOrderDeletedPayload": {
        "title": "WebhookPortingOrderDeletedPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the porting order that was deleted.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "customer_reference": {
            "type": "string",
            "description": "Identifies the customer reference associated with the porting order.",
            "example": "my-ref-001"
          },
          "deleted_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the porting order was deleted.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        },
        "description": "The webhook payload for the porting_order.deleted event"
      },
      "WebhookPortingOrderMessagingChangedPayload": {
        "title": "WebhookPortingOrderMessagingChangedPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the porting order that was moved.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "customer_reference": {
            "type": "string",
            "description": "Identifies the customer reference associated with the porting order.",
            "example": "my-ref-001"
          },
          "support_key": {
            "type": "string",
            "description": "Identifies the support key associated with the porting order.",
            "example": "sr_b1a2c3"
          },
          "messaging": {
            "type": "object",
            "properties": {
              "messaging_capable": {
                "type": "boolean",
                "description": "Indicates whether the porting order is messaging capable.",
                "example": true
              },
              "enable_messaging": {
                "type": "boolean",
                "description": "Indicates whether Telnyx will port messaging capabilities from the losing carrier. If false, any messaging capabilities will stay with their current provider.",
                "example": true
              },
              "messaging_port_status": {
                "enum": [
                  "not_applicable",
                  "pending",
                  "activating",
                  "exception",
                  "canceled",
                  "partial_port_complete",
                  "ported"
                ],
                "type": "string",
                "description": "Indicates the messaging port status of the porting order.",
                "example": "ported"
              },
              "messaging_port_completed": {
                "type": "boolean",
                "description": "Indicates whether the messaging port is completed.",
                "example": true
              }
            },
            "description": "The messaging portability status of the porting order."
          }
        },
        "description": "The webhook payload for the porting_order.messaging_changed event"
      },
      "WebhookPortingOrderNewCommentPayload": {
        "title": "WebhookPortingOrderNewCommentPayload",
        "type": "object",
        "properties": {
          "porting_order_id": {
            "type": "string",
            "description": "Identifies the porting order that the comment was added to.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "support_key": {
            "type": "string",
            "description": "Identifies the support key associated with the porting order.",
            "example": "sr_b1a2c3"
          },
          "comment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifies the comment.",
                "format": "uuid",
                "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
              },
              "body": {
                "type": "string",
                "description": "The body of the comment.",
                "example": "This is a comment."
              },
              "user_id": {
                "type": "string",
                "description": "Identifies the user that create the comment.",
                "format": "uuid",
                "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
              },
              "user_type": {
                "enum": [
                  "user",
                  "admin",
                  "system"
                ],
                "type": "string",
                "description": "Identifies the type of the user that created the comment.",
                "example": "user"
              },
              "inserted_at": {
                "type": "string",
                "description": "ISO 8601 formatted date indicating when the comment was created.",
                "format": "date-time",
                "example": "2021-03-19T10:07:15.5270000+00:00"
              }
            },
            "description": "The comment that was added to the porting order."
          }
        },
        "description": "The webhook payload for the porting_order.new_comment event"
      },
      "WebhookPortingOrderSplitPayload": {
        "title": "WebhookPortingOrderSplitPayload",
        "type": "object",
        "properties": {
          "from": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifies the porting order that was split.",
                "format": "uuid",
                "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
              }
            },
            "description": "The porting order that was split."
          },
          "to": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifies the porting order that was split.",
                "format": "uuid",
                "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
              }
            },
            "description": "The new porting order that the phone numbers was moved to."
          },
          "porting_phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Identifies the porting phone number that was moved.",
                  "format": "uuid",
                  "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
                }
              }
            },
            "description": "The list of porting phone numbers that were moved to the new porting order."
          }
        },
        "description": "The webhook payload for the porting_order.split event"
      },
      "WebhookPortingOrderStatusChangedPayload": {
        "title": "WebhookPortingOrderStatusChangedPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the porting order that was moved.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "customer_reference": {
            "type": "string",
            "description": "Identifies the customer reference associated with the porting order.",
            "example": "my-ref-001"
          },
          "status": {
            "$ref": "#/components/schemas/PortingOrderStatus"
          },
          "support_key": {
            "type": "string",
            "description": "Identifies the support key associated with the porting order.",
            "example": "sr_b1a2c3"
          },
          "updated_at": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating when the porting order was moved.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL to send the webhook to.",
            "example": "https://example.com/webhook"
          }
        },
        "description": "The webhook payload for the porting_order.status_changed event"
      },
      "WebhookPortoutFocDateChangedPayload": {
        "title": "WebhookPortoutFocDateChangedPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the port-out order that have the FOC date changed.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the organization that port-out order belongs to.",
            "example": "0e19c89e-f0ce-458a-a36c-3c60bc2014b1"
          },
          "foc_date": {
            "type": "string",
            "description": "ISO 8601 formatted date indicating the new FOC date.",
            "format": "date-time",
            "example": "2021-03-19T10:07:15.5270000+00:00"
          }
        },
        "description": "The webhook payload for the portout.foc_date_changed event"
      },
      "WebhookPortoutNewCommentPayload": {
        "title": "WebhookPortoutNewCommentPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the comment that was added to the port-out order.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "portout_id": {
            "type": "string",
            "description": "Identifies the port-out order that the comment was added to.",
            "format": "uuid",
            "example": "d26109e5-0605-4671-a235-d3c649cc8406"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user that added the comment.",
            "format": "uuid",
            "example": "1c45c968-c2e0-4559-b1dd-db073962fc61"
          },
          "comment": {
            "type": "string",
            "description": "The body of the comment.",
            "example": "This is a comment."
          }
        },
        "description": "The webhook payload for the portout.new_comment event"
      },
      "WebhookPortoutStatusChangedPayload": {
        "title": "WebhookPortoutStatusChangedPayload",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifies the port out that was moved.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "status": {
            "enum": [
              "pending",
              "authorized",
              "ported",
              "rejected",
              "rejected-pending",
              "canceled"
            ],
            "type": "string",
            "description": "The new status of the port out.",
            "example": "authorized"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "E164 formatted phone number"
            },
            "description": "Phone numbers associated with this port-out order"
          },
          "carrier_name": {
            "type": "string",
            "description": "Carrier the number will be ported out to",
            "example": "Testing Carrier"
          },
          "spid": {
            "type": "string",
            "description": "The new carrier SPID.",
            "example": "987H"
          },
          "user_id": {
            "type": "string",
            "description": "Identifies the user that the port-out order belongs to.",
            "format": "uuid",
            "example": "96dfa9e4-c753-4fd3-97cd-42d66f26cf0c"
          },
          "subscriber_name": {
            "type": "string",
            "description": "The name of the port-out's end user.",
            "example": "John Doe"
          },
          "rejection_reason": {
            "type": "string",
            "description": "The reason why the order is being rejected by the user. If the order is authorized, this field can be left null",
            "example": null
          },
          "attempted_pin": {
            "type": "string",
            "description": "The PIN that was attempted to be used to authorize the port out.",
            "example": "1234"
          }
        },
        "description": "The webhook payload for the portout.status_changed event"
      },
      "CreateCustomerServiceRecord": {
        "title": "CreateCustomerServiceRecord",
        "required": [
          "phone_number"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "pattern": "^\\+1\\d{10}$",
            "type": "string",
            "description": "A valid US phone number in E164 format.",
            "example": "+1234567890"
          },
          "webhook_url": {
            "type": "string",
            "description": "Callback URL to receive webhook notifications.",
            "example": "https://example.com/webhook"
          },
          "additional_data": {
            "$ref": "#/components/schemas/CustomerServiceRecordAdditionalData"
          }
        }
      },
      "WebhookTool": {
        "title": "WebhookTool",
        "required": [
          "type",
          "webhook"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "webhook"
            ],
            "type": "string"
          },
          "webhook": {
            "$ref": "#/components/schemas/WebhookToolParams"
          }
        }
      },
      "WebhookToolParams": {
        "title": "WebhookToolParams",
        "required": [
          "url",
          "name",
          "description"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool."
          },
          "description": {
            "type": "string",
            "description": "The description of the tool."
          },
          "url": {
            "type": "string",
            "description": "The URL of the external tool to be called. This URL is going to be used by the assistant. The URL can be templated like: `https://example.com/api/v1/{id}`, where `{id}` is a placeholder for a value that will be provided by the assistant if `path_parameters` are provided with the `id` attribute.",
            "example": "https://example.com/api/v1/function"
          },
          "method": {
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "type": "string",
            "description": "The HTTP method to be used when calling the external tool.",
            "default": "POST"
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the header. Note that we support mustache templating for the value. For example you can use `Bearer {{#integration_secret}}test-secret{{/integration_secret}}` to pass the value of the integration secret as the bearer token."
                }
              }
            },
            "description": "The headers to be sent to the external tool."
          },
          "body_parameters": {
            "type": "object",
            "properties": {
              "properties": {
                "type": "object",
                "description": "The properties of the body parameters."
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The required properties of the body parameters."
              },
              "type": {
                "enum": [
                  "object"
                ],
                "type": "string"
              }
            },
            "description": "The body parameters the webhook tool accepts, described as a JSON Schema object. These parameters will be passed to the webhook as the body of the request. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format",
            "example": {
              "properties": {
                "age": {
                  "description": "The age of the customer.",
                  "type": "integer"
                },
                "location": {
                  "description": "The location of the customer.",
                  "type": "string"
                }
              },
              "required": [
                "age",
                "location"
              ],
              "type": "object"
            }
          },
          "path_parameters": {
            "type": "object",
            "properties": {
              "properties": {
                "type": "object",
                "description": "The properties of the path parameters."
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The required properties of the path parameters."
              },
              "type": {
                "enum": [
                  "object"
                ],
                "type": "string"
              }
            },
            "description": "The path parameters the webhook tool accepts, described as a JSON Schema object. These parameters will be passed to the webhook as the path of the request if the URL contains a placeholder for a value. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format",
            "example": {
              "properties": {
                "id": {
                  "description": "The id of the customer.",
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            }
          },
          "query_parameters": {
            "type": "object",
            "properties": {
              "properties": {
                "type": "object",
                "description": "The properties of the query parameters."
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The required properties of the query parameters."
              },
              "type": {
                "enum": [
                  "object"
                ],
                "type": "string"
              }
            },
            "description": "The query parameters the webhook tool accepts, described as a JSON Schema object. These parameters will be passed to the webhook as the query of the request. See the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format",
            "example": {
              "properties": {
                "page": {
                  "description": "The page number.",
                  "type": "integer"
                }
              },
              "required": [
                "page"
              ],
              "type": "object"
            }
          }
        }
      },
      "WireguardInterface": {
        "title": "WireguardInterface",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "$ref": "#/components/schemas/Interface"
          },
          {
            "title": "WireguardInterface",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "wireguard_interface"
              },
              "endpoint": {
                "type": "string",
                "description": "The Telnyx WireGuard peers `Peer.endpoint` value.",
                "readOnly": true,
                "example": "203.0.113.0:51871"
              },
              "public_key": {
                "type": "string",
                "description": "The Telnyx WireGuard peers `Peer.PublicKey`.",
                "readOnly": true,
                "example": "qF4EqlZq+5JL2IKYY8ij49daYyfKVhevJrcDxdqC8GU="
              },
              "enable_sip_trunking": {
                "type": "boolean",
                "description": "Enable SIP traffic forwarding over VPN interface.",
                "example": false
              }
            }
          }
        ]
      },
      "WireguardInterfaceCreate": {
        "title": "WireguardInterfaceCreate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WireguardInterface"
          },
          {
            "$ref": "#/components/schemas/RegionIn"
          },
          {
            "title": "WireguardInterfaceCreate",
            "required": [
              "network_id",
              "region_code"
            ],
            "type": "object"
          }
        ]
      },
      "WireguardInterfaceRead": {
        "title": "WireguardInterfaceRead",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WireguardInterface"
          },
          {
            "$ref": "#/components/schemas/RegionOut"
          }
        ]
      },
      "WireguardPeer": {
        "title": "WireguardPeer",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Record"
          },
          {
            "$ref": "#/components/schemas/WireguardPeerPatch"
          },
          {
            "title": "WireguardPeer",
            "type": "object",
            "properties": {
              "record_type": {
                "type": "string",
                "description": "Identifies the type of the resource.",
                "readOnly": true,
                "example": "wireguard_peer"
              },
              "last_seen": {
                "type": "string",
                "description": "ISO 8601 formatted date-time indicating when peer sent traffic last time.",
                "readOnly": true,
                "example": "2018-02-02T22:25:27.521Z"
              },
              "wireguard_interface_id": {
                "type": "string",
                "description": "The id of the wireguard interface associated with the peer.",
                "format": "uuid",
                "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
              },
              "private_key": {
                "type": "string",
                "description": "Your WireGuard `Interface.PrivateKey`.<br /><br />This attribute is only ever utlised if, on POST, you do NOT provide your own `public_key`. In which case, a new Public and Private key pair will be generated for you. When your `private_key` is returned, you must save this immediately as we do not save it within Telnyx. If you lose your Private Key, it can not be recovered.",
                "readOnly": true,
                "example": "qF4EqlZq+5JL2IKYY8ij49daYyfKVhevJrcDxdqC8GU="
              }
            }
          }
        ]
      },
      "WireguardPeerCreate": {
        "title": "WireguardPeerCreate",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WireguardPeer"
          },
          {
            "title": "WireguardPeerCreate",
            "required": [
              "wireguard_interface_id"
            ],
            "type": "object"
          }
        ]
      },
      "WireguardPeerPatch": {
        "title": "WireguardPeerPatch",
        "type": "object",
        "properties": {
          "public_key": {
            "type": "string",
            "description": "The WireGuard `PublicKey`.<br /><br />If you do not provide a Public Key, a new Public and Private key pair will be generated for you.",
            "example": "qF4EqlZq+5JL2IKYY8ij49daYyfKVhevJrcDxdqC8GU="
          }
        }
      },
      "WirelessConnectivityLog": {
        "title": "WirelessConnectivityLog",
        "type": "object",
        "properties": {
          "record_type": {
            "type": "string",
            "readOnly": true,
            "example": "wireless_connectivity_log"
          },
          "id": {
            "type": "integer",
            "description": "Uniquely identifies the session.",
            "readOnly": true,
            "example": 137509451
          },
          "sim_card_id": {
            "type": "string",
            "description": "The identification UUID of the related SIM card resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "log_type": {
            "enum": [
              "registration",
              "data"
            ],
            "type": "string",
            "description": "The type of the session, 'registration' being the initial authentication session and 'data' the actual data transfer sessions.",
            "readOnly": true,
            "example": "registration"
          },
          "imsi": {
            "type": "string",
            "description": "SIM cards are identified on their individual network operators by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n",
            "readOnly": true,
            "example": "081932214823362973"
          },
          "imei": {
            "type": "string",
            "description": "The International Mobile Equipment Identity (or IMEI) is a number, usually unique, that identifies the device currently being used connect to the network.",
            "readOnly": true,
            "example": "490154203237518"
          },
          "mobile_country_code": {
            "type": "string",
            "description": "It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "310"
          },
          "mobile_network_code": {
            "type": "string",
            "description": "It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
            "readOnly": true,
            "example": "410"
          },
          "start_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the session started.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "stop_time": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the session ended.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "created_at": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the record was created.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "last_seen": {
            "type": "string",
            "description": "ISO 8601 formatted date-time indicating when the last heartbeat to the device was successfully recorded.",
            "readOnly": true,
            "example": "2018-02-02T22:25:27.521Z"
          },
          "apn": {
            "type": "string",
            "description": "The Access Point Name (APN) identifies the packet data network that a mobile data user wants to communicate with.",
            "readOnly": true,
            "example": "data00.telnyx"
          },
          "ipv4": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "192.168.0.0"
          },
          "ipv6": {
            "type": "string",
            "description": "The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
            "readOnly": true,
            "example": "2001:cdba:0000:0000:0000:0000:3257:9652"
          },
          "radio_access_technology": {
            "type": "string",
            "description": "The radio technology the SIM card used during the session.",
            "readOnly": true,
            "example": "LTE"
          },
          "state": {
            "type": "string",
            "description": "The state of the SIM card after when the session happened.",
            "readOnly": true,
            "example": "provisioned"
          },
          "cell_id": {
            "type": "string",
            "description": "The cell ID to which the SIM connected.",
            "readOnly": true,
            "example": "311210-6813"
          }
        },
        "description": "This object represents a wireless connectivity session log that happened through a SIM card. It aids in finding out potential problems when the SIM is not able to attach properly."
      },
      "WirelessCost": {
        "title": "WirelessCost",
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Final cost. Cost is calculated as rate * unit",
            "example": "0.1"
          },
          "currency": {
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ],
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD"
          }
        }
      },
      "WirelessRate": {
        "title": "WirelessRate",
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Rate from which cost is calculated",
            "example": "0.1"
          },
          "currency": {
            "enum": [
              "AUD",
              "CAD",
              "EUR",
              "GBP",
              "USD"
            ],
            "type": "string",
            "description": "Currency of the rate and cost",
            "example": "USD"
          }
        }
      },
      "PatchChannelZone": {
        "title": "PatchChannelZone",
        "required": [
          "channels"
        ],
        "type": "object",
        "properties": {
          "channels": {
            "type": "integer",
            "description": "The number of reserved channels",
            "format": "int64"
          }
        }
      },
      "PostCampaign_200": {
        "title": "Response Submit Campaign Public Campaignbuilder Post",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "description": "Union discriminator"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "TelnyxCampaign_CSP": "#/components/schemas/TelnyxCampaign_CSP"
          }
        }
      },
      "GetCampaignOsrAttributes_200": {
        "title": "Response Get My Osr Campaign Attributes Public Campaign  Campaignid  Osr Attributes Get",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "attempt": {
        "title": "attempt",
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "delivered",
              "failed"
            ],
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "description": "ISO 8601 timestamp indicating when the attempt was initiated.",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "description": "ISO 8601 timestamp indicating when the attempt has finished.",
            "format": "date-time"
          },
          "http": {
            "$ref": "#/components/schemas/http"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Webhook delivery error codes."
          }
        },
        "description": "Webhook delivery attempt details."
      },
      "GetCampaignOperationStatus_200": {
        "title": "Response Get My Campaign Operation Status Public Campaign  Campaignid  Operationstatus Get",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "ResendBrand2faEmail_201": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "callConversationEnded": {
        "title": "Call Conversation Ended",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.conversation.ended"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.conversation.ended"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the event.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the event was created in the system.",
            "format": "date-time",
            "example": "2025-05-29T13:35:38.9276210+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "assistant_id": {
                "type": "string",
                "description": "Unique identifier of the assistant involved in the call.",
                "example": "assistant-d9082b56-ba2d-4ad1-a50c-58661eb1463d"
              },
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call leg.",
                "example": "cc29cce6-3c91-11f0-a8e5-02420aef3d20"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session (group of related call legs).",
                "example": "cc29c8d6-3c91-11f0-aa7c-02420aef3d20"
              },
              "client_state": {
                "type": "string",
                "description": "Base64-encoded state received from a command.",
                "example": "g3QAAAACbQAAAAtkYXRhX2NlbnRlcm0AAAADY2gxbQAAAApkZXBsb3ltZW50bQAAAARiYXNl"
              },
              "calling_party_type": {
                "enum": [
                  "pstn",
                  "sip"
                ],
                "type": "string",
                "description": "The type of calling party connection.",
                "example": "sip"
              },
              "conversation_id": {
                "type": "string",
                "description": "ID unique to the conversation or insight group generated for the call.",
                "example": "0424805b-adc1-4ff8-9f95-e1de6883ecbe"
              },
              "duration_sec": {
                "type": "integer",
                "description": "Duration of the conversation in seconds.",
                "example": 3
              },
              "from": {
                "type": "string",
                "description": "The caller's number or identifier.",
                "example": "+13124287921"
              },
              "to": {
                "type": "string",
                "description": "The callee's number or SIP address.",
                "example": "jamesw@assistant-d9082b56-ba2d-4ad1-a50c-58661eb1463d.sip.telnyx.com"
              },
              "llm_model": {
                "type": "string",
                "description": "The large language model used during the conversation.",
                "example": "openai/gpt-4o"
              },
              "stt_model": {
                "type": "string",
                "description": "The speech-to-text model used in the conversation.",
                "example": "distil-whisper/distil-large-v2"
              },
              "tts_provider": {
                "type": "string",
                "description": "The text-to-speech provider used in the call.",
                "example": "telnyx"
              },
              "tts_model_id": {
                "type": "string",
                "description": "The model ID used for text-to-speech synthesis.",
                "example": "Natural"
              },
              "tts_voice_id": {
                "type": "string",
                "description": "Voice ID used for TTS.",
                "example": "Marissa"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.conversation.ended",
          "id": "eb8775a6-634f-48b0-b177-d5465a8a8e9f",
          "occurred_at": "2025-05-29T13:35:38.8177850+00:00",
          "created_at": "2025-05-29T13:35:38.9276210+00:00",
          "payload": {
            "assistant_id": "assistant-d9082b56-ba2d-4ad1-a50c-58661eb1463d",
            "call_control_id": "v3:HDR1vQHx697hpP9xZ0bhlbUOWPFPDtPcxw-nuSMuC6mGVpb0euoklQ",
            "call_leg_id": "cc29cce6-3c91-11f0-a8e5-02420aef3d20",
            "call_session_id": "cc29c8d6-3c91-11f0-aa7c-02420aef3d20",
            "calling_party_type": "sip",
            "client_state": "g3QAAAACbQAAAAtkYXRhX2NlbnRlcm0AAAADY2gxbQAAAApkZXBsb3ltZW50bQAAAARiYXNl",
            "connection_id": "2694492062593582591",
            "conversation_id": "0424805b-adc1-4ff8-9f95-e1de6883ecbe",
            "duration_sec": 3,
            "from": "+13124287921",
            "to": "jamesw@assistant-d9082b56-ba2d-4ad1-a50c-58661eb1463d.sip.telnyx.com",
            "llm_model": "openai/gpt-4o",
            "stt_model": "distil-whisper/distil-large-v2",
            "tts_model_id": "Natural",
            "tts_provider": "telnyx",
            "tts_voice_id": "Marissa"
          }
        }
      },
      "callConversationEndedEvent": {
        "title": "Call Conversation Ended Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/callConversationEnded"
          }
        }
      },
      "callConversationInsightsGenerated": {
        "title": "Call Conversation Insights Generated",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.conversation_insights.generated"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.conversation_insights.generated"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "calling_party_type": {
                "enum": [
                  "pstn",
                  "sip"
                ],
                "type": "string",
                "description": "The type of calling party connection.",
                "example": "pstn"
              },
              "insight_group_id": {
                "type": "string",
                "description": "ID that is unique to the insight group being generated for the call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "results": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "insight_id": {
                      "type": "string",
                      "description": "ID that is unique to the insight result being generated for the call.",
                      "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
                    },
                    "result": { }
                  }
                },
                "description": "Array of insight results being generated for the call."
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.conversation_insights.generated",
          "id": "898e96ef-be63-45aa-9e7d-01332bff9a97",
          "occurred_at": "2025-02-19T17:02:49.3714540+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "calling_party_type": "pstn",
            "insight_group_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
            "results": [
              {
                "insight_id": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1",
                "result": "The user inquired about the menu at Ember & Oak. The menu offers various options, including vegetarian, vegan, and gluten-free dishes, as well as a children's menu. The restaurant also has a daily happy hour from 4 PM to 6 PM and offers takeaway and delivery services. The user found the information helpful but had to leave without making any further decisions or requests. No specific preferences or goals were expressed beyond inquiring about the menu."
              }
            ]
          }
        }
      },
      "callConversationInsightsGeneratedEvent": {
        "title": "Call Conversation Insights Generated Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/callConversationInsightsGenerated"
          }
        }
      },
      "callRecordingError": {
        "title": "Call Recording Error",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.recording.error"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.recording.error"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "reason": {
                "enum": [
                  "Failed to authorize with storage using custom credentials",
                  "Invalid credentials json",
                  "Unsupported backend",
                  "Internal server error"
                ],
                "type": "string",
                "description": "Indication that there was a problem recording the call.",
                "example": "Internal server error"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.error",
          "id": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0",
          "occurred_at": "2018-02-02T22:25:27.5219920+00:00",
          "payload": {
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "result": "Internal server error"
          }
        }
      },
      "callRecordingErrorEvent": {
        "title": "Call Recording Error Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/callRecordingError"
          }
        }
      },
      "callRecordingTranscriptionSaved": {
        "title": "Call Recording Transcription Saved",
        "type": "object",
        "properties": {
          "record_type": {
            "enum": [
              "event"
            ],
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "event"
          },
          "event_type": {
            "enum": [
              "call.recording.transcription.saved"
            ],
            "type": "string",
            "description": "The type of event being delivered.",
            "example": "call.recording.transcription.saved"
          },
          "id": {
            "type": "string",
            "description": "Identifies the type of resource.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "occurred_at": {
            "type": "string",
            "description": "ISO 8601 datetime of when the event occurred.",
            "format": "date-time",
            "example": "2018-02-02T22:25:27.5219920+00:00"
          },
          "payload": {
            "type": "object",
            "properties": {
              "call_control_id": {
                "type": "string",
                "description": "Call ID used to issue commands via Call Control API.",
                "example": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg"
              },
              "connection_id": {
                "type": "string",
                "description": "Call Control App ID (formerly Telnyx connection ID) used in the call.",
                "example": "7267xxxxxxxxxxxxxx"
              },
              "call_leg_id": {
                "type": "string",
                "description": "ID that is unique to the call and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "call_session_id": {
                "type": "string",
                "description": "ID that is unique to the call session and can be used to correlate webhook events. Call session is a group of related call legs that logically belong to the same phone call, e.g. an inbound and outbound leg of a transferred call.",
                "example": "428c31b6-abf3-3bc1-b7f4-5013ef9657c1"
              },
              "client_state": {
                "type": "string",
                "description": "State received from a command.",
                "example": "aGF2ZSBhIG5pY2UgZGF5ID1d"
              },
              "calling_party_type": {
                "enum": [
                  "pstn",
                  "sip"
                ],
                "type": "string",
                "description": "The type of calling party connection.",
                "example": "pstn"
              },
              "recording_id": {
                "type": "string",
                "description": "ID that is unique to the recording session and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "recording_transcription_id": {
                "type": "string",
                "description": "ID that is unique to the transcription process and can be used to correlate webhook events.",
                "example": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1"
              },
              "status": {
                "enum": [
                  "completed"
                ],
                "type": "string",
                "description": "The transcription status.",
                "example": "completed"
              },
              "transcription_text": {
                "type": "string",
                "description": "The transcribed text",
                "example": "Hi!"
              }
            }
          }
        },
        "example": {
          "record_type": "event",
          "event_type": "call.recording.transcription.saved",
          "id": "898e96ef-be63-45aa-9e7d-01332bff9a97",
          "occurred_at": "2025-02-19T17:02:49.3714540+00:00",
          "payload": {
            "call_control_id": "v3:MdI91X4lWFEs7IgbBEOT9M4AigoY08M0WWZFISt1Yw2axZ_IiE4pqg",
            "connection_id": "7267xxxxxxxxxxxxxx",
            "call_leg_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "call_session_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "client_state": "aGF2ZSBhIG5pY2UgZGF5ID1d",
            "calling_party_type": "pstn",
            "recording_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "recording_transcription_id": "428c31b6-7af4-4bcb-b7f5-5013ef9657c1",
            "status": "completed",
            "transcription_text": "Hi!"
          }
        }
      },
      "callRecordingTranscriptionSavedEvent": {
        "title": "Call Recording Transcription Saved Event",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/callRecordingTranscriptionSaved"
          }
        }
      },
      "ListBillingGroups_200": {
        "title": "ListBillingGroups_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingGroup"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "UpdateAuthenticationProvider_422": {
        "title": "UpdateAuthenticationProvider_422",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "UpdateAuthenticationProvider_404": {
        "title": "UpdateAuthenticationProvider_404",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "UpdateAuthenticationProvider_401": {
        "title": "UpdateAuthenticationProvider_401",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "http": {
        "title": "http",
        "type": "object",
        "properties": {
          "request": {
            "properties": {
              "url": {
                "type": "string",
                "example": "https://example.com/webhooks"
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              }
            },
            "description": "Request details."
          },
          "response": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "example": 200
              },
              "headers": {
                "$ref": "#/components/schemas/http_headers"
              },
              "body": {
                "type": "string",
                "description": "Raw response body, limited to 10kB."
              }
            },
            "description": "Response details, optional.",
            "nullable": true
          }
        },
        "description": "HTTP request and response information."
      },
      "http_headers": {
        "title": "http_headers",
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "List of headers, limited to 10kB."
      },
      "GetAuthenticationProvider_422": {
        "title": "GetAuthenticationProvider_422",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "GetAuthenticationProvider_404": {
        "title": "GetAuthenticationProvider_404",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "GetAuthenticationProvider_401": {
        "title": "GetAuthenticationProvider_401",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "DeleteAuthenticationProvider_422": {
        "title": "DeleteAuthenticationProvider_422",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "DeleteAuthenticationProvider_404": {
        "title": "DeleteAuthenticationProvider_404",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "DeleteAuthenticationProvider_401": {
        "title": "DeleteAuthenticationProvider_401",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "CreateAuthenticationProvider_422": {
        "title": "CreateAuthenticationProvider_422",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "settings": {
        "title": "settings",
        "required": [
          "idp_entity_id",
          "idp_sso_target_url",
          "idp_cert_fingerprint"
        ],
        "type": "object",
        "properties": {
          "idp_entity_id": {
            "type": "string",
            "description": "The Entity ID for the identity provider (IdP).",
            "format": "uri",
            "example": "https://myorg.myidp.com/saml/metadata"
          },
          "idp_sso_target_url": {
            "type": "string",
            "description": "The SSO target url for the identity provider (IdP).",
            "format": "uri",
            "example": "https://myorg.myidp.com/trust/saml2/http-post/sso"
          },
          "idp_cert_fingerprint": {
            "type": "string",
            "description": "The certificate fingerprint for the identity provider (IdP)",
            "example": "13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7"
          },
          "idp_cert_fingerprint_algorithm": {
            "enum": [
              "sha1",
              "sha256",
              "sha384",
              "sha512"
            ],
            "type": "string",
            "description": "The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
            "default": "sha1",
            "example": "sha256"
          }
        },
        "description": "The settings associated with the authentication provider."
      },
      "FindAuthenticationProviders_404": {
        "title": "FindAuthenticationProviders_404",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "FindAuthenticationProviders_401": {
        "title": "FindAuthenticationProviders_401",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "FindAuthenticationProviders_400": {
        "title": "FindAuthenticationProviders_400",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        }
      },
      "FindAuthenticationProviders_200": {
        "title": "FindAuthenticationProviders_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationProvider"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "get_assistant_texml_public_assistants__assistant_id__texml_get_200": {
        "title": "get_assistant_texml_public_assistants__assistant_id__texml_get_200",
        "type": "string"
      },
      "webhook_delivery": {
        "title": "webhook_delivery",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the webhook_delivery record.",
            "format": "uuid",
            "example": "f5586561-8ff0-4291-a0ac-84fe544797bd"
          },
          "user_id": {
            "type": "string",
            "description": "Uniquely identifies the user that owns the webhook_delivery record.",
            "format": "uuid",
            "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
          },
          "record_type": {
            "type": "string",
            "description": "Identifies the type of the resource.",
            "example": "webhook_delivery"
          },
          "status": {
            "enum": [
              "delivered",
              "failed"
            ],
            "type": "string",
            "description": "Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed."
          },
          "webhook": {
            "type": "object",
            "properties": {
              "record_type": {
                "enum": [
                  "event"
                ],
                "type": "string",
                "description": "Identifies the type of the resource.",
                "example": "event"
              },
              "event_type": {
                "type": "string",
                "description": "The type of event being delivered.",
                "example": "webhook.command"
              },
              "id": {
                "type": "string",
                "description": "Identifies the type of resource.",
                "format": "uuid",
                "example": "0ccc7b54-4df3-4bca-a65a-3da1ecc777f0"
              },
              "occurred_at": {
                "type": "string",
                "description": "ISO 8601 datetime of when the event occurred.",
                "format": "date-time",
                "example": "2018-02-02T22:25:27.5219920+00:00"
              },
              "payload": {
                "type": "object"
              }
            },
            "description": "Original webhook JSON data. Payload fields vary according to event type.",
            "example": {
              "record_type": "event",
              "id": "C9C0797E-901D-4349-A33C-C2C8F31A92C2",
              "event_type": "call_initiated",
              "occurred_at": "2020-08-10T13:02:01.0000000+00:00",
              "payload": {
                "useful": "information"
              }
            }
          },
          "started_at": {
            "type": "string",
            "description": "ISO 8601 timestamp indicating when the first request attempt was initiated.",
            "format": "date-time",
            "example": "2020-08-10T14:00:00.0000000+00:00"
          },
          "finished_at": {
            "type": "string",
            "description": "ISO 8601 timestamp indicating when the last webhook response has been received.",
            "format": "date-time",
            "example": "2020-08-10T14:00:05.5950000+00:00"
          },
          "attempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attempt"
            },
            "description": "Detailed delivery attempts, ordered by most recent."
          }
        },
        "description": "Record of all attempts to deliver a webhook."
      },
      "CreateRequirementGroup": {
        "title": "CreateRequirementGroup",
        "required": [
          "country_code",
          "phone_number_type",
          "action"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "ISO alpha 2 country code",
            "example": "US"
          },
          "phone_number_type": {
            "enum": [
              "local",
              "toll_free",
              "mobile",
              "national",
              "shared_cost"
            ],
            "type": "string",
            "example": "local"
          },
          "action": {
            "enum": [
              "ordering",
              "porting"
            ],
            "type": "string",
            "example": "ordering"
          },
          "customer_reference": {
            "type": "string",
            "example": "My Requirement Group"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "requirement_id": {
                  "type": "string"
                },
                "field_value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UpdateRequirementGroup": {
        "title": "UpdateRequirementGroup",
        "type": "object",
        "properties": {
          "customer_reference": {
            "type": "string",
            "description": "Reference for the customer",
            "example": "0002"
          },
          "regulatory_requirements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "requirement_id": {
                  "type": "string",
                  "description": "Unique identifier for the regulatory requirement",
                  "example": "53970723-fbff-4f46-a975-f62be6c1a585"
                },
                "field_value": {
                  "type": "string",
                  "description": "New value for the regulatory requirement",
                  "example": "new requirement value"
                }
              }
            }
          }
        }
      },
      "ListRequirementTypes_200": {
        "title": "ListRequirementTypes_200",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocReqsRequirementTypeList"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "ListRequirements_200": {
        "title": "ListRequirements_200",
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocReqsRequirementList"
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        }
      },
      "PostSimCardDataUsageNotification": {
        "title": "PostSimCardDataUsageNotification",
        "required": [
          "sim_card_id",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "sim_card_id": {
            "type": "string",
            "description": "The identification UUID of the related SIM card resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          },
          "threshold": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "format": "decimal",
                "example": "2048.1"
              },
              "unit": {
                "enum": [
                  "MB",
                  "GB"
                ],
                "type": "string",
                "example": "MB"
              }
            },
            "description": "Data usage threshold that will trigger the notification."
          }
        }
      },
      "SetPrivateWirelessGatewayForSimCardGroup": {
        "title": "SetPrivateWirelessGatewayForSimCardGroup",
        "required": [
          "private_wireless_gateway_id"
        ],
        "type": "object",
        "properties": {
          "private_wireless_gateway_id": {
            "type": "string",
            "description": "The identification of the related Private Wireless Gateway resource.",
            "format": "uuid",
            "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
          }
        }
      },
      "PreviewSimCardOrders": {
        "title": "PreviewSimCardOrders",
        "required": [
          "quantity",
          "address_id"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "minimum": 1,
            "type": "integer",
            "description": "The amount of SIM cards that the user would like to purchase in the SIM card order.",
            "example": 21
          },
          "address_id": {
            "type": "string",
            "description": "Uniquely identifies the address for the order.",
            "format": "int64",
            "example": "1293384261075731499"
          }
        }
      },
      "SetPublicIPsBulk": {
        "title": "SetPublicIPsBulk",
        "required": [
          "sim_card_ids"
        ],
        "type": "object",
        "properties": {
          "sim_card_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Identifies the resource.",
              "format": "uuid",
              "readOnly": true,
              "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
            }
          }
        }
      },
      "ValidateRegistrationCodes": {
        "title": "ValidateRegistrationCodes",
        "type": "object",
        "properties": {
          "registration_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The object containing the Array of SIM card registration codes.",
        "example": {
          "registration_codes": [
            "123456780",
            "1231231230"
          ]
        }
      },
      "AddStorageSSLCertificate": {
        "title": "AddStorageSSLCertificate",
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "The SSL certificate file",
            "format": "binary",
            "example": ""
          },
          "private_key": {
            "type": "string",
            "description": "The private key file",
            "format": "binary",
            "example": ""
          }
        }
      },
      "GetStorageAPIUsage_200": {
        "title": "GetStorageAPIUsage_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BucketAPIUsageResponse"
            }
          }
        }
      },
      "GetBucketUsage_200": {
        "title": "GetBucketUsage_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BucketUsage"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMetaSimple"
          }
        }
      },
      "ListMigrationSourceCoverage_200": {
        "title": "ListMigrationSourceCoverage_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrationSourceCoverageParams"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMetaSimple"
          }
        }
      },
      "ListMigrationSources_200": {
        "title": "ListMigrationSources_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrationSourceParams"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMetaSimple"
          }
        }
      },
      "ListMigrations_200": {
        "title": "ListMigrations_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrationParams"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMetaSimple"
          }
        }
      },
      "updateSubNumberOrderRequirementGroup": {
        "title": "updateSubNumberOrderRequirementGroup",
        "required": [
          "requirement_group_id"
        ],
        "type": "object",
        "properties": {
          "requirement_group_id": {
            "type": "string",
            "description": "The ID of the requirement group to associate",
            "format": "uuid"
          }
        }
      },
      "DownloadSubNumberOrdersReport_200": {
        "title": "DownloadSubNumberOrdersReport_200",
        "type": "string",
        "format": "binary"
      },
      "CreateTelephonyCredentialToken_201": {
        "title": "CreateTelephonyCredentialToken_201",
        "type": "string",
        "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
      },
      "generateTextToSpeech": {
        "title": "generateTextToSpeech",
        "required": [
          "voice",
          "text"
        ],
        "type": "object",
        "properties": {
          "voice": {
            "type": "string",
            "description": "The voice ID in the format Provider.ModelId.VoiceId.\n\nExamples:\n- AWS.Polly.Joanna-Neural\n- Azure.en-US-AvaMultilingualNeural\n- ElevenLabs.eleven_multilingual_v2.Rachel\n- Telnyx.KokoroTTS.af\n\nUse the `GET /text-to-speech/voices` endpoint to get a complete list of available voices."
          },
          "text": {
            "type": "string",
            "description": "The text to convert to speech"
          }
        }
      },
      "generateTextToSpeech_200": {
        "title": "generateTextToSpeech_200",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw audio data in MP3 format",
        "format": "binary"
      },
      "listTextToSpeechVoices_200": {
        "title": "listTextToSpeechVoices_200",
        "type": "object",
        "properties": {
          "voices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "provider": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "accent": {
                  "type": "string"
                },
                "gender": {
                  "type": "string"
                },
                "age": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "GetUsageReports_200": {
        "title": "GetUsageReports_200",
        "type": "string",
        "description": "CSV formatted data",
        "example": "user_id,direction,product,cost,billed_sec\n3ca7bd3d-7d82-4e07-9df4-009123068320,inbound,forking,0.000800,17.000000\n..."
      },
      "CreateVerifiedNumber": {
        "title": "Create Verified Number Request",
        "required": [
          "phone_number",
          "verification_method"
        ],
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "example": "+15551234567"
          },
          "verification_method": {
            "enum": [
              "sms",
              "call"
            ],
            "type": "string",
            "description": "Verification method.",
            "example": "sms"
          }
        }
      },
      "VerifyVerificationCode": {
        "title": "Verify Verification Code Request",
        "required": [
          "verification_code"
        ],
        "type": "object",
        "properties": {
          "verification_code": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "CreateVerifyProfile": {
        "title": "Create Verify Profile Request",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test Profile"
          },
          "webhook_url": {
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "webhook_failover_url": {
            "type": "string",
            "example": "http://example.com/webhook/failover"
          },
          "sms": {
            "$ref": "#/components/schemas/CreateVerifyProfileSMSRequest"
          },
          "call": {
            "$ref": "#/components/schemas/CreateVerifyProfileCallRequest"
          },
          "flashcall": {
            "$ref": "#/components/schemas/CreateVerifyProfileFlashcallRequest"
          },
          "language": {
            "type": "string",
            "example": "en-US"
          }
        }
      },
      "UpdateVerifyProfile": {
        "title": "Update Verify Profile Request",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test Profile"
          },
          "webhook_url": {
            "type": "string",
            "example": "http://example.com/webhook"
          },
          "webhook_failover_url": {
            "type": "string",
            "example": "http://example.com/webhook/failover"
          },
          "sms": {
            "$ref": "#/components/schemas/UpdateVerifyProfileSMSRequest"
          },
          "call": {
            "$ref": "#/components/schemas/UpdateVerifyProfileCallRequest"
          },
          "flashcall": {
            "$ref": "#/components/schemas/UpdateVerifyProfileFlashcallRequest"
          },
          "language": {
            "type": "string",
            "example": "en-US"
          }
        }
      },
      "GetWireguardPeerConfig_200": {
        "title": "GetWireguardPeerConfig_200",
        "type": "string",
        "example": "[Interface]\nPrivateKey = <! INSERT PEER PRIVATE KEY HERE !>\nAddress = 198.51.100.1/32\n\n[Peer]\nPublicKey = qF4EqlZq+5JL2IKYY8ij49daYyfKVhevJrcDxdqC8GU=\nAllowedIPs = 198.51.100.0/29\nEndpoint = 203.0.113.0:51871\nPersistentKeepalive = 25\n"
      },
      "WirelessRegionsGetAll_200": {
        "title": "WirelessRegionsGetAll_200",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            }
          }
        }
      },
      "DeleteBucket_204": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "HeadBucket_200": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "CreateBucket_409": {
        "title": "CreateBucket_409",
        "type": "string",
        "xml": {
          "name": "BucketAlreadyExists"
        }
      },
      "DeleteObject_204": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "GetObject_200": {
        "title": "GetObject_200",
        "type": "string",
        "format": "binary"
      },
      "HeadObject_200": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "PutObject": {
        "title": "PutObject",
        "type": "string",
        "format": "binary"
      },
      "PutObject_200": {
        "title": "DefaultResponse",
        "type": "object",
        "additionalProperties": {
          "type": "object"
        },
        "description": "Default response schema"
      },
      "CreateTeXMLSecretResult_value": {
        "title": "CreateTeXMLSecretResult_value",
        "enum": [
          "*****"
        ],
        "type": "string"
      },
      "PortingOrderStatus_value": {
        "title": "PortingOrderStatus_value",
        "enum": [
          "draft",
          "in-process",
          "submitted",
          "exception",
          "foc-date-confirmed",
          "ported",
          "cancelled",
          "cancel-pending"
        ],
        "type": "string"
      },
      "PrivateWirelessGatewayStatus_value": {
        "title": "PrivateWirelessGatewayStatus_value",
        "enum": [
          "provisioning",
          "provisioned",
          "failed",
          "decommissioning"
        ],
        "type": "string"
      },
      "SIMCardStatus_value": {
        "title": "SIMCardStatus_value",
        "enum": [
          "registering",
          "enabling",
          "enabled",
          "disabling",
          "disabled",
          "data_limit_exceeded",
          "setting_standby",
          "standby"
        ],
        "type": "string"
      }
    },
    "responses": {
      "ActionSuccessResponse": {
        "description": "Success Action Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ActiveCallsResponse": {
        "description": "Successful response with list of details about active calls.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Active Calls Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveCall"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/CursorPaginationMeta"
                }
              }
            }
          }
        }
      },
      "AddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      },
      "AuditLogListResponse": {
        "description": "A list of audit log entries.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuditLogList"
            }
          }
        }
      },
      "AutoRechargePrefResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/AutoRechargePref"
                }
              }
            }
          }
        }
      },
      "BadRequestResponse": {
        "description": "Bad request, the request was unacceptable, often due to missing a required parameter.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "missingParameter": {
                "value": {
                  "errors": [
                    {
                      "code": "10015",
                      "title": "Bad Request",
                      "detail": "The request failed because it was not well-formed.",
                      "source": {
                        "pointer": "/"
                      },
                      "meta": {
                        "url": "https://developers.telnyx.com/docs/overview/errors/10015"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "BulkDeleteRoomRecordingsResponse": {
        "description": "Successful response for Bulk Delete Room recordings requests",
        "content": {
          "application/json": {
            "schema": {
              "title": "Bulk Room Recordings Delete Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "room_recordings": {
                      "type": "integer",
                      "description": "Amount of room recordings affected",
                      "example": 5
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BulkMessagingSettingsUpdatePhoneNumbersResponse": {
        "description": "Successful response with details about messaging bulk update phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve bulk update messaging settings Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BulkMessagingSettingsUpdatePhoneNumbers"
                }
              }
            }
          }
        }
      },
      "BulkSIMCardActionCollectionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkSIMCardActionDetailed"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "BulkSIMCardActionDetailedResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BulkSIMCardActionDetailed"
                }
              }
            }
          }
        }
      },
      "BulkSIMCardActionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/BulkSIMCardAction"
                }
              }
            }
          }
        }
      },
      "CallControlApplicationResponse": {
        "description": "Successful response with details about a call control application.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Call Control Application Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlApplication"
                }
              }
            }
          }
        }
      },
      "CallControlCommandResponse": {
        "description": "Successful response upon making a call control command.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Call Control Command Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlCommandResult"
                }
              }
            }
          }
        }
      },
      "CallControlCommandResponseWithRecordingId": {
        "description": "Successful response upon making a call control command that includes recording_id.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Call Control Command Response With Recording ID",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallControlCommandResultWithRecordingId"
                }
              }
            }
          }
        }
      },
      "CancelFaxResponse": {
        "description": "Successful response upon accepting cancel fax command",
        "content": {
          "application/json": {
            "schema": {
              "title": "Successful response upon accepting cancel fax command",
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "ok"
                }
              },
              "example": {
                "data": {
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "CancelPortingOrderResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrder"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "phone_numbers_url": {
                      "type": "string",
                      "description": "Link to list all phone numbers"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "activation_settings": {
                    "activation_status": null,
                    "fast_port_eligible": true,
                    "foc_datetime_actual": null,
                    "foc_datetime_requested": "2022-04-08T15:00:00.0000000+00:00"
                  },
                  "created_at": "2022-03-24T14:22:28.0000000+00:00",
                  "customer_reference": "Test1234",
                  "description": "FP Telnyx",
                  "documents": {
                    "loa": "3a5b98a0-5049-47c3-96e1-aa6c8d119117",
                    "invoice": "3a5b98a0-5049-47c3-96e1-aa6c8d119117"
                  },
                  "end_user": {
                    "admin": {
                      "account_number": "123abc",
                      "auth_person_name": "Porter McPortersen II",
                      "billing_phone_number": "+13035551234",
                      "business_identifier": "abc123",
                      "entity_name": "Porter McPortersen",
                      "pin_passcode": "1234",
                      "tax_identifier": "1234abcd"
                    },
                    "location": {
                      "administrative_area": "TX",
                      "country_code": "US",
                      "extended_address": "14th Floor",
                      "locality": "Austin",
                      "postal_code": "78701",
                      "street_address": "600 Congress Avenue"
                    }
                  },
                  "id": "eef10fb8-f3df-4c67-97c5-e18179723222",
                  "misc": {
                    "new_billing_phone_number": null,
                    "remaining_numbers_action": null,
                    "type": "full"
                  },
                  "old_service_provider_ocn": "Unreal Communications",
                  "parent_support_key": "pr_4bec1a",
                  "phone_number_configuration": {
                    "billing_group_id": null,
                    "connection_id": "1752379429071357070",
                    "emergency_address_id": null,
                    "messaging_profile_id": null,
                    "tags": [ ]
                  },
                  "phone_number_type": "local",
                  "porting_phone_numbers_count": 1,
                  "record_type": "porting_order",
                  "requirements": [ ],
                  "requirements_met": true,
                  "status": {
                    "details": [ ],
                    "value": "cancel-pending"
                  },
                  "support_key": "sr_10b316",
                  "updated_at": "2022-03-24T16:43:35.0000000+00:00",
                  "user_feedback": {
                    "user_comment": null,
                    "user_rating": null
                  },
                  "user_id": "40d68ba2-0847-4df2-be9c-b0e0cb673e75",
                  "webhook_url": "https://example.com/porting_webhooks"
                },
                "meta": {
                  "phone_numbers_url": "/v2/porting_phone_numbers?filter[porting_order_id]=eef10fb8-f3df-4c67-97c5-e18179723222"
                }
              }
            }
          }
        }
      },
      "CommentResponse": {
        "description": "A Comment Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Comment"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "ConferenceCommandResponse": {
        "description": "Successful response upon making a conference command.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Conference Command Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ConferenceCommandResult"
                }
              }
            }
          }
        }
      },
      "ConferenceResponse": {
        "description": "Successful response with details about a conference.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Conference Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Conference"
                }
              }
            }
          }
        }
      },
      "ConfirmPortingOrderResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrder"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "phone_numbers_url": {
                      "type": "string",
                      "description": "Link to list all phone numbers"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "activation_settings": {
                    "activation_status": null,
                    "fast_port_eligible": true,
                    "foc_datetime_actual": null,
                    "foc_datetime_requested": "2022-04-08T15:00:00.0000000+00:00"
                  },
                  "created_at": "2022-03-24T14:22:28.0000000+00:00",
                  "customer_reference": "Test1234",
                  "description": "FP Telnyx",
                  "documents": {
                    "loa": "3a5b98a0-5049-47c3-96e1-aa6c8d119117",
                    "invoice": "3a5b98a0-5049-47c3-96e1-aa6c8d119117"
                  },
                  "end_user": {
                    "admin": {
                      "account_number": "123abc",
                      "auth_person_name": "Porter McPortersen II",
                      "billing_phone_number": "+13035551234",
                      "business_identifier": "abc123",
                      "entity_name": "Porter McPortersen",
                      "pin_passcode": "1234",
                      "tax_identifier": "1234abcd"
                    },
                    "location": {
                      "administrative_area": "TX",
                      "country_code": "US",
                      "extended_address": "14th Floor",
                      "locality": "Austin",
                      "postal_code": "78701",
                      "street_address": "600 Congress Avenue"
                    }
                  },
                  "id": "eef10fb8-f3df-4c67-97c5-e18179723222",
                  "misc": {
                    "new_billing_phone_number": null,
                    "remaining_numbers_action": null,
                    "type": "full"
                  },
                  "old_service_provider_ocn": "Unreal Communications",
                  "parent_support_key": "pr_4bec1a",
                  "phone_number_configuration": {
                    "billing_group_id": null,
                    "connection_id": "1752379429071357070",
                    "emergency_address_id": null,
                    "messaging_profile_id": null,
                    "tags": [ ]
                  },
                  "phone_number_type": "local",
                  "porting_phone_numbers_count": 1,
                  "record_type": "porting_order",
                  "requirements": [ ],
                  "requirements_met": true,
                  "status": {
                    "details": [ ],
                    "value": "in-process"
                  },
                  "support_key": "sr_10b316",
                  "updated_at": "2022-03-24T16:42:43.0000000+00:00",
                  "user_feedback": {
                    "user_comment": null,
                    "user_rating": null
                  },
                  "messaging": {
                    "messaging_capable": true,
                    "enable_messaging": false,
                    "messaging_port_status": "not_applicable",
                    "messaging_port_completed": false
                  },
                  "user_id": "40d68ba2-0847-4df2-be9c-b0e0cb673e75",
                  "webhook_url": "https://example.com/porting_webhooks"
                },
                "meta": {
                  "phone_numbers_url": "/v2/porting_phone_numbers?filter[porting_order_id]=eef10fb8-f3df-4c67-97c5-e18179723222"
                }
              }
            }
          }
        }
      },
      "ConnectionResponse": {
        "description": "Successful response with details about a connection.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Connection Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          }
        }
      },
      "CountryCoverageResponse": {
        "description": "Response for country coverage",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryCoverage"
                  }
                }
              }
            },
            "examples": {
              "example-1": {
                "value": {
                  "data": {
                    "Afghanistan": {
                      "code": "AF",
                      "numbers": false,
                      "features": [ ],
                      "phone_number_type": [ ],
                      "reservable": false,
                      "quickship": false,
                      "international_sms": false,
                      "p2p": false,
                      "local": { },
                      "toll_free": { },
                      "mobile": { },
                      "national": { },
                      "inventory_coverage": false
                    },
                    "Aland Islands": {
                      "code": "AX",
                      "numbers": false,
                      "features": [ ],
                      "phone_number_type": [ ],
                      "reservable": false,
                      "quickship": false,
                      "international_sms": false,
                      "p2p": false,
                      "local": { },
                      "toll_free": { },
                      "mobile": { },
                      "national": { },
                      "inventory_coverage": false
                    },
                    "Albania": {
                      "code": "AL",
                      "numbers": true,
                      "features": [
                        "voice",
                        "fax"
                      ],
                      "phone_number_type": [
                        "local",
                        "toll_free"
                      ],
                      "reservable": false,
                      "quickship": false,
                      "international_sms": false,
                      "p2p": false,
                      "local": {
                        "features": [
                          "fax",
                          "voice"
                        ],
                        "reservable": false,
                        "quickship": false,
                        "international_sms": false,
                        "p2p": false
                      },
                      "toll_free": {
                        "features": [
                          "fax",
                          "voice"
                        ],
                        "reservable": false,
                        "quickship": false,
                        "international_sms": false,
                        "p2p": false
                      },
                      "mobile": { },
                      "national": { },
                      "inventory_coverage": false,
                      "shared_cost": { }
                    },
                    "Algeria": {
                      "code": "DZ",
                      "numbers": false,
                      "features": [ ],
                      "phone_number_type": [ ],
                      "reservable": false,
                      "quickship": false,
                      "international_sms": false,
                      "p2p": false,
                      "local": { },
                      "toll_free": { },
                      "mobile": { },
                      "national": { },
                      "inventory_coverage": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateCustomerServiceRecord": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CustomerServiceRecord"
                }
              },
              "example": {
                "data": {
                  "id": "db7cebdb-21a8-4e89-8f51-e03ba6b799bb",
                  "phone_number": "+2003271000",
                  "status": "pending",
                  "error_message": null,
                  "result": null,
                  "webhook_url": "https://example.com/webhook",
                  "created_at": "2023-01-01",
                  "updated_at": "2023-01-01"
                }
              }
            }
          }
        }
      },
      "CreatePortOutSupportingDocumentsResponse": {
        "description": "Portout Supporting Documents",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortOutSupportingDocument"
                  }
                }
              }
            }
          }
        }
      },
      "CreatePortingAdditionalDocuments": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingAdditionalDocument"
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "2acd1061-33cb-49b8-8014-beb6dc3fedbf",
                    "document_id": "40bc547a-7f96-4cd5-926a-da4842671e88",
                    "document_type": "loa",
                    "porting_order_id": "9d7b3b8e-4e67-4837-9c44-d110cd2c82a1",
                    "record_type": "porting_additional_document",
                    "created_at": "2023-06-01T10:00:00.0000000+00:00",
                    "updated_at": "2023-06-01T10:00:00.0000000+00:00"
                  }
                ]
              }
            }
          }
        }
      },
      "CreatePortingLOAConfiguration": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingLOAConfiguration"
                }
              }
            }
          }
        }
      },
      "CreatePortingPhoneNumberConfigurations": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingPhoneNumberConfiguration"
                  }
                }
              }
            }
          }
        }
      },
      "CreatePortingReport": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingReport"
                }
              }
            }
          }
        }
      },
      "CreatePortoutReport": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutReport"
                }
              }
            }
          }
        }
      },
      "CreatePrivateWirelessGatewayResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              },
              "example": {
                "data": {
                  "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
                  "network_id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58",
                  "record_type": "private_wireless_gateway",
                  "created_at": "2018-02-02T22:25:27.5210000+00:00",
                  "updated_at": "2018-02-02T22:25:27.5210000+00:00",
                  "name": "My private wireless gateway",
                  "region_code": "dc2",
                  "status": {
                    "value": "provisioning",
                    "error_description": null,
                    "error_code": null
                  },
                  "ip_range": "100.64.1.0/24",
                  "assigned_resources": [
                    {
                      "record_type": "sim_card_group",
                      "count": 1
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "CreateRoomClientTokenResponse": {
        "description": "Create room client token response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "format": "jwt",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "token_expires_at": {
                      "type": "string",
                      "description": "ISO 8601 timestamp when the token expires.",
                      "format": "datetime",
                      "example": "2021-03-26T17:51:59Z"
                    },
                    "refresh_token": {
                      "type": "string",
                      "format": "jwt",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "refresh_token_expires_at": {
                      "type": "string",
                      "description": "ISO 8601 timestamp when the refresh token expires.",
                      "format": "datetime",
                      "example": "2021-03-26T17:51:59Z"
                    }
                  },
                  "example": {
                    "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA",
                    "token_expires_at": "2021-04-22T12:24:55Z",
                    "refresh_token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDkzNzA1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6ImQ3OWJlMzhjLWFkNTQtNGQ5ZC1hODc4LWExNjVjNTk0MGQwNyIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6InJlZnJlc2gifQ.FHsp7KlVXn1E5tTUiKZzmQ4of39gi57AakeQeqI0oAa8hzjFMVb0RGj-mxWTvHVen4GpgsUW_epqqaxK16viCA",
                    "refresh_token_expires_at": "2021-04-22T12:15:05Z"
                  }
                }
              }
            }
          }
        }
      },
      "CreateRoomCompositionResponse": {
        "description": "Create room composition response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomComposition"
                }
              }
            }
          }
        }
      },
      "CreateRoomResponse": {
        "description": "Create room response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "CreateSimCardDataUsageNotificationResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SimCardDataUsageNotification"
                }
              }
            }
          }
        }
      },
      "CreateSimCardGroupResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        }
      },
      "CreateSimCardOrderResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrder"
                }
              }
            }
          }
        }
      },
      "CreateTeXMLSecretResponse": {
        "description": "Successful response upon creating a TeXML secret.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Create TeXML Secret request",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CreateTeXMLSecretResult"
                }
              }
            }
          }
        }
      },
      "CreateWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "CredentialConnectionResponse": {
        "description": "Successful response with details about a credential connection.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Credential Connection Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CredentialConnection"
                }
              }
            }
          }
        }
      },
      "CredentialsResponseBody": {
        "description": "A response containing a credentials resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CredentialsResponse"
            }
          }
        }
      },
      "CsvDownloadResponse": {
        "description": "Successful response with details about a CSV download.",
        "content": {
          "application/json": {
            "schema": {
              "title": "CSV Download Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsvDownload"
                  }
                }
              }
            }
          }
        }
      },
      "DefaultGatewayResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DefaultGateway"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "DeletePhoneNumberResponse": {
        "description": "Successful response with details about a phone number.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Phone Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberDeletedDetailed"
                }
              }
            }
          }
        }
      },
      "DeletePrivateWirelessGatewayResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              }
            }
          }
        }
      },
      "DeleteSimCardDataUsageNotificationResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SimCardDataUsageNotification"
                }
              }
            }
          }
        }
      },
      "DeleteSimCardGroupResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        }
      },
      "DeleteSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "DeleteWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "DeprecatedInitiateCallResponse": {
        "description": "Successful response upon initiating a TeXML call.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Initiate TeXML Call Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/InitiateCallResult"
                }
              }
            }
          }
        }
      },
      "DialParticipantResponse": {
        "description": "New participant resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewParticipantResource"
            }
          }
        }
      },
      "DialogflowConnectionResponseBody": {
        "description": "Return details of the Dialogflow connection associated with the given CallControl connection.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DialogflowConnectionResponse"
            }
          }
        }
      },
      "DownloadLOATemplate": {
        "description": "Successful response",
        "content": {
          "application/pdf": {
            "schema": {
              "type": "string",
              "format": "binary",
              "example": "%PDF-1.4..."
            }
          }
        }
      },
      "DynamicEmergencyAddressResponse": {
        "description": "Dynamic Emergency Address Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DynamicEmergencyAddress"
                }
              }
            }
          }
        }
      },
      "DynamicEmergencyEndpointResponse": {
        "description": "Dynamic Emergency Endpoint Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/DynamicEmergencyEndpoint"
                }
              }
            }
          }
        }
      },
      "ExternalConnectionResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "External Connection Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ExternalConnection"
                }
              }
            }
          }
        }
      },
      "FaxApplicationResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Fax Application Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FaxApplication"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenErrorResponse": {
        "description": "You do not have permission to perform the requested action on the specified resource or resources.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ForbiddenError"
                  }
                }
              }
            }
          }
        }
      },
      "ForbiddenResponse": {
        "description": "Unauthorized response. Happens when the current user is not authorized to access the endpoint."
      },
      "FqdnConnectionResponse": {
        "description": "Successful response with details about an FQDN connection.",
        "content": {
          "application/json": {
            "schema": {
              "title": "FQDN Connection Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/FqdnConnection"
                }
              }
            }
          }
        }
      },
      "FqdnResponse": {
        "description": "Successful response with details about an FQDN connection.",
        "content": {
          "application/json": {
            "schema": {
              "title": "FQDN Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fqdn"
                }
              }
            }
          }
        }
      },
      "GenericErrorResponse": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "GetAllAddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllCivicAddressesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get All Civic Addresses Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CivicAddress"
                  }
                }
              }
            }
          }
        }
      },
      "GetAllExternalConnectionResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get All External Connections Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllFaxApplicationsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get All Fax Applications Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FaxApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllPrivateWirelessGatewaysResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrivateWirelessGateway"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllSimCardGroupsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchedSIMCardGroup"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllSimCardOrdersResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllTelephonyCredentialResponse": {
        "description": "Successful response with multiple credentials",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get All Telephony Credential Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TelephonyCredential"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllTexmlApplicationsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get All Texml Applications Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TexmlApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetAllUserAddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAddress"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetCallResponse": {
        "description": "Call resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CallResource"
            }
          }
        }
      },
      "GetCallsResponse": {
        "description": "Multiple call resources.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CallResourceIndex"
            }
          }
        }
      },
      "GetCivicAddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Civic Address Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CivicAddress"
                }
              }
            }
          }
        }
      },
      "GetConferenceRecordingsResponse": {
        "description": "Multiple conference recording resources.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConferenceRecordingResourceIndex"
            }
          }
        }
      },
      "GetConferenceResponse": {
        "description": "Conference resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConferenceResource"
            }
          }
        }
      },
      "GetConferencesResponse": {
        "description": "Multiple conference resources.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConferenceResourceIndex"
            }
          }
        }
      },
      "GetExternalConnectionPhoneNumberResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get External Connection Phone Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ExternalConnectionPhoneNumber"
                }
              }
            }
          }
        }
      },
      "GetFaxResponse": {
        "description": "Get fax response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Fax Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "GetGcbChannelZoneRequestResponse": {
        "description": "Requested channel zone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GcbChannelZone"
            }
          }
        }
      },
      "GetGcbChannelZonesRequestResponse": {
        "description": "A list of channel zones",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GcbChannelZone"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetGcbNumbersResponse": {
        "description": "A list of numbers using GCB, grouped by channel zone",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "zone_name": {
                        "type": "string",
                        "example": "Euro channel zone"
                      },
                      "zone_id": {
                        "type": "string",
                        "example": "1653e6a1-4bfd-4857-97c6-6a51e1c34477"
                      },
                      "number_of_channels": {
                        "type": "integer",
                        "example": 7
                      },
                      "numbers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "string",
                              "example": "+15554441234"
                            },
                            "country": {
                              "type": "string",
                              "example": "FR"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetGcbPhoneNumbersRequestResponse": {
        "description": "A list of phone numbers",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GcbPhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GetLogMessageResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Log Message Response",
              "type": "object",
              "properties": {
                "log_messages": {
                  "maxItems": 1,
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogMessage"
                  }
                }
              }
            }
          }
        }
      },
      "GetParticipantResponse": {
        "description": "Participant resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParticipantResource"
            }
          }
        }
      },
      "GetParticipantsResponse": {
        "description": "Multiple participant resources.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParticipantResourceIndex"
            }
          }
        }
      },
      "GetPrivateWirelessGatewayResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PrivateWirelessGateway"
                }
              }
            }
          }
        }
      },
      "GetReleaseResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Release Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Release"
                }
              }
            }
          }
        }
      },
      "GetRoomCompositionResponse": {
        "description": "Get room composition response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomComposition"
                }
              }
            }
          }
        }
      },
      "GetRoomParticipantResponse": {
        "description": "Get room participant response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomParticipant"
                }
              }
            }
          }
        }
      },
      "GetRoomRecordingResponse": {
        "description": "Get room recording response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomRecording"
                }
              }
            }
          }
        }
      },
      "GetRoomResponse": {
        "description": "Get room response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "GetRoomSessionResponse": {
        "description": "Get room session response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RoomSession"
                }
              }
            }
          }
        }
      },
      "GetSimCardDataUsageNotificationResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SimCardDataUsageNotification"
                }
              }
            }
          }
        }
      },
      "GetSimCardGroupResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        }
      },
      "GetSimCardOrderResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrder"
                }
              }
            }
          }
        }
      },
      "GetSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "GetUploadResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Upload Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          }
        }
      },
      "GetUploadsStatusResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Get Uploads Status Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "pending_numbers_count": {
                      "type": "integer",
                      "description": "The count of phone numbers that are pending assignment to the external connection."
                    },
                    "pending_orders_count": {
                      "type": "integer",
                      "description": "The count of number uploads that have not yet been uploaded to Microsoft."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetWdrReportResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WdrReport"
                }
              }
            }
          }
        }
      },
      "GetWdrReportsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WdrReport"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpAllowedPortListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIPAllowedPort"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpAssignmentListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpAssignment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GlobalIpAssignmentResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/GlobalIpAssignment"
                }
              }
            }
          }
        }
      },
      "GlobalIpAssignmentUsageResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpAssignmentUsageMetric"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpHealthCheckListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIPHealthCheck"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GlobalIpHealthCheckResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/GlobalIPHealthCheck"
                }
              }
            }
          }
        }
      },
      "GlobalIpHealthCheckTypesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpHealthCheckType"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpHealthResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpAssignmentHealthMetric"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpLatencyResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpLatencyMetric"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIP"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "GlobalIpProtocolListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIPProtocol"
                  }
                }
              }
            }
          }
        }
      },
      "GlobalIpResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/GlobalIP"
                }
              }
            }
          }
        }
      },
      "GlobalIpUsageResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GlobalIpUsageMetric"
                  }
                }
              }
            }
          }
        }
      },
      "InitiateCallResponse": {
        "description": "Successful response upon initiating a TeXML call.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InitiateCallResult"
            }
          }
        }
      },
      "InventoryCoverageResponse": {
        "description": "Successful response with a list of inventory coverage levels",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryCoverage"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/InventoryCoverageMetadata"
                }
              }
            }
          }
        }
      },
      "IpConnectionResponse": {
        "description": "Successful response with details about an IP connection.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Ip Connection Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/IpConnection"
                }
              }
            }
          }
        }
      },
      "IpResponse": {
        "description": "Successful response with details about an IP.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Ip Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Ip"
                }
              }
            }
          }
        }
      },
      "ListAllowedFocWindows": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrdersAllowedFocWindow"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListAvailablePhoneNumbersBlockResponse": {
        "description": "Successful response with a list of available phone numbers blocks.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Available Phone Numbers Blocks Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailablePhoneNumberBlock"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/AvailablePhoneNumbersMetadata"
                }
              }
            }
          }
        }
      },
      "ListAvailablePhoneNumbersResponse": {
        "description": "Successful response with a list of available phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Available Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailablePhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/AvailablePhoneNumbersMetadata"
                }
              }
            }
          }
        }
      },
      "ListCallControlApplicationsResponse": {
        "description": "Successful response with a list of call control applications.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Call Control Applications Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallControlApplication"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCallEventsResponse": {
        "description": "Successful response with a list of call events.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Call Events Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConferencesResponse": {
        "description": "Successful response with a list of conferences.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Conferences Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conference"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListConnectionsResponse": {
        "description": "Successful response with a list of connections.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Connections Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Connection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCredentialConnectionsResponse": {
        "description": "Successful response with a list of credential connections.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Credential Connections Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCsvDownloadsResponse": {
        "description": "Successful response with a list of CSV downloads.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List CSV Downloads Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CsvDownload"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListCustomerServiceRecordPhoneNumberCoverage": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerServiceRecordPhoneNumberCoverage"
                  }
                }
              }
            }
          }
        }
      },
      "ListCustomerServiceRecords": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerServiceRecord"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListDraftPortingOrdersWithoutPagination": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrder"
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "activation_settings": {
                      "activation_status": null,
                      "fast_port_eligible": true,
                      "foc_datetime_actual": null,
                      "foc_datetime_requested": null
                    },
                    "created_at": "2022-03-17T18:01:01.0000000+00:00",
                    "customer_reference": null,
                    "description": "FP Telnyx",
                    "documents": {
                      "loa": null,
                      "invoice": null
                    },
                    "end_user": {
                      "admin": {
                        "account_number": null,
                        "auth_person_name": null,
                        "billing_phone_number": null,
                        "business_identifier": null,
                        "entity_name": null,
                        "pin_passcode": null,
                        "tax_identifier": null
                      },
                      "location": {
                        "administrative_area": null,
                        "country_code": null,
                        "extended_address": null,
                        "locality": null,
                        "postal_code": null,
                        "street_address": null
                      }
                    },
                    "id": "b0ea6d6f-de31-4079-a536-992e0c98b037",
                    "misc": null,
                    "old_service_provider_ocn": "Unreal Communications",
                    "parent_support_key": null,
                    "phone_number_configuration": {
                      "billing_group_id": null,
                      "connection_id": null,
                      "emergency_address_id": null,
                      "messaging_profile_id": null,
                      "tags": [ ]
                    },
                    "phone_number_type": "local",
                    "phone_numbers": [
                      {
                        "activation_status": null,
                        "phone_number": "{e.164 TN}",
                        "phone_number_type": "local",
                        "portability_status": "confirmed",
                        "porting_order_id": "b0ea6d6f-de31-4079-a536-992e0c98b037",
                        "porting_order_status": "draft",
                        "record_type": "porting_phone_number",
                        "requirements_status": "requirement-info-pending",
                        "support_key": null
                      }
                    ],
                    "porting_phone_numbers_count": 1,
                    "record_type": "porting_order",
                    "requirements": [ ],
                    "requirements_met": false,
                    "status": {
                      "details": [ ],
                      "value": "draft"
                    },
                    "support_key": null,
                    "updated_at": "2022-03-17T18:01:01.0000000+00:00",
                    "user_feedback": {
                      "user_comment": null,
                      "user_rating": null
                    },
                    "messaging": {
                      "messaging_capable": true,
                      "enable_messaging": false,
                      "messaging_port_status": "not_applicable",
                      "messaging_port_completed": false
                    },
                    "user_id": "40d68ba2-0847-4df2-be9c-b0e0cb673e75",
                    "webhook_url": null
                  }
                ]
              }
            }
          }
        }
      },
      "ListExternalConnectionPhoneNumbersResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List External Connection Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalConnectionPhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListFaxesResponse": {
        "description": "List faxes response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Faxes Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fax"
                  }
                },
                "meta": {
                  "type": "object",
                  "example": {
                    "page_number": 2,
                    "page_size": 1,
                    "total_pages": 3,
                    "total_results": 3
                  }
                }
              }
            }
          }
        }
      },
      "ListFqdnConnectionsResponse": {
        "description": "Successful response with a list of FQDN connections.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List FQDN Connections Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FqdnConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListFqdnsResponse": {
        "description": "Successful response with a list of FQDN connections.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List FQDNs Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fqdn"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListIpConnectionsResponse": {
        "description": "Successful response with a list of IP connections.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Ip Connections Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IpConnection"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListIpsResponse": {
        "description": "Successful response with a list of IPs.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Ips Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ip"
                  }
                }
              }
            }
          }
        }
      },
      "ListLogMessagesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Log Messages Response",
              "type": "object",
              "properties": {
                "log_messages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogMessage"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListManagedAccountsAllocatableGlobalOutboundChannelsResponse": {
        "description": "Successful response with information about allocatable global outbound channels.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ManagedAccountsGlobalOutboundChannels"
                }
              }
            }
          }
        }
      },
      "ListManagedAccountsResponse": {
        "description": "Successful response with a list of managed accounts.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedAccountMultiListing"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMediaResponse": {
        "description": "A response with a list of media resources",
        "content": {
          "application/json": {
            "schema": {
              "title": "List of media resources response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaResource"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingHostedNumberOrdersResponse": {
        "description": "Successful response with a list of messaging hosted number orders.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Hosted Number Order Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileMetrics": {
        "description": "Successful response with a list of messaging profile metrics.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Profile Metrics Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfileHighLevelMetrics"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilePhoneNumbersResponse": {
        "description": "Successful response with a list of messaging profile phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Profile Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfileShortCodesResponse": {
        "description": "Successful response with a list of messaging profile short codes.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Profile Short Codes Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingProfilesResponse": {
        "description": "Successful response with a list of messaging profiles.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Profiles Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingProfile"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListMessagingUrlDomains": {
        "description": "Successful response with details about a messaging URL domain.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Profile Url Domains Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessagingUrlDomain"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberBlockOrdersResponse": {
        "description": "Successful response with a list of number block orders.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Number Block Orders Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberBlockOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberOrderPhoneNumbersResponse": {
        "description": "Successful response with a list of number order phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Number Order Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberOrderPhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberOrdersResponse": {
        "description": "Successful response with a list of number orders.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Number Orders Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListNumberReservationsResponse": {
        "description": "Successful response with a list of number reservations.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Number Reservations Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NumberReservation"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListOutboundVoiceProfilesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Outbound Voice Profiles Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutboundVoiceProfile"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListParticipantsResponse": {
        "description": "Successful response with a list of conference participants.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Participants Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Participant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumberBlocksJobsResponse": {
        "description": "Successful response with a list of phone number blocks background jobs.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Phone Number Blocks Background Jobs Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberBlocksJob"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersJobsResponse": {
        "description": "Successful response with a list of phone numbers background jobs.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Phone Numbers Background Jobs Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumbersJob"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersResponse": {
        "description": "Successful response with a list of phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberDetailed"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersWithMessagingSettingsResponse": {
        "description": "Successful response with a list of phone numbers with messaging settings.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Messaging Settings Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPhoneNumbersWithVoiceSettingsResponse": {
        "description": "Successful response with a list of phone numbers with voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Phone Numbers With Voice Settings Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingAdditionalDocuments": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingAdditionalDocument"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              },
              "example": {
                "data": [
                  {
                    "id": "2acd1061-33cb-49b8-8014-beb6dc3fedbf",
                    "document_id": "40bc547a-7f96-4cd5-926a-da4842671e88",
                    "document_type": "loa",
                    "porting_order_id": "9d7b3b8e-4e67-4837-9c44-d110cd2c82a1",
                    "record_type": "porting_additional_document",
                    "created_at": "2023-06-01T10:00:00.0000000+00:00",
                    "updated_at": "2023-06-01T10:00:00.0000000+00:00"
                  }
                ],
                "meta": {
                  "total_pages": 1,
                  "total_results": 1,
                  "page_number": 1,
                  "page_size": 25
                }
              }
            }
          }
        }
      },
      "ListPortingEventsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingLOAConfigurations": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingLOAConfiguration"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrderRequirements": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrderRequirementDetail"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrdersActivationJobs": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrdersActivationJob"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrdersComments": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrdersComment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingOrdersExceptionTypes": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingOrdersExceptionType"
                  }
                }
              }
            }
          }
        }
      },
      "ListPortingPhoneNumberBlocks": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingPhoneNumberBlock"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingPhoneNumberConfigurations": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingPhoneNumberConfiguration"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingPhoneNumberExtensions": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingPhoneNumberExtension"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingPhoneNumbers": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingPhoneNumber"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          },
          "text/csv": {
            "schema": {
              "type": "string",
              "example": "phone_number,phone_number_type,porting_order_id,support_key,porting_order_status\r\n+12003155566,local,5f940c35-ef28-4408-bb95-af73b047d589,sr_a12345,draft\r\n"
            }
          }
        }
      },
      "ListPortingReports": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingReport"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortingVerificationCodes": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingVerificationCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              },
              "example": {
                "data": [
                  {
                    "id": "52090326-6533-4421-bcf4-bd0117cf3954",
                    "phone_number": "+61424000001",
                    "verified": true,
                    "porting_order_id": "f28e6ecc-29a8-430b-bd0b-d93055f70604",
                    "created_at": "2020-10-22T15:00:00.0000000+00:00",
                    "updated_at": "2020-10-22T15:00:00.0000000+00:00"
                  },
                  {
                    "id": "cf076b8e-645b-4040-8209-543c5909775f",
                    "phone_number": "+61424000002",
                    "verified": false,
                    "porting_order_id": "f28e6ecc-29a8-430b-bd0b-d93055f70604",
                    "created_at": "2020-10-22T15:00:00.0000000+00:00",
                    "updated_at": "2020-10-22T15:00:00.0000000+00:00"
                  }
                ],
                "meta": {
                  "total_pages": 1,
                  "total_results": 2,
                  "page_number": 1,
                  "page_size": 2
                }
              }
            }
          }
        }
      },
      "ListPortoutComments": {
        "description": "Portout Comments",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutComment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "ListPortoutEventsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutEvent"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortoutRejections": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutRejection"
                  }
                }
              }
            }
          }
        }
      },
      "ListPortoutReports": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutReport"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListPortoutResponse": {
        "description": "Portout Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortoutDetails"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "ListQueueCallsResponse": {
        "description": "Successful response with a list of calls in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Queue Calls Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueueCall"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRecordingTranscriptionsResponse": {
        "description": "A response listing multiple recording transcriptions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordingTranscription"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/CursorPaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListReleasesResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Releases Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Release"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomCompositionsResponse": {
        "description": "List room compositions response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomComposition"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomParticipantsResponse": {
        "description": "List room participants response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomParticipant"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomRecordingsResponse": {
        "description": "List room recordings response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomRecording"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomSessionsResponse": {
        "description": "List room sessions response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomSession"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListRoomsResponse": {
        "description": "List rooms response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListShortCodesResponse": {
        "description": "Successful response with a list of short codes.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Short Codes Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortCode"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListSubNumberOrdersResponse": {
        "description": "Successful response with a list of sub number orders.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Sub Number Orders Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubNumberOrder"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListUploadsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Uploads Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Upload"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "ListUserTagsResponse": {
        "description": "A list of your tags",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "outbound_profile_tags": {
                      "$ref": "#/components/schemas/UserTagList"
                    },
                    "number_tags": {
                      "$ref": "#/components/schemas/UserTagList"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListWebhookDeliveriesResponse": {
        "description": "A paginated array of webhook_delivery attempts",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/webhook_delivery"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMetaSimple"
                }
              }
            }
          }
        }
      },
      "ManagedAccountResponse": {
        "description": "Successful response with information about a single managed account.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ManagedAccount"
                }
              }
            }
          }
        }
      },
      "MediaDownloadResponse": {
        "description": "A response describing a media resource",
        "content": {
          "*/*": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "MediaResponse": {
        "description": "A response describing a media resource",
        "content": {
          "application/json": {
            "schema": {
              "title": "Media resource response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MediaResource"
                }
              }
            }
          }
        }
      },
      "MessageResponse": {
        "description": "Successful response with details about a message.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Message Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/OutboundMessagePayload"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberOrderResponse": {
        "description": "Successful response with details about a messaging hosted number order.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Messaging Hosted Number Order Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingHostedNumberOrder"
                }
              }
            }
          }
        }
      },
      "MessagingHostedNumberResponse": {
        "description": "Successful response with details about a messaging hosted number.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Messaging Hosted Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/HostedNumber"
                }
              }
            }
          }
        }
      },
      "MessagingProfileResponse": {
        "description": "Successful response with details about a messaging profile.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Messaging Profile Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfile"
                }
              }
            }
          }
        }
      },
      "NetworkCoverageListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkCoverage"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "NetworkInterfaceListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkInterface"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "NetworkListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Network"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "NetworkResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Network"
                }
              }
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "description": "Resource Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResourceNotFoundError"
            }
          }
        }
      },
      "NotFoundResponseApp": {
        "description": "The requested resource doesn't exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "notFound": {
                "value": {
                  "errors": [
                    {
                      "code": "10005",
                      "title": "Resource not found",
                      "detail": "The requested resource or URL could not be found.",
                      "meta": {
                        "url": "https://developers.telnyx.com/docs/overview/errors/10005"
                      },
                      "source": {
                        "pointer": "/"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "NumberBlockOrderResponse": {
        "description": "Successful response with details about a number block order.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Number Block Order Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberBlockOrder"
                }
              }
            }
          }
        }
      },
      "NumberLookupResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Number Lookup Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberLookupRecord"
                }
              }
            }
          }
        }
      },
      "NumberOrderPhoneNumberResponse": {
        "description": "Successful response with details about a number order phone number.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Number Order Phone Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberOrderPhoneNumber"
                }
              }
            }
          }
        }
      },
      "NumberOrderResponse": {
        "description": "Successful response with details about a number order.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Number Order Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberOrderWithPhoneNumbers"
                }
              }
            }
          }
        }
      },
      "NumberReservationResponse": {
        "description": "Successful response with details about a number reservation.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Number Reservation Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/NumberReservation"
                }
              }
            }
          }
        }
      },
      "OTAUpdateResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CompleteOTAUpdate"
                }
              }
            }
          }
        }
      },
      "OutboundVoiceProfileResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Outbound Voice Profile Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/OutboundVoiceProfile"
                }
              }
            }
          }
        }
      },
      "PatchGcbChannelZoneRequestResponse": {
        "description": "Successfuly patched channel zone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GcbChannelZone"
            }
          }
        }
      },
      "PatchRoomResponse": {
        "description": "Update room response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "PhoneNumberResponse": {
        "description": "Successful response with details about a phone number.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Phone Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberDetailed"
                }
              }
            }
          }
        }
      },
      "PhoneNumberWithMessagingSettingsResponse": {
        "description": "Successful response with details about a phone number including messaging settings.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Messaging Settings Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberWithMessagingSettings"
                }
              }
            }
          }
        }
      },
      "PhoneNumberWithVoiceSettingsResponse": {
        "description": "Successful response with details about a phone number including voice settings.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Phone Number Voice Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PhoneNumberWithVoiceSettings"
                }
              }
            }
          }
        }
      },
      "PortOutListSupportingDocumentsResponse": {
        "description": "Portout Supporting Documents",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortOutSupportingDocument"
                  }
                }
              }
            }
          }
        }
      },
      "PortabilityCheckResponse": {
        "description": "PortabilityCheck Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortabilityCheckDetails"
                  }
                }
              }
            }
          }
        }
      },
      "PortoutCommentResponse": {
        "description": "Portout Comment Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutComment"
                }
              }
            }
          }
        }
      },
      "PortoutResponse": {
        "description": "Portout Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutDetails"
                }
              }
            }
          }
        }
      },
      "PostGcbPhoneNumberRequestResponse": {
        "description": "A new inserted phone number",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GcbPhoneNumber"
            }
          }
        }
      },
      "PublicInternetGatewayListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicInternetGatewayRead"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "PublicInternetGatewayResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PublicInternetGatewayRead"
                }
              }
            }
          }
        }
      },
      "QueueCallResponse": {
        "description": "Successful response with details about a call in a queue.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Queue Call Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/QueueCall"
                }
              }
            }
          }
        }
      },
      "QueueResponse": {
        "description": "Successful response with details about a queue.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Queue Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          }
        }
      },
      "ReadCommentResponse": {
        "description": "A Comment Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Comment"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "RecordingResponseBody": {
        "description": "A response with a single recording resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RecordingResponse"
            }
          }
        }
      },
      "RecordingTranscriptionResponse": {
        "description": "A response with a single recording transcription resource.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/RecordingTranscription"
                }
              }
            }
          }
        }
      },
      "RecordingsResponseBody": {
        "description": "A response containing multiple recordings.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordingResponseData"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "RefreshFaxResponse": {
        "description": "Refresh fax response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Refresh Fax Response",
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "ok"
                }
              },
              "example": {
                "data": {
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "RefreshRoomClientTokenResponse": {
        "description": "Refresh room client token response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "format": "jwt",
                      "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ"
                    },
                    "token_expires_at": {
                      "type": "string",
                      "description": "ISO 8601 timestamp when the token expires.",
                      "format": "datetime",
                      "example": "2021-03-26T17:51:59Z"
                    }
                  },
                  "example": {
                    "token": "eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA",
                    "token_expires_at": "2021-04-22T12:24:55Z"
                  }
                }
              }
            }
          }
        }
      },
      "RegionListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Region"
                  }
                }
              }
            }
          }
        }
      },
      "RegisterSimCardsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSIMCard"
                  },
                  "description": "Successfully registered SIM cards."
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "RegistrationStatusResponse": {
        "description": "Successful response with details about a credential connection registration status.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Registration Status Response",
              "type": "object",
              "properties": {
                "data": {
                  "title": "Registration Status",
                  "type": "object",
                  "properties": {
                    "record_type": {
                      "type": "string",
                      "description": "Identifies the type of the resource.",
                      "example": "registration_status"
                    },
                    "status": {
                      "enum": [
                        "Not Applicable",
                        "Not Registered",
                        "Failed",
                        "Expired",
                        "Registered",
                        "Unregistered"
                      ],
                      "type": "string",
                      "description": "The current registration status of your SIP connection"
                    },
                    "sip_username": {
                      "type": "string",
                      "description": "The user name of the SIP connection",
                      "example": "sip_username"
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The ip used during the SIP connection",
                      "example": "190.106.106.121"
                    },
                    "transport": {
                      "type": "string",
                      "description": "The protocol of the SIP connection",
                      "example": "TCP"
                    },
                    "port": {
                      "type": "integer",
                      "description": "The port of the SIP connection",
                      "example": 37223
                    },
                    "user_agent": {
                      "type": "string",
                      "description": "The user agent of the SIP connection",
                      "example": "Z 5.4.12 v2.10.13.2-mod"
                    },
                    "last_registration": {
                      "type": "string",
                      "description": "ISO 8601 formatted date indicating when the resource was last updated.",
                      "example": "2018-02-02T22:25:27.521Z"
                    }
                  },
                  "example": {
                    "data": {
                      "record_type": "registration_status",
                      "status": "Expired",
                      "sip_username": "rogerp",
                      "ip_address": "190.106.106.121",
                      "transport": "UDP",
                      "port": 37223,
                      "user_agent": "Z 5.4.12 v2.10.13.2-mod",
                      "last_registration": "2021-09-28T15:11:02.0000000+00:00",
                      "id": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResourceNotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ResourceNotFoundErrorResponse": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceNotFoundError"
                  }
                }
              }
            }
          }
        }
      },
      "RetrieveCallStatusResponse": {
        "description": "Successful response with details about a call status.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Call Status Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        }
      },
      "RetrieveCallStatusResponseWithRecordingId": {
        "description": "Successful response with details about a call status that includes recording_id.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Call Status Response With Recording ID",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CallWithRecordingId"
                }
              }
            }
          }
        }
      },
      "RetrieveMessagingProfileMetrics": {
        "description": "Successful response with details about a messaging profile's metrics.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Messaging Profile Metrics Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/MessagingProfileDetailedMetrics"
                }
              }
            }
          }
        }
      },
      "SIMCardActionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardAction"
                }
              }
            }
          }
        }
      },
      "SIMCardActivationCodeResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardActivationCode"
                }
              }
            }
          }
        }
      },
      "SIMCardDeviceDetailsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardDeviceDetails"
                }
              }
            }
          }
        }
      },
      "SIMCardGroupActionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroupAction"
                }
              }
            }
          }
        }
      },
      "SIMCardOrdersPreviewResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardOrderPreview"
                }
              }
            }
          }
        }
      },
      "SIMCardPublicIPResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardPublicIP"
                }
              }
            }
          }
        }
      },
      "SearchMobileNetworkOperatorsResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MobileNetworkOperator"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SearchOTAUpdateResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplifiedOTAUpdate"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SearchSimCardsResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimpleSIMCard"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SendFaxResponse": {
        "description": "Send fax response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Send Fax Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          }
        }
      },
      "SharePortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrderSharingToken"
                }
              }
            },
            "example": {
              "id": "03a35311-ad92-46b3-95d7-8ad6dccf2d7c",
              "porting_order_id": "fd4b86c8-497d-4c6d-9609-a789e4e14cfe",
              "expires_in_seconds": 3600,
              "permissions": [
                "porting_order.document.read",
                "porting_order.document.update"
              ],
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODk4OTQ2NzcsImlzdCI6MTY4OTg5MTA3NywicGVybWlzc2lvbnMiOlsicG9ydGluZ19vcmRlci5kb2N1bWVudC5yZWFkIl0sInBvcnRpbmdfb3JkZXJfaWQiOiJmZDRiODZjOC00OTdkLTRjNmQtOTYwOS1hNzg5ZTRlMTRjZmUifQ.CT0HRF6OLj7VPZ8p5Y_0S8rOL8SEUznwJJkR-YReKwc",
              "record_type": "porting_order_sharing_token",
              "expires_at": "2023-07-20T23:11:17.0000000+00:00",
              "created_at": "2023-07-20T22:11:17.2925730+00:00"
            }
          }
        }
      },
      "ShortCodeResponse": {
        "description": "Successful response with details about a short code.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Short Code Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ShortCode"
                }
              }
            }
          }
        }
      },
      "ShowCustomerServiceRecord": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CustomerServiceRecord"
                }
              }
            }
          }
        }
      },
      "ShowPortingEventResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingEvent"
                }
              }
            }
          }
        }
      },
      "ShowPortingLOAConfiguration": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingLOAConfiguration"
                }
              }
            }
          }
        }
      },
      "ShowPortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrder"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "phone_numbers_url": {
                      "type": "string",
                      "description": "Link to list all phone numbers",
                      "example": "/v2/porting_phone_numbers?filter[porting_order_id]=eef10fb8-f3df-4c67-97c5-e18179723222"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ShowPortingOrdersActivationJob": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrdersActivationJob"
                }
              }
            }
          }
        }
      },
      "ShowPortingOrdersComment": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrdersComment"
                }
              }
            }
          }
        }
      },
      "ShowPortingPhoneNumber": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingPhoneNumber"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "porting_order_url": {
                      "type": "string",
                      "description": "Link to list porting order",
                      "format": "uri",
                      "example": "/porting_orders/a700d03c-4062-4091-8189-1b75216cf7a2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ShowPortingPhoneNumberBlock": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingPhoneNumberBlock"
                }
              }
            }
          }
        }
      },
      "ShowPortingPhoneNumberExtension": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingPhoneNumberExtension"
                }
              }
            }
          }
        }
      },
      "ShowPortingReport": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingReport"
                }
              }
            }
          }
        }
      },
      "ShowPortoutEventResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutEvent"
                }
              }
            }
          }
        }
      },
      "ShowPortoutReport": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortoutReport"
                }
              }
            }
          }
        }
      },
      "SimCardActionCollectionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardAction"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SimCardDataUsageNotificationCollectionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimCardDataUsageNotification"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SimCardGroupActionCollectionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SIMCardGroupAction"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SinglePhoneNumberCampaign": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PhoneNumberCampaign"
            }
          }
        }
      },
      "SiprecConnectorResponseBody": {
        "description": "Return details of the SIPREC connector.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SiprecConnectorResponse"
            }
          }
        }
      },
      "SlimListPhoneNumbersResponse": {
        "description": "Successful response with a list of phone numbers.",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Phone Numbers Response",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SlimPhoneNumberDetailed"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "SpecificCountryResponse": {
        "description": "Response for specific country coverage",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/CountryCoverage"
                }
              }
            }
          }
        }
      },
      "SubNumberOrderResponse": {
        "description": "Successful response with details about a sub number order.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Sub Number Order Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SubNumberOrder"
                }
              }
            }
          }
        }
      },
      "SubNumberOrdersReportResponse": {
        "description": "Sub number orders report response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SubNumberOrdersReport"
                }
              }
            }
          }
        }
      },
      "SubRequestByPortingOrder": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/GetSubRequestByPortingOrder"
                }
              }
            }
          }
        }
      },
      "TelephonyCredentialResponse": {
        "description": "Successful response with details about a credential",
        "content": {
          "application/json": {
            "schema": {
              "title": "Telephony Credential Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TelephonyCredential"
                }
              }
            }
          }
        }
      },
      "TexmlApplicationResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Texml Application Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TexmlApplication"
                }
              }
            }
          }
        }
      },
      "TexmlCreateCallRecordingResponse": {
        "description": "Successful call recording create response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateCallRecordingResponseBody"
            }
          }
        }
      },
      "TexmlCreateCallStreamingResponse": {
        "description": "Successful call streaming create response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateCallStreamingResponseBody"
            }
          }
        }
      },
      "TexmlCreateSiprecSessionResponse": {
        "description": "Successful SIPREC session create response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateSiprecSessionResponseBody"
            }
          }
        }
      },
      "TexmlGetCallRecordingResponse": {
        "description": "Retrieves call recording resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlGetCallRecordingResponseBody"
            }
          }
        }
      },
      "TexmlGetCallRecordingsResponse": {
        "description": "Successful Get Call Recordings Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlGetCallRecordingsResponseBody"
            }
          }
        }
      },
      "TexmlGetRecordingTranscriptionResponse": {
        "description": "Successful get Recording Transcription Response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlRecordingTranscription"
            }
          }
        }
      },
      "TexmlListRecordingTranscriptionResponse": {
        "description": "Successful list Recording Transcriptions Response",
        "content": {
          "application/json": {
            "schema": {
              "title": "List Recording Transcriptions Response",
              "type": "object",
              "properties": {
                "transcriptions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TexmlRecordingTranscription"
                  }
                },
                "end": {
                  "type": "integer",
                  "description": "The number of the last element on the page, zero-indexed",
                  "example": 1
                },
                "first_page_uri": {
                  "type": "string",
                  "description": "Relative uri to the first page of the query results",
                  "format": "uri",
                  "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Transcriptions.json?Page=0&PageSize=1"
                },
                "previous_page_uri": {
                  "type": "string",
                  "description": "Relative uri to the previous page of the query results",
                  "format": "uri",
                  "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Transcriptions.json?PageToken=MZQTDUHX&PageSize=1"
                },
                "next_page_uri": {
                  "type": "string",
                  "description": "Relative uri to the next page of the query results",
                  "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Transcriptions.json?PageToken=KRWXZPO&PageSize=1"
                },
                "page": {
                  "type": "integer",
                  "description": "Current page number, zero-indexed.",
                  "example": 0
                },
                "page_size": {
                  "type": "integer",
                  "description": "The number of items on the page",
                  "example": 20
                },
                "start": {
                  "type": "integer",
                  "description": "The number of the first element on the page, zero-indexed.",
                  "example": 0
                },
                "uri": {
                  "type": "string",
                  "description": "The URI of the current page.",
                  "example": "/v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Transcriptions.json?PageToken=YTBNAXPI&PageSize=1"
                }
              }
            }
          }
        }
      },
      "TexmlUpdateCallStreamingResponse": {
        "description": "Successful call streaming update response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlUpdateCallStreamingResponseBody"
            }
          }
        }
      },
      "TexmlUpdateSiprecSessionResponse": {
        "description": "Successful SIPREC session update response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TexmlUpdateSiprecSessionResponseBody"
            }
          }
        }
      },
      "UnauthenticatedResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "Authentication Failed": {
                "value": {
                  "errors": [
                    {
                      "code": "10009",
                      "title": "Authentication failed",
                      "detail": "Could not understand the provided credentials.",
                      "meta": {
                        "url": "https://developers.telnyx.com/docs/overview/errors/10009"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "UnauthorizedErrorResponse": {
        "description": "The required authentication headers were either invalid or not included in the request.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnauthorizedError"
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedRequestErrorResponse": {
        "description": "Unauthorized Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "UnauthorizedResponse": {
        "description": "Unauthenticated response. Happens when the current user cannot be authenticated."
      },
      "UnexpectedErrorResponse": {
        "description": "An unexpected error occurred.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnexpectedError"
                  }
                }
              }
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable entity. Check the 'detail' field in response for details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        }
      },
      "UnprocessableEntityErrorResponse": {
        "description": "Unprocessable entity. Check the 'detail' field in response for details.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnprocessableEntityError"
                  }
                }
              }
            }
          }
        }
      },
      "UnprocessableEntityResponse": {
        "description": "Unprocessable entity"
      },
      "UnprocessableManagedAccountEntity": {
        "description": "Unprocessable entity. Check the 'detail' field in response for details.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnprocessableEntityError"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateManagedAccountGlobalChannelLimitResponse": {
        "description": "Successful response with information about the allocatable global outbound channels for the given account.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SingleManagedAccountGlobalOutboundChannels"
                }
              }
            }
          }
        }
      },
      "UpdatePortingLOAConfiguration": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingLOAConfiguration"
                }
              }
            }
          }
        }
      },
      "UpdatePortingOrderResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/PortingOrder"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "phone_numbers_url": {
                      "type": "string",
                      "description": "Link to list all phone numbers"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "activation_settings": {
                    "activation_status": null,
                    "fast_port_eligible": true,
                    "foc_datetime_actual": null,
                    "foc_datetime_requested": "2022-04-08T15:00:00.0000000+00:00"
                  },
                  "created_at": "2022-03-24T14:22:28.0000000+00:00",
                  "customer_reference": "Test1234",
                  "description": "FP Telnyx",
                  "documents": {
                    "loa": null,
                    "invoice": null
                  },
                  "end_user": {
                    "admin": {
                      "account_number": "123abc",
                      "auth_person_name": "Porter McPortersen II",
                      "billing_phone_number": "+13035551234",
                      "business_identifier": "abc123",
                      "entity_name": "Porter McPortersen",
                      "pin_passcode": "1234",
                      "tax_identifier": "1234abcd"
                    },
                    "location": {
                      "administrative_area": "TX",
                      "country_code": "US",
                      "extended_address": "14th Floor",
                      "locality": "Austin",
                      "postal_code": "78701",
                      "street_address": "600 Congress Avenue"
                    }
                  },
                  "id": "eef10fb8-f3df-4c67-97c5-e18179723222",
                  "misc": {
                    "new_billing_phone_number": null,
                    "remaining_numbers_action": null,
                    "type": "full"
                  },
                  "old_service_provider_ocn": "Unreal Communications",
                  "parent_support_key": null,
                  "phone_number_configuration": {
                    "billing_group_id": null,
                    "connection_id": "1752379429071357070",
                    "emergency_address_id": null,
                    "messaging_profile_id": null,
                    "tags": [ ]
                  },
                  "phone_number_type": "local",
                  "porting_phone_numbers_count": 1,
                  "record_type": "porting_order",
                  "requirements": [ ],
                  "requirements_met": false,
                  "status": {
                    "details": [ ],
                    "value": "draft"
                  },
                  "support_key": null,
                  "updated_at": "2022-03-24T14:26:53.0000000+00:00",
                  "user_feedback": {
                    "user_comment": null,
                    "user_rating": null
                  },
                  "messaging": {
                    "messaging_capable": true,
                    "enable_messaging": true,
                    "messaging_port_status": "pending",
                    "messaging_port_completed": false
                  },
                  "user_id": "40d68ba2-0847-4df2-be9c-b0e0cb673e75",
                  "webhook_url": "https://example.com/porting_webhooks"
                },
                "meta": {
                  "phone_numbers_url": "/v2/porting_phone_numbers?filter[porting_order_id]=eef10fb8-f3df-4c67-97c5-e18179723222"
                }
              }
            }
          }
        }
      },
      "UpdateSimCardDataUsageNotificationResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SimCardDataUsageNotification"
                }
              }
            }
          }
        }
      },
      "UpdateSimCardGroupResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCardGroup"
                }
              }
            }
          }
        }
      },
      "UpdateSimCardResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/SIMCard"
                }
              }
            }
          }
        }
      },
      "UpdateTeXMLCallResponse": {
        "description": "Successful response upon updating a TeXML call.",
        "content": {
          "application/json": {
            "schema": {
              "title": "TeXML REST Command Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UpdateCommandResult"
                }
              }
            }
          }
        }
      },
      "UserAddressResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UserAddress"
                }
              }
            }
          }
        }
      },
      "UserBalanceResponse": {
        "description": "Get user balance details",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/UserBalance"
                }
              }
            }
          }
        }
      },
      "ValidateAddressResponse": {
        "description": "Action response",
        "content": {
          "application/json": {
            "schema": {
              "title": "Validate address action response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ValidateAddressResult"
                }
              }
            }
          }
        }
      },
      "ValidationCodesResponse": {
        "description": "Successful response with the phone numbers and their respective status of the validation codes.",
        "content": {
          "application/json": {
            "schema": {
              "title": "Retrieve Messaging Hosted Number Response",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ValidationCodes"
                }
              }
            }
          }
        }
      },
      "VerifyPortingVerificationCodes": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortingVerificationCode"
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "52090326-6533-4421-bcf4-bd0117cf3954",
                    "phone_number": "+61424000001",
                    "verified": true,
                    "porting_order_id": "f28e6ecc-29a8-430b-bd0b-d93055f70604",
                    "created_at": "2020-10-22T15:00:00.0000000+00:00",
                    "updated_at": "2020-10-22T15:00:00.0000000+00:00"
                  },
                  {
                    "id": "cf076b8e-645b-4040-8209-543c5909775f",
                    "phone_number": "+61424000002",
                    "verified": false,
                    "porting_order_id": "f28e6ecc-29a8-430b-bd0b-d93055f70604",
                    "created_at": "2020-10-22T15:00:00.0000000+00:00",
                    "updated_at": "2020-10-22T15:00:00.0000000+00:00"
                  }
                ]
              }
            }
          }
        }
      },
      "VirtualCrossConnectCoverageListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VirtualCrossConnectCoverage"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "VirtualCrossConnectListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VirtualCrossConnectCombined"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "VirtualCrossConnectResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/VirtualCrossConnectCombined"
                }
              }
            }
          }
        }
      },
      "VoicemailResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/VoicemailPrefResponse"
                }
              }
            }
          }
        }
      },
      "WireguardInterfaceListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WireguardInterfaceRead"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "WireguardInterfaceResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WireguardInterfaceRead"
                }
              }
            }
          }
        }
      },
      "WireguardPeerListResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WireguardPeer"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "WireguardPeerResponse": {
        "description": "Successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/WireguardPeer"
                }
              }
            }
          }
        }
      },
      "WirelessConnectivityLogCollectionResponse": {
        "description": "Successful Response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WirelessConnectivityLog"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "listCommentsResponse": {
        "description": "An array of Comment Responses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      },
      "listDynamicEmergencyAddresses": {
        "description": "Dynamic Emergency Address Responses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DynamicEmergencyAddress"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "listDynamicEmergencyEndpoints": {
        "description": "Dynamic Emergency Endpoints Responses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DynamicEmergencyEndpoint"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          }
        }
      },
      "listRegulatoryRequirements": {
        "description": "An array of Regulatory Requirements Responses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryRequirements"
                  }
                }
              }
            }
          }
        }
      },
      "listRegulatoryRequirementsPhoneNumbers": {
        "description": "An array of Regulatory Requirements Responses",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryRequirementsPhoneNumbers"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/PaginationMeta"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "AccountSid": {
        "name": "account_sid",
        "in": "path",
        "description": "The id of the account the resource belongs to.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ApplicationId": {
        "name": "application_id",
        "in": "path",
        "description": "The ID of the TeXML application used for the call.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AssociatedRecordType": {
        "name": "filter[associated_record_type][eq]",
        "in": "query",
        "description": "Filter by the associated record type",
        "schema": {
          "enum": [
            "account",
            "phone_number"
          ],
          "type": "string",
          "example": "phone_number"
        }
      },
      "AuthorizationBearer": {
        "name": "authorization_bearer",
        "in": "header",
        "description": "Format: Bearer <TOKEN>",
        "schema": {
          "type": "string",
          "description": "Authenticates the request with your Telnyx API V2 KEY"
        }
      },
      "BillingBundleId": {
        "name": "bundle_id",
        "in": "path",
        "required": true,
        "schema": {
          "title": "Bundle Id",
          "type": "string",
          "description": "Billing bundle's ID, this is used to identify the billing bundle in the API.",
          "format": "uuid",
          "example": "8661948c-a386-4385-837f-af00f40f111a"
        }
      },
      "CallControlId": {
        "name": "call_control_id",
        "in": "path",
        "description": "Unique identifier and token for controlling the call",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CallSid": {
        "name": "call_sid",
        "in": "path",
        "description": "The CallSid that identifies the call to update.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CallSidOrParticipantLabel": {
        "name": "call_sid_or_participant_label",
        "in": "path",
        "description": "CallSid or Label of the Participant to update.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ChannelTypeId": {
        "name": "filter[channel_type_id][eq]",
        "in": "query",
        "description": "Filter by the id of a channel type",
        "schema": {
          "enum": [
            "webhook",
            "sms",
            "email",
            "voice"
          ],
          "type": "string",
          "example": "webhook"
        }
      },
      "ConferenceSid": {
        "name": "conference_sid",
        "in": "path",
        "description": "The ConferenceSid that uniquely identifies a conference.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ConferenceStatus": {
        "name": "Status",
        "in": "query",
        "description": "Filters conferences by status.",
        "schema": {
          "enum": [
            "init",
            "in-progress",
            "completed"
          ],
          "type": "string"
        },
        "example": "in-progress"
      },
      "ConnectionId": {
        "name": "connection_id",
        "in": "path",
        "description": "Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CreatedAtGtFilter": {
        "name": "filter[created_at][gt]",
        "in": "query",
        "description": "Filters records to those created after a specific date.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-01T00:00:00.0000000+00:00"
        }
      },
      "CreatedAtLtFilter": {
        "name": "filter[created_at][lt]",
        "in": "query",
        "description": "Filters records to those created before a specific date.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-01T00:00:00.0000000+00:00"
        }
      },
      "DateCreated": {
        "name": "DateCreated",
        "in": "query",
        "description": "Filters conferences by the creation date. Expected format is YYYY-MM-DD. Also accepts inequality operators, e.g. DateCreated>=2023-05-22.",
        "schema": {
          "type": "string"
        },
        "example": ">=2023-05-22"
      },
      "DateUpdated": {
        "name": "DateUpdated",
        "in": "query",
        "description": "Filters conferences by the time they were last updated. Expected format is YYYY-MM-DD. Also accepts inequality operators, e.g. DateUpdated>=2023-05-22.",
        "schema": {
          "type": "string"
        },
        "example": ">=2023-05-22"
      },
      "EndTime": {
        "name": "EndTime",
        "in": "query",
        "description": "Filters calls by their end date. Expected format is YYYY-MM-DD",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "EndTime_gt": {
        "name": "EndTime_gt",
        "in": "query",
        "description": "Filters calls by their end date (after). Expected format is YYYY-MM-DD",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "EndTime_lt": {
        "name": "EndTime_lt",
        "in": "query",
        "description": "Filters calls by their end date (before). Expected format is YYYY-MM-DD",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "FilterAddressBook": {
        "name": "filter[address_book][eq]",
        "in": "query",
        "description": "If present, only returns results with the <code>address_book</code> flag set to the given value.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterAddressByAdministrativeArea": {
        "name": "filter[address.administrative_area]",
        "in": "query",
        "description": "Filter by state or province where the address is located.",
        "schema": {
          "type": "string",
          "example": "TX"
        }
      },
      "FilterAddressByCountryCode": {
        "name": "filter[address.country_code]",
        "in": "query",
        "description": "Filter by the mobile operator two-character (ISO 3166-1 alpha-2) origin country code.",
        "schema": {
          "type": "string",
          "example": "US"
        }
      },
      "FilterAddressByExtendedAddress": {
        "name": "filter[address.extended_address]",
        "in": "query",
        "description": "Returns entries with matching name of the supplemental field for address information.",
        "schema": {
          "type": "string",
          "example": "14th Floor"
        }
      },
      "FilterAddressById": {
        "name": "filter[address.id]",
        "in": "query",
        "description": "Uniquely identifies the address for the order.",
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "FilterAddressByLocality": {
        "name": "filter[address.locality]",
        "in": "query",
        "description": "Filter by the name of the city where the address is located.",
        "schema": {
          "type": "string",
          "example": "Austin"
        }
      },
      "FilterAddressByPostalCode": {
        "name": "filter[address.postal_code]",
        "in": "query",
        "description": "Filter by postal code for the address.",
        "schema": {
          "type": "string",
          "example": "78701"
        }
      },
      "FilterAddressByStreetAddress": {
        "name": "filter[address.street_address]",
        "in": "query",
        "description": "Returns entries with matching name of the street where the address is located.",
        "schema": {
          "type": "string",
          "example": "600 Congress Avenue"
        }
      },
      "FilterApplicationName": {
        "name": "filter[application_name][contains]",
        "in": "query",
        "description": "If present, applications with <code>application_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "example": "fax-app"
        }
      },
      "FilterBasicStatusLifecycle": {
        "name": "filter[status]",
        "in": "query",
        "description": "Filter by a specific status of the resource's lifecycle.",
        "schema": {
          "enum": [
            "in-progress",
            "completed",
            "failed"
          ],
          "type": "string",
          "example": "in-progress"
        }
      },
      "FilterBulkSIMCardActionId": {
        "name": "filter[bulk_sim_card_action_id]",
        "in": "query",
        "description": "Filter by a bulk SIM card action ID.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "47a1c2b0-cc7b-4ab1-bb98-b33fb0fc61b9"
        }
      },
      "FilterByPhoneNumber": {
        "name": "filter[phone_number]",
        "in": "query",
        "description": "Filter results by phone number",
        "schema": {
          "type": "string",
          "example": "+12003151212"
        }
      },
      "FilterByPhoneNumberIn": {
        "name": "filter[phone_number][in][]",
        "in": "query",
        "description": "Filter results by a list of phone numbers",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "+12003151212"
          }
        }
      },
      "FilterByPortabilityStatus": {
        "name": "filter[portability_status]",
        "in": "query",
        "description": "Filter results by portability status",
        "schema": {
          "$ref": "#/components/schemas/PortabilityStatus"
        }
      },
      "FilterByPortingOrderActivationStatus": {
        "name": "filter[activation_status]",
        "in": "query",
        "description": "Filter results by activation status",
        "schema": {
          "$ref": "#/components/schemas/PortingOrderActivationStatus"
        }
      },
      "FilterByPortingOrderID": {
        "name": "filter[porting_order_id]",
        "in": "query",
        "description": "Filter results by porting order id",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "f3575e15-32ce-400e-a4c0-dd78800c20b0"
        }
      },
      "FilterByPortingOrderIdIn": {
        "name": "filter[porting_order_id][in][]",
        "in": "query",
        "description": "Filter results by a list of porting order ids",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid",
            "example": "f3575e15-32ce-400e-a4c0-dd78800c20b0"
          }
        }
      },
      "FilterByPortingOrderStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Filter results by status",
        "schema": {
          "enum": [
            "draft",
            "in-process",
            "submitted",
            "exception",
            "foc-date-confirmed",
            "cancel-pending",
            "ported",
            "cancelled"
          ],
          "type": "string",
          "example": "in-process"
        }
      },
      "FilterByPortingOrderStatusIn": {
        "name": "filter[status][in][]",
        "in": "query",
        "description": "Filter porting orders by multiple statuses",
        "schema": {
          "enum": [
            "draft",
            "in-process",
            "submitted",
            "exception",
            "foc-date-confirmed",
            "cancel-pending",
            "ported",
            "cancelled"
          ],
          "type": "string",
          "example": "in-process"
        }
      },
      "FilterBySupportKeyEq": {
        "name": "filter[support_key][eq]",
        "in": "query",
        "description": "Filter results by support key",
        "schema": {
          "type": "string",
          "example": "sr_a12345"
        }
      },
      "FilterBySupportKeyIn": {
        "name": "filter[support_key][in][]",
        "in": "query",
        "description": "Filter results by a list of support keys",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "sr_a12345"
          }
        }
      },
      "FilterByTCRBrandID": {
        "name": "filter[tcr_brand_id]",
        "in": "query",
        "description": "Filter results by the TCR Brand id",
        "schema": {
          "type": "string",
          "example": "BRANDID"
        }
      },
      "FilterByTCRCampaignID": {
        "name": "filter[tcr_campaign_id]",
        "in": "query",
        "description": "Filter results by the TCR Campaign id",
        "schema": {
          "type": "string",
          "example": "CAMPID3"
        }
      },
      "FilterByTelnyxBrandID": {
        "name": "filter[telnyx_brand_id]",
        "in": "query",
        "description": "Filter results by the Telnyx Brand id",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "f3575e15-32ce-400e-a4c0-dd78800c20b0"
        }
      },
      "FilterByTelnyxCampaignID": {
        "name": "filter[telnyx_campaign_id]",
        "in": "query",
        "description": "Filter results by the Telnyx Campaign id",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "f3575e15-32ce-400e-a4c0-dd78800c20b0"
        }
      },
      "FilterCallEventFailed": {
        "name": "filter[failed]",
        "in": "query",
        "description": "Delivery failed or not.",
        "schema": {
          "type": "boolean",
          "example": false
        }
      },
      "FilterCallEventName": {
        "name": "filter[name]",
        "in": "query",
        "description": "Event name",
        "schema": {
          "type": "string",
          "example": "webhook"
        }
      },
      "FilterCallEventOccurredAtEqualTo": {
        "name": "filter[occurred_at][eq]",
        "in": "query",
        "description": "Event occurred_at: equal",
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventOccurredAtGreaterThan": {
        "name": "filter[occurred_at][gt]",
        "in": "query",
        "description": "Event occurred_at: greater than",
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventOccurredAtGreaterThanOrEqualTo": {
        "name": "filter[occurred_at][gte]",
        "in": "query",
        "description": "Event occurred_at: greater than or equal",
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventOccurredAtLessThan": {
        "name": "filter[occurred_at][lt]",
        "in": "query",
        "description": "Event occurred_at: lower than",
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventOccurredAtLessThanOrEqualTo": {
        "name": "filter[occurred_at][lte]",
        "in": "query",
        "description": "Event occurred_at: lower than or equal",
        "schema": {
          "type": "string",
          "example": "2019-03-29T11:10:00Z"
        }
      },
      "FilterCallEventType": {
        "name": "filter[type]",
        "in": "query",
        "description": "Event type",
        "schema": {
          "enum": [
            "command",
            "webhook"
          ],
          "type": "string",
          "example": "webhook"
        }
      },
      "FilterCallLegId": {
        "name": "filter[leg_id]",
        "in": "query",
        "description": "The unique identifier of an individual call leg.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterCallSessionId": {
        "name": "filter[application_session_id]",
        "in": "query",
        "description": "The unique identifier of the call session. A session may include multiple call leg events.",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "FilterCivicAddressId": {
        "name": "filter[civic_address_id][eq]",
        "in": "query",
        "description": "The civic address ID to filter by",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "67ea7693-9cd5-4a68-8c76-abb3aa5bf5d2"
        }
      },
      "FilterConferenceName": {
        "name": "filter[name]",
        "in": "query",
        "description": "If present, conferences will be filtered to those with a matching `name` attribute. Matching is case-sensitive",
        "schema": {
          "type": "string"
        }
      },
      "FilterConferenceStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "If present, conferences will be filtered by status.",
        "schema": {
          "enum": [
            "init",
            "in_progress",
            "completed"
          ],
          "type": "string"
        }
      },
      "FilterConnectionId": {
        "name": "filter[connection_id]",
        "in": "query",
        "description": "The unique identifier of the conection.",
        "schema": {
          "type": "string"
        }
      },
      "FilterConnectionName": {
        "name": "filter[connection_name][contains]",
        "in": "query",
        "description": "If present, connections with <code>connection_name</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": null
        }
      },
      "FilterCostByAmount": {
        "name": "filter[cost.amount]",
        "in": "query",
        "description": "The total monetary amount of the order.",
        "schema": {
          "type": "string",
          "example": "2.53"
        }
      },
      "FilterCostByCurrency": {
        "name": "filter[cost.currency]",
        "in": "query",
        "description": "Filter by ISO 4217 currency string.",
        "schema": {
          "type": "string",
          "example": "USD"
        }
      },
      "FilterCountry": {
        "name": "filter[country]",
        "in": "query",
        "description": "The country (or countries) to filter addresses by.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The ISO 3166-1 alpha-2 country code (2 characters)"
          }
        }
      },
      "FilterCountryIso": {
        "name": "filter[country_iso]",
        "in": "query",
        "description": "Filter by country code.",
        "schema": {
          "title": "Filter[Country Iso]",
          "type": "array",
          "items": {
            "type": "string",
            "example": "US"
          }
        }
      },
      "FilterCreatedAfter": {
        "name": "filter[created_after]",
        "in": "query",
        "description": "Filter for audit events created after a specific date.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T00:00:00.0000000+00:00"
        }
      },
      "FilterCreatedAt": {
        "name": "filter[created_at]",
        "in": "query",
        "description": "Filter by ISO 8601 formatted date-time string matching resource creation date-time.",
        "schema": {
          "type": "string",
          "format": "datetime",
          "example": "2018-02-02T22:25:27.521Z"
        }
      },
      "FilterCreatedBefore": {
        "name": "filter[created_before]",
        "in": "query",
        "description": "Filter for audit events created before a specific date.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T00:00:00.0000000+00:00"
        }
      },
      "FilterCustomerReferenceContains": {
        "name": "filter[customer_reference][contains]",
        "in": "query",
        "description": "If present, addresses with <code>customer_reference</code> containing the given value will be returned. Matching is not case-sensitive.",
        "schema": {
          "type": "string"
        }
      },
      "FilterCustomerReferenceEquals": {
        "name": "filter[customer_reference][eq]",
        "in": "query",
        "description": "Filter addresses via the customer reference set. Matching is not case-sensitive.",
        "schema": {
          "type": "string"
        }
      },
      "FilterEmailContains": {
        "name": "filter[email][contains]",
        "in": "query",
        "description": "If present, email containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterEmailEq": {
        "name": "filter[email][eq]",
        "in": "query",
        "description": "If present, only returns results with the <code>email</code> matching exactly the value given.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterExternalConnectionId": {
        "name": "filter[external_connection_id]",
        "in": "query",
        "description": "The external connection ID to filter by or \"null\" to filter for logs without an external connection ID",
        "schema": {
          "type": "string",
          "example": "67ea7693-9cd5-4a68-8c76-abb3aa5bf5d2"
        }
      },
      "FilterExternalSipConnection": {
        "name": "filter[external_sip_connection]",
        "in": "query",
        "description": "If present, connections with <code>external_sip_connection</code> matching the given value will be returned.",
        "schema": {
          "enum": [
            "zoom",
            "operator_connect"
          ],
          "type": "string",
          "example": "zoom"
        }
      },
      "FilterFqdn": {
        "name": "filter[fqdn]",
        "in": "query",
        "description": "If present, connections with an `fqdn` that equals the given value will be returned. Matching is case-sensitive, and the full string must match.",
        "schema": {
          "type": "string",
          "default": null
        }
      },
      "FilterFrom": {
        "name": "filter[from]",
        "in": "query",
        "description": "Filter by From number.",
        "schema": {
          "type": "string",
          "example": "+12025550142"
        }
      },
      "FilterId": {
        "name": "filter[id]",
        "in": "query",
        "description": "If present, connections with <code>id</code> matching the given value will be returned.",
        "schema": {
          "type": "string",
          "default": null,
          "example": "1930241863466354012"
        }
      },
      "FilterInnerOutboundVoiceProfileId": {
        "name": "filter[outbound.outbound_voice_profile_id]",
        "in": "query",
        "description": "Identifies the associated outbound voice profile.",
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "FilterLocationId": {
        "name": "filter[location_id][eq]",
        "in": "query",
        "description": "The location ID to filter by",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "52545f6f-9cd5-4a68-8c76-abb3aa5bf5d2"
        }
      },
      "FilterName": {
        "name": "filter[name]",
        "in": "query",
        "description": "Filter by name",
        "schema": {
          "type": "string"
        }
      },
      "FilterOrganizationEmailContains": {
        "name": "filter[organization_name][contains]",
        "in": "query",
        "description": "If present, only returns results with the <code>organization_name</code> containing the given value. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterOrganizationEmailEq": {
        "name": "filter[organization_name][eq]",
        "in": "query",
        "description": "If present, only returns results with the <code>organization_name</code> matching exactly the value given.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterOutboundVoiceProfileId": {
        "name": "filter[outbound_voice_profile_id]",
        "in": "query",
        "description": "Identifies the associated outbound voice profile.",
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "FilterPhoneNumber": {
        "name": "filter[phone_number][eq]",
        "in": "query",
        "description": "If present, connections associated with the given phone_number will be returned. A full match is necessary with a e164 format.",
        "schema": {
          "type": "string",
          "default": null,
          "example": "+15555555555"
        }
      },
      "FilterPhoneNumberContains": {
        "name": "filter[phone_number][contains]",
        "in": "query",
        "description": "The partial phone number to filter by. Requires 3-15 digits.",
        "schema": {
          "type": "string",
          "example": "+123"
        }
      },
      "FilterPhoneNumberEq": {
        "name": "filter[phone_number][eq]",
        "in": "query",
        "description": "The phone number to filter by",
        "schema": {
          "type": "string",
          "format": "E164",
          "example": "+1234567890"
        }
      },
      "FilterPhoneNumberLogMessageContains": {
        "name": "filter[telephone_number][contains]",
        "in": "query",
        "description": "The partial phone number to filter log messages for. Requires 3-15 digits.",
        "schema": {
          "type": "string",
          "example": "+123"
        }
      },
      "FilterPhoneNumberLogMessageEq": {
        "name": "filter[telephone_number][eq]",
        "in": "query",
        "description": "The phone number to filter log messages for or \"null\" to filter for logs without a phone number",
        "schema": {
          "type": "string",
          "example": "+1234567890"
        }
      },
      "FilterProduct": {
        "name": "filter[product]",
        "in": "query",
        "description": "Filter by product.",
        "schema": {
          "enum": [
            "call_control",
            "fax",
            "texml"
          ],
          "type": "string",
          "example": "texml"
        }
      },
      "FilterQuantity": {
        "name": "filter[quantity]",
        "in": "query",
        "description": "Filter orders by how many SIM cards were ordered.",
        "schema": {
          "type": "integer",
          "example": 21
        }
      },
      "FilterReleaseStatus": {
        "name": "filter[status][eq]",
        "in": "query",
        "description": "The status of the release to filter by",
        "schema": {
          "type": "array",
          "items": {
            "enum": [
              "pending_upload",
              "pending",
              "in_progress",
              "complete",
              "failed",
              "expired",
              "unknown"
            ],
            "type": "string"
          }
        }
      },
      "FilterResourceId": {
        "name": "filter[resource_id]",
        "in": "query",
        "description": "Filter by resource_id",
        "schema": {
          "type": "string"
        }
      },
      "FilterSIMCardGroupId": {
        "name": "filter[sim_card_group_id]",
        "in": "query",
        "description": "A valid SIM card group ID.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "47a1c2b0-cc7b-4ab1-bb98-b33fb0fc61b9"
        }
      },
      "FilterSIMCardId": {
        "name": "filter[sim_card_id]",
        "in": "query",
        "description": "A valid SIM card ID.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "47a1c2b0-cc7b-4ab1-bb98-b33fb0fc61b9"
        }
      },
      "FilterSipUsername": {
        "name": "filter[sip_username]",
        "in": "query",
        "description": "Filter by sip_username",
        "schema": {
          "type": "string"
        }
      },
      "FilterStatus": {
        "name": "filter[status]",
        "in": "query",
        "description": "Filter by status",
        "schema": {
          "type": "string"
        }
      },
      "FilterStreetAddress": {
        "name": "filter[street_address][contains]",
        "in": "query",
        "description": "If present, addresses with <code>street_address</code> containing the given value will be returned. Matching is not case-sensitive. Requires at least three characters.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FilterTo": {
        "name": "filter[to]",
        "in": "query",
        "description": "Filter by To number.",
        "schema": {
          "type": "string",
          "example": "+12025550142"
        }
      },
      "FilterUpdatedAt": {
        "name": "filter[updated_at]",
        "in": "query",
        "description": "Filter by ISO 8601 formatted date-time string matching resource last update date-time.",
        "schema": {
          "type": "string",
          "format": "datetime",
          "example": "2018-02-02T22:25:27.521Z"
        }
      },
      "FilterUploadStatus": {
        "name": "filter[status][eq]",
        "in": "query",
        "description": "The status of the upload to filter by",
        "schema": {
          "type": "array",
          "items": {
            "enum": [
              "pending_upload",
              "pending",
              "in_progress",
              "success",
              "error"
            ],
            "type": "string"
          }
        }
      },
      "FilterUsedAsEmergency": {
        "name": "filter[used_as_emergency]",
        "in": "query",
        "description": "If set as 'true', only addresses used as the emergency address for at least one active phone-number will be returned. When set to 'false', the opposite happens: only addresses not used as the emergency address from phone-numbers will be returned.",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "FqdnId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1517907029795014409"
        }
      },
      "FriendlyName": {
        "name": "FriendlyName",
        "in": "query",
        "description": "Filters conferences by their friendly name.",
        "schema": {
          "type": "string"
        },
        "example": "weekly_review_call"
      },
      "From": {
        "name": "From",
        "in": "query",
        "description": "Filters calls by the from number.",
        "schema": {
          "type": "string"
        },
        "example": "+1312345678"
      },
      "GcbChannelNumberZoneId": {
        "name": "channel_zone_id",
        "in": "path",
        "description": "Channel zone identifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "GcbChannelZoneId": {
        "name": "channel_zone_id",
        "in": "path",
        "description": "Channel zone identifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "GcbPhoneNumber": {
        "name": "phone_number",
        "in": "path",
        "description": "The phone number to be looked up",
        "required": true,
        "schema": {
          "type": "string",
          "format": "+E.164",
          "example": "+15554441234"
        }
      },
      "Id": {
        "name": "id",
        "in": "path",
        "description": "The id of the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "IncludeCancelledAccounts": {
        "name": "include_cancelled_accounts",
        "in": "query",
        "description": "Specifies if cancelled accounts should be included in the results.",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "IncludeICCIDs": {
        "name": "include_iccids",
        "in": "query",
        "description": "It includes a list of associated ICCIDs.",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "IncludeSIMCardGroup": {
        "name": "include_sim_card_group",
        "in": "query",
        "description": "It includes the associated SIM card group object in the response when present.",
        "schema": {
          "type": "boolean",
          "default": false,
          "example": true
        }
      },
      "IntId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "IpId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the type of resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "MediaName": {
        "name": "media_name",
        "in": "path",
        "description": "Uniquely identifies a media resource.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "MessagingProfileId": {
        "name": "id",
        "in": "path",
        "description": "The id of the messaging profile to retrieve",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetric": {
        "name": "id",
        "in": "query",
        "description": "The id of the messaging profile(s) to retrieve",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "MessagingProfileMetricTimeFrame": {
        "name": "time_frame",
        "in": "query",
        "description": "The timeframe for which you'd like to retrieve metrics.",
        "schema": {
          "enum": [
            "1h",
            "3h",
            "24h",
            "3d",
            "7d",
            "30d"
          ],
          "type": "string",
          "default": "24h"
        }
      },
      "NameFilter": {
        "name": "filter[name][contains]",
        "in": "query",
        "description": "Optional filter on outbound voice profile name.",
        "schema": {
          "type": "string",
          "example": "office-profile"
        }
      },
      "NotificationChannelId": {
        "name": "filter[notification_channel][eq]",
        "in": "query",
        "description": "Filter by the id of a notification channel",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NotificationEventConditionId": {
        "name": "filter[notification_event_condition_id][eq]",
        "in": "query",
        "description": "Filter by the id of a notification channel",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NotificationProfileId": {
        "name": "filter[notification_profile_id][eq]",
        "in": "query",
        "description": "Filter by the id of a notification profile",
        "schema": {
          "type": "string",
          "example": "12455643-3cf1-4683-ad23-1cd32f7d5e0a"
        }
      },
      "NumberLookupType": {
        "name": "type",
        "in": "query",
        "description": "Specifies the type of number lookup to be performed",
        "schema": {
          "enum": [
            "carrier",
            "caller-name"
          ],
          "type": "string"
        }
      },
      "OptionalTag": {
        "name": "filter[tag]",
        "in": "query",
        "description": "Filter by tag",
        "schema": {
          "type": "string"
        }
      },
      "Page": {
        "name": "Page",
        "in": "query",
        "description": "The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.",
        "schema": {
          "type": "integer"
        },
        "example": 1
      },
      "PageAfter": {
        "name": "page[after]",
        "in": "query",
        "description": "Opaque identifier of next page",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "PageBefore": {
        "name": "page[before]",
        "in": "query",
        "description": "Opaque identifier of previous page",
        "schema": {
          "type": "string",
          "default": "null"
        }
      },
      "PageLimit": {
        "name": "page[limit]",
        "in": "query",
        "description": "Limit of records per single page",
        "schema": {
          "maximum": 250,
          "minimum": 1,
          "type": "integer",
          "default": 20
        }
      },
      "PageNumber": {
        "name": "page[number]",
        "in": "query",
        "description": "The page number to load.",
        "schema": {
          "minimum": 1,
          "type": "integer",
          "default": 1
        }
      },
      "PageSize": {
        "name": "page[size]",
        "in": "query",
        "description": "The size of the page.",
        "schema": {
          "maximum": 250,
          "minimum": 1,
          "type": "integer",
          "default": 20
        }
      },
      "PageSizeApp": {
        "name": "page[size]",
        "in": "query",
        "description": "The size of the page",
        "schema": {
          "maximum": 250,
          "minimum": 1,
          "type": "integer",
          "default": 250
        }
      },
      "PageSizeTexml": {
        "name": "PageSize",
        "in": "query",
        "description": "The number of records to be displayed on a page",
        "schema": {
          "type": "integer"
        },
        "example": 10
      },
      "PageToken": {
        "name": "PageToken",
        "in": "query",
        "description": "Used to request the next page of results.",
        "schema": {
          "type": "string"
        }
      },
      "PathCommentID": {
        "name": "id",
        "in": "path",
        "description": "Comment id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PathCustomerServiceRecordId": {
        "name": "customer_service_record_id",
        "in": "path",
        "description": "The ID of the customer service record",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PathPhoneNumber": {
        "name": "phone_number",
        "in": "path",
        "description": "Phone number",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PathPortingOrderID": {
        "name": "id",
        "in": "path",
        "description": "Porting Order id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "PathPortingOrdersActivationJobID": {
        "name": "activationJobId",
        "in": "path",
        "description": "Activation Job Identifier",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "PhoneNumber": {
        "name": "phone_number",
        "in": "path",
        "description": "The phone number to be looked up",
        "required": true,
        "schema": {
          "type": "string",
          "example": "+18665552368"
        }
      },
      "PhoneNumberEqFilter": {
        "name": "filter[phone_number][eq]",
        "in": "query",
        "description": "Filters records to those with a specified number.",
        "schema": {
          "type": "string",
          "example": "+12441239999"
        }
      },
      "PhoneNumberInFilter": {
        "name": "filter[phone_number][in][]",
        "in": "query",
        "description": "Filters records to those with at least one number in the list.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "+12441239999"
          }
        }
      },
      "PrivateWirelessGatewayId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the private wireless gateway.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "QueryIncludePhoneNumbers": {
        "name": "include_phone_numbers",
        "in": "query",
        "description": "Include the first 50 phone number objects in the results",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "RecordingId": {
        "name": "recording_id",
        "in": "path",
        "description": "Uniquely identifies the recording by id.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "RecordingSid": {
        "name": "recording_sid",
        "in": "path",
        "description": "Uniquely identifies the recording by id.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "RecordingTranscriptionId": {
        "name": "recording_transcription_id",
        "in": "path",
        "description": "Uniquely identifies the recording transcription by id.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "RecordingTranscriptionSid": {
        "name": "recording_transcription_sid",
        "in": "path",
        "description": "Uniquely identifies the recording transcription by id.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "ResourceId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "SIMCardGroupId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the SIM group.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "SIMCardId": {
        "name": "id",
        "in": "path",
        "description": "Identifies the SIM.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "ShortCodeId": {
        "name": "id",
        "in": "path",
        "description": "The id of the short code",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "SiprecConnectorName": {
        "name": "connector_name",
        "in": "path",
        "description": "Uniquely identifies a SIPREC connector.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SiprecSid": {
        "name": "siprec_sid",
        "in": "path",
        "description": "The SiprecSid that uniquely identifies the Sip Recording.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Sort": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>email</code>: sorts the result by the\n    <code>email</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-email</code>: sorts the result by the\n    <code>email</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "enum": [
            "created_at",
            "email"
          ],
          "type": "string",
          "default": "created_at",
          "example": "email"
        }
      },
      "SortAddress": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>street_address</code>: sorts the result by the\n    <code>street_address</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-street_address</code>: sorts the result by the\n    <code>street_address</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "enum": [
            "created_at",
            "first_name",
            "last_name",
            "business_name",
            "street_address"
          ],
          "type": "string",
          "default": "created_at",
          "example": "street_address"
        }
      },
      "SortApplication": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>friendly_name</code>: sorts the result by the\n    <code>friendly_name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-friendly_name</code>: sorts the result by the\n    <code>friendly_name</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "enum": [
            "created_at",
            "friendly_name",
            "active"
          ],
          "type": "string",
          "default": "created_at",
          "example": "friendly_name"
        }
      },
      "SortConnection": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-connection_name</code>: sorts the result by the\n    <code>connection_name</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "enum": [
            "created_at",
            "connection_name",
            "active"
          ],
          "type": "string",
          "default": "created_at",
          "example": "connection_name"
        }
      },
      "SortOutboundVoiceProfile": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code>-</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>name</code>: sorts the result by the\n    <code>name</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-name</code>: sorts the result by the\n    <code>name</code> field in descending order.\n  </li>\n</ul> <br/>",
        "schema": {
          "enum": [
            "enabled",
            "-enabled",
            "created_at",
            "-created_at",
            "name",
            "-name",
            "service_plan",
            "-service_plan",
            "traffic_type",
            "-traffic_type",
            "usage_payment_method",
            "-usage_payment_method"
          ],
          "type": "string",
          "default": "-created_at",
          "example": "name"
        }
      },
      "SortUserAddress": {
        "name": "sort",
        "in": "query",
        "description": "Specifies the sort order for results. By default sorting direction is ascending. To have the results sorted in descending order add the <code> -</code> prefix.<br/><br/>\nThat is: <ul>\n  <li>\n    <code>street_address</code>: sorts the result by the\n    <code>street_address</code> field in ascending order.\n  </li>\n\n  <li>\n    <code>-street_address</code>: sorts the result by the\n    <code>street_address</code> field in descending order.\n  </li>\n</ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.",
        "schema": {
          "enum": [
            "created_at",
            "first_name",
            "last_name",
            "business_name",
            "street_address"
          ],
          "type": "string",
          "default": "created_at",
          "example": "street_address"
        }
      },
      "StartTime": {
        "name": "StartTime",
        "in": "query",
        "description": "Filters calls by their start date. Expected format is YYYY-MM-DD.",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "StartTime_gt": {
        "name": "StartTime_gt",
        "in": "query",
        "description": "Filters calls by their start date (after). Expected format is YYYY-MM-DD",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "StartTime_lt": {
        "name": "StartTime_lt",
        "in": "query",
        "description": "Filters calls by their start date (before). Expected format is YYYY-MM-DD",
        "schema": {
          "type": "string"
        },
        "example": "2023-05-22"
      },
      "Status": {
        "name": "Status",
        "in": "query",
        "description": "Filters calls by status.",
        "schema": {
          "enum": [
            "canceled",
            "completed",
            "failed",
            "busy",
            "no-answer"
          ],
          "type": "string"
        },
        "example": "no-answer"
      },
      "StatusEqFilter": {
        "name": "filter[status][eq]",
        "in": "query",
        "description": "Filters records to those with a specific status.",
        "schema": {
          "enum": [
            "pending",
            "completed",
            "failed"
          ],
          "type": "string",
          "example": "pending"
        }
      },
      "StatusInFilter": {
        "name": "filter[status][in][]",
        "in": "query",
        "description": "Filters records to those with a least one status in the list.",
        "schema": {
          "type": "array",
          "items": {
            "enum": [
              "pending",
              "completed",
              "failed"
            ],
            "type": "string",
            "example": "pending"
          }
        }
      },
      "StreamingSid": {
        "name": "streaming_sid",
        "in": "path",
        "description": "Uniquely identifies the streaming by id.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "6a09cdc3-8948-47f0-aa62-74ac943d6c58"
        }
      },
      "TexmlDateCreated": {
        "name": "DateCreated",
        "in": "query",
        "description": "Filters recording by the creation date. Expected format is ISO8601 date or date-time, ie. {YYYY}-{MM}-{DD} or {YYYY}-{MM}-{DD}T{hh}:{mm}:{ss}Z. Also accepts inequality operators, e.g. DateCreated>=2023-05-22.",
        "schema": {
          "type": "string",
          "format": "datetime-iso8601",
          "example": "2023-05-22"
        }
      },
      "TimestampGreater": {
        "name": "filter[timestamp][gt]",
        "in": "query",
        "description": "Filter by timestamp greater than",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2019-01-01T00:00:00.0000000+00:00"
        }
      },
      "TimestampLess": {
        "name": "filter[timestamp][lt]",
        "in": "query",
        "description": "Filter by timestamp less than",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2019-01-01T00:00:00.0000000+00:00"
        }
      },
      "To": {
        "name": "To",
        "in": "query",
        "description": "Filters calls by the to number.",
        "schema": {
          "type": "string"
        },
        "example": "+1312345678"
      },
      "UserBundleId": {
        "name": "user_bundle_id",
        "in": "path",
        "required": true,
        "schema": {
          "title": "User Bundle Id",
          "type": "string",
          "description": "User bundle's ID, this is used to identify the user bundle in the API.",
          "format": "uuid",
          "example": "ca1d2263-d1f1-43ac-ba53-248e7a4bb26a"
        }
      },
      "UserId": {
        "name": "user_id",
        "in": "path",
        "description": "User identifier",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "address_id": {
        "name": "address_id",
        "in": "path",
        "description": "Identifies a civic address or a location.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "318fb664-d341-44d2-8405-e6bfb9ced6d9"
        }
      },
      "id": {
        "name": "id",
        "in": "path",
        "description": "Identifies the resource.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "int64",
          "example": "1293384261075731499"
        }
      },
      "phone_number_id": {
        "name": "phone_number_id",
        "in": "path",
        "description": "A phone number's ID via the Telnyx API",
        "required": true,
        "schema": {
          "type": "string",
          "example": "1234567889"
        }
      },
      "release_id": {
        "name": "release_id",
        "in": "path",
        "description": "Identifies a Release request",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "7b6a6449-b055-45a6-81f6-f6f0dffa4cc6"
        }
      },
      "ticket_id": {
        "name": "ticket_id",
        "in": "path",
        "description": "Identifies an Upload request",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "7b6a6449-b055-45a6-81f6-f6f0dffa4cc6"
        }
      }
    },
    "examples": {
      "Maximum20JobsAllowed": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "You can have at most 20 pending or in progress jobs",
              "source": {
                "pointer": "/base"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      },
      "MaximumAllowedPhoneNumbers": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "1000 numbers is the maximum allowed.",
              "source": {
                "pointer": "/phone_numbers"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      },
      "MinimumAllowedPhoneNumbers": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "You must provide at least 1 phone number.",
              "source": {
                "pointer": "/phone_numbers"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      },
      "MixedIdsAndE164Values": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "You must specify either all phone numbers in the e164 format or all as phone number ids",
              "source": {
                "pointer": "/phone_numbers"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      },
      "NotAuthorized": {
        "value": {
          "errors": [
            {
              "code": "10006",
              "title": "Not authorized",
              "detail": "You are not authorized to access the requested resource.",
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10006"
              }
            }
          ]
        }
      },
      "PhoneNumberOwnership": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "You must own every number in the bulk request",
              "source": {
                "pointer": "/phone_numbers"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      },
      "PhoneNumbersMustBePresent": {
        "value": {
          "errors": [
            {
              "code": "10015",
              "title": "Bad Request",
              "detail": "must be present",
              "source": {
                "pointer": "/phone_numbers"
              },
              "meta": {
                "url": "https://developers.telnyx.com/docs/overview/errors/10015"
              }
            }
          ]
        }
      }
    },
    "requestBodies": {
      "CreateCredentialsRequest": {
        "description": "Creates new credentials resource for the specified connection_id.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomStorageConfiguration"
            }
          }
        },
        "required": true
      },
      "CreateCustomerServiceRecord": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateCustomerServiceRecord"
            }
          }
        },
        "required": true
      },
      "CreatePortingAdditionalDocuments": {
        "description": "A list of additional document parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateAdditionalDocuments"
            }
          }
        },
        "required": true
      },
      "CreatePortingLOAConfiguration": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PreviewLoaConfigurationParams"
            }
          }
        },
        "required": true
      },
      "CreatePortingPhoneNumberBlock": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createPortingPhoneNumberBlock"
            }
          }
        },
        "required": true
      },
      "CreatePortingPhoneNumberConfigurations": {
        "description": "A list of phone number configuration parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePhoneNumberConfigurations"
            }
          }
        },
        "required": true
      },
      "CreatePortingPhoneNumberExtension": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createPortingPhoneNumberExtension"
            }
          }
        },
        "required": true
      },
      "CreatePortingReport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePortingReport"
            }
          }
        },
        "required": true
      },
      "CreatePortoutReport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePortoutReport"
            }
          }
        },
        "required": true
      },
      "DeleteRecordingsRequest": {
        "description": "Deletes recordings for the given list of IDs.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteRecordings"
            }
          }
        },
        "required": true
      },
      "DialogflowConnectionRequest": {
        "description": "The params expected to create/update a Dialogflow Connection for given connection_id.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DialogflowConnection"
            }
          }
        },
        "required": true
      },
      "SendPortingVerificationCodes": {
        "description": "A list of phone numbers to send the verification codes to and the method to send them by",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SendPortingVerificationCodes"
            }
          }
        }
      },
      "SharePortingOrder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SharePortingOrder"
            }
          }
        },
        "required": true
      },
      "SiprecConnectorRequest": {
        "description": "The parameters required to create or update a SIPREC connector.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SiprecConnector"
            }
          }
        },
        "required": true
      },
      "TexmlCreateCallRecordingRequest": {
        "description": "Starts call recording on a call.",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateCallRecordingRequestBody"
            }
          }
        }
      },
      "TexmlCreateCallStreamingRequest": {
        "description": "Start streaming media from a call",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateCallStreamingRequestBody"
            }
          }
        }
      },
      "TexmlCreateSiprecSessionRequest": {
        "description": "Starts a SIPREC session.",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlCreateSiprecSessionRequestBody"
            }
          }
        }
      },
      "TexmlUpdateCallRecordingRequest": {
        "description": "Update call recording on a call.",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlUpdateCallRecordingRequestBody"
            }
          }
        }
      },
      "TexmlUpdateCallStreamingRequest": {
        "description": "Update streaming",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlUpdateCallStreamingRequestBody"
            }
          }
        }
      },
      "TexmlUpdateSiprecSessionRequest": {
        "description": "Updates a SIPREC session.",
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TexmlUpdateSiprecSessionRequestBody"
            }
          }
        }
      },
      "UpdatePortingOrdersActivationJob": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdatePortingOrdersActivationJob"
            }
          }
        },
        "required": true
      },
      "VerifyCustomerServiceRecordPhoneNumberCoverage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VerifyPhoneNumberCoverage"
            }
          }
        },
        "required": true
      },
      "VerifyPortingVerificationCodes": {
        "description": "A list of phone numbers and their verification codes",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VerifyPortingVerificationCodes"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "assets_jwt": {
        "type": "http",
        "description": "JWT used for assets upload",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": [ ]
    }
  ],
  "tags": [
    {
      "name": "Access Tokens",
      "description": "Access Tokens creation"
    },
    {
      "name": "Addresses",
      "description": "Operations to work with Address records. Address records are emergency-validated addresses meant to be associated with phone numbers. They are validated for emergency usage purposes at creation time, although you may validate them separately with a custom workflow using the ValidateAddress operation separately. Address records are not usable for physical orders, such as for Telnyx SIM cards, please use UserAddress for that. It is not possible to entirely skip emergency service validation for Address records; if an emergency provider for a phone number rejects the address then it cannot be used on a phone number. To prevent records from getting out of sync, Address records are immutable and cannot be altered once created. If you realize you need to alter an address, a new record must be created with the differing address."
    },
    {
      "name": "Advanced OptIn/OptOut",
      "description": "Advanced OptIn/OptOut"
    },
    {
      "name": "Assistants",
      "description": "Configure AI assistant specifications"
    },
    {
      "name": "Audio",
      "description": "Turn audio into text or text into audio."
    },
    {
      "name": "Audit Logs",
      "description": "Audit log operations."
    },
    {
      "name": "AutoRechargePreferences",
      "description": "V2 Auto Recharge Preferences API"
    },
    {
      "name": "Billing",
      "description": "Billing operations"
    },
    {
      "name": "Billing Groups",
      "description": "Billing groups operations"
    },
    {
      "name": "Brands",
      "description": "Brand operations"
    },
    {
      "name": "Bucket SSL Certificate",
      "description": "SSL certificate operations"
    },
    {
      "name": "Bucket Usage",
      "description": "Bucket Usage operations"
    },
    {
      "name": "Bulk Phone Number Campaigns",
      "description": "Phone number campaign bulk assignment"
    },
    {
      "name": "Bulk Phone Number Operations",
      "description": "Background jobs performed over a batch of phone numbers"
    },
    {
      "name": "Bulk Small Business",
      "description": "Endpoints for creating and checking the status of campaigns, brands, and phone numbers"
    },
    {
      "name": "Bundle Pricing",
      "description": "Bundle Pricing operations"
    },
    {
      "name": "Call Commands",
      "description": "Call Control command operations"
    },
    {
      "name": "Call Control Applications",
      "description": "Call Control applications operations"
    },
    {
      "name": "Call Information",
      "description": "Call information"
    },
    {
      "name": "Call Recordings",
      "description": "Call Recordings operations."
    },
    {
      "name": "Campaign",
      "description": "Campaign operations"
    },
    {
      "name": "Chat",
      "description": "Generate text with LLMs"
    },
    {
      "name": "Clusters",
      "description": "Identify common themes and patterns in your embedded documents"
    },
    {
      "name": "Conference Commands",
      "description": "Conference command operations"
    },
    {
      "name": "Connections",
      "description": "Connections operations"
    },
    {
      "name": "Conversations",
      "description": "Manage historical AI assistant conversations"
    },
    {
      "name": "Country Coverage",
      "description": "Country Coverage"
    },
    {
      "name": "Credential Connections",
      "description": "Credential connection operations"
    },
    {
      "name": "Credentials",
      "description": "Credentials operations"
    },
    {
      "name": "Customer Service Record",
      "description": "Customer Service Record operations"
    },
    {
      "name": "Data Migration",
      "description": "Migrate data from an external provider into Telnyx Cloud Storage"
    },
    {
      "name": "Debugging",
      "description": "Call Control debugging"
    },
    {
      "name": "Detail Records",
      "description": "Detail Records operations"
    },
    {
      "name": "Dialogflow Integration",
      "description": "Dialogflow Connection Operations."
    },
    {
      "name": "Documents",
      "description": "Documents"
    },
    {
      "name": "Dynamic Emergency Addresses",
      "description": "Dynamic emergency address operations"
    },
    {
      "name": "Dynamic Emergency Endpoints",
      "description": "Dynamic Emergency Endpoints"
    },
    {
      "name": "Embeddings",
      "description": "Embed documents and perform text searches"
    },
    {
      "name": "External Connections",
      "description": "External Connections operations"
    },
    {
      "name": "FQDN Connections",
      "description": "FQDN connection operations"
    },
    {
      "name": "FQDNs",
      "description": "FQDN operations"
    },
    {
      "name": "Fine Tuning",
      "description": "Customize LLMs for your unique needs"
    },
    {
      "name": "Global IPs",
      "description": "Global IPs"
    },
    {
      "name": "IP Addresses",
      "description": "IP Address Operations"
    },
    {
      "name": "IP Connections",
      "description": "IP connection operations"
    },
    {
      "name": "IP Ranges",
      "description": "IP Range Operations"
    },
    {
      "name": "IPs",
      "description": "IP operations"
    },
    {
      "name": "Integration Secrets",
      "description": "Store and retrieve integration secrets"
    },
    {
      "name": "Inventory Level",
      "description": "Inventory Level"
    },
    {
      "name": "Managed Accounts",
      "description": "Managed Accounts operations"
    },
    {
      "name": "Media Storage API",
      "description": "Media Storage operations"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "Messaging Hosted Number",
      "description": "Manage your messaging hosted numbers"
    },
    {
      "name": "Messaging Profiles",
      "description": "Messaging profiles"
    },
    {
      "name": "Messaging Tollfree Verification",
      "description": "Manage your tollfree verification requests"
    },
    {
      "name": "Messaging URL Domains",
      "description": "Messaging URL Domains"
    },
    {
      "name": "Mobile Network Operators",
      "description": "Mobile network operators operations"
    },
    {
      "name": "Networks",
      "description": "Network operations"
    },
    {
      "name": "Notifications",
      "description": "Notification settings operations"
    },
    {
      "name": "Number Configurations",
      "description": "Configure your phone numbers"
    },
    {
      "name": "Number Lookup",
      "description": "Look up phone number data"
    },
    {
      "name": "Number Portout",
      "description": "Number portout operations"
    },
    {
      "name": "OTA updates",
      "description": "OTA updates operations"
    },
    {
      "name": "Outbound Voice Profiles",
      "description": "Outbound voice profiles operations"
    },
    {
      "name": "Phone Number Blocks Background Jobs",
      "description": "Background jobs performed over a phone-numbers block's phone numbers"
    },
    {
      "name": "Phone Number Campaigns",
      "description": "Phone number campaign assignment"
    },
    {
      "name": "Phone Number Configurations",
      "description": "Configure your phone numbers"
    },
    {
      "name": "Phone Number Order Documents",
      "description": "Number order documents"
    },
    {
      "name": "Phone Number Orders",
      "description": "Number orders"
    },
    {
      "name": "Phone Number Porting",
      "description": "Determining portability of phone numbers"
    },
    {
      "name": "Phone Number Reservations",
      "description": "Number reservations"
    },
    {
      "name": "Phone Number Search",
      "description": "Number search"
    },
    {
      "name": "Porting Orders",
      "description": "Endpoints related to porting orders management."
    },
    {
      "name": "Presigned Object URLs",
      "description": "Presigned object URL operations"
    },
    {
      "name": "Private Wireless Gateways",
      "description": "Private Wireless Gateways operations"
    },
    {
      "name": "Programmable Fax Applications",
      "description": "Fax Applications operations"
    },
    {
      "name": "Programmable Fax Commands",
      "description": "Programmable fax command operations"
    },
    {
      "name": "Public Internet Gateways",
      "description": "Public Internet Gateway operations"
    },
    {
      "name": "Push Credentials",
      "description": "Mobile push credential management"
    },
    {
      "name": "Queue Commands",
      "description": "Queue commands operations"
    },
    {
      "name": "RCS messaging",
      "description": "Send RCS messages"
    },
    {
      "name": "Regions",
      "description": "Regions"
    },
    {
      "name": "Regulatory Requirements",
      "description": "Regulatory Requirements"
    },
    {
      "name": "Reporting",
      "description": "Wireless reporting operations"
    },
    {
      "name": "Reports",
      "description": "Ledger billing reports"
    },
    {
      "name": "Requirement Groups",
      "description": "Requirement Groups"
    },
    {
      "name": "Requirement Types",
      "description": "Types of requirements for international numbers and porting orders"
    },
    {
      "name": "Requirements",
      "description": "Requirements for international numbers and porting orders"
    },
    {
      "name": "Room Compositions",
      "description": "Rooms Compositions operations."
    },
    {
      "name": "Room Participants",
      "description": "Rooms Participants operations."
    },
    {
      "name": "Room Recordings",
      "description": "Rooms Recordings operations."
    },
    {
      "name": "Room Sessions",
      "description": "Rooms Sessions operations."
    },
    {
      "name": "Rooms",
      "description": "Rooms operations."
    },
    {
      "name": "Rooms Client Tokens",
      "description": "Rooms Client Tokens operations."
    },
    {
      "name": "SIM Card Actions",
      "description": "View SIM card actions, their progress and timestamps using the SIM Card Actions API"
    },
    {
      "name": "SIM Card Group Actions",
      "description": "SIM Card Group actions operations"
    },
    {
      "name": "SIM Card Groups",
      "description": "SIM Card Groups operations"
    },
    {
      "name": "SIM Card Orders",
      "description": "SIM Card Orders operations"
    },
    {
      "name": "SIM Cards",
      "description": "SIM Cards operations"
    },
    {
      "name": "SIPREC Connectors",
      "description": "SIPREC connectors configuration."
    },
    {
      "name": "Short Codes",
      "description": "Short codes"
    },
    {
      "name": "TeXML Applications",
      "description": "TeXML Applications operations"
    },
    {
      "name": "TeXML REST Commands",
      "description": "TeXML REST Commands"
    },
    {
      "name": "Text to Speech Commands",
      "description": "Text to Speech commands operations"
    },
    {
      "name": "Usage Reports (BETA)",
      "description": "Usage data reporting across Telnyx products"
    },
    {
      "name": "User Tags",
      "description": "User-defined tags for Telnyx resources"
    },
    {
      "name": "UserAddresses",
      "description": "Operations for working with UserAddress records. UserAddress records are stored addresses that users can use for non-emergency-calling purposes, such as for shipping addresses for orders of wireless SIMs (or other physical items). They cannot be used for emergency calling and are distinct from Address records, which are used on phone numbers."
    },
    {
      "name": "Verified Numbers",
      "description": "Verified Numbers operations"
    },
    {
      "name": "Verify",
      "description": "Two factor authentication API"
    },
    {
      "name": "Virtual Cross Connects",
      "description": "Virtual Cross Connect operations"
    },
    {
      "name": "Voice Channels",
      "description": "Voice Channels"
    },
    {
      "name": "Voicemail",
      "description": "Voicemail API"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks operations"
    },
    {
      "name": "WireGuard Interfaces",
      "description": "WireGuard Interface operations"
    },
    {
      "name": "Wireless",
      "description": "Wireless operations"
    },
    {
      "name": "Wireless Regions",
      "description": "Regions for wireless services"
    }
  ]
}